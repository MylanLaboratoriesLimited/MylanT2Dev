(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jade = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = function merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = merge(attrs, a[i]);
    }
    return attrs;
  }
  var ac = a['class'];
  var bc = b['class'];

  if (ac || bc) {
    ac = ac || [];
    bc = bc || [];
    if (!Array.isArray(ac)) ac = [ac];
    if (!Array.isArray(bc)) bc = [bc];
    a['class'] = ac.concat(bc).filter(nulls);
  }

  for (var key in b) {
    if (key != 'class') {
      a[key] = b[key];
    }
  }

  return a;
};

/**
 * Filter null `val`s.
 *
 * @param {*} val
 * @return {Boolean}
 * @api private
 */

function nulls(val) {
  return val != null && val !== '';
}

/**
 * join array as classes.
 *
 * @param {*} val
 * @return {String}
 */
exports.joinClasses = joinClasses;
function joinClasses(val) {
  return (Array.isArray(val) ? val.map(joinClasses) :
    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
    [val]).filter(nulls).join(' ');
}

/**
 * Render the given classes.
 *
 * @param {Array} classes
 * @param {Array.<Boolean>} escaped
 * @return {String}
 */
exports.cls = function cls(classes, escaped) {
  var buf = [];
  for (var i = 0; i < classes.length; i++) {
    if (escaped && escaped[i]) {
      buf.push(exports.escape(joinClasses([classes[i]])));
    } else {
      buf.push(joinClasses(classes[i]));
    }
  }
  var text = joinClasses(buf);
  if (text.length) {
    return ' class="' + text + '"';
  } else {
    return '';
  }
};


exports.style = function (val) {
  if (val && typeof val === 'object') {
    return Object.keys(val).map(function (style) {
      return style + ':' + val[style];
    }).join(';');
  } else {
    return val;
  }
};
/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = function attr(key, val, escaped, terse) {
  if (key === 'style') {
    val = exports.style(val);
  }
  if ('boolean' == typeof val || null == val) {
    if (val) {
      return ' ' + (terse ? key : key + '="' + key + '"');
    } else {
      return '';
    }
  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
    if (JSON.stringify(val).indexOf('&') !== -1) {
      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
                   'will be escaped to `&amp;`');
    };
    if (val && typeof val.toISOString === 'function') {
      console.warn('Jade will eliminate the double quotes around dates in ' +
                   'ISO form after 2.0.0');
    }
    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
  } else if (escaped) {
    if (val && typeof val.toISOString === 'function') {
      console.warn('Jade will stringify dates in ISO form after 2.0.0');
    }
    return ' ' + key + '="' + exports.escape(val) + '"';
  } else {
    if (val && typeof val.toISOString === 'function') {
      console.warn('Jade will stringify dates in ISO form after 2.0.0');
    }
    return ' ' + key + '="' + val + '"';
  }
};

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} escaped
 * @return {String}
 */
exports.attrs = function attrs(obj, terse){
  var buf = [];

  var keys = Object.keys(obj);

  if (keys.length) {
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i]
        , val = obj[key];

      if ('class' == key) {
        if (val = joinClasses(val)) {
          buf.push(' ' + key + '="' + val + '"');
        }
      } else {
        buf.push(exports.attr(key, val, false, terse));
      }
    }
  }

  return buf.join('');
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var jade_encode_html_rules = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;'
};
var jade_match_html = /[&<>"]/g;

function jade_encode_char(c) {
  return jade_encode_html_rules[c] || c;
}

exports.escape = jade_escape;
function jade_escape(html){
  var result = String(html).replace(jade_match_html, jade_encode_char);
  if (result === '' + html) return html;
  else return result;
};

/**
 * Re-throw the given `err` in context to the
 * the jade in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @api private
 */

exports.rethrow = function rethrow(err, filename, lineno, str){
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str = str || require('fs').readFileSync(filename, 'utf8')
  } catch (ex) {
    rethrow(err, null, lineno)
  }
  var context = 3
    , lines = str.split('\n')
    , start = Math.max(lineno - context, 0)
    , end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Jade') + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};

exports.DebugItem = function DebugItem(lineno, filename) {
  this.lineno = lineno;
  this.filename = filename;
}

},{"fs":2}],2:[function(require,module,exports){

},{}]},{},[1])(1)
});
/**
 * Copyright (c) 2011-2014 Felix Gnass
 * Licensed under the MIT license
 */
(function(root, factory) {

  /* CommonJS */
  if (typeof exports == 'object')  module.exports = factory()

  /* AMD module */
  else if (typeof define == 'function' && define.amd) define(factory)

  /* Browser global */
  else root.Spinner = factory()
}
(this, function() {
  "use strict";

  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */
    , animations = {} /* Animation rules keyed by their name */
    , useCssAnimations /* Whether to use CSS animations or setTimeout */

  /**
   * Utility function to create elements. If no tag name is given,
   * a DIV is created. Optionally properties can be passed.
   */
  function createEl(tag, prop) {
    var el = document.createElement(tag || 'div')
      , n

    for(n in prop) el[n] = prop[n]
    return el
  }

  /**
   * Appends children and returns the parent.
   */
  function ins(parent /* child1, child2, ...*/) {
    for (var i=1, n=arguments.length; i<n; i++)
      parent.appendChild(arguments[i])

    return parent
  }

  /**
   * Insert a new stylesheet to hold the @keyframe or VML rules.
   */
  var sheet = (function() {
    var el = createEl('style', {type : 'text/css'})
    ins(document.getElementsByTagName('head')[0], el)
    return el.sheet || el.styleSheet
  }())

  /**
   * Creates an opacity keyframe animation rule and returns its name.
   * Since most mobile Webkits have timing issues with animation-delay,
   * we create separate rules for each line/segment.
   */
  function addAnimation(alpha, trail, i, lines) {
    var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-')
      , start = 0.01 + i/lines * 100
      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)
      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()
      , pre = prefix && '-' + prefix + '-' || ''

    if (!animations[name]) {
      sheet.insertRule(
        '@' + pre + 'keyframes ' + name + '{' +
        '0%{opacity:' + z + '}' +
        start + '%{opacity:' + alpha + '}' +
        (start+0.01) + '%{opacity:1}' +
        (start+trail) % 100 + '%{opacity:' + alpha + '}' +
        '100%{opacity:' + z + '}' +
        '}', sheet.cssRules.length)

      animations[name] = 1
    }

    return name
  }

  /**
   * Tries various vendor prefixes and returns the first supported property.
   */
  function vendor(el, prop) {
    var s = el.style
      , pp
      , i

    prop = prop.charAt(0).toUpperCase() + prop.slice(1)
    for(i=0; i<prefixes.length; i++) {
      pp = prefixes[i]+prop
      if(s[pp] !== undefined) return pp
    }
    if(s[prop] !== undefined) return prop
  }

  /**
   * Sets multiple style properties at once.
   */
  function css(el, prop) {
    for (var n in prop)
      el.style[vendor(el, n)||n] = prop[n]

    return el
  }

  /**
   * Fills in default values.
   */
  function merge(obj) {
    for (var i=1; i < arguments.length; i++) {
      var def = arguments[i]
      for (var n in def)
        if (obj[n] === undefined) obj[n] = def[n]
    }
    return obj
  }

  /**
   * Returns the absolute page-offset of the given element.
   */
  function pos(el) {
    var o = { x:el.offsetLeft, y:el.offsetTop }
    while((el = el.offsetParent))
      o.x+=el.offsetLeft, o.y+=el.offsetTop

    return o
  }

  /**
   * Returns the line color from the given string or array.
   */
  function getColor(color, idx) {
    return typeof color == 'string' ? color : color[idx % color.length]
  }

  // Built-in defaults

  var defaults = {
    lines: 12,            // The number of lines to draw
    length: 7,            // The length of each line
    width: 5,             // The line thickness
    radius: 10,           // The radius of the inner circle
    rotate: 0,            // Rotation offset
    corners: 1,           // Roundness (0..1)
    color: '#000',        // #rgb or #rrggbb
    direction: 1,         // 1: clockwise, -1: counterclockwise
    speed: 1,             // Rounds per second
    trail: 100,           // Afterglow percentage
    opacity: 1/4,         // Opacity of the lines
    fps: 20,              // Frames per second when using setTimeout()
    zIndex: 2e9,          // Use a high z-index by default
    className: 'spinner', // CSS class to assign to the element
    top: '50%',           // center vertically
    left: '50%',          // center horizontally
    position: 'absolute'  // element position
  }

  /** The constructor */
  function Spinner(o) {
    this.opts = merge(o || {}, Spinner.defaults, defaults)
  }

  // Global defaults that override the built-ins:
  Spinner.defaults = {}

  merge(Spinner.prototype, {

    /**
     * Adds the spinner to the given target element. If this instance is already
     * spinning, it is automatically removed from its previous target b calling
     * stop() internally.
     */
    spin: function(target) {
      this.stop()

      var self = this
        , o = self.opts
        , el = self.el = css(createEl(0, {className: o.className}), {position: o.position, width: 0, zIndex: o.zIndex})
        , mid = o.radius+o.length+o.width

      if (target) {
        target.insertBefore(el, target.firstChild||null)
        css(el, {
          left: o.left,
          top: o.top
        })
      }

      el.setAttribute('role', 'progressbar')
      self.lines(el, self.opts)

      if (!useCssAnimations) {
        // No CSS animation support, use setTimeout() instead
        var i = 0
          , start = (o.lines - 1) * (1 - o.direction) / 2
          , alpha
          , fps = o.fps
          , f = fps/o.speed
          , ostep = (1-o.opacity) / (f*o.trail / 100)
          , astep = f/o.lines

        ;(function anim() {
          i++;
          for (var j = 0; j < o.lines; j++) {
            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)

            self.opacity(el, j * o.direction + start, alpha, o)
          }
          self.timeout = self.el && setTimeout(anim, ~~(1000/fps))
        })()
      }
      return self
    },

    /**
     * Stops and removes the Spinner.
     */
    stop: function() {
      var el = this.el
      if (el) {
        clearTimeout(this.timeout)
        if (el.parentNode) el.parentNode.removeChild(el)
        this.el = undefined
      }
      return this
    },

    /**
     * Internal method that draws the individual lines. Will be overwritten
     * in VML fallback mode below.
     */
    lines: function(el, o) {
      var i = 0
        , start = (o.lines - 1) * (1 - o.direction) / 2
        , seg

      function fill(color, shadow) {
        return css(createEl(), {
          position: 'absolute',
          width: (o.length+o.width) + 'px',
          height: o.width + 'px',
          background: color,
          boxShadow: shadow,
          transformOrigin: 'left',
          transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',
          borderRadius: (o.corners * o.width>>1) + 'px'
        })
      }

      for (; i < o.lines; i++) {
        seg = css(createEl(), {
          position: 'absolute',
          top: 1+~(o.width/2) + 'px',
          transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
          opacity: o.opacity,
          animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1/o.speed + 's linear infinite'
        })

        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}))
        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))
      }
      return el
    },

    /**
     * Internal method that adjusts the opacity of a single line.
     * Will be overwritten in VML fallback mode below.
     */
    opacity: function(el, i, val) {
      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val
    }

  })


  function initVML() {

    /* Utility function to create a VML tag */
    function vml(tag, attr) {
      return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr)
    }

    // No CSS transforms but VML support, add a CSS rule for VML elements:
    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')

    Spinner.prototype.lines = function(el, o) {
      var r = o.length+o.width
        , s = 2*r

      function grp() {
        return css(
          vml('group', {
            coordsize: s + ' ' + s,
            coordorigin: -r + ' ' + -r
          }),
          { width: s, height: s }
        )
      }

      var margin = -(o.width+o.length)*2 + 'px'
        , g = css(grp(), {position: 'absolute', top: margin, left: margin})
        , i

      function seg(i, dx, filter) {
        ins(g,
          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),
            ins(css(vml('roundrect', {arcsize: o.corners}), {
                width: r,
                height: o.width,
                left: o.radius,
                top: -o.width>>1,
                filter: filter
              }),
              vml('fill', {color: getColor(o.color, i), opacity: o.opacity}),
              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change
            )
          )
        )
      }

      if (o.shadow)
        for (i = 1; i <= o.lines; i++)
          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')

      for (i = 1; i <= o.lines; i++) seg(i)
      return ins(el, g)
    }

    Spinner.prototype.opacity = function(el, i, val, o) {
      var c = el.firstChild
      o = o.shadow && o.lines || 0
      if (c && i+o < c.childNodes.length) {
        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild
        if (c) c.opacity = val
      }
    }
  }

  var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})

  if (!vendor(probe, 'transform') && probe.adj) initVML()
  else useCssAnimations = vendor(probe, 'animation')

  return Spinner

}));
//     (c) 2012 Airbnb, Inc.
//     
//     infinity.js may be freely distributed under the terms of the BSD
//     license. For all licensing information, details, and documention:
//     http://airbnb.github.com/infinity

!function(window, Math, $) {
  'use strict';


  // Welcome To Infinity
  // ===================
  //
  // infinity.js is a UITableView for the web. Use it to speed up scroll
  // performance of long- or infinitely-scrolling lists of items.
  //
  // infinity.js has several caveats:
  //
  // 1. All DOM elements must either be visible or in the current layout.
  // infinity.js does not support elements that will at some point affect the
  // layout, but are currently hidden using `display:none`.
  //
  // 2. ListViews can't be nested.
  //
  // 3. Non-ListItem elements can't be the immediate children of ListView
  // elements. Only ListItems can be immediate children of ListViews.
  //
  // 4. ListView elements can't have heights set directly on them. In most
  // cases it is also likely that `min-height`s and `max-height`s will break.
  // However, setting heights on ListItems is ok.
  //
  // If you're reading this, we probably want to hear from you. If the feeling
  // is mutual: [get in touch.](http://www.airbnb.com/jobs)


  // Initial Setup
  // =============

  // Cached objects
  // var $window = $(window);

  // Packaging:
  var oldInfinity = window.infinity,
      infinity = window.infinity = {},
      config = infinity.config = {};

  // Constants:
  var PAGE_ID_ATTRIBUTE = 'data-infinity-pageid',
      NUM_BUFFER_PAGES = 1,
      PAGES_ONSCREEN = NUM_BUFFER_PAGES * 2 + 1;

  // Config:
  config.PAGE_TO_SCREEN_RATIO = 3;
  config.SCROLL_THROTTLE = 350;



  // ListView Class
  // ==============


  // ### Constructor
  //
  // Creates a new instance of a ListView.
  //
  // Takes:
  //
  // - `$el`: a jQuery element.
  // - `options`: an optional hash of options

  function ListView($el, $elWindow, options) {
    options = options || {};

    this.$window = $elWindow;
    this.$el = blankDiv();
    this.$shadow = blankDiv();
    $el.append(this.$el);
    // don't append the shadow element -- it's meant to only be used for
    // finding elements outside of the DOM

    this.lazy = !!options.lazy;
    this.lazyFn = options.lazy || null;

    initBuffer(this);

    this.top = this.$el.offset().top;
    this.width = 0;
    this.height = 0;

    this.pages = [];
    this.startIndex = 0;

    this.DOMEvent = new DOMEvent();
    this.DOMEvent.attach(this);
  }


  // ### initBuffer
  //
  // Private ListView method. Initializes the buffer element.

  function initBuffer(listView) {
    listView._$buffer = blankDiv()
                        .prependTo(listView.$el);
  }


  // ### updateBuffer
  //
  // Private ListView method. Updates the buffer to correctly push forward the
  // first page.

  function updateBuffer(listView) {
    var firstPage,
        pages = listView.pages,
        $buffer = listView._$buffer;

    if(pages.length > 0) {
      firstPage = pages[listView.startIndex];
      $buffer.height(firstPage.top);
    } else {
      $buffer.height(0);
    }
  }

  // ListView manipulation
  // ---------------------


  // ### append
  //
  // Appends a jQuery element or a ListItem to the ListView.
  //
  // Takes:
  //
  // - `obj`: a jQuery element, a string of valid HTML, or a ListItem.
  //
  // TODO: optimized batch appends

  ListView.prototype.append = function(obj) {
    if(!obj || !obj.length) return null;

    var lastPage,
        item = convertToItem(this, obj),
        pages = this.pages;

    this.height += item.height;
    this.$el.height(this.height);

    lastPage = pages[pages.length - 1];

    if(!lastPage || !lastPage.hasVacancy()) {
      lastPage = new Page(this);
      pages.push(lastPage);
    }

    lastPage.append(item);
    insertPagesInView(this);

    return item;
  };


  // ### cacheCoordsFor
  //
  // Caches the coordinates for a given ListItem within the given ListView.
  //
  // Takes:
  //
  // - `listView`: a ListView.
  // - `listItem`: the ListItem whose coordinates you want to cache.

  function cacheCoordsFor(listView, listItem) {
    listItem.$el.remove();

    // WARNING: this will always break for prepends. Once support gets added for
    // prepends, change this.
    listView.$el.append(listItem.$el);
    updateCoords(listItem, listView.height);
    listItem.$el.remove();
  }


  // ### insertPagesInView
  //
  // Inserts any uninserted pages the given ListView owns.
  //
  // Takes:
  //
  // - `listView`: the ListView whose onscreen pages you'd like to insert.

  function insertPagesInView(listView) {
    var index, length, curr,
        pages = listView.pages,
        inserted = false,
        inOrder = true;
    index = listView.startIndex;
    length = Math.min(index + PAGES_ONSCREEN, pages.length);

    for(index; index < length; index++) {
      curr = pages[index];
      if(listView.lazy) curr.lazyload(listView.lazyFn);
      if(inserted && curr.onscreen) inOrder = false;

      if(!inOrder) {
        curr.stash(listView.$shadow);
        curr.appendTo(listView.$el);
      } else if(!curr.onscreen) {
        inserted = true;
        curr.appendTo(listView.$el);
      }
    }
  }


  // ### updateStartIndex
  //
  // Updates a given ListView when the throttled scroll event fires. Attempts
  // to do as little work as possible: if the `startIndex` doesn't change,
  // it'll exit early. If the `startIndex` does change, it finds all pages
  // that have been scrolled out of view and removes them, then inserts only
  // pages that have been now been scrolled into view.
  //
  // Takes:
  //
  // - `listView`: the ListView needing to be updated.

  function updateStartIndex(listView) {
    var index, length, pages, lastIndex, nextLastIndex,
        startIndex = listView.startIndex,
        viewTop = listView.$window.scrollTop() - listView.top,
        viewHeight = listView.$window.height(),
        viewBottom = viewTop + viewHeight,
        nextIndex = startIndexWithinRange(listView, viewTop, viewBottom);

    if( nextIndex < 0 || nextIndex === startIndex) return startIndex;

    pages = listView.pages;
    startIndex = listView.startIndex;
    lastIndex = Math.min(startIndex + PAGES_ONSCREEN, pages.length);
    nextLastIndex = Math.min(nextIndex + PAGES_ONSCREEN, pages.length);

    // sweep any invalid old pages
    for(index = startIndex, length = lastIndex; index < length; index++) {
      if(index < nextIndex || index >= nextLastIndex)
        pages[index].stash(listView.$shadow);
    }

    listView.startIndex = nextIndex;

    insertPagesInView(listView);
    updateBuffer(listView);
    return nextIndex;
  }


  // ### remove
  //
  // Removes the ListView from the DOM and cleans up after it.

  ListView.prototype.remove = function() {
    this.$el.remove();
    this.cleanup();
  };


  // ### convertToItem
  //
  // Given an object that is either a ListItem instance, a jQuery element, or a
  // string of valid HTML, makes sure to return either the ListItem itself or
  // a new ListItem that wraps the element.
  //
  // Takes:
  //
  // - `listView`: the ListView instance that wants the item.
  // - `possibleItem`: an object that is either a ListItem, a jQuery element,
  // or a string of valid HTML.

  function convertToItem(listView, possibleItem) {
    var item;
    if(possibleItem instanceof ListItem) return possibleItem;
    if(typeof possibleItem === 'string') possibleItem = $(possibleItem);
    item = new ListItem(possibleItem);
    cacheCoordsFor(listView, item);
    return item;
  }


  // ### tooSmall
  //
  // Alerts the given ListView that the given Page is too small. May result
  // in modifications to the `pages` array.

  function tooSmall(listView, page) {
    // Naive solution:
    repartition(listView);
  }


  // ### repartition
  //
  // Repartitions the pages array. This can be used for either defragmenting
  // the array, or recalculating everything on screen resize.

  function repartition(listView) {
    var currPage, newPage, index, length, itemIndex, pageLength, currItems, currItem,
        nextItem,
        pages = listView.pages,
        newPages = [];

    newPage = new Page(listView);
    newPages.push(newPage);

    for(index = 0, length = pages.length; index < length; index++) {
      currPage = pages[index];
      currItems = currPage.items;
      for(itemIndex = 0, pageLength = currItems.length; itemIndex < pageLength; itemIndex++) {
        currItem = currItems[itemIndex];
        nextItem = currItem.clone();
        if(newPage.hasVacancy()) {
          newPage.append(nextItem);
        } else {
          newPage = new Page(listView);
          newPages.push(newPage);
          newPage.append(nextItem);
        }
      }
      currPage.remove();
    }

    listView.pages = newPages;
    insertPagesInView(listView);
  }


  // ListView querying
  // -----------------

  // ### find
  //
  // Given a selector string or jQuery element, return the items that hold the
  // given or matching elements.
  //
  // Note: this is slower than an ordinary jQuery find. However, using jQuery
  // to find elements will be bug-prone, since most of the elements won't be in
  // the DOM tree. Caching elements is usually important, but it's even more
  // important to do here.
  //
  // Arguments:
  //
  // - `findObj`: A selector string, or a jQuery element.
  //
  // Returns a ListItem.

  ListView.prototype.find = function(findObj) {
    var items, $onscreen, $offscreen;

    // If given a selector string, find everything matching onscreen and
    // offscreen, and return both.
    if(typeof findObj === 'string') {
      $onscreen = this.$el.find(findObj);
      $offscreen = this.$shadow.find(findObj);
      return this.find($onscreen).concat(this.find($offscreen));
    }

    // Silly option, but might as well.
    if(findObj instanceof ListItem) return [findObj];

    // jQuery element
    items = [];
    findObj.each(function() {
      var pageId, page, pageItems, index, length, currItem,
          $itemEl = $(this).parentsUntil('[' + PAGE_ID_ATTRIBUTE + ']').andSelf().first(),
          $pageEl = $itemEl.parent();


      pageId = $pageEl.attr(PAGE_ID_ATTRIBUTE);
      page = PageRegistry.lookup(pageId);
      if(page) {
        pageItems = page.items;
        for(index = 0, length = pageItems.length; index < length; index++) {
          currItem = pageItems[index];
          if(currItem.$el.is($itemEl)) {
            items.push(currItem);
            break;
          }
        }
      }
    });

    return items;
  };

  // ### startIndexWithinRange
  //
  // Finds the starting index for a listView, given a range. Wraps
  // indexWithinRange.
  //
  // Takes:
  //
  // - `listView`: the ListView whose startIndex you're calculating.
  // - `top`: the top of the range.
  // - `bottom`: the bottom of the range.

  function startIndexWithinRange(listView, top, bottom) {
    var index = indexWithinRange(listView, top, bottom);
    index = Math.max(index - NUM_BUFFER_PAGES, 0);
    index = Math.min(index, listView.pages.length);
    return index;
  }


  // ### indexWithinRange
  //
  // Finds the index of the page closest to being within a given range. It's
  // less useful than its wrapper function startIndexWithinRange, and you
  // probably won't need to call this unwrapped version.
  //
  // Takes:
  //
  // - `listView`: the ListView instance whose pages you're looking at.
  // - `top`: the top of the range.
  // - `bottom`: the bottom of the range.

  function indexWithinRange(listView, top, bottom) {
    var index, length, curr, startIndex, midpoint, diff, prevDiff,
        pages = listView.pages,
        rangeMidpoint = top + (bottom - top)/2;

    // Start looking at the index of the page last contained by the screen --
    // not the first page in the onscreen pages
    startIndex = Math.min(listView.startIndex + NUM_BUFFER_PAGES,
                          pages.length - 1);

    if(pages.length <= 0) return -1;

    curr = pages[startIndex];
    midpoint = curr.top + curr.height/2;
    prevDiff = rangeMidpoint - midpoint;
    if(prevDiff < 0) {
      // Search above
      for(index = startIndex - 1; index >= 0; index--) {
        curr = pages[index];
        midpoint = curr.top + curr.height/2;
        diff = rangeMidpoint - midpoint;
        if(diff > 0) {
          if(diff < -prevDiff) return index;
          return index + 1;
        }
        prevDiff = diff;
      }
      return 0;
    } else if (prevDiff > 0) {
      // Search below
      for(index = startIndex + 1, length = pages.length; index < length; index++) {
        curr = pages[index];
        midpoint = curr.top + curr.height/2;
        diff = rangeMidpoint - midpoint;
        if(diff < 0) {
          if(-diff < prevDiff) return index;
          return index - 1;
        }
        prevDiff = diff;
      }
      return pages.length - 1;
    }

    // Perfect hit! Return it.
    return startIndex;
  }


  // ListView cleanup
  // ----------------

  ListView.prototype.cleanup = function() {
    var pages = this.pages,
        page;
    this.DOMEvent.detach(this);
    while(page = pages.pop()) {
      page.cleanup();
    }
  };


  // ListView event binding
  // ----------------------
  //
  // Internal scroll and resize  binding and throttling. Allows ListViews to
  // bind to a throttled scroll event (and debounced resize event), and updates
  // them as it fires.

  function DOMEvent() {
    var eventIsBound = false,
        scrollScheduled = false,
        resizeTimeout = null,
        boundViews = [];


    // ### scrollHandler
    //
    // Callback called on scroll. Schedules a `scrollAll` callback if needed,
    // and disallows future scheduling.

    function scrollHandler() {
      if(!scrollScheduled) {
        setTimeout(scrollAll, config.SCROLL_THROTTLE);
        scrollScheduled = true;
      }
    }


    // ### scrollAll
    //
    // Callback passed to the setTimeout throttle. Calls `scrollListView` on
    // every bound ListView, and then allows new scroll events to be
    // scheduled.

    function scrollAll() {
      var index, length;
      for(index = 0, length = boundViews.length; index < length; index++) {
        updateStartIndex(boundViews[index]);
      }
      scrollScheduled = false;
    }


    // ### resizeHandler
    //
    // Callback called on resize. Debounces a `resizeAll` callback.

    function resizeHandler() {
      if(resizeTimeout) clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(resizeAll, 200);
    }


    // ### resizeAll
    //
    // Handles resizing all ListViews. Just calls `repartition` on them for
    // now.

    function resizeAll() {
      var index, curr;
      for(index = 0; curr = boundViews[index]; index++) {
        repartition(curr);
      }
    }

    return {

      // ### attach
      //
      // Binds a given ListView to a throttled scroll event. Does not create
      // multiple event handlers if called by multiple ListViews.
      //
      // Takes:
      //
      // - `listView`: a ListView that is not currently bound to the scroll
      //   event.

      attach: function(listView) {
        if(!eventIsBound) {
          listView.$window.on('scroll', scrollHandler);
          listView.$window.on('resize', resizeHandler);
          eventIsBound = true;
        }
        boundViews.push(listView);
      },


      // ### detach
      //
      // Detaches a bound ListView from the throttled scroll event. If no
      // ListViews remain bound to the throttled scroll, unbinds the scroll
      // handler from the window's scroll event.
      //
      // Returns true if the listView was successfully detached, and false
      // otherwise.
      //
      // Takes:
      //
      // - `listView`: a ListView that is currently bound to the scroll event.

      detach: function(listView) {
        var index, length;
        for(index = 0, length = boundViews.length; index < length; index++) {
          if(boundViews[index] === listView) {
            boundViews.splice(index, 1);
            if(boundViews.length === 0) {
              listView.$window.off('scroll', scrollHandler);
              listView.$window.off('resize', resizeHandler);
              eventIsBound = false;
            }
            return true;
          }
        }
        return false;
      }
    };
  };


  // Page class
  // ==========
  //
  // An internal class used for ordering items into roughly screen-sized pages.
  // Pages are removed and added to the DOM wholesale as they come in and out
  // of view.

  function Page(parent) {
    this.parent = parent;

    this.items = [];
    this.$el = blankDiv();

    this.id = PageRegistry.generatePageId(this);
    this.$el.attr(PAGE_ID_ATTRIBUTE, this.id);

    this.top = 0;
    this.bottom = 0;
    this.width = 0;
    this.height = 0;

    this.lazyloaded = false;

    this.onscreen = false;
  }


  // ### append
  //
  // Appends a ListItem to the Page.
  //
  // Takes:
  //
  // - `item`: a ListItem.

  Page.prototype.append = function(item) {
    var items = this.items;

    // Recompute coords, sizing.
    if(items.length === 0) this.top = item.top;
    this.bottom = item.bottom;
    this.width = this.width > item.width ? this.width : item.width;
    this.height = this.bottom - this.top;

    items.push(item);
    item.parent = this;
    this.$el.append(item.$el);

    this.lazyloaded = false;
  };


  // ### prepend
  //
  // Prepends a ListItem to the Page.
  //
  // Takes:
  //
  // - `item`: a ListItem.

  Page.prototype.prepend = function(item) {
    var items = this.items;

    // Recompute coords, sizing.
    this.bottom += item.height;
    this.width = this.width > item.width ? this.width : item.width;
    this.height = this.bottom - this.top;

    items.push(item);
    item.parent = this;
    this.$el.prepend(item.$el);

    this.lazyloaded = false;
  };


  // ### hasVacancy
  //
  // Returns false if the Page is at max capacity; false otherwise.

  Page.prototype.hasVacancy = function() {
    return this.height < this.parent.$window.height() * config.PAGE_TO_SCREEN_RATIO;
  };


  // ### appendTo
  //
  // Proxies to jQuery to append the Page to the given jQuery element.

  Page.prototype.appendTo = function($el) {
    if(!this.onscreen) {
      this.$el.appendTo($el);
      this.onscreen = true;
    }
  };


  // ### prependTo
  //
  // Proxies to jQuery to prepend the Page to the given jQuery element.

  Page.prototype.prependTo = function($el) {
    if(!this.onscreen) {
      this.$el.prependTo($el);
      this.onscreen = true;
    }
  };

  // ### stash
  //
  // Temporarily stash the onscreen page under a different element.

  Page.prototype.stash = function($el) {
    if(this.onscreen) {
      this.$el.appendTo($el);
      this.onscreen = false;
    }
  };


  // ### remove
  //
  // Removes the Page from the DOM and cleans up after it.

  Page.prototype.remove = function() {
    if(this.onscreen) {
      this.$el.remove();
      this.onscreen = false;
    }
    this.cleanup();
  };


  // ### cleanup
  //
  // Cleans up the Page without removing it.

  Page.prototype.cleanup = function() {
    var items = this.items,
        item;

    this.parent = null;
    PageRegistry.remove(this);
    while (item = items.pop()) {
      item.cleanup();
    }
  };


  // ### lazyload
  //
  // Runs the given lazy-loading callback on all unloaded page content.
  //
  // Takes:
  //
  // - `callback`: a function of the form `function([$el]){}`. Will run on
  // each unloaded element, and will use the element as its calling context.

  Page.prototype.lazyload = function(callback) {
    var $el = this.$el,
        index, length;
    if (!this.lazyloaded) {
      for (index = 0, length = $el.length; index < length; index++) {
        callback.call($el[index], $el[index]);
      }
      this.lazyloaded = true;
    }
  };


  // Page Registry
  // ------------

  var PageRegistry = (function() {
    var pages = [];
    return {
      generatePageId: function(page) {
        return pages.push(page) - 1;
      },
      lookup: function(id) {
        return pages[id] || null;
      },
      remove: function(page) {
        var id = page.id;
        if(!pages[id]) return false;
        pages[id] = null;
        return true;
      }
    };
  }());


  // ### removeItemFromPage
  //
  // Removes a given ListItem from the given Page.

  function removeItemFromPage(item, page) {
    var index, length, foundIndex,
        items = page.items;
    for(index = 0, length = items.length; index < length; index++) {
      if(items[index] === item) {
        foundIndex = index;
        break;
      }
    }

    if(foundIndex == null) return false;

    items.splice(foundIndex, 1);
    page.bottom -= item.height;
    page.height = page.bottom - page.top;
    if(page.hasVacancy()) tooSmall(page.parent, page);

    return true;
  }


  // ListItem class
  // ==============
  //
  // An individual item in the ListView.
  //
  // Has cached top, bottom, width, and height properties, determined from
  // jQuery. This positioning data will be determined when the ListItem is
  // inserted into a ListView; it can't be determined ahead of time.
  //
  // All positioning data is relative to the containing ListView.

  function ListItem($el) {
    this.$el = $el;

    this.parent = null;

    this.top = 0;
    this.bottom = 0;
    this.width = 0;
    this.height = 0;
  }


  // ### clone
  //
  // Clones the ListItem.
  ListItem.prototype.clone = function() {
    var item = new ListItem(this.$el);
    item.top = this.top;
    item.bottom = this.bottom;
    item.width = this.width;
    item.height = this.height;
    return item;
  };

  // ### remove
  //
  // Removes the ListItem and its elements from the page, and cleans up after
  // them.

  ListItem.prototype.remove = function() {
    this.$el.remove();
    removeItemFromPage(this, this.parent);
    this.cleanup();
  };


  // ### cleanup
  //
  // Cleans up after the ListItem without removing it from the page.

  ListItem.prototype.cleanup = function() {
    this.parent = null;
  };


  // ### updateCoords
  //
  // Updates the coordinates of the given ListItem, assuming a given y-offset
  // from the parent ListView.
  //
  // Takes:
  //
  //  - `listItem`: the ListItem whose cached coordinates you want to update.
  //  - `yOffset`: the y-offset of the ListItem from its ListView parent.

  function updateCoords(listItem, yOffset) {
    var $el = listItem.$el;

    listItem.top = yOffset;
    listItem.height = $el.outerHeight(true);
    listItem.bottom = listItem.top + listItem.height;
    listItem.width = $el.width();
  }



  // Helper functions
  // ================


  // ### blankDiv
  //
  // Returns a new, empty `<div>` jQuery element. The `<div>` will have its
  // border, margin, and padding set to zero or none, as appropriate.

  function blankDiv() {
    return $('<div>').css({
      margin: 0,
      padding: 0,
      border: 'none'
    });
  }


  // ### pxToInt
  //
  // Converts pixel values returned by jQuery to base-10 ints.
  //
  // Takes:
  //
  // - `px`: a string value, which starts with a number and is
  //   postfixed with the string `'px'`.

  //function pxToInt(px) {
  //  return parseInt(px, 10);
  //}


  // Export
  // ======

  // Classes:
  infinity.ListView = ListView;
  infinity.Page = Page;
  infinity.ListItem = ListItem;

  //jQuery plugin
  function registerPlugin(infinity) {
    var ListView;
    if(infinity) {
      ListView = infinity.ListView;

      $.fn.listView = function (options) {
        return new ListView(this, options);
      };
    }
    else {
      delete $.fn.listView;
    }
  }

  registerPlugin(infinity);

  // Destroy own packaging:
  infinity.noConflict = function() {
    window.infinity = oldInfinity;
    registerPlugin(oldInfinity);
    return infinity;
  };

}(window, Math, jQuery);
/**
 * 
 * Find more about the Spinning Wheel function at
 * http://cubiq.org/spinning-wheel-on-webkit-for-iphone-ipod-touch/11
 *
 * Copyright (c) 2009 Matteo Spinelli, http://cubiq.org/
 * Released under MIT license
 * http://cubiq.org/dropbox/mit-license.txt
 * 
 * Version 1.4 - Last updated: 2009.07.09
 * 
 */

var SpinningWheel = {
	cellHeight: 40,
	friction: 0.003,
	slotData: [],


	/**
	 *
	 * Event handler
	 *
	 */

	handleEvent: function (e) {
		if (e.type == 'touchstart') {
			this.lockScreen(e);
			if (e.currentTarget.id == 'sw-cancel' || e.currentTarget.id == 'sw-done') {
				this.tapDown(e);
			} else if (e.currentTarget.id == 'sw-frame') {
				this.scrollStart(e);
			}
		} else if (e.type == 'touchmove') {
			this.lockScreen(e);
			
			if (e.currentTarget.id == 'sw-cancel' || e.currentTarget.id == 'sw-done') {
				this.tapCancel(e);
			} else if (e.currentTarget.id == 'sw-frame') {
				this.scrollMove(e);
			}
		} else if (e.type == 'touchend') {
			if (e.currentTarget.id == 'sw-cancel' || e.currentTarget.id == 'sw-done') {
				this.tapUp(e);
			} else if (e.currentTarget.id == 'sw-frame') {
				this.scrollEnd(e);
			}
		} else if (e.type == 'webkitTransitionEnd') {
			if (e.target.id == 'sw-wrapper') {
				this.destroy();
			} else {
				this.backWithinBoundaries(e);
			}
		} else if (e.type == 'orientationchange') {
			this.onOrientationChange(e);
		} else if (e.type == 'scroll') {
			this.onScroll(e);
		}
	},


	/**
	 *
	 * Global events
	 *
	 */

	onOrientationChange: function (e) {
		window.scrollTo(0, 0);
		this.swWrapper.style.top = window.innerHeight + window.pageYOffset + 'px';
		this.calculateSlotsWidth();
	},
	
	onScroll: function (e) {
		this.swWrapper.style.top = window.innerHeight + window.pageYOffset + 'px';
	},

	lockScreen: function (e) {
		e.preventDefault();
		e.stopPropagation();
	},


	/**
	 *
	 * Initialization
	 *
	 */

	reset: function () {
		this.slotEl = [];

		this.activeSlot = null;
		
		this.swWrapper = undefined;
		this.swSlotWrapper = undefined;
		this.swSlots = undefined;
		this.swFrame = undefined;
	},

	calculateSlotsWidth: function () {
		var div = this.swSlots.getElementsByTagName('div');
		for (var i = 0; i < div.length; i += 1) {
			this.slotEl[i].slotWidth = div[i].offsetWidth;
		}
	},

	create: function (className, containerElement) {
		var i, l, out, ul, div, container;

        container = containerElement ? containerElement : $('body > div:first-child');

		this.reset();	// Initialize object variables

		// Create the Spinning Wheel main wrapper
		div = document.createElement('div');
		div.id = 'sw-wrapper';
		div.className = className
		//div.style.top = window.innerHeight + window.pageYOffset + 'px';		// Place the SW down the actual viewing screen
		div.style.webkitTransitionProperty = '-webkit-transform';
		div.innerHTML = '<div id="sw-slots-wrapper"><div id="sw-frame"><div></div></' + 'div><div id="sw-slots"></' + 'div></' + 'div><div id="sw-header"><button id="sw-cancel" data-i18n="common:buttons.CancelBtn"></' + 'button><button id="sw-done" data-i18n="common:buttons.SaveBtn"></' + 'button></' + 'div>';

        Locale.localize($(div));

        container.append(div);

		this.swWrapper = div;													// The SW wrapper
		this.swSlotWrapper = document.getElementById('sw-slots-wrapper');		// Slots visible area
		this.swSlots = document.getElementById('sw-slots');						// Pseudo table element (inner wrapper)
		this.swFrame = document.getElementById('sw-frame');						// The scrolling controller

		// Create HTML slot elements
		for (l = 0; l < this.slotData.length; l += 1) {
			// Create the slot
			ul = document.createElement('ul');
			out = '';
			for (i in this.slotData[l].values) {
				out += '<li>' + this.slotData[l].values[i] + '<' + '/li>';
			}
			ul.innerHTML = out;

			div = document.createElement('div');		// Create slot container
			div.className = this.slotData[l].style;		// Add styles to the container
			div.appendChild(ul);
	
			// Append the slot to the wrapper
			this.swSlots.appendChild(div);
			
			ul.slotPosition = l;			// Save the slot position inside the wrapper
			ul.slotYPosition = 0;
			ul.slotWidth = 0;
			ul.slotMaxScroll = this.swSlotWrapper.clientHeight - ul.clientHeight - 85;
			ul.style.webkitTransitionTimingFunction = 'cubic-bezier(0, 0, 0.2, 1)';		// Add default transition
			
			this.slotEl.push(ul);			// Save the slot for later use
			
			// Place the slot to its default position (if other than 0)
			if (this.slotData[l].defaultValue) {
				this.scrollToValue(l, this.slotData[l].defaultValue);	
			}
		}
		
		this.calculateSlotsWidth();
		
		// Global events
		//document.addEventListener('touchstart', this, false);			// Prevent page scrolling
		document.addEventListener('touchmove', this, false);			// Prevent page scrolling
		window.addEventListener('orientationchange', this, true);		// Optimize SW on orientation change
		window.addEventListener('scroll', this, true);				// Reposition SW on page scroll

		// Cancel/Done buttons events
		document.getElementById('sw-cancel').addEventListener('touchstart', this, false);
		document.getElementById('sw-done').addEventListener('touchstart', this, false);

		// Add scrolling to the slots
		this.swFrame.addEventListener('touchstart', this, false);
	},

	open: function (className) {
		this.create(className);

		//this.swWrapper.style.webkitTransitionTimingFunction = 'ease-out';
		//this.swWrapper.style.webkitTransitionDuration = '400ms';
		//this.swWrapper.style.webkitTransform = 'translate3d(0, -260px, 0)';
	},
	
	
	/**
	 *
	 * Unload
	 *
	 */

	destroy: function () {
		this.swWrapper.removeEventListener('webkitTransitionEnd', this, false);

		this.swFrame.removeEventListener('touchstart', this, false);

		document.getElementById('sw-cancel').removeEventListener('touchstart', this, false);
		document.getElementById('sw-done').removeEventListener('touchstart', this, false);

		//document.removeEventListener('touchstart', this, false);
		document.removeEventListener('touchmove', this, false);
		window.removeEventListener('orientationchange', this, true);
		window.removeEventListener('scroll', this, true);
		
		this.slotData = [];
		this.cancelAction = function () {
			return false;
		};
		
		this.cancelDone = function () {
			return true;
		};
		
		this.reset();
		
		$('#sw-wrapper').remove();
	},
	
	close: function () {		
	},


	/**
	 *
	 * Generic methods
	 *
	 */

	addSlot: function (values, style, defaultValue) {
		if (!style) {
			style = '';
		}
		
		style = style.split(' ');

		for (var i = 0; i < style.length; i += 1) {
			style[i] = 'sw-' + style[i];
		}
		
		style = style.join(' ');

		var obj = { 'values': values, 'style': style, 'defaultValue': defaultValue };
		this.slotData.push(obj);
	},

	getSelectedValues: function () {
		var index, count,
		    i, l,
			keys = [], values = [];

		for (i in this.slotEl) {
			// Remove any residual animation
			this.slotEl[i].removeEventListener('webkitTransitionEnd', this, false);
			this.slotEl[i].style.webkitTransitionDuration = '0';

			if (this.slotEl[i].slotYPosition > 0) {
				this.setPosition(i, 0);
			} else if (this.slotEl[i].slotYPosition < this.slotEl[i].slotMaxScroll) {
				this.setPosition(i, this.slotEl[i].slotMaxScroll);
			}

			index = -Math.round(this.slotEl[i].slotYPosition / this.cellHeight);

			count = 0;
			for (l in this.slotData[i].values) {
				if (count == index) {
					keys.push(l);
					values.push(this.slotData[i].values[l]);
					break;
				}
				
				count += 1;
			}
		}

		return { 'keys': keys, 'values': values };
	},


	/**
	 *
	 * Rolling slots
	 *
	 */

	setPosition: function (slot, pos) {
		this.slotEl[slot].slotYPosition = pos;
		this.slotEl[slot].style.webkitTransform = 'translate3d(0, ' + pos + 'px, 0)';
	},
	
	scrollStart: function (e) {
		// Find the clicked slot
		var xPos = e.targetTouches[0].clientX - this.swSlots.offsetLeft - this.swWrapper.getBoundingClientRect().left;	// Clicked position minus left offset (should be 11px)		

		// Find tapped slot
		var slot = 0;
		for (var i = 0; i < this.slotEl.length; i += 1) {
			slot += this.slotEl[i].slotWidth;
			if (xPos < slot) {
				this.activeSlot = i;
				break;
			}
		}

		// If slot is readonly do nothing
		if (this.slotData[this.activeSlot].style.match('readonly')) {
			this.swFrame.removeEventListener('touchmove', this, false);
			this.swFrame.removeEventListener('touchend', this, false);
			return false;
		}

		this.slotEl[this.activeSlot].removeEventListener('webkitTransitionEnd', this, false);	// Remove transition event (if any)
		this.slotEl[this.activeSlot].style.webkitTransitionDuration = '0';		// Remove any residual transition
		
		// Stop and hold slot position
		var theTransform = window.getComputedStyle(this.slotEl[this.activeSlot]).webkitTransform;
		theTransform = new WebKitCSSMatrix(theTransform).m42;
		if (theTransform != this.slotEl[this.activeSlot].slotYPosition) {
			this.setPosition(this.activeSlot, theTransform);
		}
		
		this.startY = e.targetTouches[0].clientY;
		this.scrollStartY = this.slotEl[this.activeSlot].slotYPosition;
		this.scrollStartTime = e.timeStamp;

		this.swFrame.addEventListener('touchmove', this, false);
		this.swFrame.addEventListener('touchend', this, false);
		
		return true;
	},

	scrollMove: function (e) {
		var topDelta = e.targetTouches[0].clientY - this.startY;

		if (this.slotEl[this.activeSlot].slotYPosition > 0 || this.slotEl[this.activeSlot].slotYPosition < this.slotEl[this.activeSlot].slotMaxScroll) {
			topDelta /= 2;
		}
		
		this.setPosition(this.activeSlot, this.slotEl[this.activeSlot].slotYPosition + topDelta);
		this.startY = e.targetTouches[0].clientY;

		// Prevent slingshot effect
		if (e.timeStamp - this.scrollStartTime > 77) {
			this.scrollStartY = this.slotEl[this.activeSlot].slotYPosition;
			this.scrollStartTime = e.timeStamp;
		}
	},
	
	scrollEnd: function (e) {
		this.swFrame.removeEventListener('touchmove', this, false);
		this.swFrame.removeEventListener('touchend', this, false);

		// If we are outside of the boundaries, let's go back to the sheepfold
		if (this.slotEl[this.activeSlot].slotYPosition > 0 || this.slotEl[this.activeSlot].slotYPosition < this.slotEl[this.activeSlot].slotMaxScroll) {
			this.scrollTo(this.activeSlot, this.slotEl[this.activeSlot].slotYPosition > 0 ? 0 : this.slotEl[this.activeSlot].slotMaxScroll);
			return false;
		}

		// Lame formula to calculate a fake deceleration
		var scrollDistance = this.slotEl[this.activeSlot].slotYPosition - this.scrollStartY;

		// The drag session was too short
		if (scrollDistance < this.cellHeight / 1.5 && scrollDistance > -this.cellHeight / 1.5) {
			if (this.slotEl[this.activeSlot].slotYPosition % this.cellHeight) {
				this.scrollTo(this.activeSlot, Math.round(this.slotEl[this.activeSlot].slotYPosition / this.cellHeight) * this.cellHeight, '100ms');
			}

			return false;
		}

		var scrollDuration = e.timeStamp - this.scrollStartTime;

		var newDuration = (2 * scrollDistance / scrollDuration) / this.friction;
		var newScrollDistance = (this.friction / 2) * (newDuration * newDuration);
		
		if (newDuration < 0) {
			newDuration = -newDuration;
			newScrollDistance = -newScrollDistance;
		}

		var newPosition = this.slotEl[this.activeSlot].slotYPosition + newScrollDistance;

		if (newPosition > 0) {
			// Prevent the slot to be dragged outside the visible area (top margin)
			newPosition /= 2;
			newDuration /= 3;

			if (newPosition > this.swSlotWrapper.clientHeight / 4) {
				newPosition = this.swSlotWrapper.clientHeight / 4;
			}
		} else if (newPosition < this.slotEl[this.activeSlot].slotMaxScroll) {
			// Prevent the slot to be dragged outside the visible area (bottom margin)
			newPosition = (newPosition - this.slotEl[this.activeSlot].slotMaxScroll) / 2 + this.slotEl[this.activeSlot].slotMaxScroll;
			newDuration /= 3;
			
			if (newPosition < this.slotEl[this.activeSlot].slotMaxScroll - this.swSlotWrapper.clientHeight / 4) {
				newPosition = this.slotEl[this.activeSlot].slotMaxScroll - this.swSlotWrapper.clientHeight / 4;
			}
		} else {
			newPosition = Math.round(newPosition / this.cellHeight) * this.cellHeight;
		}

		this.scrollTo(this.activeSlot, Math.round(newPosition), Math.round(newDuration) + 'ms');
 
		return true;
	},

	scrollTo: function (slotNum, dest, runtime) {
		this.slotEl[slotNum].style.webkitTransitionDuration = runtime ? runtime : '100ms';
		this.setPosition(slotNum, dest ? dest : 0);

		// If we are outside of the boundaries go back to the sheepfold
		if (this.slotEl[slotNum].slotYPosition > 0 || this.slotEl[slotNum].slotYPosition < this.slotEl[slotNum].slotMaxScroll) {
			this.slotEl[slotNum].addEventListener('webkitTransitionEnd', this, false);
		}
	},
	
	scrollToValue: function (slot, value) {
		var yPos, count, i;

		this.slotEl[slot].removeEventListener('webkitTransitionEnd', this, false);
		this.slotEl[slot].style.webkitTransitionDuration = '0';
		
		count = 0;
		for (i in this.slotData[slot].values) {
			if (i == value) {
				yPos = count * this.cellHeight;
				this.setPosition(slot, yPos);
				break;
			}
			
			count -= 1;
		}
	},
	
	backWithinBoundaries: function (e) {
		e.target.removeEventListener('webkitTransitionEnd', this, false);

		this.scrollTo(e.target.slotPosition, e.target.slotYPosition > 0 ? 0 : e.target.slotMaxScroll, '150ms');
		return false;
	},


	/**
	 *
	 * Buttons
	 *
	 */

	tapDown: function (e) {
		e.currentTarget.addEventListener('touchmove', this, false);
		e.currentTarget.addEventListener('touchend', this, false);
		e.currentTarget.className = 'sw-pressed';
	},

	tapCancel: function (e) {
		e.currentTarget.removeEventListener('touchmove', this, false);
		e.currentTarget.removeEventListener('touchend', this, false);
		e.currentTarget.className = '';
	},
	
	tapUp: function (e) {
		this.tapCancel(e);

		if (e.currentTarget.id == 'sw-cancel') {
			this.cancelAction();
		} else {
			this.doneAction();
		}
		
		this.close();
	},

	setCancelAction: function (action) {
		this.cancelAction = action;
	},

	setDoneAction: function (action) {
		this.doneAction = action;
	},
	
	cancelAction: function () {
		return false;
	},

	cancelDone: function () {
		return true;
	}
};
/*
    DP Toast jQuery Plugin, Version 1.1
    Copyright (C) Dustin Poissant 2014
    See http://htmlpreview.github.io/?https://github.com/dustinpoissant/jquery.dpToast/blob/master/License.html
    for more information reguarding usage.
*/
;(function($){
    var isPreviousToastHide = true;
    $.fn.dpToast = function(){
        var container;
        if( $("#dp-toasts").length < 1){
            $("body").append("<div id='dp-toasts'></div>");
            container = $("#dp-toasts");
            container[0].count = 0;
            container.css({
                position: "fixed",
                display: "inline-block",
                bottom: "20%",
                left: "0px",
                width: "100%",
                textAlign: "center",
                margin: "0 auto"
            });
        } else {
            container = $("#dp-toasts");
        }
        var message = "Error: No Toast Message";
        var timeout = 3000;
        for(var i=0; i<arguments.length; i++){
            if(typeof(arguments[i]) == "string" && arguments[i].length > 0) message = arguments[i];
            else if(typeof(arguments[i]) == "number") timeout = arguments[i];
        }
        if (isPreviousToastHide){
            container.prepend("<div class='dp-toast'><p>"+message+"</p></div>");
            var toast = $(".dp-toast");
            toast.css({
                display: "inline-block",
                backgroundColor: "rgba(0,0,0,0.9)",
                color: "white",
                padding: "10px 16px",
                borderRadius: "3px",
                margin: "5px auto",
                boxShadow: "0 0 5px rgba(0,0,0,0.5), 0 0 2px rgba(0,0,0,0.5)"
            });
            toast.hide().fadeIn();
            isPreviousToastHide = false;
            setTimeout(function(){
                isPreviousToastHide = true;
                toast.fadeOut(function(){
                    toast.remove();
                    if(container.children().size() == 0 ) container.remove();
                });
            }, timeout);
        }
    }
}(jQuery));
//! moment.js
//! version : 2.8.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.8.1',
        // the global-scope this is NOT the global object in Node.js
        globalScope = typeof global !== 'undefined' ? global : this,
        oldGlobalMoment,
        round = Math.round,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        parseTokenOrdinal = /\d{1,2}/,

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,  // seconds to minute
            m: 45,  // minutes to hour
            h: 22,  // hours to day
            d: 26,  // days to month
            M: 11   // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.localeData().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.localeData().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error('Implement me');
        }
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' && console.warn) {
            console.warn("Deprecation warning: " + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Locale() {
    }

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (b.hasOwnProperty(i)) {
                a[i] = b[i];
            }
        }

        if (b.hasOwnProperty('toString')) {
            a.toString = b.toString;
        }

        if (b.hasOwnProperty('valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, "moment()." + name  + "(period, number) is deprecated. Please use moment()." + name + "(number, period).");
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (inputObject.hasOwnProperty(prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) :
            moment(input).local();
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LT : 'h:mm A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY LT',
            LLLL : 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },

        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal : '%d',

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) {
                return parseTokenOneDigit;
            }
            /* falls through */
        case 'SS':
            if (strict) {
                return parseTokenTwoDigits;
            }
            /* falls through */
        case 'SSS':
            if (strict) {
                return parseTokenThreeDigits;
            }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return config._locale._meridiemParse;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return parseTokenOrdinal;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
            return a;
        }
    }

    function timezoneMinutesFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = config._locale.monthsParse(input);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(input, 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._isPm = config._locale.isPM(input);
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = config._locale.weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual zone can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be "T" or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days < relativeTimeThresholds.d && ['dd', days] ||
                months === 1 && ['M'] ||
                months < relativeTimeThresholds.M && ['MM', months] ||
                years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === "boolean") {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i);
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === "boolean") {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && input.hasOwnProperty('_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        function (key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function (key, values) {
        var data;
        if (key) {
            if (typeof(values) !== "undefined") {
                data = moment.defineLocale(key, values);
            }
            else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        function (key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().locale('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function (keepLocalTime) {
            return this.zone(0, keepLocalTime);
        },

        local : function (keepLocalTime) {
            if (this._isUTC) {
                this.zone(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.add(this._d.getTimezoneOffset(), 'm');
                }
            }
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add : createAdder(1, 'add'),

        subtract : createAdder(-1, 'subtract'),

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                output += ((this - moment(this).startOf('month')) -
                        (that - moment(that).startOf('month'))) / diff;
                // same as above but with zones, to negate all dst
                output -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're zone'd or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf : function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) > +moment(input).startOf(units);
        },

        isBefore: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) < +moment(input).startOf(units);
        },

        isSame: function (input, units) {
            units = units || 'ms';
            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
        },

        min: deprecate(
                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        zone : function (input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._d.getTimezoneOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.subtract(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(offset - input, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
            } else {
                return this._isUTC ? offset : this._d.getTimezoneOffset();
            }
            return this;
        },

        zoneAbbr : function () {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName : function () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone : function () {
            if (this._tzm) {
                this.zone(this._tzm);
            } else if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week : function (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale : function (key) {
            if (key === undefined) {
                return this._locale._abbr;
            } else {
                this._locale = moment.localeData(key);
                return this;
            }
        },

        lang : deprecate(
            "moment().lang() is deprecated. Use moment().localeData() instead.",
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    this._locale = moment.localeData(key);
                    return this;
                }
            }
        ),

        localeData : function () {
            return this._locale;
        }
    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs : function () {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            var days, months;
            units = normalizeUnits(units);

            days = this._days + this._milliseconds / 864e5;
            if (units === 'month' || units === 'year') {
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                days += yearsToDays(this._months / 12);
                switch (units) {
                    case 'week': return days / 7;
                    case 'day': return days;
                    case 'hour': return days * 24;
                    case 'minute': return days * 24 * 60;
                    case 'second': return days * 24 * 60 * 60;
                    case 'millisecond': return days * 24 * 60 * 60 * 1000;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang : moment.fn.lang,
        locale : moment.fn.locale,

        toIsoString : deprecate(
            "toIsoString() is deprecated. Please use toISOString() instead " +
            "(notice the capitals)",
            function () {
                return this.toISOString();
            }
        ),

        toISOString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData : function () {
            return this._locale;
        }
    });

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function () {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function () {
        return this.as('m');
    };
    moment.duration.fn.asHours = function () {
        return this.as('h');
    };
    moment.duration.fn.asDays = function () {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function () {
        return this.as('M');
    };
    moment.duration.fn.asYears = function () {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // moment.js locale configuration
// locale : afrikaans (af)
// author : Werner Mollentze : https://github.com/wernerm

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('af', {
        months : "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
        weekdays : "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
        weekdaysShort : "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
        weekdaysMin : "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Vandag om] LT',
            nextDay : '[Môre om] LT',
            nextWeek : 'dddd [om] LT',
            lastDay : '[Gister om] LT',
            lastWeek : '[Laas] dddd [om] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "oor %s",
            past : "%s gelede",
            s : "'n paar sekondes",
            m : "'n minuut",
            mm : "%d minute",
            h : "'n uur",
            hh : "%d ure",
            d : "'n dag",
            dd : "%d dae",
            M : "'n maand",
            MM : "%d maande",
            y : "'n jaar",
            yy : "%d jaar"
        },
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week : {
            dow : 1, // Maandag is die eerste dag van die week.
            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });
}));
// moment.js locale configuration
// locale : Moroccan Arabic (ar-ma)
// author : ElFadili Yassine : https://github.com/ElFadiliY
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('ar-ma', {
        months : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        monthsShort : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        weekdays : "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Arabic Saudi Arabia (ar-sa)
// author : Suhail Alkowaileet : https://github.com/xsoh

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    return moment.defineLocale('ar-sa', {
        months : "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort : "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "ص";
            } else {
                return "م";
            }
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Arabic (ar)
// author : Abdel Said : https://github.com/abdelsaid
// changes in months, weekdays : Ahmed Elkhatib

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    return moment.defineLocale('ar', {
        months : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        monthsShort : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        weekdays : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "ص";
            } else {
                return "م";
            }
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : azerbaijani (az)
// author : topchiyev : https://github.com/topchiyev

(function (factory) {
    factory(moment);
}(function (moment) {
    var suffixes = {
        1: "-inci",
        5: "-inci",
        8: "-inci",
        70: "-inci",
        80: "-inci",

        2: "-nci",
        7: "-nci",
        20: "-nci",
        50: "-nci",

        3: "-üncü",
        4: "-üncü",
        100: "-üncü",

        6: "-ncı",

        9: "-uncu",
        10: "-uncu",
        30: "-uncu",

        60: "-ıncı",
        90: "-ıncı"
    };
    return moment.defineLocale('az', {
        months : "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
        monthsShort : "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
        weekdays : "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
        weekdaysShort : "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
        weekdaysMin : "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[sabah saat] LT',
            nextWeek : '[gələn həftə] dddd [saat] LT',
            lastDay : '[dünən] LT',
            lastWeek : '[keçən həftə] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s sonra",
            past : "%s əvvəl",
            s : "birneçə saniyyə",
            m : "bir dəqiqə",
            mm : "%d dəqiqə",
            h : "bir saat",
            hh : "%d saat",
            d : "bir gün",
            dd : "%d gün",
            M : "bir ay",
            MM : "%d ay",
            y : "bir il",
            yy : "%d il"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "gecə";
            } else if (hour < 12) {
                return "səhər";
            } else if (hour < 17) {
                return "gündüz";
            } else {
                return "axşam";
            }
        },
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + "-ıncı";
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;

            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : belarusian (be)
// author : Dmitry Demidov : https://github.com/demidov91
// author: Praleska: http://praleska.pro/
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    factory(moment);
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),
            'accusative': 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            'accusative': 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_')
        },

        nounCase = (/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.defineLocale('be', {
        months : monthsCaseReplace,
        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "нд_пн_ат_ср_чц_пт_сб".split("_"),
        weekdaysMin : "нд_пн_ат_ср_чц_пт_сб".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY г.",
            LLL : "D MMMM YYYY г., LT",
            LLLL : "dddd, D MMMM YYYY г., LT"
        },
        calendar : {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return '[У мінулую] dddd [ў] LT';
                case 1:
                case 2:
                case 4:
                    return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "праз %s",
            past : "%s таму",
            s : "некалькі секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithPlural,
            hh : relativeTimeWithPlural,
            d : "дзень",
            dd : relativeTimeWithPlural,
            M : "месяц",
            MM : relativeTimeWithPlural,
            y : "год",
            yy : relativeTimeWithPlural
        },


        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночы";
            } else if (hour < 12) {
                return "раніцы";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечара";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
            case 'D':
                return number + '-га';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : bulgarian (bg)
// author : Krasen Borisov : https://github.com/kraz

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('bg', {
        months : "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
        monthsShort : "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
        weekdays : "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
        weekdaysShort : "нед_пон_вто_сря_чет_пет_съб".split("_"),
        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "D.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Днес в] LT',
            nextDay : '[Утре в] LT',
            nextWeek : 'dddd [в] LT',
            lastDay : '[Вчера в] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "след %s",
            past : "преди %s",
            s : "няколко секунди",
            m : "минута",
            mm : "%d минути",
            h : "час",
            hh : "%d часа",
            d : "ден",
            dd : "%d дни",
            M : "месец",
            MM : "%d месеца",
            y : "година",
            yy : "%d години"
        },
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Bengali (bn)
// author : Kaushik Gandhi : https://github.com/kaushikgandhi

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    },
    numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    return moment.defineLocale('bn', {
        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split("_"),
        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split("_"),
        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split("_"),
        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split("_"),
        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split("_"),
        longDateFormat : {
            LT : "A h:mm সময়",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[আজ] LT',
            nextDay : '[আগামীকাল] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[গতকাল] LT',
            lastWeek : '[গত] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s পরে",
            past : "%s আগে",
            s : "কএক সেকেন্ড",
            m : "এক মিনিট",
            mm : "%d মিনিট",
            h : "এক ঘন্টা",
            hh : "%d ঘন্টা",
            d : "এক দিন",
            dd : "%d দিন",
            M : "এক মাস",
            MM : "%d মাস",
            y : "এক বছর",
            yy : "%d বছর"
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        //Bengali is a vast language its spoken
        //in different forms in various parts of the world.
        //I have just generalized with most common one used
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "রাত";
            } else if (hour < 10) {
                return "শকাল";
            } else if (hour < 17) {
                return "দুপুর";
            } else if (hour < 20) {
                return "বিকেল";
            } else {
                return "রাত";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : tibetan (bo)
// author : Thupten N. Chakrishar : https://github.com/vajradog

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    },
    numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    return moment.defineLocale('bo', {
        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split("_"),
        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split("_"),
        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split("_"),
        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split("_"),
        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split("_"),
        longDateFormat : {
            LT : "A h:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[དི་རིང] LT',
            nextDay : '[སང་ཉིན] LT',
            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay : '[ཁ་སང] LT',
            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s ལ་",
            past : "%s སྔན་ལ",
            s : "ལམ་སང",
            m : "སྐར་མ་གཅིག",
            mm : "%d སྐར་མ",
            h : "ཆུ་ཚོད་གཅིག",
            hh : "%d ཆུ་ཚོད",
            d : "ཉིན་གཅིག",
            dd : "%d ཉིན་",
            M : "ཟླ་བ་གཅིག",
            MM : "%d ཟླ་བ",
            y : "ལོ་གཅིག",
            yy : "%d ལོ"
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "མཚན་མོ";
            } else if (hour < 10) {
                return "ཞོགས་ཀས";
            } else if (hour < 17) {
                return "ཉིན་གུང";
            } else if (hour < 20) {
                return "དགོང་དག";
            } else {
                return "མཚན་མོ";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : breton (br)
// author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

(function (factory) {
    factory(moment);
}(function (moment) {
    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': "munutenn",
            'MM': "miz",
            'dd': "devezh"
        };
        return number + ' ' + mutation(format[key], number);
    }

    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
        }
    }

    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }

    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }

    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    return moment.defineLocale('br', {
        months : "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
        monthsShort : "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
        weekdays : "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
        weekdaysShort : "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
        weekdaysMin : "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
        longDateFormat : {
            LT : "h[e]mm A",
            L : "DD/MM/YYYY",
            LL : "D [a viz] MMMM YYYY",
            LLL : "D [a viz] MMMM YYYY LT",
            LLLL : "dddd, D [a viz] MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Hiziv da] LT',
            nextDay : '[Warc\'hoazh da] LT',
            nextWeek : 'dddd [da] LT',
            lastDay : '[Dec\'h da] LT',
            lastWeek : 'dddd [paset da] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "a-benn %s",
            past : "%s 'zo",
            s : "un nebeud segondennoù",
            m : "ur vunutenn",
            mm : relativeTimeWithMutation,
            h : "un eur",
            hh : "%d eur",
            d : "un devezh",
            dd : relativeTimeWithMutation,
            M : "ur miz",
            MM : relativeTimeWithMutation,
            y : "ur bloaz",
            yy : specialMutationForYears
        },
        ordinal : function (number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : bosnian (bs)
// author : Nedim Cholich : https://github.com/frontyard
// based on (hr) translation by Bojan Marković

(function (factory) {
    factory(moment);
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    return moment.defineLocale('bs', {
        months : "januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "prije %s",
            s      : "par sekundi",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "dan",
            dd     : translate,
            M      : "mjesec",
            MM     : translate,
            y      : "godinu",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : catalan (ca)
// author : Juan G. Hurtado : https://github.com/juanghurtado

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('ca', {
        months : "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
        monthsShort : "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),
        weekdays : "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
        weekdaysShort : "dg._dl._dt._dc._dj._dv._ds.".split("_"),
        weekdaysMin : "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay : function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay : function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "en %s",
            past : "fa %s",
            s : "uns segons",
            m : "un minut",
            mm : "%d minuts",
            h : "una hora",
            hh : "%d hores",
            d : "un dia",
            dd : "%d dies",
            M : "un mes",
            MM : "%d mesos",
            y : "un any",
            yy : "%d anys"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : czech (cs)
// author : petrbela : https://github.com/petrbela

(function (factory) {
    factory(moment);
}(function (moment) {
    var months = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),
        monthsShort = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");

    function plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
            } else {
                return result + 'měsíci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
        }
    }

    return moment.defineLocale('cs', {
        months : months,
        monthsShort : monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort)),
        weekdays : "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
        weekdaysShort : "ne_po_út_st_čt_pá_so".split("_"),
        weekdaysMin : "ne_po_út_st_čt_pá_so".split("_"),
        longDateFormat : {
            LT: "H.mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[dnes v] LT",
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v neděli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve středu v] LT';
                case 4:
                    return '[ve čtvrtek v] LT';
                case 5:
                    return '[v pátek v] LT';
                case 6:
                    return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulou neděli v] LT';
                case 1:
                case 2:
                    return '[minulé] dddd [v] LT';
                case 3:
                    return '[minulou středu v] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
                }
            },
            sameElse: "L"
        },
        relativeTime : {
            future : "za %s",
            past : "před %s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : chuvash (cv)
// author : Anatoly Mironov : https://github.com/mirontoli

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('cv', {
        months : "кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"),
        monthsShort : "кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"),
        weekdays : "вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"),
        weekdaysShort : "выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"),
        weekdaysMin : "вр_тн_ыт_юн_кç_эр_шм".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD-MM-YYYY",
            LL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]",
            LLL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT",
            LLLL : "dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT"
        },
        calendar : {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ĕнер] LT [сехетре]',
            nextWeek: '[Çитес] dddd LT [сехетре]',
            lastWeek: '[Иртнĕ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (output) {
                var affix = /сехет$/i.exec(output) ? "рен" : /çул$/i.exec(output) ? "тан" : "ран";
                return output + affix;
            },
            past : "%s каялла",
            s : "пĕр-ик çеккунт",
            m : "пĕр минут",
            mm : "%d минут",
            h : "пĕр сехет",
            hh : "%d сехет",
            d : "пĕр кун",
            dd : "%d кун",
            M : "пĕр уйăх",
            MM : "%d уйăх",
            y : "пĕр çул",
            yy : "%d çул"
        },
        ordinal : '%d-мĕш',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Welsh (cy)
// author : Robert Allen

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale("cy", {
        months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
        monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
        weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
        weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
        // time formats are the same as en-gb
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY LT",
            LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: "mewn %s",
            past: "%s yn ôl",
            s: "ychydig eiliadau",
            m: "munud",
            mm: "%d munud",
            h: "awr",
            hh: "%d awr",
            d: "diwrnod",
            dd: "%d diwrnod",
            M: "mis",
            MM: "%d mis",
            y: "blwyddyn",
            yy: "%d flynedd"
        },
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];

            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }

            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : danish (da)
// author : Ulrik Nielsen : https://github.com/mrbase

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('da', {
        months : "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort : "søn_man_tir_ons_tor_fre_lør".split("_"),
        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd [d.] D. MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[I dag kl.] LT',
            nextDay : '[I morgen kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[I går kl.] LT',
            lastWeek : '[sidste] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "%s siden",
            s : "få sekunder",
            m : "et minut",
            mm : "%d minutter",
            h : "en time",
            hh : "%d timer",
            d : "en dag",
            dd : "%d dage",
            M : "en måned",
            MM : "%d måneder",
            y : "et år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : austrian german (de-at)
// author : lluchs : https://github.com/lluchs
// author: Menelion Elensúle: https://github.com/Oire
// author : Martin Groller : https://github.com/MadMG

(function (factory) {
    factory(moment);
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    return moment.defineLocale('de-at', {
        months : "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort : "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays : "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort : "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin : "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        longDateFormat : {
            LT: "HH:mm [Uhr]",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Heute um] LT",
            sameElse: "L",
            nextDay: '[Morgen um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime : {
            future : "in %s",
            past : "vor %s",
            s : "ein paar Sekunden",
            m : processRelativeTime,
            mm : "%d Minuten",
            h : processRelativeTime,
            hh : "%d Stunden",
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : german (de)
// author : lluchs : https://github.com/lluchs
// author: Menelion Elensúle: https://github.com/Oire

(function (factory) {
    factory(moment);
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    return moment.defineLocale('de', {
        months : "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort : "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays : "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort : "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin : "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        longDateFormat : {
            LT: "HH:mm [Uhr]",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Heute um] LT",
            sameElse: "L",
            nextDay: '[Morgen um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime : {
            future : "in %s",
            past : "vor %s",
            s : "ein paar Sekunden",
            m : processRelativeTime,
            mm : "%d Minuten",
            h : processRelativeTime,
            hh : "%d Stunden",
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : modern greek (el)
// author : Aggelos Karalias : https://github.com/mehiel

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('el', {
        monthsNominativeEl : "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
        monthsGenitiveEl : "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
        months : function (momentToFormat, format) {
            if (/D/.test(format.substring(0, format.indexOf("MMMM")))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort : "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
        weekdays : "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
        weekdaysShort : "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
        weekdaysMin : "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendarEl : {
            sameDay : '[Σήμερα {}] LT',
            nextDay : '[Αύριο {}] LT',
            nextWeek : 'dddd [{}] LT',
            lastDay : '[Χθες {}] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();

            if (typeof output === 'function') {
                output = output.apply(mom);
            }

            return output.replace("{}", (hours % 12 === 1 ? "στη" : "στις"));
        },
        relativeTime : {
            future : "σε %s",
            past : "%s πριν",
            s : "δευτερόλεπτα",
            m : "ένα λεπτό",
            mm : "%d λεπτά",
            h : "μία ώρα",
            hh : "%d ώρες",
            d : "μία μέρα",
            dd : "%d μέρες",
            M : "ένας μήνας",
            MM : "%d μήνες",
            y : "ένας χρόνος",
            yy : "%d χρόνια"
        },
        ordinal : function (number) {
            return number + 'η';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : australian english (en-au)

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('en-au', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : canadian english (en-ca)
// author : Jonathan Abourbih : https://github.com/jonbca

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('en-ca', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "YYYY-MM-DD",
            LL : "D MMMM, YYYY",
            LLL : "D MMMM, YYYY LT",
            LLLL : "dddd, D MMMM, YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });
}));
// moment.js locale configuration
// locale : great britain english (en-gb)
// author : Chris Gedrim : https://github.com/chrisgedrim

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('en-gb', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : esperanto (eo)
// author : Colin Dean : https://github.com/colindean
// komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
//          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('eo', {
        months : "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
        weekdays : "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),
        weekdaysShort : "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D[-an de] MMMM, YYYY",
            LLL : "D[-an de] MMMM, YYYY LT",
            LLLL : "dddd, [la] D[-an de] MMMM, YYYY LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar : {
            sameDay : '[Hodiaŭ je] LT',
            nextDay : '[Morgaŭ je] LT',
            nextWeek : 'dddd [je] LT',
            lastDay : '[Hieraŭ je] LT',
            lastWeek : '[pasinta] dddd [je] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "je %s",
            past : "antaŭ %s",
            s : "sekundoj",
            m : "minuto",
            mm : "%d minutoj",
            h : "horo",
            hh : "%d horoj",
            d : "tago",//ne 'diurno', ĉar estas uzita por proksimumo
            dd : "%d tagoj",
            M : "monato",
            MM : "%d monatoj",
            y : "jaro",
            yy : "%d jaroj"
        },
        ordinal : "%da",
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : spanish (es)
// author : Julio Napurí : https://github.com/julionc

(function (factory) {
    factory(moment);
}(function (moment) {
    var monthsShortDot = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
        monthsShort = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");

    return moment.defineLocale('es', {
        months : "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        weekdays : "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort : "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin : "Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [del] YYYY",
            LLL : "D [de] MMMM [del] YYYY LT",
            LLLL : "dddd, D [de] MMMM [del] YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "en %s",
            past : "hace %s",
            s : "unos segundos",
            m : "un minuto",
            mm : "%d minutos",
            h : "una hora",
            hh : "%d horas",
            d : "un día",
            dd : "%d días",
            M : "un mes",
            MM : "%d meses",
            y : "un año",
            yy : "%d años"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : estonian (et)
// author : Henry Kehlmann : https://github.com/madhenry
// improvements : Illimar Tambek : https://github.com/ragulka

(function (factory) {
    factory(moment);
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'm' : ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd' : ['ühe päeva', 'üks päev'],
            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    return moment.defineLocale('et', {
        months        : "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
        monthsShort   : "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
        weekdays      : "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
        weekdaysShort : "P_E_T_K_N_R_L".split("_"),
        weekdaysMin   : "P_E_T_K_N_R_L".split("_"),
        longDateFormat : {
            LT   : "H:mm",
            L    : "DD.MM.YYYY",
            LL   : "D. MMMM YYYY",
            LLL  : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[Täna,] LT',
            nextDay  : '[Homme,] LT',
            nextWeek : '[Järgmine] dddd LT',
            lastDay  : '[Eile,] LT',
            lastWeek : '[Eelmine] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s pärast",
            past   : "%s tagasi",
            s      : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : '%d päeva',
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : euskara (eu)
// author : Eneko Illarramendi : https://github.com/eillarra

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('eu', {
        months : "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
        monthsShort : "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
        weekdays : "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
        weekdaysShort : "ig._al._ar._az._og._ol._lr.".split("_"),
        weekdaysMin : "ig_al_ar_az_og_ol_lr".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "YYYY[ko] MMMM[ren] D[a]",
            LLL : "YYYY[ko] MMMM[ren] D[a] LT",
            LLLL : "dddd, YYYY[ko] MMMM[ren] D[a] LT",
            l : "YYYY-M-D",
            ll : "YYYY[ko] MMM D[a]",
            lll : "YYYY[ko] MMM D[a] LT",
            llll : "ddd, YYYY[ko] MMM D[a] LT"
        },
        calendar : {
            sameDay : '[gaur] LT[etan]',
            nextDay : '[bihar] LT[etan]',
            nextWeek : 'dddd LT[etan]',
            lastDay : '[atzo] LT[etan]',
            lastWeek : '[aurreko] dddd LT[etan]',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s barru",
            past : "duela %s",
            s : "segundo batzuk",
            m : "minutu bat",
            mm : "%d minutu",
            h : "ordu bat",
            hh : "%d ordu",
            d : "egun bat",
            dd : "%d egun",
            M : "hilabete bat",
            MM : "%d hilabete",
            y : "urte bat",
            yy : "%d urte"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Persian
// author : Ebrahim Byagowi : https://github.com/ebraminio

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    }, numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    return moment.defineLocale('fa', {
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY LT',
            LLLL : 'dddd, D MMMM YYYY LT'
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "قبل از ظهر";
            } else {
                return "بعد از ظهر";
            }
        },
        calendar : {
            sameDay : '[امروز ساعت] LT',
            nextDay : '[فردا ساعت] LT',
            nextWeek : 'dddd [ساعت] LT',
            lastDay : '[دیروز ساعت] LT',
            lastWeek : 'dddd [پیش] [ساعت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'در %s',
            past : '%s پیش',
            s : 'چندین ثانیه',
            m : 'یک دقیقه',
            mm : '%d دقیقه',
            h : 'یک ساعت',
            hh : '%d ساعت',
            d : 'یک روز',
            dd : '%d روز',
            M : 'یک ماه',
            MM : '%d ماه',
            y : 'یک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        ordinal : '%dم',
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : finnish (fi)
// author : Tarmo Aidantausta : https://github.com/bleadof

(function (factory) {
    factory(moment);
}(function (moment) {
    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
        ];

    function translate(number, withoutSuffix, key, isFuture) {
        var result = "";
        switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'päivän' : 'päivä';
        case 'dd':
            result = isFuture ? 'päivän' : 'päivää';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
        }
        result = verbalNumber(number, isFuture) + " " + result;
        return result;
    }

    function verbalNumber(number, isFuture) {
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
    }

    return moment.defineLocale('fi', {
        months : "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
        monthsShort : "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
        weekdays : "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
        weekdaysShort : "su_ma_ti_ke_to_pe_la".split("_"),
        weekdaysMin : "su_ma_ti_ke_to_pe_la".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD.MM.YYYY",
            LL : "Do MMMM[ta] YYYY",
            LLL : "Do MMMM[ta] YYYY, [klo] LT",
            LLLL : "dddd, Do MMMM[ta] YYYY, [klo] LT",
            l : "D.M.YYYY",
            ll : "Do MMM YYYY",
            lll : "Do MMM YYYY, [klo] LT",
            llll : "ddd, Do MMM YYYY, [klo] LT"
        },
        calendar : {
            sameDay : '[tänään] [klo] LT',
            nextDay : '[huomenna] [klo] LT',
            nextWeek : 'dddd [klo] LT',
            lastDay : '[eilen] [klo] LT',
            lastWeek : '[viime] dddd[na] [klo] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s päästä",
            past : "%s sitten",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : "%d.",
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : faroese (fo)
// author : Ragnar Johannesen : https://github.com/ragnar123

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('fo', {
        months : "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays : "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
        weekdaysShort : "sun_mán_týs_mik_hós_frí_ley".split("_"),
        weekdaysMin : "su_má_tý_mi_hó_fr_le".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D. MMMM, YYYY LT"
        },
        calendar : {
            sameDay : '[Í dag kl.] LT',
            nextDay : '[Í morgin kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[Í gjár kl.] LT',
            lastWeek : '[síðstu] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "um %s",
            past : "%s síðani",
            s : "fá sekund",
            m : "ein minutt",
            mm : "%d minuttir",
            h : "ein tími",
            hh : "%d tímar",
            d : "ein dagur",
            dd : "%d dagar",
            M : "ein mánaði",
            MM : "%d mánaðir",
            y : "eitt ár",
            yy : "%d ár"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : canadian french (fr-ca)
// author : Jonathan Abourbih : https://github.com/jonbca

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('fr-ca', {
        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dans %s",
            past : "il y a %s",
            s : "quelques secondes",
            m : "une minute",
            mm : "%d minutes",
            h : "une heure",
            hh : "%d heures",
            d : "un jour",
            dd : "%d jours",
            M : "un mois",
            MM : "%d mois",
            y : "un an",
            yy : "%d ans"
        },
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : '');
        }
    });
}));
// moment.js locale configuration
// locale : french (fr)
// author : John Fischer : https://github.com/jfroffice

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('fr', {
        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dans %s",
            past : "il y a %s",
            s : "quelques secondes",
            m : "une minute",
            mm : "%d minutes",
            h : "une heure",
            hh : "%d heures",
            d : "un jour",
            dd : "%d jours",
            M : "un mois",
            MM : "%d mois",
            y : "un an",
            yy : "%d ans"
        },
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : '');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : galician (gl)
// author : Juan G. Hurtado : https://github.com/juanghurtado

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('gl', {
        months : "Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),
        monthsShort : "Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),
        weekdays : "Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),
        weekdaysShort : "Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),
        weekdaysMin : "Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay : function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay : function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek : function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : function (str) {
                if (str === "uns segundos") {
                    return "nuns segundos";
                }
                return "en " + str;
            },
            past : "hai %s",
            s : "uns segundos",
            m : "un minuto",
            mm : "%d minutos",
            h : "unha hora",
            hh : "%d horas",
            d : "un día",
            dd : "%d días",
            M : "un mes",
            MM : "%d meses",
            y : "un ano",
            yy : "%d anos"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Hebrew (he)
// author : Tomer Cohen : https://github.com/tomer
// author : Moshe Simantov : https://github.com/DevelopmentIL
// author : Tal Ater : https://github.com/TalAter

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('he', {
        months : "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
        monthsShort : "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
        weekdays : "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
        weekdaysShort : "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
        weekdaysMin : "א_ב_ג_ד_ה_ו_ש".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [ב]MMMM YYYY",
            LLL : "D [ב]MMMM YYYY LT",
            LLLL : "dddd, D [ב]MMMM YYYY LT",
            l : "D/M/YYYY",
            ll : "D MMM YYYY",
            lll : "D MMM YYYY LT",
            llll : "ddd, D MMM YYYY LT"
        },
        calendar : {
            sameDay : '[היום ב־]LT',
            nextDay : '[מחר ב־]LT',
            nextWeek : 'dddd [בשעה] LT',
            lastDay : '[אתמול ב־]LT',
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "בעוד %s",
            past : "לפני %s",
            s : "מספר שניות",
            m : "דקה",
            mm : "%d דקות",
            h : "שעה",
            hh : function (number) {
                if (number === 2) {
                    return "שעתיים";
                }
                return number + " שעות";
            },
            d : "יום",
            dd : function (number) {
                if (number === 2) {
                    return "יומיים";
                }
                return number + " ימים";
            },
            M : "חודש",
            MM : function (number) {
                if (number === 2) {
                    return "חודשיים";
                }
                return number + " חודשים";
            },
            y : "שנה",
            yy : function (number) {
                if (number === 2) {
                    return "שנתיים";
                }
                return number + " שנים";
            }
        }
    });
}));
// moment.js locale configuration
// locale : hindi (hi)
// author : Mayank Singhal : https://github.com/mayanksinghal

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.defineLocale('hi', {
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split("_"),
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split("_"),
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split("_"),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
        longDateFormat : {
            LT : "A h:mm बजे",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[कल] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[कल] LT',
            lastWeek : '[पिछले] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s में",
            past : "%s पहले",
            s : "कुछ ही क्षण",
            m : "एक मिनट",
            mm : "%d मिनट",
            h : "एक घंटा",
            hh : "%d घंटे",
            d : "एक दिन",
            dd : "%d दिन",
            M : "एक महीने",
            MM : "%d महीने",
            y : "एक वर्ष",
            yy : "%d वर्ष"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "रात";
            } else if (hour < 10) {
                return "सुबह";
            } else if (hour < 17) {
                return "दोपहर";
            } else if (hour < 20) {
                return "शाम";
            } else {
                return "रात";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : hrvatski (hr)
// author : Bojan Marković : https://github.com/bmarkovic

// based on (sl) translation by Robert Sedovšek

(function (factory) {
    factory(moment);
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    return moment.defineLocale('hr', {
        months : "sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),
        monthsShort : "sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "prije %s",
            s      : "par sekundi",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "dan",
            dd     : translate,
            M      : "mjesec",
            MM     : translate,
            y      : "godinu",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : hungarian (hu)
// author : Adam Brunner : https://github.com/adambrunner

(function (factory) {
    factory(moment);
}(function (moment) {
    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

    function translate(number, withoutSuffix, key, isFuture) {
        var num = number,
            suffix;

        switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }

        return '';
    }

    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    return moment.defineLocale('hu', {
        months : "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
        monthsShort : "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
        weekdays : "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
        weekdaysShort : "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
        weekdaysMin : "v_h_k_sze_cs_p_szo".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "YYYY.MM.DD.",
            LL : "YYYY. MMMM D.",
            LLL : "YYYY. MMMM D., LT",
            LLLL : "YYYY. MMMM D., dddd LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar : {
            sameDay : '[ma] LT[-kor]',
            nextDay : '[holnap] LT[-kor]',
            nextWeek : function () {
                return week.call(this, true);
            },
            lastDay : '[tegnap] LT[-kor]',
            lastWeek : function () {
                return week.call(this, false);
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s múlva",
            past : "%s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Armenian (hy-am)
// author : Armendarabyan : https://github.com/armendarabyan

(function (factory) {
    factory(moment);
}(function (moment) {
    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
            'accusative': 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function monthsShortCaseReplace(m, format) {
        var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');

        return monthsShort[m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');

        return weekdays[m.day()];
    }

    return moment.defineLocale('hy-am', {
        months : monthsCaseReplace,
        monthsShort : monthsShortCaseReplace,
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        weekdaysMin : "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY թ.",
            LLL : "D MMMM YYYY թ., LT",
            LLLL : "dddd, D MMMM YYYY թ., LT"
        },
        calendar : {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "%s հետո",
            past : "%s առաջ",
            s : "մի քանի վայրկյան",
            m : "րոպե",
            mm : "%d րոպե",
            h : "ժամ",
            hh : "%d ժամ",
            d : "օր",
            dd : "%d օր",
            M : "ամիս",
            MM : "%d ամիս",
            y : "տարի",
            yy : "%d տարի"
        },

        meridiem : function (hour) {
            if (hour < 4) {
                return "գիշերվա";
            } else if (hour < 12) {
                return "առավոտվա";
            } else if (hour < 17) {
                return "ցերեկվա";
            } else {
                return "երեկոյան";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-ին';
                }
                return number + '-րդ';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Bahasa Indonesia (id)
// author : Mohammad Satrio Utomo : https://github.com/tyok
// reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('id', {
        months : "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
        weekdays : "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
        weekdaysShort : "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
        weekdaysMin : "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY [pukul] LT",
            LLLL : "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Besok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kemarin pukul] LT',
            lastWeek : 'dddd [lalu pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "dalam %s",
            past : "%s yang lalu",
            s : "beberapa detik",
            m : "semenit",
            mm : "%d menit",
            h : "sejam",
            hh : "%d jam",
            d : "sehari",
            dd : "%d hari",
            M : "sebulan",
            MM : "%d bulan",
            y : "setahun",
            yy : "%d tahun"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : icelandic (is)
// author : Hinrik Örn Sigurðsson : https://github.com/hinrik

(function (factory) {
    factory(moment);
}(function (moment) {
    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
        case 'm':
            return withoutSuffix ? 'mínúta' : 'mínútu';
        case 'mm':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
            } else if (withoutSuffix) {
                return result + 'mínúta';
            }
            return result + 'mínútu';
        case 'hh':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mánuður';
            }
            return isFuture ? 'mánuð' : 'mánuði';
        case 'MM':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
            } else if (withoutSuffix) {
                return result + 'mánuður';
            }
            return result + (isFuture ? 'mánuð' : 'mánuði');
        case 'y':
            return withoutSuffix || isFuture ? 'ár' : 'ári';
        case 'yy':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
            }
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    return moment.defineLocale('is', {
        months : "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
        weekdays : "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
        weekdaysShort : "sun_mán_þri_mið_fim_fös_lau".split("_"),
        weekdaysMin : "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY [kl.] LT",
            LLLL : "dddd, D. MMMM YYYY [kl.] LT"
        },
        calendar : {
            sameDay : '[í dag kl.] LT',
            nextDay : '[á morgun kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[í gær kl.] LT',
            lastWeek : '[síðasta] dddd [kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "eftir %s",
            past : "fyrir %s síðan",
            s : translate,
            m : translate,
            mm : translate,
            h : "klukkustund",
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : italian (it)
// author : Lorenzo : https://github.com/aliem
// author: Mattia Larentis: https://github.com/nostalgiaz

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('it', {
        months : "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
        monthsShort : "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
        weekdays : "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),
        weekdaysShort : "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
        weekdaysMin : "D_L_Ma_Me_G_V_S".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: '[lo scorso] dddd [alle] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? "tra" : "in") + " " + s;
            },
            past : "%s fa",
            s : "alcuni secondi",
            m : "un minuto",
            mm : "%d minuti",
            h : "un'ora",
            hh : "%d ore",
            d : "un giorno",
            dd : "%d giorni",
            M : "un mese",
            MM : "%d mesi",
            y : "un anno",
            yy : "%d anni"
        },
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : japanese (ja)
// author : LI Long : https://github.com/baryon

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('ja', {
        months : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
        weekdaysShort : "日_月_火_水_木_金_土".split("_"),
        weekdaysMin : "日_月_火_水_木_金_土".split("_"),
        longDateFormat : {
            LT : "Ah時m分",
            L : "YYYY/MM/DD",
            LL : "YYYY年M月D日",
            LLL : "YYYY年M月D日LT",
            LLLL : "YYYY年M月D日LT dddd"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "午前";
            } else {
                return "午後";
            }
        },
        calendar : {
            sameDay : '[今日] LT',
            nextDay : '[明日] LT',
            nextWeek : '[来週]dddd LT',
            lastDay : '[昨日] LT',
            lastWeek : '[前週]dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s後",
            past : "%s前",
            s : "数秒",
            m : "1分",
            mm : "%d分",
            h : "1時間",
            hh : "%d時間",
            d : "1日",
            dd : "%d日",
            M : "1ヶ月",
            MM : "%dヶ月",
            y : "1年",
            yy : "%d年"
        }
    });
}));
// moment.js locale configuration
// locale : Georgian (ka)
// author : Irakli Janiashvili : https://github.com/irakli-janiashvili

(function (factory) {
    factory(moment);
}(function (moment) {
    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },

        nounCase = (/D[oD] *MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
        },

        nounCase = (/(წინა|შემდეგ)/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.defineLocale('ka', {
        months : monthsCaseReplace,
        monthsShort : "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
        weekdaysMin : "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[დღეს] LT[-ზე]',
            nextDay : '[ხვალ] LT[-ზე]',
            lastDay : '[გუშინ] LT[-ზე]',
            nextWeek : '[შემდეგ] dddd LT[-ზე]',
            lastWeek : '[წინა] dddd LT-ზე',
            sameElse : 'L'
        },
        relativeTime : {
            future : function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, "ში") :
                    s + "ში";
            },
            past : function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, "ის წინ");
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, "წლის წინ");
                }
            },
            s : "რამდენიმე წამი",
            m : "წუთი",
            mm : "%d წუთი",
            h : "საათი",
            hh : "%d საათი",
            d : "დღე",
            dd : "%d დღე",
            M : "თვე",
            MM : "%d თვე",
            y : "წელი",
            yy : "%d წელი"
        },
        ordinal : function (number) {
            if (number === 0) {
                return number;
            }

            if (number === 1) {
                return number + "-ლი";
            }

            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return "მე-" + number;
            }

            return number + "-ე";
        },
        week : {
            dow : 1,
            doy : 7
        }
    });
}));
// moment.js locale configuration
// locale : khmer (km)
// author : Kruy Vanna : https://github.com/kruyvanna

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('km', {
        months: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        monthsShort: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY LT",
            LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: "%sទៀត",
            past: "%sមុន",
            s: "ប៉ុន្មានវិនាទី",
            m: "មួយនាទី",
            mm: "%d នាទី",
            h: "មួយម៉ោង",
            hh: "%d ម៉ោង",
            d: "មួយថ្ងៃ",
            dd: "%d ថ្ងៃ",
            M: "មួយខែ",
            MM: "%d ខែ",
            y: "មួយឆ្នាំ",
            yy: "%d ឆ្នាំ"
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : korean (ko)
//
// authors
//
// - Kyungwook, Park : https://github.com/kyungw00k
// - Jeeeyul Lee <jeeeyul@gmail.com>
(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('ko', {
        months : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        monthsShort : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        weekdays : "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
        weekdaysShort : "일_월_화_수_목_금_토".split("_"),
        weekdaysMin : "일_월_화_수_목_금_토".split("_"),
        longDateFormat : {
            LT : "A h시 mm분",
            L : "YYYY.MM.DD",
            LL : "YYYY년 MMMM D일",
            LLL : "YYYY년 MMMM D일 LT",
            LLLL : "YYYY년 MMMM D일 dddd LT"
        },
        meridiem : function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        },
        calendar : {
            sameDay : '오늘 LT',
            nextDay : '내일 LT',
            nextWeek : 'dddd LT',
            lastDay : '어제 LT',
            lastWeek : '지난주 dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s 후",
            past : "%s 전",
            s : "몇초",
            ss : "%d초",
            m : "일분",
            mm : "%d분",
            h : "한시간",
            hh : "%d시간",
            d : "하루",
            dd : "%d일",
            M : "한달",
            MM : "%d달",
            y : "일년",
            yy : "%d년"
        },
        ordinal : '%d일',
        meridiemParse : /(오전|오후)/,
        isPM : function (token) {
            return token === "오후";
        }
    });
}));
// moment.js locale configuration
// locale : Luxembourgish (lb)
// author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

// Note: Luxembourgish has a very particular phonological rule ("Eifeler Regel") that causes the
// deletion of the final "n" in certain contexts. That's what the "eifelerRegelAppliesToWeekday"
// and "eifelerRegelAppliesToNumber" methods are meant for

(function (factory) {
    factory(moment);
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return "a " + string;
        }
        return "an " + string;
    }

    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return "viru " + string;
        }
        return "virun " + string;
    }

    /**
     * Returns true if the word before the given number loses the "-n" ending.
     * e.g. "an 10 Deeg" but "a 5 Deeg"
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10, firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    return moment.defineLocale('lb', {
        months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
        weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "H:mm [Auer]",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY LT",
            LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
            sameDay: "[Haut um] LT",
            sameElse: "L",
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for "Dënschdeg" (Tuesday) and "Donneschdeg" (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime : {
            future : processFutureTime,
            past : processPastTime,
            s : "e puer Sekonnen",
            m : processRelativeTime,
            mm : "%d Minutten",
            h : processRelativeTime,
            hh : "%d Stonnen",
            d : processRelativeTime,
            dd : "%d Deeg",
            M : processRelativeTime,
            MM : "%d Méint",
            y : processRelativeTime,
            yy : "%d Joer"
        },
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Lithuanian (lt)
// author : Mindaugas Mozūras : https://github.com/mmozuras

(function (factory) {
    factory(moment);
}(function (moment) {
    var units = {
        "m" : "minutė_minutės_minutę",
        "mm": "minutės_minučių_minutes",
        "h" : "valanda_valandos_valandą",
        "hh": "valandos_valandų_valandas",
        "d" : "diena_dienos_dieną",
        "dd": "dienos_dienų_dienas",
        "M" : "mėnuo_mėnesio_mėnesį",
        "MM": "mėnesiai_mėnesių_mėnesius",
        "y" : "metai_metų_metus",
        "yy": "metai_metų_metus"
    },
    weekDays = "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");

    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return "kelios sekundės";
        } else {
            return isFuture ? "kelių sekundžių" : "kelias sekundes";
        }
    }

    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }

    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }

    function forms(key) {
        return units[key].split("_");
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }

    function relativeWeekDay(moment, format) {
        var nominative = format.indexOf('dddd HH:mm') === -1,
            weekDay = weekDays[moment.day()];

        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + "į";
    }

    return moment.defineLocale("lt", {
        months : "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
        monthsShort : "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
        weekdays : relativeWeekDay,
        weekdaysShort : "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
        weekdaysMin : "S_P_A_T_K_Pn_Š".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "YYYY [m.] MMMM D [d.]",
            LLL : "YYYY [m.] MMMM D [d.], LT [val.]",
            LLLL : "YYYY [m.] MMMM D [d.], dddd, LT [val.]",
            l : "YYYY-MM-DD",
            ll : "YYYY [m.] MMMM D [d.]",
            lll : "YYYY [m.] MMMM D [d.], LT [val.]",
            llll : "YYYY [m.] MMMM D [d.], ddd, LT [val.]"
        },
        calendar : {
            sameDay : "[Šiandien] LT",
            nextDay : "[Rytoj] LT",
            nextWeek : "dddd LT",
            lastDay : "[Vakar] LT",
            lastWeek : "[Praėjusį] dddd LT",
            sameElse : "L"
        },
        relativeTime : {
            future : "po %s",
            past : "prieš %s",
            s : translateSeconds,
            m : translateSingular,
            mm : translate,
            h : translateSingular,
            hh : translate,
            d : translateSingular,
            dd : translate,
            M : translateSingular,
            MM : translate,
            y : translateSingular,
            yy : translate
        },
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : latvian (lv)
// author : Kristaps Karlsons : https://github.com/skakri

(function (factory) {
    factory(moment);
}(function (moment) {
    var units = {
        'mm': 'minūti_minūtes_minūte_minūtes',
        'hh': 'stundu_stundas_stunda_stundas',
        'dd': 'dienu_dienas_diena_dienas',
        'MM': 'mēnesi_mēnešus_mēnesis_mēneši',
        'yy': 'gadu_gadus_gads_gadi'
    };

    function format(word, number, withoutSuffix) {
        var forms = word.split('_');
        if (withoutSuffix) {
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }

    return moment.defineLocale('lv', {
        months : "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
        weekdays : "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
        weekdaysShort : "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysMin : "Sv_P_O_T_C_Pk_S".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "YYYY. [gada] D. MMMM",
            LLL : "YYYY. [gada] D. MMMM, LT",
            LLLL : "YYYY. [gada] D. MMMM, dddd, LT"
        },
        calendar : {
            sameDay : '[Šodien pulksten] LT',
            nextDay : '[Rīt pulksten] LT',
            nextWeek : 'dddd [pulksten] LT',
            lastDay : '[Vakar pulksten] LT',
            lastWeek : '[Pagājušā] dddd [pulksten] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s vēlāk",
            past : "%s agrāk",
            s : "dažas sekundes",
            m : "minūti",
            mm : relativeTimeWithPlural,
            h : "stundu",
            hh : relativeTimeWithPlural,
            d : "dienu",
            dd : relativeTimeWithPlural,
            M : "mēnesi",
            MM : relativeTimeWithPlural,
            y : "gadu",
            yy : relativeTimeWithPlural
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : macedonian (mk)
// author : Borislav Mickov : https://github.com/B0k0

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('mk', {
        months : "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
        monthsShort : "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
        weekdays : "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
        weekdaysShort : "нед_пон_вто_сре_чет_пет_саб".split("_"),
        weekdaysMin : "нe_пo_вт_ср_че_пе_сa".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "D.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Денес во] LT',
            nextDay : '[Утре во] LT',
            nextWeek : 'dddd [во] LT',
            lastDay : '[Вчера во] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[Во изминатата] dddd [во] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Во изминатиот] dddd [во] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "после %s",
            past : "пред %s",
            s : "неколку секунди",
            m : "минута",
            mm : "%d минути",
            h : "час",
            hh : "%d часа",
            d : "ден",
            dd : "%d дена",
            M : "месец",
            MM : "%d месеци",
            y : "година",
            yy : "%d години"
        },
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : malayalam (ml)
// author : Floyd Pink : https://github.com/floydpink

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('ml', {
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split("_"),
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split("_"),
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split("_"),
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split("_"),
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split("_"),
        longDateFormat : {
            LT : "A h:mm -നു",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[ഇന്ന്] LT',
            nextDay : '[നാളെ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ഇന്നലെ] LT',
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s കഴിഞ്ഞ്",
            past : "%s മുൻപ്",
            s : "അൽപ നിമിഷങ്ങൾ",
            m : "ഒരു മിനിറ്റ്",
            mm : "%d മിനിറ്റ്",
            h : "ഒരു മണിക്കൂർ",
            hh : "%d മണിക്കൂർ",
            d : "ഒരു ദിവസം",
            dd : "%d ദിവസം",
            M : "ഒരു മാസം",
            MM : "%d മാസം",
            y : "ഒരു വർഷം",
            yy : "%d വർഷം"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "രാത്രി";
            } else if (hour < 12) {
                return "രാവിലെ";
            } else if (hour < 17) {
                return "ഉച്ച കഴിഞ്ഞ്";
            } else if (hour < 20) {
                return "വൈകുന്നേരം";
            } else {
                return "രാത്രി";
            }
        }
    });
}));
// moment.js locale configuration
// locale : Marathi (mr)
// author : Harshad Kale : https://github.com/kalehv

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.defineLocale('mr', {
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split("_"),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split("_"),
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split("_"),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
        longDateFormat : {
            LT : "A h:mm वाजता",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[उद्या] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s नंतर",
            past : "%s पूर्वी",
            s : "सेकंद",
            m: "एक मिनिट",
            mm: "%d मिनिटे",
            h : "एक तास",
            hh : "%d तास",
            d : "एक दिवस",
            dd : "%d दिवस",
            M : "एक महिना",
            MM : "%d महिने",
            y : "एक वर्ष",
            yy : "%d वर्षे"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem: function (hour, minute, isLower)
        {
            if (hour < 4) {
                return "रात्री";
            } else if (hour < 10) {
                return "सकाळी";
            } else if (hour < 17) {
                return "दुपारी";
            } else if (hour < 20) {
                return "सायंकाळी";
            } else {
                return "रात्री";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Bahasa Malaysia (ms-MY)
// author : Weldan Jamili : https://github.com/weldan

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('ms-my', {
        months : "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort : "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays : "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort : "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin : "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY [pukul] LT",
            LLLL : "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "dalam %s",
            past : "%s yang lepas",
            s : "beberapa saat",
            m : "seminit",
            mm : "%d minit",
            h : "sejam",
            hh : "%d jam",
            d : "sehari",
            dd : "%d hari",
            M : "sebulan",
            MM : "%d bulan",
            y : "setahun",
            yy : "%d tahun"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Burmese (my)
// author : Squar team, mysquar.com

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    }, numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };
    return moment.defineLocale('my', {
        months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),
        monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),
        weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),
        weekdaysShort: "နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        weekdaysMin: "နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY LT",
            LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: "လာမည့် %s မှာ",
            past: "လွန်ခဲ့သော %s က",
            s: "စက္ကန်.အနည်းငယ်",
            m: "တစ်မိနစ်",
            mm: "%d မိနစ်",
            h: "တစ်နာရီ",
            hh: "%d နာရီ",
            d: "တစ်ရက်",
            dd: "%d ရက်",
            M: "တစ်လ",
            MM: "%d လ",
            y: "တစ်နှစ်",
            yy: "%d နှစ်"
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : norwegian bokmål (nb)
// authors : Espen Hovlandsdal : https://github.com/rexxars
//           Sigurd Gartmann : https://github.com/sigurdga

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('nb', {
        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort : "sø._ma._ti._on._to._fr._lø.".split("_"),
        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "H.mm",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY [kl.] LT",
            LLLL : "dddd D. MMMM YYYY [kl.] LT"
        },
        calendar : {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "for %s siden",
            s : "noen sekunder",
            m : "ett minutt",
            mm : "%d minutter",
            h : "en time",
            hh : "%d timer",
            d : "en dag",
            dd : "%d dager",
            M : "en måned",
            MM : "%d måneder",
            y : "ett år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : nepali/nepalese
// author : suvash : https://github.com/suvash

(function (factory) {
    factory(moment);
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.defineLocale('ne', {
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split("_"),
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split("_"),
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split("_"),
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split("_"),
        weekdaysMin : 'आइ._सो._मङ्_बु._बि._शु._श.'.split("_"),
        longDateFormat : {
            LT : "Aको h:mm बजे",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 3) {
                return "राती";
            } else if (hour < 10) {
                return "बिहान";
            } else if (hour < 15) {
                return "दिउँसो";
            } else if (hour < 18) {
                return "बेलुका";
            } else if (hour < 20) {
                return "साँझ";
            } else {
                return "राती";
            }
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[भोली] LT',
            nextWeek : '[आउँदो] dddd[,] LT',
            lastDay : '[हिजो] LT',
            lastWeek : '[गएको] dddd[,] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%sमा",
            past : "%s अगाडी",
            s : "केही समय",
            m : "एक मिनेट",
            mm : "%d मिनेट",
            h : "एक घण्टा",
            hh : "%d घण्टा",
            d : "एक दिन",
            dd : "%d दिन",
            M : "एक महिना",
            MM : "%d महिना",
            y : "एक बर्ष",
            yy : "%d बर्ष"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : dutch (nl)
// author : Joris Röling : https://github.com/jjupiter

(function (factory) {
    factory(moment);
}(function (moment) {
    var monthsShortWithDots = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
        monthsShortWithoutDots = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");

    return moment.defineLocale('nl', {
        months : "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        weekdays : "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort : "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin : "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD-MM-YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "over %s",
            past : "%s geleden",
            s : "een paar seconden",
            m : "één minuut",
            mm : "%d minuten",
            h : "één uur",
            hh : "%d uur",
            d : "één dag",
            dd : "%d dagen",
            M : "één maand",
            MM : "%d maanden",
            y : "één jaar",
            yy : "%d jaar"
        },
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : norwegian nynorsk (nn)
// author : https://github.com/mechuwind

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('nn', {
        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays : "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
        weekdaysShort : "sun_mån_tys_ons_tor_fre_lau".split("_"),
        weekdaysMin : "su_må_ty_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "for %s sidan",
            s : "nokre sekund",
            m : "eit minutt",
            mm : "%d minutt",
            h : "ein time",
            hh : "%d timar",
            d : "ein dag",
            dd : "%d dagar",
            M : "ein månad",
            MM : "%d månader",
            y : "eit år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : polish (pl)
// author : Rafal Hirsz : https://github.com/evoL

(function (factory) {
    factory(moment);
}(function (moment) {
    var monthsNominative = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),
        monthsSubjective = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");

    function plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
    }

    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutę';
        case 'mm':
            return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinę';
        case 'hh':
            return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural(number) ? 'miesiące' : 'miesięcy');
        case 'yy':
            return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    return moment.defineLocale('pl', {
        months : function (momentToFormat, format) {
            if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort : "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
        weekdays : "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
        weekdaysShort : "nie_pon_wt_śr_czw_pt_sb".split("_"),
        weekdaysMin : "N_Pn_Wt_Śr_Cz_Pt_So".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: '[W] dddd [o] LT',
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[W zeszłą niedzielę o] LT';
                case 3:
                    return '[W zeszłą środę o] LT';
                case 6:
                    return '[W zeszłą sobotę o] LT';
                default:
                    return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "za %s",
            past : "%s temu",
            s : "kilka sekund",
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : "1 dzień",
            dd : '%d dni',
            M : "miesiąc",
            MM : translate,
            y : "rok",
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : brazilian portuguese (pt-br)
// author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('pt-br', {
        months : "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
        monthsShort : "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
        weekdays : "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
        weekdaysShort : "dom_seg_ter_qua_qui_sex_sáb".split("_"),
        weekdaysMin : "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [de] YYYY",
            LLL : "D [de] MMMM [de] YYYY [às] LT",
            LLLL : "dddd, D [de] MMMM [de] YYYY [às] LT"
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "em %s",
            past : "%s atrás",
            s : "segundos",
            m : "um minuto",
            mm : "%d minutos",
            h : "uma hora",
            hh : "%d horas",
            d : "um dia",
            dd : "%d dias",
            M : "um mês",
            MM : "%d meses",
            y : "um ano",
            yy : "%d anos"
        },
        ordinal : '%dº'
    });
}));
// moment.js locale configuration
// locale : portuguese (pt)
// author : Jefferson : https://github.com/jalex79

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('pt', {
        months : "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
        monthsShort : "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
        weekdays : "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
        weekdaysShort : "dom_seg_ter_qua_qui_sex_sáb".split("_"),
        weekdaysMin : "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [de] YYYY",
            LLL : "D [de] MMMM [de] YYYY LT",
            LLLL : "dddd, D [de] MMMM [de] YYYY LT"
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "em %s",
            past : "há %s",
            s : "segundos",
            m : "um minuto",
            mm : "%d minutos",
            h : "uma hora",
            hh : "%d horas",
            d : "um dia",
            dd : "%d dias",
            M : "um mês",
            MM : "%d meses",
            y : "um ano",
            yy : "%d anos"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : romanian (ro)
// author : Vlad Gurdiga : https://github.com/gurdiga
// author : Valentin Agachi : https://github.com/avaly

(function (factory) {
    factory(moment);
}(function (moment) {
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }

        return number + separator + format[key];
    }

    return moment.defineLocale('ro', {
        months : "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
        monthsShort : "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
        weekdays : "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
        weekdaysShort : "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
        weekdaysMin : "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY H:mm",
            LLLL : "dddd, D MMMM YYYY H:mm"
        },
        calendar : {
            sameDay: "[azi la] LT",
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "peste %s",
            past : "%s în urmă",
            s : "câteva secunde",
            m : "un minut",
            mm : relativeTimeWithPlural,
            h : "o oră",
            hh : relativeTimeWithPlural,
            d : "o zi",
            dd : relativeTimeWithPlural,
            M : "o lună",
            MM : relativeTimeWithPlural,
            y : "un an",
            yy : relativeTimeWithPlural
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : russian (ru)
// author : Viktorminator : https://github.com/Viktorminator
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    factory(moment);
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function monthsShortCaseReplace(m, format) {
        var monthsShort = {
            'nominative': 'янв_фев_мар_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return monthsShort[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
        },

        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.defineLocale('ru', {
        months : monthsCaseReplace,
        monthsShort : monthsShortCaseReplace,
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "вс_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin : "вс_пн_вт_ср_чт_пт_сб".split("_"),
        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY г.",
            LLL : "D MMMM YYYY г., LT",
            LLLL : "dddd, D MMMM YYYY г., LT"
        },
        calendar : {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function () {
                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[В прошлое] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                    return '[В прошлый] dddd [в] LT';
                case 3:
                case 5:
                case 6:
                    return '[В прошлую] dddd [в] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "через %s",
            past : "%s назад",
            s : "несколько секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : "час",
            hh : relativeTimeWithPlural,
            d : "день",
            dd : relativeTimeWithPlural,
            M : "месяц",
            MM : relativeTimeWithPlural,
            y : "год",
            yy : relativeTimeWithPlural
        },

        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM : function (input) {
            return /^(дня|вечера)$/.test(input);
        },

        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночи";
            } else if (hour < 12) {
                return "утра";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечера";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : slovak (sk)
// author : Martin Minka : https://github.com/k2s
// based on work of petrbela : https://github.com/petrbela

(function (factory) {
    factory(moment);
}(function (moment) {
    var months = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),
        monthsShort = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");

    function plural(n) {
        return (n > 1) && (n < 5);
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
            } else {
                return result + 'minútami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
            } else {
                return result + 'dňami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
        }
    }

    return moment.defineLocale('sk', {
        months : months,
        monthsShort : monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort)),
        weekdays : "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
        weekdaysShort : "ne_po_ut_st_št_pi_so".split("_"),
        weekdaysMin : "ne_po_ut_st_št_pi_so".split("_"),
        longDateFormat : {
            LT: "H:mm",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[dnes o] LT",
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v nedeľu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo štvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                    return '[minulý] dddd [o] LT';
                case 3:
                    return '[minulú stredu o] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [o] LT';
                case 6:
                    return '[minulú sobotu o] LT';
                }
            },
            sameElse: "L"
        },
        relativeTime : {
            future : "za %s",
            past : "pred %s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : slovenian (sl)
// author : Robert Sedovšek : https://github.com/sedovsek

(function (factory) {
    factory(moment);
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2) {
                result += 'minuti';
            } else if (number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minut';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += 'ura';
            } else if (number === 2) {
                result += 'uri';
            } else if (number === 3 || number === 4) {
                result += 'ure';
            } else {
                result += 'ur';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dni';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mesec';
            } else if (number === 2) {
                result += 'meseca';
            } else if (number === 3 || number === 4) {
                result += 'mesece';
            } else {
                result += 'mesecev';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'leto';
            } else if (number === 2) {
                result += 'leti';
            } else if (number === 3 || number === 4) {
                result += 'leta';
            } else {
                result += 'let';
            }
            return result;
        }
    }

    return moment.defineLocale('sl', {
        months : "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
        monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays : "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
        weekdaysShort : "ned._pon._tor._sre._čet._pet._sob.".split("_"),
        weekdaysMin : "ne_po_to_sr_če_pe_so".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danes ob] LT',
            nextDay  : '[jutri ob] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
                }
            },
            lastDay  : '[včeraj ob] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[prejšnja] dddd [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "čez %s",
            past   : "%s nazaj",
            s      : "nekaj sekund",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "en dan",
            dd     : translate,
            M      : "en mesec",
            MM     : translate,
            y      : "eno leto",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Albanian (sq)
// author : Flakërim Ismani : https://github.com/flakerimi
// author: Menelion Elensúle: https://github.com/Oire (tests)
// author : Oerd Cukalla : https://github.com/oerd (fixes)

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('sq', {
        months : "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
        monthsShort : "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
        weekdays : "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
        weekdaysShort : "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
        weekdaysMin : "D_H_Ma_Më_E_P_Sh".split("_"),
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Sot në] LT',
            nextDay : '[Nesër në] LT',
            nextWeek : 'dddd [në] LT',
            lastDay : '[Dje në] LT',
            lastWeek : 'dddd [e kaluar në] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "në %s",
            past : "%s më parë",
            s : "disa sekonda",
            m : "një minutë",
            mm : "%d minuta",
            h : "një orë",
            hh : "%d orë",
            d : "një ditë",
            dd : "%d ditë",
            M : "një muaj",
            MM : "%d muaj",
            y : "një vit",
            yy : "%d vite"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Serbian-cyrillic (sr-cyrl)
// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

(function (factory) {
    factory(moment);
}(function (moment) {
    var translator = {
        words: { //Different grammatical cases
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    return moment.defineLocale('sr-cyrl', {
        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
        longDateFormat: {
            LT: "H:mm",
            L: "DD. MM. YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY LT",
            LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',

            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[у] [недељу] [у] LT';
                case 3:
                    return '[у] [среду] [у] LT';
                case 6:
                    return '[у] [суботу] [у] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[у] dddd [у] LT';
                }
            },
            lastDay  : '[јуче у] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "за %s",
            past   : "пре %s",
            s      : "неколико секунди",
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : "дан",
            dd     : translator.translate,
            M      : "месец",
            MM     : translator.translate,
            y      : "годину",
            yy     : translator.translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Serbian-latin (sr)
// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

(function (factory) {
    factory(moment);
}(function (moment) {
    var translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    return moment.defineLocale('sr', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: "H:mm",
            L: "DD. MM. YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY LT",
            LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "pre %s",
            s      : "nekoliko sekundi",
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : "dan",
            dd     : translator.translate,
            M      : "mesec",
            MM     : translator.translate,
            y      : "godinu",
            yy     : translator.translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : swedish (sv)
// author : Jens Alm : https://github.com/ulmus

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('sv', {
        months : "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays : "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
        weekdaysShort : "sön_mån_tis_ons_tor_fre_lör".split("_"),
        weekdaysMin : "sö_må_ti_on_to_fr_lö".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: 'dddd LT',
            lastWeek: '[Förra] dddd[en] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "för %s sedan",
            s : "några sekunder",
            m : "en minut",
            mm : "%d minuter",
            h : "en timme",
            hh : "%d timmar",
            d : "en dag",
            dd : "%d dagar",
            M : "en månad",
            MM : "%d månader",
            y : "ett år",
            yy : "%d år"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : tamil (ta)
// author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

(function (factory) {
    factory(moment);
}(function (moment) {
    /*var symbolMap = {
            '1': '௧',
            '2': '௨',
            '3': '௩',
            '4': '௪',
            '5': '௫',
            '6': '௬',
            '7': '௭',
            '8': '௮',
            '9': '௯',
            '0': '௦'
        },
        numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0'
        }; */

    return moment.defineLocale('ta', {
        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split("_"),
        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split("_"),
        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split("_"),
        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split("_"),
        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[இன்று] LT',
            nextDay : '[நாளை] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[நேற்று] LT',
            lastWeek : '[கடந்த வாரம்] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s இல்",
            past : "%s முன்",
            s : "ஒரு சில விநாடிகள்",
            m : "ஒரு நிமிடம்",
            mm : "%d நிமிடங்கள்",
            h : "ஒரு மணி நேரம்",
            hh : "%d மணி நேரம்",
            d : "ஒரு நாள்",
            dd : "%d நாட்கள்",
            M : "ஒரு மாதம்",
            MM : "%d மாதங்கள்",
            y : "ஒரு வருடம்",
            yy : "%d ஆண்டுகள்"
        },
/*        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },*/
        ordinal : function (number) {
            return number + 'வது';
        },


        // refer http://ta.wikipedia.org/s/1er1

        meridiem : function (hour, minute, isLower) {
            if (hour >= 6 && hour <= 10) {
                return " காலை";
            } else if (hour >= 10 && hour <= 14) {
                return " நண்பகல்";
            } else if (hour >= 14 && hour <= 18) {
                return " எற்பாடு";
            } else if (hour >= 18 && hour <= 20) {
                return " மாலை";
            } else if (hour >= 20 && hour <= 24) {
                return " இரவு";
            } else if (hour >= 0 && hour <= 6) {
                return " வைகறை";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : thai (th)
// author : Kridsada Thanabulpong : https://github.com/sirn

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('th', {
        months : "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
        monthsShort : "มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),
        weekdays : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
        weekdaysShort : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), // yes, three characters difference
        weekdaysMin : "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
        longDateFormat : {
            LT : "H นาฬิกา m นาที",
            L : "YYYY/MM/DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY เวลา LT",
            LLLL : "วันddddที่ D MMMM YYYY เวลา LT"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "ก่อนเที่ยง";
            } else {
                return "หลังเที่ยง";
            }
        },
        calendar : {
            sameDay : '[วันนี้ เวลา] LT',
            nextDay : '[พรุ่งนี้ เวลา] LT',
            nextWeek : 'dddd[หน้า เวลา] LT',
            lastDay : '[เมื่อวานนี้ เวลา] LT',
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "อีก %s",
            past : "%sที่แล้ว",
            s : "ไม่กี่วินาที",
            m : "1 นาที",
            mm : "%d นาที",
            h : "1 ชั่วโมง",
            hh : "%d ชั่วโมง",
            d : "1 วัน",
            dd : "%d วัน",
            M : "1 เดือน",
            MM : "%d เดือน",
            y : "1 ปี",
            yy : "%d ปี"
        }
    });
}));
// moment.js locale configuration
// locale : Tagalog/Filipino (tl-ph)
// author : Dan Hagman

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('tl-ph', {
        months : "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
        monthsShort : "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
        weekdays : "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
        weekdaysShort : "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
        weekdaysMin : "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "MM/D/YYYY",
            LL : "MMMM D, YYYY",
            LLL : "MMMM D, YYYY LT",
            LLLL : "dddd, MMMM DD, YYYY LT"
        },
        calendar : {
            sameDay: "[Ngayon sa] LT",
            nextDay: '[Bukas sa] LT',
            nextWeek: 'dddd [sa] LT',
            lastDay: '[Kahapon sa] LT',
            lastWeek: 'dddd [huling linggo] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "sa loob ng %s",
            past : "%s ang nakalipas",
            s : "ilang segundo",
            m : "isang minuto",
            mm : "%d minuto",
            h : "isang oras",
            hh : "%d oras",
            d : "isang araw",
            dd : "%d araw",
            M : "isang buwan",
            MM : "%d buwan",
            y : "isang taon",
            yy : "%d taon"
        },
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : turkish (tr)
// authors : Erhan Gundogan : https://github.com/erhangundogan,
//           Burak Yiğit Kaya: https://github.com/BYK

(function (factory) {
    factory(moment);
}(function (moment) {
    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",

        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",

        3: "'üncü",
        4: "'üncü",
        100: "'üncü",

        6: "'ncı",

        9: "'uncu",
        10: "'uncu",
        30: "'uncu",

        60: "'ıncı",
        90: "'ıncı"
    };

    return moment.defineLocale('tr', {
        months : "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
        monthsShort : "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
        weekdays : "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
        weekdaysShort : "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
        weekdaysMin : "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[yarın saat] LT',
            nextWeek : '[haftaya] dddd [saat] LT',
            lastDay : '[dün] LT',
            lastWeek : '[geçen hafta] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s sonra",
            past : "%s önce",
            s : "birkaç saniye",
            m : "bir dakika",
            mm : "%d dakika",
            h : "bir saat",
            hh : "%d saat",
            d : "bir gün",
            dd : "%d gün",
            M : "bir ay",
            MM : "%d ay",
            y : "bir yıl",
            yy : "%d yıl"
        },
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + "'ıncı";
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;

            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('tzm-latn', {
        months : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        monthsShort : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        weekdays : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysShort : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysMin : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[asdkh g] LT",
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dadkh s yan %s",
            past : "yan %s",
            s : "imik",
            m : "minuḍ",
            mm : "%d minuḍ",
            h : "saɛa",
            hh : "%d tassaɛin",
            d : "ass",
            dd : "%d ossan",
            M : "ayowr",
            MM : "%d iyyirn",
            y : "asgas",
            yy : "%d isgasn"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : Morocco Central Atlas Tamaziɣt (tzm)
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('tzm', {
        months : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        monthsShort : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        weekdays : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysShort : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysMin : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
            past : "ⵢⴰⵏ %s",
            s : "ⵉⵎⵉⴽ",
            m : "ⵎⵉⵏⵓⴺ",
            mm : "%d ⵎⵉⵏⵓⴺ",
            h : "ⵙⴰⵄⴰ",
            hh : "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
            d : "ⴰⵙⵙ",
            dd : "%d oⵙⵙⴰⵏ",
            M : "ⴰⵢoⵓⵔ",
            MM : "%d ⵉⵢⵢⵉⵔⵏ",
            y : "ⴰⵙⴳⴰⵙ",
            yy : "%d ⵉⵙⴳⴰⵙⵏ"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : ukrainian (uk)
// author : zemlanin : https://github.com/zemlanin
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    factory(moment);
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'хвилина_хвилини_хвилин',
            'hh': 'година_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
        },

        nounCase = (/D[oD]? *MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        },

        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');

        return weekdays[nounCase][m.day()];
    }

    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    return moment.defineLocale('uk', {
        months : monthsCaseReplace,
        monthsShort : "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY р.",
            LLL : "D MMMM YYYY р., LT",
            LLLL : "dddd, D MMMM YYYY р., LT"
        },
        calendar : {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "за %s",
            past : "%s тому",
            s : "декілька секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : "годину",
            hh : relativeTimeWithPlural,
            d : "день",
            dd : relativeTimeWithPlural,
            M : "місяць",
            MM : relativeTimeWithPlural,
            y : "рік",
            yy : relativeTimeWithPlural
        },

        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночі";
            } else if (hour < 12) {
                return "ранку";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечора";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-й';
            case 'D':
                return number + '-го';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : uzbek
// author : Sardor Muminov : https://github.com/muminoff

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('uz', {
        months : "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
        monthsShort : "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
        weekdays : "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
        weekdaysShort : "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
        weekdaysMin : "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "D MMMM YYYY, dddd LT"
        },
        calendar : {
            sameDay : '[Бугун соат] LT [да]',
            nextDay : '[Эртага] LT [да]',
            nextWeek : 'dddd [куни соат] LT [да]',
            lastDay : '[Кеча соат] LT [да]',
            lastWeek : '[Утган] dddd [куни соат] LT [да]',
            sameElse : 'L'
        },
        relativeTime : {
            future : "Якин %s ичида",
            past : "Бир неча %s олдин",
            s : "фурсат",
            m : "бир дакика",
            mm : "%d дакика",
            h : "бир соат",
            hh : "%d соат",
            d : "бир кун",
            dd : "%d кун",
            M : "бир ой",
            MM : "%d ой",
            y : "бир йил",
            yy : "%d йил"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : vietnamese (vi)
// author : Bang Nguyen : https://github.com/bangnk

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('vi', {
        months : "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
        monthsShort : "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
        weekdays : "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
        weekdaysShort : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysMin : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM [năm] YYYY",
            LLL : "D MMMM [năm] YYYY LT",
            LLLL : "dddd, D MMMM [năm] YYYY LT",
            l : "DD/M/YYYY",
            ll : "D MMM YYYY",
            lll : "D MMM YYYY LT",
            llll : "ddd, D MMM YYYY LT"
        },
        calendar : {
            sameDay: "[Hôm nay lúc] LT",
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "%s tới",
            past : "%s trước",
            s : "vài giây",
            m : "một phút",
            mm : "%d phút",
            h : "một giờ",
            hh : "%d giờ",
            d : "một ngày",
            dd : "%d ngày",
            M : "một tháng",
            MM : "%d tháng",
            y : "một năm",
            yy : "%d năm"
        },
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : chinese
// author : suupic : https://github.com/suupic
// author : Zeno Zeng : https://github.com/zenozeng

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('zh-cn', {
        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort : "周日_周一_周二_周三_周四_周五_周六".split("_"),
        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
        longDateFormat : {
            LT : "Ah点mm",
            L : "YYYY-MM-DD",
            LL : "YYYY年MMMD日",
            LLL : "YYYY年MMMD日LT",
            LLLL : "YYYY年MMMD日ddddLT",
            l : "YYYY-MM-DD",
            ll : "YYYY年MMMD日",
            lll : "YYYY年MMMD日LT",
            llll : "YYYY年MMMD日ddddLT"
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return "凌晨";
            } else if (hm < 900) {
                return "早上";
            } else if (hm < 1130) {
                return "上午";
            } else if (hm < 1230) {
                return "中午";
            } else if (hm < 1800) {
                return "下午";
            } else {
                return "晚上";
            }
        },
        calendar : {
            sameDay : function () {
                return this.minutes() === 0 ? "[今天]Ah[点整]" : "[今天]LT";
            },
            nextDay : function () {
                return this.minutes() === 0 ? "[明天]Ah[点整]" : "[明天]LT";
            },
            lastDay : function () {
                return this.minutes() === 0 ? "[昨天]Ah[点整]" : "[昨天]LT";
            },
            nextWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
            },
            lastWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
            },
            sameElse : 'LL'
        },
        ordinal : function (number, period) {
            switch (period) {
            case "d":
            case "D":
            case "DDD":
                return number + "日";
            case "M":
                return number + "月";
            case "w":
            case "W":
                return number + "周";
            default:
                return number;
            }
        },
        relativeTime : {
            future : "%s内",
            past : "%s前",
            s : "几秒",
            m : "1分钟",
            mm : "%d分钟",
            h : "1小时",
            hh : "%d小时",
            d : "1天",
            dd : "%d天",
            M : "1个月",
            MM : "%d个月",
            y : "1年",
            yy : "%d年"
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));
// moment.js locale configuration
// locale : traditional chinese (zh-tw)
// author : Ben : https://github.com/ben-lin

(function (factory) {
    factory(moment);
}(function (moment) {
    return moment.defineLocale('zh-tw', {
        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort : "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
        longDateFormat : {
            LT : "Ah點mm",
            L : "YYYY年MMMD日",
            LL : "YYYY年MMMD日",
            LLL : "YYYY年MMMD日LT",
            LLLL : "YYYY年MMMD日ddddLT",
            l : "YYYY年MMMD日",
            ll : "YYYY年MMMD日",
            lll : "YYYY年MMMD日LT",
            llll : "YYYY年MMMD日ddddLT"
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 900) {
                return "早上";
            } else if (hm < 1130) {
                return "上午";
            } else if (hm < 1230) {
                return "中午";
            } else if (hm < 1800) {
                return "下午";
            } else {
                return "晚上";
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        ordinal : function (number, period) {
            switch (period) {
            case "d" :
            case "D" :
            case "DDD" :
                return number + "日";
            case "M" :
                return number + "月";
            case "w" :
            case "W" :
                return number + "週";
            default :
                return number;
            }
        },
        relativeTime : {
            future : "%s內",
            past : "%s前",
            s : "幾秒",
            m : "一分鐘",
            mm : "%d分鐘",
            h : "一小時",
            hh : "%d小時",
            d : "一天",
            dd : "%d天",
            M : "一個月",
            MM : "%d個月",
            y : "一年",
            yy : "%d年"
        }
    });
}));

    moment.locale('en');


    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    'Accessing Moment through the global scope is ' +
                    'deprecated, and will be removed in an upcoming ' +
                    'release.',
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define('moment', function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);
(function(global){
    "use strict";

    function getMousePos(event, canvas) {
        var rect = canvas.getBoundingClientRect(),
            mouseX = event.pageX - rect.left,
            mouseY = event.pageY - rect.top;

        return {
            x: mouseX,
            y: mouseY
        };
    }

    function DrawController(canvas, title, img){
        var that = this;
        this.title = title;
        this.canvas = canvas;
        this.context = this.canvas.getContext('2d');
        this.context.lineWidth = 5;
        this.context.strokeStyle = 'black';
        this.context.lineCap = 'round';
        this.img = img;
        this.renderImg();
        this.fillText();

        ['start', 'move', 'end'].forEach(function(eventName){
            that.canvas.addEventListener(touchy.events[eventName], that, false);
        });
    }

    DrawController.prototype.fillText = function(){
        this.context.fillStyle = "#646464";
        this.context.font = "normal 16px/20px HelveticaNeue";
        this.context.fillText(this.title.toUpperCase(), 20, 20);
    };

    DrawController.prototype.handleEvent = function(event){
        var type = event.type,
            position;

        event.stopPropagation();
        event.preventDefault();

        if(touchy.isTouch){
            event = event.changedTouches[0];
        }

        position = getMousePos(event, this.canvas);

        switch(type){
            case touchy.events.start:
                this.isDrawing = true;
                this.context.beginPath();
                this.context.lineJoin = 'round';
                this.context.moveTo(position.x, position.y);
                break;
            case touchy.events.move:
                if(this.isDrawing){
                    this.context.lineTo(position.x, position.y);
                    this.context.stroke();
                }
                break;
            case touchy.events.end:
                this.isDrawing = false;
                this.context.closePath();
                this.isDrawed = true;
                break;
        }
    };

    DrawController.prototype.clear = function(){
        this.isDrawed = false;
        this.isDrawing = false;
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.fillText()
    };

    DrawController.prototype.renderImg = function(){
        if(this.img)
            this.context.drawImage(this.img,0,0);
    };

    DrawController.prototype.save = function(){
        var data = this.canvas.toDataURL("image/png");
        return data
    };

    window.DrawController = DrawController;
})(window);
var PhoneDialer = function(){
	this.resultTypes = {
		NOT_SUPPORTED: 1
	};
};

PhoneDialer.prototype.dial = function(phnum, onError){
	this.resultCallback = onError;
	cordova.exec("PhoneDialer.dialPhone", {"number": phnum });
};
PhoneDialer.prototype._didFinishWithResult = function(res){
	this.resultCallback && this.resultCallback(res);
};

if(!window.plugins){
	window.plugins = {};
}
if(!window.plugins.phoneDialer){
	window.plugins.phoneDialer = new PhoneDialer();
}

// Returns a jQuery deferred object, or pass a success and fail callbacks if you don't want to use jQuery
var getAppVersion = function (success, fail) {
  var dfr = null;
  if ((typeof success) === 'undefined' && window.jQuery) {
    dfr = jQuery.Deferred();
    success = dfr.resolve;
    fail = dfr.reject;
  }
  // 5th param is NOT optional. must be at least empty array
	cordova.exec(success, fail, "com.salesforce.sdkinfo", "getInfo", []);
  //cordova.exec(success, fail, "AppVersion", "getVersionNumber", []);
  return dfr;
};

if(!window.plugins) {
	window.plugins = {};
}
if(!window.plugins.appVersion) {
	window.plugins.appVersion = getAppVersion;
}
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Gal Cohen

 * Original code from:
 * https://github.com/guidosabatini -  android: https://github.com/phonegap/phonegap-plugins/tree/master/Android/EmailComposerWithAttachments
 * Randy McMillan - ios and js https://github.com/phonegap/phonegap-plugins/tree/5cf45fcade4989668e95a6d34630d2021c45291a/iOS/SMSComposer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 *
 * Email Composer plugin for PhoneGap/Cordova
 * window.plugins.emailComposer
 *
 * Unified and updated API to be cross-platform by Gal Cohen in 2013.
 * galcohen26@gmail.com
 * https://github.com/GalCohen
 *
 */


/*
 * Temporary Scope to contain the plugin.
 */
(function() {
     /* Get local ref to global PhoneGap/Cordova/cordova object for exec function.
      - This increases the compatibility of the plugin. */
     var cordovaRef = window.PhoneGap || window.Cordova || window.cordova; // old to new fallbacks

    function EmailComposer() {
        this.resultCallback = function(){}; // Function
    }

    EmailComposer.ComposeResultType = {
        Cancelled:0,
        Saved:1,
        Sent:2,
        Failed:3,
        NotSent:4
    };

    // showEmailComposer : all args optional
    EmailComposer.prototype.showEmailComposer = function(subject, body, toRecipients, ccRecipients, bccRecipients, bIsHTML, attachments) {
        var args = {};
        args.subject = subject ? subject : "";
        args.body = body ? body : "";
        args.toRecipients = toRecipients ? toRecipients : [];
        args.ccRecipients = ccRecipients ? ccRecipients : [];
        args.bccRecipients = bccRecipients ? bccRecipients : [];
        args.bIsHTML = bIsHTML ? true : false;
        args.attachments = attachments ? attachments : [];
        cordovaRef.exec(null, null, "EmailComposer", "showEmailComposer", [args]);
    };

    EmailComposer.prototype.showEmailComposerWithCallback = function(callback, subject, body, toRecipients, ccRecipients, bccRecipients, isHTML, attachments) {
        this.resultCallback = callback;
        this.showEmailComposer.apply(this, [subject, body, toRecipients, ccRecipients, bccRecipients, isHTML, attachments]);
    };

    EmailComposer.prototype._didFinishWithResult = function(res) {
        this.resultCallback(res);
    };

    cordovaRef.addConstructor && cordovaRef.addConstructor(function() {
           if (!window.plugins) {
                window.plugins = {};
           }

            if (!window.plugins.emailComposer) {
               window.plugins.emailComposer = new EmailComposer();
                console.log("**************************** Email Composer ready *************************");
            }
        });
})();/* End of Temporary Scope. */
/*
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*
JPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009

Basic GUI blocking jpeg encode

v 0.9a

Licensed under the MIT License

Copyright (c) 2009 Andreas Ritter

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

function JPEGEncoder(quality) {
	var self = this;
	var fround = Math.round;
	var ffloor = Math.floor;
	var YTable = new Array(64);
	var UVTable = new Array(64);
	var fdtbl_Y = new Array(64);
	var fdtbl_UV = new Array(64);
	var YDC_HT;
	var UVDC_HT;
	var YAC_HT;
	var UVAC_HT;
	
	var bitcode = new Array(65535);
	var category = new Array(65535);
	var outputfDCTQuant = new Array(64);
	var DU = new Array(64);
	var byteout = [];
	var bytenew = 0;
	var bytepos = 7;
	
	var YDU = new Array(64);
	var UDU = new Array(64);
	var VDU = new Array(64);
	var clt = new Array(256);
	var RGB_YUV_TABLE = new Array(2048);
	var currentQuality;
	
	var ZigZag = [
			 0, 1, 5, 6,14,15,27,28,
			 2, 4, 7,13,16,26,29,42,
			 3, 8,12,17,25,30,41,43,
			 9,11,18,24,31,40,44,53,
			10,19,23,32,39,45,52,54,
			20,22,33,38,46,51,55,60,
			21,34,37,47,50,56,59,61,
			35,36,48,49,57,58,62,63
		];
	
	var std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];
	var std_dc_luminance_values = [0,1,2,3,4,5,6,7,8,9,10,11];
	var std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];
	var std_ac_luminance_values = [
			0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,
			0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
			0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,
			0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,
			0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,
			0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,
			0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,
			0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
			0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,
			0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
			0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,
			0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
			0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,
			0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,
			0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,
			0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,
			0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,
			0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,
			0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,
			0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
			0xf9,0xfa
		];
	
	var std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];
	var std_dc_chrominance_values = [0,1,2,3,4,5,6,7,8,9,10,11];
	var std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];
	var std_ac_chrominance_values = [
			0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,
			0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
			0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,
			0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,
			0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,
			0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,
			0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,
			0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,
			0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,
			0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,
			0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,
			0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,
			0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,
			0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,
			0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,
			0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,
			0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,
			0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,
			0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,
			0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
			0xf9,0xfa
		];
	
	function initQuantTables(sf){
			var YQT = [
				16, 11, 10, 16, 24, 40, 51, 61,
				12, 12, 14, 19, 26, 58, 60, 55,
				14, 13, 16, 24, 40, 57, 69, 56,
				14, 17, 22, 29, 51, 87, 80, 62,
				18, 22, 37, 56, 68,109,103, 77,
				24, 35, 55, 64, 81,104,113, 92,
				49, 64, 78, 87,103,121,120,101,
				72, 92, 95, 98,112,100,103, 99
			];
			
			for (var i = 0; i < 64; i++) {
				var t = ffloor((YQT[i]*sf+50)/100);
				if (t < 1) {
					t = 1;
				} else if (t > 255) {
					t = 255;
				}
				YTable[ZigZag[i]] = t;
			}
			var UVQT = [
				17, 18, 24, 47, 99, 99, 99, 99,
				18, 21, 26, 66, 99, 99, 99, 99,
				24, 26, 56, 99, 99, 99, 99, 99,
				47, 66, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99
			];
			for (var j = 0; j < 64; j++) {
				var u = ffloor((UVQT[j]*sf+50)/100);
				if (u < 1) {
					u = 1;
				} else if (u > 255) {
					u = 255;
				}
				UVTable[ZigZag[j]] = u;
			}
			var aasf = [
				1.0, 1.387039845, 1.306562965, 1.175875602,
				1.0, 0.785694958, 0.541196100, 0.275899379
			];
			var k = 0;
			for (var row = 0; row < 8; row++)
			{
				for (var col = 0; col < 8; col++)
				{
					fdtbl_Y[k]  = (1.0 / (YTable [ZigZag[k]] * aasf[row] * aasf[col] * 8.0));
					fdtbl_UV[k] = (1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0));
					k++;
				}
			}
		}
		
		function computeHuffmanTbl(nrcodes, std_table){
			var codevalue = 0;
			var pos_in_table = 0;
			var HT = new Array();
			for (var k = 1; k <= 16; k++) {
				for (var j = 1; j <= nrcodes[k]; j++) {
					HT[std_table[pos_in_table]] = [];
					HT[std_table[pos_in_table]][0] = codevalue;
					HT[std_table[pos_in_table]][1] = k;
					pos_in_table++;
					codevalue++;
				}
				codevalue*=2;
			}
			return HT;
		}
		
		function initHuffmanTbl()
		{
			YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);
			UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);
			YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);
			UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);
		}
	
		function initCategoryNumber()
		{
			var nrlower = 1;
			var nrupper = 2;
			for (var cat = 1; cat <= 15; cat++) {
				//Positive numbers
				for (var nr = nrlower; nr<nrupper; nr++) {
					category[32767+nr] = cat;
					bitcode[32767+nr] = [];
					bitcode[32767+nr][1] = cat;
					bitcode[32767+nr][0] = nr;
				}
				//Negative numbers
				for (var nrneg =-(nrupper-1); nrneg<=-nrlower; nrneg++) {
					category[32767+nrneg] = cat;
					bitcode[32767+nrneg] = [];
					bitcode[32767+nrneg][1] = cat;
					bitcode[32767+nrneg][0] = nrupper-1+nrneg;
				}
				nrlower <<= 1;
				nrupper <<= 1;
			}
		}
		
		function initRGBYUVTable() {
			for(var i = 0; i < 256;i++) {
				RGB_YUV_TABLE[i]      		=  19595 * i;
				RGB_YUV_TABLE[(i+ 256)>>0] 	=  38470 * i;
				RGB_YUV_TABLE[(i+ 512)>>0] 	=   7471 * i + 0x8000;
				RGB_YUV_TABLE[(i+ 768)>>0] 	= -11059 * i;
				RGB_YUV_TABLE[(i+1024)>>0] 	= -21709 * i;
				RGB_YUV_TABLE[(i+1280)>>0] 	=  32768 * i + 0x807FFF;
				RGB_YUV_TABLE[(i+1536)>>0] 	= -27439 * i;
				RGB_YUV_TABLE[(i+1792)>>0] 	= - 5329 * i;
			}
		}
		
		// IO functions
		function writeBits(bs)
		{
			var value = bs[0];
			var posval = bs[1]-1;
			while ( posval >= 0 ) {
				if (value & (1 << posval) ) {
					bytenew |= (1 << bytepos);
				}
				posval--;
				bytepos--;
				if (bytepos < 0) {
					if (bytenew == 0xFF) {
						writeByte(0xFF);
						writeByte(0);
					}
					else {
						writeByte(bytenew);
					}
					bytepos=7;
					bytenew=0;
				}
			}
		}
	
		function writeByte(value)
		{
			byteout.push(clt[value]); // write char directly instead of converting later
		}
	
		function writeWord(value)
		{
			writeByte((value>>8)&0xFF);
			writeByte((value   )&0xFF);
		}
		
		// DCT & quantization core
		function fDCTQuant(data, fdtbl)
		{
			var d0, d1, d2, d3, d4, d5, d6, d7;
			/* Pass 1: process rows. */
			var dataOff=0;
			var i;
			const I8 = 8;
			const I64 = 64;
			for (i=0; i<I8; ++i)
			{
				d0 = data[dataOff];
				d1 = data[dataOff+1];
				d2 = data[dataOff+2];
				d3 = data[dataOff+3];
				d4 = data[dataOff+4];
				d5 = data[dataOff+5];
				d6 = data[dataOff+6];
				d7 = data[dataOff+7];
				
				var tmp0 = d0 + d7;
				var tmp7 = d0 - d7;
				var tmp1 = d1 + d6;
				var tmp6 = d1 - d6;
				var tmp2 = d2 + d5;
				var tmp5 = d2 - d5;
				var tmp3 = d3 + d4;
				var tmp4 = d3 - d4;
	
				/* Even part */
				var tmp10 = tmp0 + tmp3;	/* phase 2 */
				var tmp13 = tmp0 - tmp3;
				var tmp11 = tmp1 + tmp2;
				var tmp12 = tmp1 - tmp2;
	
				data[dataOff] = tmp10 + tmp11; /* phase 3 */
				data[dataOff+4] = tmp10 - tmp11;
	
				var z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */
				data[dataOff+2] = tmp13 + z1; /* phase 5 */
				data[dataOff+6] = tmp13 - z1;
	
				/* Odd part */
				tmp10 = tmp4 + tmp5; /* phase 2 */
				tmp11 = tmp5 + tmp6;
				tmp12 = tmp6 + tmp7;
	
				/* The rotator is modified from fig 4-8 to avoid extra negations. */
				var z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */
				var z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */
				var z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */
				var z3 = tmp11 * 0.707106781; /* c4 */
	
				var z11 = tmp7 + z3;	/* phase 5 */
				var z13 = tmp7 - z3;
	
				data[dataOff+5] = z13 + z2;	/* phase 6 */
				data[dataOff+3] = z13 - z2;
				data[dataOff+1] = z11 + z4;
				data[dataOff+7] = z11 - z4;
	
				dataOff += 8; /* advance pointer to next row */
			}
	
			/* Pass 2: process columns. */
			dataOff = 0;
			for (i=0; i<I8; ++i)
			{
				d0 = data[dataOff];
				d1 = data[dataOff + 8];
				d2 = data[dataOff + 16];
				d3 = data[dataOff + 24];
				d4 = data[dataOff + 32];
				d5 = data[dataOff + 40];
				d6 = data[dataOff + 48];
				d7 = data[dataOff + 56];
				
				var tmp0p2 = d0 + d7;
				var tmp7p2 = d0 - d7;
				var tmp1p2 = d1 + d6;
				var tmp6p2 = d1 - d6;
				var tmp2p2 = d2 + d5;
				var tmp5p2 = d2 - d5;
				var tmp3p2 = d3 + d4;
				var tmp4p2 = d3 - d4;
	
				/* Even part */
				var tmp10p2 = tmp0p2 + tmp3p2;	/* phase 2 */
				var tmp13p2 = tmp0p2 - tmp3p2;
				var tmp11p2 = tmp1p2 + tmp2p2;
				var tmp12p2 = tmp1p2 - tmp2p2;
	
				data[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */
				data[dataOff+32] = tmp10p2 - tmp11p2;
	
				var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */
				data[dataOff+16] = tmp13p2 + z1p2; /* phase 5 */
				data[dataOff+48] = tmp13p2 - z1p2;
	
				/* Odd part */
				tmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */
				tmp11p2 = tmp5p2 + tmp6p2;
				tmp12p2 = tmp6p2 + tmp7p2;
	
				/* The rotator is modified from fig 4-8 to avoid extra negations. */
				var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */
				var z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */
				var z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */
				var z3p2 = tmp11p2 * 0.707106781; /* c4 */
	
				var z11p2 = tmp7p2 + z3p2;	/* phase 5 */
				var z13p2 = tmp7p2 - z3p2;
	
				data[dataOff+40] = z13p2 + z2p2; /* phase 6 */
				data[dataOff+24] = z13p2 - z2p2;
				data[dataOff+ 8] = z11p2 + z4p2;
				data[dataOff+56] = z11p2 - z4p2;
	
				dataOff++; /* advance pointer to next column */
			}
	
			// Quantize/descale the coefficients
			var fDCTQuant;
			for (i=0; i<I64; ++i)
			{
				// Apply the quantization and scaling factor & Round to nearest integer
				fDCTQuant = data[i]*fdtbl[i];
				outputfDCTQuant[i] = (fDCTQuant > 0.0) ? ((fDCTQuant + 0.5)|0) : ((fDCTQuant - 0.5)|0);
				//outputfDCTQuant[i] = fround(fDCTQuant);

			}
			return outputfDCTQuant;
		}
		
		function writeAPP0()
		{
			writeWord(0xFFE0); // marker
			writeWord(16); // length
			writeByte(0x4A); // J
			writeByte(0x46); // F
			writeByte(0x49); // I
			writeByte(0x46); // F
			writeByte(0); // = "JFIF",'\0'
			writeByte(1); // versionhi
			writeByte(1); // versionlo
			writeByte(0); // xyunits
			writeWord(1); // xdensity
			writeWord(1); // ydensity
			writeByte(0); // thumbnwidth
			writeByte(0); // thumbnheight
		}
	
		function writeSOF0(width, height)
		{
			writeWord(0xFFC0); // marker
			writeWord(17);   // length, truecolor YUV JPG
			writeByte(8);    // precision
			writeWord(height);
			writeWord(width);
			writeByte(3);    // nrofcomponents
			writeByte(1);    // IdY
			writeByte(0x11); // HVY
			writeByte(0);    // QTY
			writeByte(2);    // IdU
			writeByte(0x11); // HVU
			writeByte(1);    // QTU
			writeByte(3);    // IdV
			writeByte(0x11); // HVV
			writeByte(1);    // QTV
		}
	
		function writeDQT()
		{
			writeWord(0xFFDB); // marker
			writeWord(132);	   // length
			writeByte(0);
			for (var i=0; i<64; i++) {
				writeByte(YTable[i]);
			}
			writeByte(1);
			for (var j=0; j<64; j++) {
				writeByte(UVTable[j]);
			}
		}
	
		function writeDHT()
		{
			writeWord(0xFFC4); // marker
			writeWord(0x01A2); // length
	
			writeByte(0); // HTYDCinfo
			for (var i=0; i<16; i++) {
				writeByte(std_dc_luminance_nrcodes[i+1]);
			}
			for (var j=0; j<=11; j++) {
				writeByte(std_dc_luminance_values[j]);
			}
	
			writeByte(0x10); // HTYACinfo
			for (var k=0; k<16; k++) {
				writeByte(std_ac_luminance_nrcodes[k+1]);
			}
			for (var l=0; l<=161; l++) {
				writeByte(std_ac_luminance_values[l]);
			}
	
			writeByte(1); // HTUDCinfo
			for (var m=0; m<16; m++) {
				writeByte(std_dc_chrominance_nrcodes[m+1]);
			}
			for (var n=0; n<=11; n++) {
				writeByte(std_dc_chrominance_values[n]);
			}
	
			writeByte(0x11); // HTUACinfo
			for (var o=0; o<16; o++) {
				writeByte(std_ac_chrominance_nrcodes[o+1]);
			}
			for (var p=0; p<=161; p++) {
				writeByte(std_ac_chrominance_values[p]);
			}
		}
	
		function writeSOS()
		{
			writeWord(0xFFDA); // marker
			writeWord(12); // length
			writeByte(3); // nrofcomponents
			writeByte(1); // IdY
			writeByte(0); // HTY
			writeByte(2); // IdU
			writeByte(0x11); // HTU
			writeByte(3); // IdV
			writeByte(0x11); // HTV
			writeByte(0); // Ss
			writeByte(0x3f); // Se
			writeByte(0); // Bf
		}
		
		function processDU(CDU, fdtbl, DC, HTDC, HTAC){
			var EOB = HTAC[0x00];
			var M16zeroes = HTAC[0xF0];
			var pos;
			const I16 = 16;
			const I63 = 63;
			const I64 = 64;
			var DU_DCT = fDCTQuant(CDU, fdtbl);
			//ZigZag reorder
			for (var j=0;j<I64;++j) {
				DU[ZigZag[j]]=DU_DCT[j];
			}
			var Diff = DU[0] - DC; DC = DU[0];
			//Encode DC
			if (Diff==0) {
				writeBits(HTDC[0]); // Diff might be 0
			} else {
				pos = 32767+Diff;
				writeBits(HTDC[category[pos]]);
				writeBits(bitcode[pos]);
			}
			//Encode ACs
			var end0pos = 63; // was const... which is crazy
			for (; (end0pos>0)&&(DU[end0pos]==0); end0pos--) {};
			//end0pos = first element in reverse order !=0
			if ( end0pos == 0) {
				writeBits(EOB);
				return DC;
			}
			var i = 1;
			var lng;
			while ( i <= end0pos ) {
				var startpos = i;
				for (; (DU[i]==0) && (i<=end0pos); ++i) {}
				var nrzeroes = i-startpos;
				if ( nrzeroes >= I16 ) {
					lng = nrzeroes>>4;
					for (var nrmarker=1; nrmarker <= lng; ++nrmarker)
						writeBits(M16zeroes);
					nrzeroes = nrzeroes&0xF;
				}
				pos = 32767+DU[i];
				writeBits(HTAC[(nrzeroes<<4)+category[pos]]);
				writeBits(bitcode[pos]);
				i++;
			}
			if ( end0pos != I63 ) {
				writeBits(EOB);
			}
			return DC;
		}

		function initCharLookupTable(){
			var sfcc = String.fromCharCode;
			for(var i=0; i < 256; i++){ ///// ACHTUNG // 255
				clt[i] = sfcc(i);
			}
		}
		
		this.encode = function(image,quality) // image data object
		{
			var time_start = new Date().getTime();
			
			if(quality) setQuality(quality);
			
			// Initialize bit writer
			byteout = new Array();
			bytenew=0;
			bytepos=7;
	
			// Add JPEG headers
			writeWord(0xFFD8); // SOI
			writeAPP0();
			writeDQT();
			writeSOF0(image.width,image.height);
			writeDHT();
			writeSOS();

	
			// Encode 8x8 macroblocks
			var DCY=0;
			var DCU=0;
			var DCV=0;
			
			bytenew=0;
			bytepos=7;
			
			
			this.encode.displayName = "_encode_";

			var imageData = image.data;
			var width = image.width;
			var height = image.height;

			var quadWidth = width*4;
			var tripleWidth = width*3;
			
			var x, y = 0;
			var r, g, b;
			var start,p, col,row,pos;
			while(y < height){
				x = 0;
				while(x < quadWidth){
				start = quadWidth * y + x;
				p = start;
				col = -1;
				row = 0;
				
				for(pos=0; pos < 64; pos++){
					row = pos >> 3;// /8
					col = ( pos & 7 ) * 4; // %8
					p = start + ( row * quadWidth ) + col;		
					
					if(y+row >= height){ // padding bottom
						p-= (quadWidth*(y+1+row-height));
					}

					if(x+col >= quadWidth){ // padding right	
						p-= ((x+col) - quadWidth +4)
					}
					
					r = imageData[ p++ ];
					g = imageData[ p++ ];
					b = imageData[ p++ ];
					
					
					/* // calculate YUV values dynamically
					YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80
					UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));
					VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));
					*/
					
					// use lookup table (slightly faster)
					YDU[pos] = ((RGB_YUV_TABLE[r]             + RGB_YUV_TABLE[(g +  256)>>0] + RGB_YUV_TABLE[(b +  512)>>0]) >> 16)-128;
					UDU[pos] = ((RGB_YUV_TABLE[(r +  768)>>0] + RGB_YUV_TABLE[(g + 1024)>>0] + RGB_YUV_TABLE[(b + 1280)>>0]) >> 16)-128;
					VDU[pos] = ((RGB_YUV_TABLE[(r + 1280)>>0] + RGB_YUV_TABLE[(g + 1536)>>0] + RGB_YUV_TABLE[(b + 1792)>>0]) >> 16)-128;

				}
				
				DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
				DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
				DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
				x+=32;
				}
				y+=8;
			}
			
			
			////////////////////////////////////////////////////////////////
	
			// Do the bit alignment of the EOI marker
			if ( bytepos >= 0 ) {
				var fillbits = [];
				fillbits[1] = bytepos+1;
				fillbits[0] = (1<<(bytepos+1))-1;
				writeBits(fillbits);
			}
	
			writeWord(0xFFD9); //EOI

			var jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));
			
			byteout = [];
			
			// benchmarking
			var duration = new Date().getTime() - time_start;
    		console.log('Encoding time: '+ duration + 'ms');
    		//
			
			return jpegDataUri			
	}
	
	function setQuality(quality){
		if (quality <= 0) {
			quality = 1;
		}
		if (quality > 100) {
			quality = 100;
		}
		
		if(currentQuality == quality) return // don't recalc if unchanged
		
		var sf = 0;
		if (quality < 50) {
			sf = Math.floor(5000 / quality);
		} else {
			sf = Math.floor(200 - quality*2);
		}
		
		initQuantTables(sf);
		currentQuality = quality;
		console.log('Quality set to: '+quality +'%');
	}
	
	function init(){
		var time_start = new Date().getTime();
		if(!quality) quality = 50;
		// Create tables
		initCharLookupTable()
		initHuffmanTbl();
		initCategoryNumber();
		initRGBYUVTable();
		
		setQuality(quality);
		var duration = new Date().getTime() - time_start;
    	console.log('Initialization '+ duration + 'ms');
	}
	
	init();
	
};

// helper function to get the imageData of an existing image on the current page.
function getImageDataFromImage(idOrElement){
	var theImg = (typeof(idOrElement)=='string')? document.getElementById(idOrElement):idOrElement;
	var cvs = document.createElement('canvas');
	cvs.width = theImg.width;
	cvs.height = theImg.height;
	var ctx = cvs.getContext("2d");
	ctx.drawImage(theImg,0,0);
	
	return (ctx.getImageData(0, 0, cvs.width, cvs.height));
}
/*

function init(qu){
	var theImg = document.getElementById('testimage');
	var cvs = document.createElement('canvas');
	cvs.width = theImg.width;
	cvs.height = theImg.height;
	
	//document.body.appendChild(cvs);
	
	var ctx = cvs.getContext("2d");

	ctx.drawImage(theImg,0,0);

	var theImgData = (ctx.getImageData(0, 0, cvs.width, cvs.height));
	

	var jpegURI = encoder.encode(theImgData,qu);
	
	var img = document.createElement('img');
	img.src = jpegURI;
	document.body.appendChild(img);
}
*/
(function ($) {
  'use strict';

  var caretClass   = 'textarea-helper-caret'
    , dataKey      = 'textarea-helper'

    // Styles that could influence size of the mirrored element.
    , mirrorStyles = [ 
                       // Box Styles.
                       'box-sizing', 'height', 'width', 'padding-bottom'
                     , 'padding-left', 'padding-right', 'padding-top'
  
                       // Font stuff.
                     , 'font-family', 'font-size', 'font-style' 
                     , 'font-variant', 'font-weight'
  
                       // Spacing etc.
                     , 'word-spacing', 'letter-spacing', 'line-height'
                     , 'white-space', 'word-break', 'wordWrap'
                     , 'text-decoration', 'text-indent', 'text-transform' 
                     
                      // The direction.
                     , 'direction'
                     ];

  var TextareaHelper = function (elem) {
    if (elem.nodeName.toLowerCase() !== 'textarea') return;
    this.$text = $(elem);
    this.$mirror = $('<div/>').css({ 'position'    : 'absolute'
                                   , 'overflow'    : 'auto'
                                   , 'top'         : 0
                                   , 'left'        : -9999
                                   }).insertAfter(this.$text);
  };

  (function () {
    this.update = function () {

      // Copy styles.
      var styles = {};
      for (var i = 0, style; style = mirrorStyles[i]; i++) {
        styles[style] = this.$text.css(style);
      }
      this.$mirror.css(styles).empty();
      
      // Update content and insert caret.
      var caretPos = this.getOriginalCaretPos()
        , str      = this.$text.val()
        , pre      = document.createTextNode(str.substring(0, caretPos))
        , post     = document.createTextNode(str.substring(caretPos))
        , $car     = $('<span/>').addClass(caretClass).css('position', 'absolute').html('&nbsp;');
      this.$mirror.append(pre, $car, post)
                  .scrollTop(this.$text.scrollTop());
    };

    this.destroy = function () {
      this.$mirror.remove();
      this.$text.removeData(dataKey);
      return null;
    };

    this.caretPos = function () {
      this.update();
      var $caret = this.$mirror.find('.' + caretClass)
        , pos    = $caret.position();
      if (this.$text.css('direction') === 'rtl') {
        pos.right = this.$mirror.innerWidth() - pos.left - $caret.width();
        pos.left = 'auto';
      }

      return pos;
    };

    this.height = function () {
      this.update();
      this.$mirror.css('height', '');
      return this.$mirror.height();
    };

    // XBrowser caret position
    // Adapted from http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea
    this.getOriginalCaretPos = function () {
      var text = this.$text[0];
      if (text.selectionStart) {
        return text.selectionStart;
      } else if (document.selection) {
        text.focus();
        var r = document.selection.createRange();
        if (r == null) {
          return 0;
        }
        var re = text.createTextRange()
          , rc = re.duplicate();
        re.moveToBookmark(r.getBookmark());
        rc.setEndPoint('EndToStart', re);
        return rc.text.length;
      } 
      return 0;
    };

  }).call(TextareaHelper.prototype);
  
  $.fn.textareaHelper = function (method) {
    this.each(function () {
      var $this    = $(this)
        , instance = $this.data(dataKey);
      if (!instance) {
        instance = new TextareaHelper(this);
        $this.data(dataKey, instance);
      }
    });
    if (method) {
      var instance = this.first().data(dataKey);
      return instance[method]();
    } else {
      return this;
    }
  };

})(jQuery);

(function() {
    /* Get local ref to global PhoneGap/Cordova/cordova object for exec function.
     - This increases the compatibility of the plugin. */
    var cordovaRef = window.PhoneGap || window.Cordova || window.cordova; // old to new fallbacks

    function SoftKeyboard() {}

    SoftKeyboard.prototype.show = function(win, fail) {
        return cordova.exec(
            function (args) { if(win) { win(args); } },
            function (args) { if(fail) { fail(args); } },
            "SoftKeyboard", "show", []);
    };

    SoftKeyboard.prototype.hide = function(win, fail) {
        return cordova.exec(
            function (args) { if(win) { win(args); } },
            function (args) { if(fail) { fail(args); } },
            "SoftKeyboard", "hide", []);
    };

    SoftKeyboard.prototype.isShowing = function(win, fail) {
        return cordova.exec(
            function (isShowing) {
                if(win) {
                    isShowing = isShowing === 'true' ? true : false
                    win(isShowing);
                }
            },
            function (args) { if(fail) { fail(args); } },
            "SoftKeyboard", "isShowing", []);
    };

    SoftKeyboard.prototype.getAvailScreenHeight = function(win, fail) {
        return cordova.exec(
            function (args) { if(win) { win(args); } },
            function (args) { if(fail) { fail(args); } },
            "SoftKeyboard", "getAvailScreenHeight", []);
    };

    cordovaRef.addConstructor && cordovaRef.addConstructor(function() {
        if (!window.plugins) {
            window.plugins = {};
        }

        if (!window.plugins.softKeyboard) {
            window.plugins.softKeyboard = new SoftKeyboard();
            console.log("**************************** SoftKeyboard ready *************************");
        }
    });

})();/* End of Temporary Scope. */
/**
 *	@name							Elastic
 *	@descripton						Elastic is jQuery plugin that grow and shrink your textareas automatically
 *	@version						1.6.11
 *	@requires						jQuery 1.2.6+
 *
 *	@author							Jan Jarfalk
 *	@author-email					jan.jarfalk@unwrongest.com
 *	@author-website					http://www.unwrongest.com
 *
 *	@licence						MIT License - http://www.opensource.org/licenses/mit-license.php
 */

(function($){
    jQuery.fn.extend({
        elastic: function() {

            //	We will create a div clone of the textarea
            //	by copying these attributes from the textarea to the div.
            var mimics = [
                '-webkit-box-sizing',
                'wordBreak',
                'whiteSpace',
                'wordWrap',
                'paddingTop',
                'paddingRight',
                'paddingBottom',
                'paddingLeft',
                'fontSize',
                'lineHeight',
                'fontFamily',
                'width',
                'fontWeight',
                'border-top-width',
                'border-right-width',
                'border-bottom-width',
                'border-left-width',
                'borderTopStyle',
                'borderTopColor',
                'borderRightStyle',
                'borderRightColor',
                'borderBottomStyle',
                'borderBottomColor',
                'borderLeftStyle',
                'borderLeftColor'
            ];

            return this.each( function() {

                // Elastic only works on textareas
                if ( this.type !== 'textarea' ) {
                    return false;
                }

                var $textarea	= jQuery(this),
                    $twin		= jQuery('<div />').css({
                        'position'		: 'absolute',
                        'display'		: 'none'
                    }),
                    lineHeight	= parseInt($textarea.css('line-height'),10) || parseInt($textarea.css('font-size'),'10'),
                    minheight	= $textarea.height(),
                    maxheight	= parseInt($textarea.css('max-height'),10) || Number.MAX_VALUE,
                    goalheight	= 0;

                // Opera returns max-height of -1 if not set
                if (maxheight < 0) { maxheight = Number.MAX_VALUE; }

                // Append the twin to the DOM
                // We are going to meassure the height of this, not the textarea.
                $twin.appendTo($textarea.parent());

                // Copy the essential styles (mimics) from the textarea to the twin
                var i = mimics.length;
                while(i--){
                    $twin.css(mimics[i].toString(),$textarea.css(mimics[i].toString()));
                }

                // Updates the width of the twin. (solution for textareas with widths in percent)
                function setTwinWidth(){
                    var curatedWidth = Math.floor(parseInt($textarea.width(),10));
                    if($twin.width() !== curatedWidth){
                        $twin.css({'width': curatedWidth + 'px'});

                        // Update height of textarea
                        update(true);
                    }
                }

                // Sets a given height and overflow state on the textarea
                function setHeightAndOverflow(height, overflow){

                    var curratedHeight = Math.floor(parseInt(height,10));
                    if($textarea.height() !== curratedHeight){
                        $textarea.css({'overflow':overflow});
                        $textarea.height(curratedHeight);
                    }
                }

                // This function will update the height of the textarea if necessary
                function update(forced) {

                    // Get curated content from the textarea.
                    var textareaContent = $textarea.val().replace(/&/g,'&amp;').replace(/ {2}/g, '&nbsp;').replace(/<|>/g, '&gt;').replace(/\n/g, '<br />');

                    // Compare curated content with curated twin.
                    var twinContent = $twin.html().replace(/<br>/ig,'<br />');

                    if(forced || textareaContent+'&nbsp;' !== twinContent){

                        // Add an extra white space so new rows are added when you are at the end of a row.
                        $twin.html(textareaContent+'&nbsp;');

                        var goalheight = $twin.height();
                        if(goalheight >= maxheight) {
                            setHeightAndOverflow(maxheight,'auto');
                        } else if(goalheight <= minheight) {
                            setHeightAndOverflow(minheight,'hidden');
                        } else {
                            setHeightAndOverflow(goalheight,'hidden');
                        }

                        $textarea.trigger('elasticUpdate')
                    }

                }

                // Hide scrollbars
                $textarea.css({'overflow':'hidden'});

                // Update textarea size on keyup, change, cut and paste
                $textarea.bind('keyup change cut paste', function(){
                    update();
                });

                // Update width of twin if browser or textarea is resized (solution for textareas with widths in percent)
                $(window).bind('resize', setTwinWidth);
                $textarea.bind('resize', setTwinWidth);
                $textarea.bind('update', update);

                // Compact textarea on blur
                $textarea.bind('blur',function(){
                    if($twin.height() < maxheight){
                        if($twin.height() > minheight) {
                            $textarea.height($twin.height());
                        } else {
                            $textarea.height(minheight);
                        }
                    }
                });

                // And this line is to catch the browser paste event
                $textarea.bind('input paste',function(e){ setTimeout( update, 250); });

                // Run update once when elastic is initialized
                update();

            });

        }
    });
})(jQuery);
// i18next, v1.7.1
// Copyright (c)2013 Jan Mühlemann (jamuhl).
// Distributed under MIT license
// http://i18next.com
!function(){function a(a,b){if(!b||"function"==typeof b)return a;for(var c in b)a[c]=b[c];return a}function b(a,b,c){var d,e=0,f=a.length,g=void 0===f||"function"==typeof a;if(c)if(g){for(d in a)if(b.apply(a[d],c)===!1)break}else for(;f>e&&b.apply(a[e++],c)!==!1;);else if(g){for(d in a)if(b.call(a[d],d,a[d])===!1)break}else for(;f>e&&b.call(a[e],e,a[e++])!==!1;);return a}function c(a){return"string"==typeof a?a.replace(/[&<>"'\/]/g,function(a){return H[a]}):a}function d(a){var b=function(a){if(window.XMLHttpRequest)return a(null,new XMLHttpRequest);if(window.ActiveXObject)try{return a(null,new ActiveXObject("Msxml2.XMLHTTP"))}catch(b){return a(null,new ActiveXObject("Microsoft.XMLHTTP"))}return a(new Error)},c=function(a){if("string"==typeof a)return a;var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(encodeURIComponent(c)+"="+encodeURIComponent(a[c]));return b.join("&")},d=function(a){a=a.replace(/\r\n/g,"\n");for(var b="",c=0;c<a.length;c++){var d=a.charCodeAt(c);128>d?b+=String.fromCharCode(d):d>127&&2048>d?(b+=String.fromCharCode(192|d>>6),b+=String.fromCharCode(128|63&d)):(b+=String.fromCharCode(224|d>>12),b+=String.fromCharCode(128|63&d>>6),b+=String.fromCharCode(128|63&d))}return b},e=function(a){var b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";a=d(a);var c,e,f,g,h,i,j,k="",l=0;do c=a.charCodeAt(l++),e=a.charCodeAt(l++),f=a.charCodeAt(l++),g=c>>2,h=(3&c)<<4|e>>4,i=(15&e)<<2|f>>6,j=63&f,isNaN(e)?i=j=64:isNaN(f)&&(j=64),k+=b.charAt(g)+b.charAt(h)+b.charAt(i)+b.charAt(j),c=e=f="",g=h=i=j="";while(l<a.length);return k},f=function(){for(var a=arguments[0],b=1;b<arguments.length;b++){var c=arguments[b];for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}return a},g=function(a,d,e,h){"function"==typeof e&&(h=e,e={}),e.cache=e.cache||!1,e.data=e.data||{},e.headers=e.headers||{},e.jsonp=e.jsonp||!1,e.async=void 0===e.async?!0:e.async;var i,j=f({accept:"*/*","content-type":"application/x-www-form-urlencoded;charset=UTF-8"},g.headers,e.headers);if(i="application/json"===j["content-type"]?JSON.stringify(e.data):c(e.data),"GET"===a){var k=[];if(i&&(k.push(i),i=null),e.cache||k.push("_="+(new Date).getTime()),e.jsonp&&(k.push("callback="+e.jsonp),k.push("jsonp="+e.jsonp)),k=k.join("&"),k.length>1&&(d+=d.indexOf("?")>-1?"&"+k:"?"+k),e.jsonp){var l=document.getElementsByTagName("head")[0],m=document.createElement("script");return m.type="text/javascript",m.src=d,l.appendChild(m),void 0}}b(function(b,c){if(b)return h(b);c.open(a,d,e.async);for(var f in j)j.hasOwnProperty(f)&&c.setRequestHeader(f,j[f]);c.onreadystatechange=function(){if(4===c.readyState){var a=c.responseText||"";if(!h)return;h(c.status,{text:function(){return a},json:function(){return JSON.parse(a)}})}},c.send(i)})},h={authBasic:function(a,b){g.headers.Authorization="Basic "+e(a+":"+b)},connect:function(a,b,c){return g("CONNECT",a,b,c)},del:function(a,b,c){return g("DELETE",a,b,c)},get:function(a,b,c){return g("GET",a,b,c)},head:function(a,b,c){return g("HEAD",a,b,c)},headers:function(a){g.headers=a||{}},isAllowed:function(a,b,c){this.options(a,function(a,d){c(-1!==d.text().indexOf(b))})},options:function(a,b,c){return g("OPTIONS",a,b,c)},patch:function(a,b,c){return g("PATCH",a,b,c)},post:function(a,b,c){return g("POST",a,b,c)},put:function(a,b,c){return g("PUT",a,b,c)},trace:function(a,b,c){return g("TRACE",a,b,c)}},i=a.type?a.type.toLowerCase():"get";h[i](a.url,a,function(b,c){200===b?a.success(c.json(),b,null):a.error(c.text(),b,null)})}function e(a,b){"function"==typeof a&&(b=a,a={}),a=a||{},K.extend(G,a),delete G.fixLng,"string"==typeof G.ns&&(G.ns={namespaces:[G.ns],defaultNs:G.ns}),"string"==typeof G.fallbackNS&&(G.fallbackNS=[G.fallbackNS]),G.interpolationPrefixEscaped=K.regexEscape(G.interpolationPrefix),G.interpolationSuffixEscaped=K.regexEscape(G.interpolationSuffix),G.lng||(G.lng=K.detectLanguage()),G.lng?G.useCookie&&K.cookie.create(G.cookieName,G.lng,G.cookieExpirationTime,G.cookieDomain):(G.lng=G.fallbackLng,G.useCookie&&K.cookie.remove(G.cookieName)),E=K.toLanguages(G.lng),y=E[0],K.log("currentLng set to: "+y);var c=s;a.fixLng&&(c=function(a,b){return b=b||{},b.lng=b.lng||c.lng,s(a,b)},c.lng=y),M.setCurrentLng(y),A&&G.setJqueryExt&&m();var d;if(A&&A.Deferred&&(d=A.Deferred()),!G.resStore){var e=K.toLanguages(G.lng);"string"==typeof G.preload&&(G.preload=[G.preload]);for(var f=0,g=G.preload.length;g>f;f++)for(var h=K.toLanguages(G.preload[f]),i=0,j=h.length;j>i;i++)e.indexOf(h[i])<0&&e.push(h[i]);return B.sync.load(e,G,function(a,e){C=e,F=!0,b&&b(c),d&&d.resolve(c)}),d?d.promise():void 0}return C=G.resStore,F=!0,b&&b(c),d&&d.resolve(c),d?d.promise():void 0}function f(a,b){"string"==typeof a&&(a=[a]);for(var c=0,d=a.length;d>c;c++)G.preload.indexOf(a[c])<0&&G.preload.push(a[c]);return e(b)}function g(a,b,c){"string"!=typeof b?(c=b,b=G.ns.defaultNs):G.ns.namespaces.indexOf(b)<0&&G.ns.namespaces.push(b),C[a]=C[a]||{},C[a][b]=C[a][b]||{},K.extend(C[a][b],c)}function h(a){G.ns.defaultNs=a}function i(a,b){j([a],b)}function j(a,b){var c={dynamicLoad:G.dynamicLoad,resGetPath:G.resGetPath,getAsync:G.getAsync,customLoad:G.customLoad,ns:{namespaces:a,defaultNs:""}},d=K.toLanguages(G.lng);"string"==typeof G.preload&&(G.preload=[G.preload]);for(var e=0,f=G.preload.length;f>e;e++)for(var g=K.toLanguages(G.preload[e]),h=0,i=g.length;i>h;h++)d.indexOf(g[h])<0&&d.push(g[h]);for(var j=[],k=0,l=d.length;l>k;k++){var m=!1,n=C[d[k]];if(n)for(var o=0,p=a.length;p>o;o++)n[a[o]]||(m=!0);else m=!0;m&&j.push(d[k])}j.length?B.sync._fetch(j,c,function(c,d){var e=a.length*j.length;K.each(a,function(a,c){G.ns.namespaces.indexOf(c)<0&&G.ns.namespaces.push(c),K.each(j,function(a,f){C[f]=C[f]||{},C[f][c]=d[f][c],e--,0===e&&b&&(G.useLocalStorage&&B.sync._storeLocal(C),b())})})}):b&&b()}function k(a,b,c){return"function"==typeof b&&(c=b,b={}),b.lng=a,e(b,c)}function l(){return y}function m(){function a(a,b,c){if(0!==b.length){var d="text";if(0===b.indexOf("[")){var e=b.split("]");b=e[1],d=e[0].substr(1,e[0].length-1)}b.indexOf(";")===b.length-1&&(b=b.substr(0,b.length-2));var f;"html"===d?(f=G.defaultValueFromContent?A.extend({defaultValue:a.html()},c):c,a.html(A.t(b,f))):"text"===d?(f=G.defaultValueFromContent?A.extend({defaultValue:a.text()},c):c,a.text(A.t(b,f))):(f=G.defaultValueFromContent?A.extend({defaultValue:a.attr(d)},c):c,a.attr(d,A.t(b,f)))}}function b(b,c){var d=b.attr(G.selectorAttr);if(d||"undefined"==typeof d||d===!1||(d=b.text()||b.val()),d){var e=b,f=b.data("i18n-target");if(f&&(e=b.find(f)||b),c||G.useDataAttrOptions!==!0||(c=b.data("i18n-options")),c=c||{},d.indexOf(";")>=0){var g=d.split(";");A.each(g,function(b,d){""!==d&&a(e,d,c)})}else a(e,d,c);G.useDataAttrOptions===!0&&b.data("i18n-options",c)}}A.t=A.t||s,A.fn.i18n=function(a){return this.each(function(){b(A(this),a);var c=A(this).find("["+G.selectorAttr+"]");c.each(function(){b(A(this),a)})})}}function n(a,b,c,d){if(!a)return a;if(d=d||b,a.indexOf(d.interpolationPrefix||G.interpolationPrefix)<0)return a;var e=d.interpolationPrefix?K.regexEscape(d.interpolationPrefix):G.interpolationPrefixEscaped,f=d.interpolationSuffix?K.regexEscape(d.interpolationSuffix):G.interpolationSuffixEscaped,g="HTML"+f;return K.each(b,function(b,h){var i=c?c+G.keyseparator+b:b;"object"==typeof h&&null!==h?a=n(a,h,i,d):d.escapeInterpolation||G.escapeInterpolation?(a=a.replace(new RegExp([e,i,g].join(""),"g"),h),a=a.replace(new RegExp([e,i,f].join(""),"g"),K.escape(h))):a=a.replace(new RegExp([e,i,f].join(""),"g"),h)}),a}function o(a,b){var c=",",d="{",e="}",f=K.extend({},b);for(delete f.postProcess;-1!=a.indexOf(G.reusePrefix)&&(D++,!(D>G.maxRecursion));){var g=a.lastIndexOf(G.reusePrefix),h=a.indexOf(G.reuseSuffix,g)+G.reuseSuffix.length,i=a.substring(g,h),j=i.replace(G.reusePrefix,"").replace(G.reuseSuffix,"");if(-1!=j.indexOf(c)){var k=j.indexOf(c);if(-1!=j.indexOf(d,k)&&-1!=j.indexOf(e,k)){var l=j.indexOf(d,k),m=j.indexOf(e,l)+e.length;try{f=K.extend(f,JSON.parse(j.substring(l,m))),j=j.substring(0,k)}catch(n){}}}var o=v(j,f);a=a.replace(i,o)}return a}function p(a){return a.context&&"string"==typeof a.context}function q(a){return void 0!==a.count&&"string"!=typeof a.count&&1!==a.count}function r(a,b){b=b||{};var c=t(a,b),d=w(a,b);return void 0!==d||d===c}function s(a,b){return F?(D=0,v.apply(null,arguments)):(K.log("i18next not finished initialization. you might have called t function before loading resources finished."),b.defaultValue||"")}function t(a,b){return void 0!==b.defaultValue?b.defaultValue:a}function u(){for(var a=[],b=1;b<arguments.length;b++)a.push(arguments[b]);return{postProcess:"sprintf",sprintf:a}}function v(a,b){"string"==typeof b?"sprintf"===G.shortcutFunction?b=u.apply(null,arguments):"defaultValue"===G.shortcutFunction&&(b={defaultValue:b}):b=b||{},"string"==typeof a&&(a=[a]);for(var c=null,d=0;d<a.length&&(c=a[d],!r(c));d++);var e,f=t(c,b),g=w(c,b),h=b.lng?K.toLanguages(b.lng):E,i=b.ns||G.ns.defaultNs;c.indexOf(G.nsseparator)>-1&&(e=c.split(G.nsseparator),i=e[0],c=e[1]),void 0===g&&G.sendMissing&&(b.lng?L.postMissing(h[0],i,c,f,h):L.postMissing(G.lng,i,c,f,h));var j=b.postProcess||G.postProcess;void 0!==g&&j&&N[j]&&(g=N[j](g,c,b));var k=f;if(f.indexOf(G.nsseparator)>-1&&(e=f.split(G.nsseparator),k=e[1]),k===c&&G.parseMissingKey&&(f=G.parseMissingKey(f)),void 0===g&&(f=n(f,b),f=o(f,b),j&&N[j])){var l=t(c,b);g=N[j](l,c,b)}return void 0!==g?g:f}function w(a,b){b=b||{};var c,d,e=t(a,b),f=E;if(!C)return e;if(b.lng&&(f=K.toLanguages(b.lng),!C[f[0]])){var g=G.getAsync;G.getAsync=!1,B.sync.load(f,G,function(a,b){K.extend(C,b),G.getAsync=g})}var h=b.ns||G.ns.defaultNs;if(a.indexOf(G.nsseparator)>-1){var i=a.split(G.nsseparator);h=i[0],a=i[1]}if(p(b)){c=K.extend({},b),delete c.context,c.defaultValue=G.contextNotFound;var j=h+G.nsseparator+a+"_"+b.context;if(d=s(j,c),d!=G.contextNotFound)return n(d,{context:b.context})}if(q(b)){c=K.extend({},b),delete c.count,c.defaultValue=G.pluralNotFound;var k=h+G.nsseparator+a+G.pluralSuffix,l=M.get(f[0],b.count);if(l>=0?k=k+"_"+l:1===l&&(k=h+G.nsseparator+a),d=s(k,c),d!=G.pluralNotFound)return n(d,{count:b.count,interpolationPrefix:b.interpolationPrefix,interpolationSuffix:b.interpolationSuffix})}for(var m,r=a.split(G.keyseparator),u=0,x=f.length;x>u&&void 0===m;u++){for(var y=f[u],z=0,A=C[y]&&C[y][h];r[z];)A=A&&A[r[z]],z++;if(void 0!==A){if("string"==typeof A)A=n(A,b),A=o(A,b);else if("[object Array]"!==Object.prototype.toString.apply(A)||G.returnObjectTrees||b.returnObjectTrees){if(null===A&&G.fallbackOnNull===!0)A=void 0;else if(null!==A)if(G.returnObjectTrees||b.returnObjectTrees){if("number"!=typeof A){var D={};K.each(A,function(c){D[c]=v(h+G.nsseparator+a+G.keyseparator+c,b)}),A=D}}else A="key '"+h+":"+a+" ("+y+")' "+"returned a object instead of string.",K.log(A)}else A=A.join("\n"),A=n(A,b),A=o(A,b);m=A}}if(void 0===m&&!b.isFallbackLookup&&(G.fallbackToDefaultNS===!0||G.fallbackNS&&G.fallbackNS.length>0))if(b.isFallbackLookup=!0,G.fallbackNS.length){for(var F=0,H=G.fallbackNS.length;H>F;F++)if(m=w(G.fallbackNS[F]+G.nsseparator+a,b)){var I=m.indexOf(G.nsseparator)>-1?m.split(G.nsseparator)[1]:m,J=e.indexOf(G.nsseparator)>-1?e.split(G.nsseparator)[1]:e;if(I!==J)break}}else m=w(a,b);return m}function x(){var a,b=[];if("undefined"!=typeof window&&(!function(){for(var a=window.location.search.substring(1),c=a.split("&"),d=0;d<c.length;d++){var e=c[d].indexOf("=");if(e>0){var f=c[d].substring(0,e),g=c[d].substring(e+1);b[f]=g}}}(),b[G.detectLngQS]&&(a=b[G.detectLngQS])),!a&&"undefined"!=typeof document&&G.useCookie){var c=K.cookie.read(G.cookieName);c&&(a=c)}return a||"undefined"==typeof navigator||(a=navigator.language?navigator.language:navigator.userLanguage),a}Array.prototype.indexOf||(Array.prototype.indexOf=function(a){"use strict";if(null==this)throw new TypeError;var b=Object(this),c=b.length>>>0;if(0===c)return-1;var d=0;if(arguments.length>0&&(d=Number(arguments[1]),d!=d?d=0:0!=d&&1/0!=d&&d!=-1/0&&(d=(d>0||-1)*Math.floor(Math.abs(d)))),d>=c)return-1;for(var e=d>=0?d:Math.max(c-Math.abs(d),0);c>e;e++)if(e in b&&b[e]===a)return e;return-1}),Array.prototype.lastIndexOf||(Array.prototype.lastIndexOf=function(a){"use strict";if(null==this)throw new TypeError;var b=Object(this),c=b.length>>>0;if(0===c)return-1;var d=c;arguments.length>1&&(d=Number(arguments[1]),d!=d?d=0:0!=d&&d!=1/0&&d!=-(1/0)&&(d=(d>0||-1)*Math.floor(Math.abs(d))));for(var e=d>=0?Math.min(d,c-1):c-Math.abs(d);e>=0;e--)if(e in b&&b[e]===a)return e;return-1});var y,z=this,A=z.jQuery||z.Zepto,B={},C={},D=0,E=[],F=!1;"undefined"!=typeof module&&module.exports?module.exports=B:(A&&(A.i18n=A.i18n||B),z.i18n=z.i18n||B);var G={lng:void 0,load:"all",preload:[],lowerCaseLng:!1,returnObjectTrees:!1,fallbackLng:"dev",fallbackNS:[],detectLngQS:"setLng",ns:"translation",fallbackOnNull:!0,fallbackToDefaultNS:!1,nsseparator:":",keyseparator:".",selectorAttr:"data-i18n",debug:!1,resGetPath:"locales/__lng__/__ns__.json",resPostPath:"locales/add/__lng__/__ns__",getAsync:!0,postAsync:!0,resStore:void 0,useLocalStorage:!1,localStorageExpirationTime:6048e5,dynamicLoad:!1,sendMissing:!1,sendMissingTo:"fallback",sendType:"POST",interpolationPrefix:"__",interpolationSuffix:"__",reusePrefix:"$t(",reuseSuffix:")",pluralSuffix:"_plural",pluralNotFound:["plural_not_found",Math.random()].join(""),contextNotFound:["context_not_found",Math.random()].join(""),escapeInterpolation:!1,setJqueryExt:!0,defaultValueFromContent:!0,useDataAttrOptions:!1,cookieExpirationTime:void 0,useCookie:!0,cookieName:"i18next",cookieDomain:void 0,postProcess:void 0,parseMissingKey:void 0,shortcutFunction:"sprintf"},H={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"},I={create:function(a,b,c,d){var e;if(c){var f=new Date;f.setTime(f.getTime()+1e3*60*c),e="; expires="+f.toGMTString()}else e="";d=d?"domain="+d+";":"",document.cookie=a+"="+b+e+";"+d+"path=/"},read:function(a){for(var b=a+"=",c=document.cookie.split(";"),d=0;d<c.length;d++){for(var e=c[d];" "==e.charAt(0);)e=e.substring(1,e.length);if(0===e.indexOf(b))return e.substring(b.length,e.length)}return null},remove:function(a){this.create(a,"",-1)}},J={create:function(){},read:function(){return null},remove:function(){}},K={extend:A?A.extend:a,each:A?A.each:b,ajax:A?A.ajax:d,cookie:"undefined"!=typeof document?I:J,detectLanguage:x,escape:c,log:function(a){G.debug&&"undefined"!=typeof console&&console.log(a)},toLanguages:function(a){var b=[];if("string"==typeof a&&a.indexOf("-")>-1){var c=a.split("-");a=G.lowerCaseLng?c[0].toLowerCase()+"-"+c[1].toLowerCase():c[0].toLowerCase()+"-"+c[1].toUpperCase(),"unspecific"!==G.load&&b.push(a),"current"!==G.load&&b.push(c[0])}else b.push(a);return-1===b.indexOf(G.fallbackLng)&&G.fallbackLng&&b.push(G.fallbackLng),b},regexEscape:function(a){return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}};K.applyReplacement=n;var L={load:function(a,b,c){b.useLocalStorage?L._loadLocal(a,b,function(d,e){for(var f=[],g=0,h=a.length;h>g;g++)e[a[g]]||f.push(a[g]);f.length>0?L._fetch(f,b,function(a,b){K.extend(e,b),L._storeLocal(b),c(null,e)}):c(null,e)}):L._fetch(a,b,function(a,b){c(null,b)})},_loadLocal:function(a,b,c){var d={},e=(new Date).getTime();if(window.localStorage){var f=a.length;K.each(a,function(a,g){var h=window.localStorage.getItem("res_"+g);h&&(h=JSON.parse(h),h.i18nStamp&&h.i18nStamp+b.localStorageExpirationTime>e&&(d[g]=h)),f--,0===f&&c(null,d)})}},_storeLocal:function(a){if(window.localStorage)for(var b in a)a[b].i18nStamp=(new Date).getTime(),window.localStorage.setItem("res_"+b,JSON.stringify(a[b]))},_fetch:function(a,b,c){var d=b.ns,e={};if(b.dynamicLoad){var f=function(a,b){c(null,b)};if("function"==typeof b.customLoad)b.customLoad(a,d.namespaces,b,f);else{var g=n(b.resGetPath,{lng:a.join("+"),ns:d.namespaces.join("+")});K.ajax({url:g,success:function(a){K.log("loaded: "+g),f(null,a)},error:function(a,b,c){K.log("failed loading: "+g),f("failed loading resource.json error: "+c)},dataType:"json",async:b.getAsync})}}else{var h,i=d.namespaces.length*a.length;K.each(d.namespaces,function(d,f){K.each(a,function(a,d){var g=function(a,b){a&&(h=h||[],h.push(a)),e[d]=e[d]||{},e[d][f]=b,i--,0===i&&c(h,e)};"function"==typeof b.customLoad?b.customLoad(d,f,b,g):L._fetchOne(d,f,b,g)})})}},_fetchOne:function(a,b,c,d){var e=n(c.resGetPath,{lng:a,ns:b});K.ajax({url:e,success:function(a){K.log("loaded: "+e),d(null,a)},error:function(a,b,c){K.log("failed loading: "+e),d(c,{})},dataType:"json",async:c.getAsync})},postMissing:function(a,b,c,d,e){var f={};f[c]=d;var g=[];if("fallback"===G.sendMissingTo&&G.fallbackLng!==!1)g.push({lng:G.fallbackLng,url:n(G.resPostPath,{lng:G.fallbackLng,ns:b})});else if("current"===G.sendMissingTo||"fallback"===G.sendMissingTo&&G.fallbackLng===!1)g.push({lng:a,url:n(G.resPostPath,{lng:a,ns:b})});else if("all"===G.sendMissingTo)for(var h=0,i=e.length;i>h;h++)g.push({lng:e[h],url:n(G.resPostPath,{lng:e[h],ns:b})});for(var j=0,k=g.length;k>j;j++){var l=g[j];K.ajax({url:l.url,type:G.sendType,data:f,success:function(){K.log("posted missing key '"+c+"' to: "+l.url);for(var a=c.split("."),e=0,f=C[l.lng][b];a[e];)f=f[a[e]]=e===a.length-1?d:f[a[e]]||{},e++},error:function(){K.log("failed posting missing key '"+c+"' to: "+l.url)},dataType:"json",async:G.postAsync})}}},M={rules:{ach:{name:"Acholi",numbers:[1,2],plurals:function(a){return Number(a>1)}},af:{name:"Afrikaans",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ak:{name:"Akan",numbers:[1,2],plurals:function(a){return Number(a>1)}},am:{name:"Amharic",numbers:[1,2],plurals:function(a){return Number(a>1)}},an:{name:"Aragonese",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ar:{name:"Arabic",numbers:[0,1,2,3,11,100],plurals:function(a){return Number(0===a?0:1==a?1:2==a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5)}},arn:{name:"Mapudungun",numbers:[1,2],plurals:function(a){return Number(a>1)}},ast:{name:"Asturian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ay:{name:"Aymará",numbers:[1],plurals:function(){return 0}},az:{name:"Azerbaijani",numbers:[1,2],plurals:function(a){return Number(1!=a)}},be:{name:"Belarusian",numbers:[1,2,5],plurals:function(a){return Number(1==a%10&&11!=a%100?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},bg:{name:"Bulgarian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},bn:{name:"Bengali",numbers:[1,2],plurals:function(a){return Number(1!=a)}},bo:{name:"Tibetan",numbers:[1],plurals:function(){return 0}},br:{name:"Breton",numbers:[1,2],plurals:function(a){return Number(a>1)}},bs:{name:"Bosnian",numbers:[1,2,5],plurals:function(a){return Number(1==a%10&&11!=a%100?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},ca:{name:"Catalan",numbers:[1,2],plurals:function(a){return Number(1!=a)}},cgg:{name:"Chiga",numbers:[1],plurals:function(){return 0}},cs:{name:"Czech",numbers:[1,2,5],plurals:function(a){return Number(1==a?0:a>=2&&4>=a?1:2)}},csb:{name:"Kashubian",numbers:[1,2,5],plurals:function(a){return Number(1==a?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},cy:{name:"Welsh",numbers:[1,2,3,8],plurals:function(a){return Number(1==a?0:2==a?1:8!=a&&11!=a?2:3)}},da:{name:"Danish",numbers:[1,2],plurals:function(a){return Number(1!=a)}},de:{name:"German",numbers:[1,2],plurals:function(a){return Number(1!=a)}},dz:{name:"Dzongkha",numbers:[1],plurals:function(){return 0}},el:{name:"Greek",numbers:[1,2],plurals:function(a){return Number(1!=a)}},en:{name:"English",numbers:[1,2],plurals:function(a){return Number(1!=a)}},eo:{name:"Esperanto",numbers:[1,2],plurals:function(a){return Number(1!=a)}},es:{name:"Spanish",numbers:[1,2],plurals:function(a){return Number(1!=a)}},es_ar:{name:"Argentinean Spanish",numbers:[1,2],plurals:function(a){return Number(1!=a)}},et:{name:"Estonian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},eu:{name:"Basque",numbers:[1,2],plurals:function(a){return Number(1!=a)}},fa:{name:"Persian",numbers:[1],plurals:function(){return 0}},fi:{name:"Finnish",numbers:[1,2],plurals:function(a){return Number(1!=a)}},fil:{name:"Filipino",numbers:[1,2],plurals:function(a){return Number(a>1)}},fo:{name:"Faroese",numbers:[1,2],plurals:function(a){return Number(1!=a)}},fr:{name:"French",numbers:[1,2],plurals:function(a){return Number(a>1)}},fur:{name:"Friulian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},fy:{name:"Frisian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ga:{name:"Irish",numbers:[1,2,3,7,11],plurals:function(a){return Number(1==a?0:2==a?1:7>a?2:11>a?3:4)}},gd:{name:"Scottish Gaelic",numbers:[1,2,3,20],plurals:function(a){return Number(1==a||11==a?0:2==a||12==a?1:a>2&&20>a?2:3)}},gl:{name:"Galician",numbers:[1,2],plurals:function(a){return Number(1!=a)}},gu:{name:"Gujarati",numbers:[1,2],plurals:function(a){return Number(1!=a)}},gun:{name:"Gun",numbers:[1,2],plurals:function(a){return Number(a>1)}},ha:{name:"Hausa",numbers:[1,2],plurals:function(a){return Number(1!=a)}},he:{name:"Hebrew",numbers:[1,2],plurals:function(a){return Number(1!=a)}},hi:{name:"Hindi",numbers:[1,2],plurals:function(a){return Number(1!=a)}},hr:{name:"Croatian",numbers:[1,2,5],plurals:function(a){return Number(1==a%10&&11!=a%100?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},hu:{name:"Hungarian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},hy:{name:"Armenian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ia:{name:"Interlingua",numbers:[1,2],plurals:function(a){return Number(1!=a)}},id:{name:"Indonesian",numbers:[1],plurals:function(){return 0}},is:{name:"Icelandic",numbers:[1,2],plurals:function(a){return Number(1!=a%10||11==a%100)}},it:{name:"Italian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ja:{name:"Japanese",numbers:[1],plurals:function(){return 0}},jbo:{name:"Lojban",numbers:[1],plurals:function(){return 0}},jv:{name:"Javanese",numbers:[0,1],plurals:function(a){return Number(0!==a)}},ka:{name:"Georgian",numbers:[1],plurals:function(){return 0}},kk:{name:"Kazakh",numbers:[1],plurals:function(){return 0}},km:{name:"Khmer",numbers:[1],plurals:function(){return 0}},kn:{name:"Kannada",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ko:{name:"Korean",numbers:[1],plurals:function(){return 0}},ku:{name:"Kurdish",numbers:[1,2],plurals:function(a){return Number(1!=a)}},kw:{name:"Cornish",numbers:[1,2,3,4],plurals:function(a){return Number(1==a?0:2==a?1:3==a?2:3)}},ky:{name:"Kyrgyz",numbers:[1],plurals:function(){return 0}},lb:{name:"Letzeburgesch",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ln:{name:"Lingala",numbers:[1,2],plurals:function(a){return Number(a>1)}},lo:{name:"Lao",numbers:[1],plurals:function(){return 0}},lt:{name:"Lithuanian",numbers:[1,2,10],plurals:function(a){return Number(1==a%10&&11!=a%100?0:a%10>=2&&(10>a%100||a%100>=20)?1:2)}},lv:{name:"Latvian",numbers:[0,1,2],plurals:function(a){return Number(1==a%10&&11!=a%100?0:0!==a?1:2)}},mai:{name:"Maithili",numbers:[1,2],plurals:function(a){return Number(1!=a)}},mfe:{name:"Mauritian Creole",numbers:[1,2],plurals:function(a){return Number(a>1)}},mg:{name:"Malagasy",numbers:[1,2],plurals:function(a){return Number(a>1)}},mi:{name:"Maori",numbers:[1,2],plurals:function(a){return Number(a>1)}},mk:{name:"Macedonian",numbers:[1,2],plurals:function(a){return Number(1==a||1==a%10?0:1)}},ml:{name:"Malayalam",numbers:[1,2],plurals:function(a){return Number(1!=a)}},mn:{name:"Mongolian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},mnk:{name:"Mandinka",numbers:[0,1,2],plurals:function(a){return Number(1==a?1:2)}},mr:{name:"Marathi",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ms:{name:"Malay",numbers:[1],plurals:function(){return 0}},mt:{name:"Maltese",numbers:[1,2,11,20],plurals:function(a){return Number(1==a?0:0===a||a%100>1&&11>a%100?1:a%100>10&&20>a%100?2:3)}},nah:{name:"Nahuatl",numbers:[1,2],plurals:function(a){return Number(1!=a)}},nap:{name:"Neapolitan",numbers:[1,2],plurals:function(a){return Number(1!=a)}},nb:{name:"Norwegian Bokmal",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ne:{name:"Nepali",numbers:[1,2],plurals:function(a){return Number(1!=a)}},nl:{name:"Dutch",numbers:[1,2],plurals:function(a){return Number(1!=a)}},nn:{name:"Norwegian Nynorsk",numbers:[1,2],plurals:function(a){return Number(1!=a)}},no:{name:"Norwegian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},nso:{name:"Northern Sotho",numbers:[1,2],plurals:function(a){return Number(1!=a)}},oc:{name:"Occitan",numbers:[1,2],plurals:function(a){return Number(a>1)}},or:{name:"Oriya",numbers:[2,1],plurals:function(a){return Number(1!=a)}},pa:{name:"Punjabi",numbers:[1,2],plurals:function(a){return Number(1!=a)}},pap:{name:"Papiamento",numbers:[1,2],plurals:function(a){return Number(1!=a)}},pl:{name:"Polish",numbers:[1,2,5],plurals:function(a){return Number(1==a?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},pms:{name:"Piemontese",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ps:{name:"Pashto",numbers:[1,2],plurals:function(a){return Number(1!=a)}},pt:{name:"Portuguese",numbers:[1,2],plurals:function(a){return Number(1!=a)}},pt_br:{name:"Brazilian Portuguese",numbers:[1,2],plurals:function(a){return Number(1!=a)}},rm:{name:"Romansh",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ro:{name:"Romanian",numbers:[1,2,20],plurals:function(a){return Number(1==a?0:0===a||a%100>0&&20>a%100?1:2)}},ru:{name:"Russian",numbers:[1,2,5],plurals:function(a){return Number(1==a%10&&11!=a%100?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},sah:{name:"Yakut",numbers:[1],plurals:function(){return 0}},sco:{name:"Scots",numbers:[1,2],plurals:function(a){return Number(1!=a)}},se:{name:"Northern Sami",numbers:[1,2],plurals:function(a){return Number(1!=a)}},si:{name:"Sinhala",numbers:[1,2],plurals:function(a){return Number(1!=a)}},sk:{name:"Slovak",numbers:[1,2,5],plurals:function(a){return Number(1==a?0:a>=2&&4>=a?1:2)}},sl:{name:"Slovenian",numbers:[5,1,2,3],plurals:function(a){return Number(1==a%100?1:2==a%100?2:3==a%100||4==a%100?3:0)}},so:{name:"Somali",numbers:[1,2],plurals:function(a){return Number(1!=a)}},son:{name:"Songhay",numbers:[1,2],plurals:function(a){return Number(1!=a)}},sq:{name:"Albanian",numbers:[1,2],plurals:function(a){return Number(1!=a)}},sr:{name:"Serbian",numbers:[1,2,5],plurals:function(a){return Number(1==a%10&&11!=a%100?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},su:{name:"Sundanese",numbers:[1],plurals:function(){return 0}},sv:{name:"Swedish",numbers:[1,2],plurals:function(a){return Number(1!=a)}},sw:{name:"Swahili",numbers:[1,2],plurals:function(a){return Number(1!=a)}},ta:{name:"Tamil",numbers:[1,2],plurals:function(a){return Number(1!=a)}},te:{name:"Telugu",numbers:[1,2],plurals:function(a){return Number(1!=a)}},tg:{name:"Tajik",numbers:[1,2],plurals:function(a){return Number(a>1)}},th:{name:"Thai",numbers:[1],plurals:function(){return 0}},ti:{name:"Tigrinya",numbers:[1,2],plurals:function(a){return Number(a>1)}},tk:{name:"Turkmen",numbers:[1,2],plurals:function(a){return Number(1!=a)}},tr:{name:"Turkish",numbers:[1,2],plurals:function(a){return Number(a>1)}},tt:{name:"Tatar",numbers:[1],plurals:function(){return 0}},ug:{name:"Uyghur",numbers:[1],plurals:function(){return 0}},uk:{name:"Ukrainian",numbers:[1,2,5],plurals:function(a){return Number(1==a%10&&11!=a%100?0:a%10>=2&&4>=a%10&&(10>a%100||a%100>=20)?1:2)}},ur:{name:"Urdu",numbers:[1,2],plurals:function(a){return Number(1!=a)}},uz:{name:"Uzbek",numbers:[1,2],plurals:function(a){return Number(a>1)}},vi:{name:"Vietnamese",numbers:[1],plurals:function(){return 0}},wa:{name:"Walloon",numbers:[1,2],plurals:function(a){return Number(a>1)}},wo:{name:"Wolof",numbers:[1],plurals:function(){return 0}},yo:{name:"Yoruba",numbers:[1,2],plurals:function(a){return Number(1!=a)}},zh:{name:"Chinese",numbers:[1],plurals:function(){return 0}}},addRule:function(a,b){M.rules[a]=b},setCurrentLng:function(a){if(!M.currentRule||M.currentRule.lng!==a){var b=a.split("-");M.currentRule={lng:a,rule:M.rules[b[0]]}}},get:function(a,b){function c(b,c){var d;if(d=M.currentRule&&M.currentRule.lng===a?M.currentRule.rule:M.rules[b]){var e=d.plurals(c),f=d.numbers[e];return 2===d.numbers.length&&1===d.numbers[0]&&(2===f?f=-1:1===f&&(f=1)),f}return 1===c?"1":"-1"}var d=a.split("-");return c(d[0],b)}},N={},O=function(a,b){N[a]=b},P=function(){function a(a){return Object.prototype.toString.call(a).slice(8,-1).toLowerCase()}function b(a,b){for(var c=[];b>0;c[--b]=a);return c.join("")}var c=function(){return c.cache.hasOwnProperty(arguments[0])||(c.cache[arguments[0]]=c.parse(arguments[0])),c.format.call(null,c.cache[arguments[0]],arguments)};return c.format=function(c,d){var e,f,g,h,i,j,k,l=1,m=c.length,n="",o=[];for(f=0;m>f;f++)if(n=a(c[f]),"string"===n)o.push(c[f]);else if("array"===n){if(h=c[f],h[2])for(e=d[l],g=0;g<h[2].length;g++){if(!e.hasOwnProperty(h[2][g]))throw P('[sprintf] property "%s" does not exist',h[2][g]);e=e[h[2][g]]}else e=h[1]?d[h[1]]:d[l++];if(/[^s]/.test(h[8])&&"number"!=a(e))throw P("[sprintf] expecting number but found %s",a(e));switch(h[8]){case"b":e=e.toString(2);break;case"c":e=String.fromCharCode(e);break;case"d":e=parseInt(e,10);break;case"e":e=h[7]?e.toExponential(h[7]):e.toExponential();break;case"f":e=h[7]?parseFloat(e).toFixed(h[7]):parseFloat(e);break;case"o":e=e.toString(8);break;case"s":e=(e=String(e))&&h[7]?e.substring(0,h[7]):e;break;case"u":e=Math.abs(e);break;case"x":e=e.toString(16);break;case"X":e=e.toString(16).toUpperCase()}e=/[def]/.test(h[8])&&h[3]&&e>=0?"+"+e:e,j=h[4]?"0"==h[4]?"0":h[4].charAt(1):" ",k=h[6]-String(e).length,i=h[6]?b(j,k):"",o.push(h[5]?e+i:i+e)}return o.join("")},c.cache={},c.parse=function(a){for(var b=a,c=[],d=[],e=0;b;){if(null!==(c=/^[^\x25]+/.exec(b)))d.push(c[0]);else if(null!==(c=/^\x25{2}/.exec(b)))d.push("%");else{if(null===(c=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(b)))throw"[sprintf] huh?";if(c[2]){e|=1;var f=[],g=c[2],h=[];if(null===(h=/^([a-z_][a-z_\d]*)/i.exec(g)))throw"[sprintf] huh?";for(f.push(h[1]);""!==(g=g.substring(h[0].length));)if(null!==(h=/^\.([a-z_][a-z_\d]*)/i.exec(g)))f.push(h[1]);else{if(null===(h=/^\[(\d+)\]/.exec(g)))throw"[sprintf] huh?";f.push(h[1])}c[2]=f}else e|=2;if(3===e)throw"[sprintf] mixing positional and named placeholders is not (yet) supported";d.push(c)}b=b.substring(c[0].length)}return d},c}(),Q=function(a,b){return b.unshift(a),P.apply(null,b)};O("sprintf",function(a,b,c){return c.sprintf?"[object Array]"===Object.prototype.toString.apply(c.sprintf)?Q(a,c.sprintf):"object"==typeof c.sprintf?P(a,c.sprintf):a:a}),B.init=e,B.setLng=k,B.preload=f,B.addResourceBundle=g,B.loadNamespace=i,B.loadNamespaces=j,B.setDefaultNamespace=h,B.t=s,B.translate=s,B.exists=r,B.detectLanguage=K.detectLanguage,B.pluralExtensions=M,B.sync=L,B.functions=K,B.lng=l,B.addPostProcessor=O,B.options=G}();
(function(){
	var cordovaRef = window.PhoneGap || window.Cordova || window.cordova;

	function Zip(){}
	Zip.prototype.unzip = function(sourceZip, targetDirectory, success, error) {
		cordovaRef.exec(success, error, 'Zip', 'unzip', [sourceZip, targetDirectory]);
	};

	cordovaRef.addConstructor && cordovaRef.addConstructor(function() {
		if (!window.plugins) {
			window.plugins = {};
		}

		if (!window.plugins.zip) {
			window.plugins.zip = new Zip();
			console.log("**************************** Zip ready *************************");
		}
	});
})();


/**
 * An Image Resizer Plugin for PhoneGap. Updated to fit Cordova 2+
 * The JavaScript based plugin fits both the Android and the iOS native plugins.
 *
 * The software is open source, MIT licensed.
 * Copyright (C) 2012, webXells GmbH All Rights Reserved.
 *
 * Raanan Weber, webXells GmbH http://www.webxells.com
 */

var ImageResizer = function () {},
    pluginName = "ImageResizer",
    resizerOptions = {
        IMAGE_DATA_TYPE_BASE64: "base64Image",
        IMAGE_DATA_TYPE_URL: "urlImage",
        RESIZE_TYPE_FACTOR: "factorResize",
        RESIZE_TYPE_PIXEL: "pixelResize",
        FORMAT_JPG: "jpg",
        FORMAT_PNG: "png"
    };

/**
 * Resize an image
 * @param success success callback, will receive the data sent from the native plugin
 * @param fail error callback, will receive an error string describing what went wrong
 * @param imageData The image data, either base64 or local url
 * @param width width factor / width in pixels
 * @param height height factor / height in pixels
 * @param options extra options -
 *              format : file format to use (ImageResizer.FORMAT_JPG/ImageResizer.FORMAT_PNG) - defaults to JPG
 *              imageDataType : the data type (IMAGE_DATA_TYPE_BASE64/IMAGE_DATA_TYPE_URL) - defaults to Base64
 *              resizeType : type of the resize (RESIZE_TYPE_FACTOR/RESIZE_TYPE_PIXEL) - must be given
 *              quality : INTEGER, compression quality - defaults to 70
 * @returns JSON Object with the following parameters:
 *              imageData : Base64 of the resized image
 *              height : height of the resized image
 *              width: width of the resized image
 */
ImageResizer.prototype.resizeImage = function (imageData, width,
                                               height, options) {
    if (!options) {
        options = {}
    }
    var params = {
        data: imageData,
        width: width,
        height: height,
        format: options.format,
        imageDataType: options.imageType,
        resizeType: options.resizeType,
        quality: options.quality ? options.quality : 70
    }, deferred = new $.Deferred();

    cordova.exec(deferred.resolve, deferred.reject, pluginName,
        "resizeImage", [params]);
    return deferred.promise();
};
/**
 * Get an image width and height
 * @param success success callback, will receive the data sent from the native plugin
 * @param fail error callback, will receive an error string describing what went wrong
 * @param imageData The image data, either base64 or local url
 * @param options extra options -
 *              imageDataType : the data type (IMAGE_DATA_TYPE_BASE64/IMAGE_DATA_TYPE_URL) - defaults to Base64
 * @returns JSON Object with the following parameters:
 *              height : height of the image
 *              width: width of the image
 */
ImageResizer.prototype.imageSize = function (imageData,
                                             options) {
    if (!options) {
        options = {}
    }
    var params = {
        data: imageData,
        imageDataType: options.imageType
    }, deferred = new $.Deferred();

    cordova.exec(deferred.resolve, deferred.reject, pluginName,
        "imageSize", [params]);
    return deferred.promise();
};

/**
 * Store an image locally
 * @param success success callback, will receive the data sent from the native plugin
 * @param fail error callback, will receive an error string describing what went wrong
 * @param imageData The image data, either base64 or local url
 * @param options extra options -
 *              format : file format to use (ImageResizer.FORMAT_JPG/ImageResizer.FORMAT_PNG) - defaults to JPG
 *              imageDataType : the data type (IMAGE_DATA_TYPE_BASE64/IMAGE_DATA_TYPE_URL) - defaults to Base64
 *              filename : filename to be stored, with ot without ending (if no ending given, format will be used) - must be given.
 *              directory : in which directory should the file be stored - must be given
 *              quality : INTEGER, compression quality - defaults to 100
 *                photoAlbum : [iOS only] store the image in the temporary directory of the app, or in the photoAlbum (true for photoAlbum)
 *                             Note : in iOS only filename should be given, directory will be ignored.
 * @returns JSON Object with the following parameters:
 *              url : URL of the file just stored
 */
ImageResizer.prototype.storeImage = function (imageData, options) {
    if (!options) {
        options = {}
    }
    var params = {
        data: imageData,
        format: options.format,
        imageDataType: options.imageType,
        filename: options.filename,
        directory: options.directory,
        quality: options.quality ? options.quality : 100,
        photoAlbum: !!options.photoAlbum
    }, deferred = new $.Deferred();

    cordova.exec(deferred.resolve, deferred.reject, pluginName,
        "storeImage", [params]);
    return deferred.promise();
};

cordova.addConstructor(function () {
    window.imageResizer = new ImageResizer();

    // backwards compatibility
    window.imageResizer.options = resizerOptions;
    window.plugins = window.plugins || {};
    window.plugins.imageResizer = window.imageResizer;
    console.log("Image Resizer Registered under window.imageResizer");
});


(function(/*! Stitch !*/) {
  if (!this.require) {
    var modules = {}, cache = {}, require = function(name, root) {
      var path = expand(root, name), indexPath = expand(path, './index'), module, fn;
      module   = cache[path] || cache[indexPath]
      if (module) {
        return module.exports;
      } else if (fn = modules[path] || modules[path = indexPath]) {
        module = {id: path, exports: {}};
        try {
          cache[path] = module;
          fn(module.exports, function(name) {
            return require(name, dirname(path));
          }, module);
          return module.exports;
        } catch (err) {
          delete cache[path];
          throw err;
        }
      } else {
        throw 'module \'' + name + '\' not found';
      }
    }, expand = function(root, name) {
      var results = [], parts, part;
      if (/^\.\.?(\/|$)/.test(name)) {
        parts = [root, name].join('/').split('/');
      } else {
        parts = name.split('/');
      }
      for (var i = 0, length = parts.length; i < length; i++) {
        part = parts[i];
        if (part == '..') {
          results.pop();
        } else if (part != '.' && part != '') {
          results.push(part);
        }
      }
      return results.join('/');
    }, dirname = function(path) {
      return path.split('/').slice(0, -1).join('/');
    };
    this.require = function(name) {
      return require(name, '');
    }
    this.require.define = function(bundle) {
      for (var key in bundle)
        modules[key] = bundle[key];
    };
    this.require.modules = modules;
    this.require.cache   = cache;
  }
  return this.require.define;
}).call(this)({
  "es5-shimify/index": function(exports, require, module) {// Copyright 2009-2012 by contributors, MIT License
// vim: ts=4 sts=4 sw=4 expandtab

//Add semicolon to prevent IIFE from being passed as argument to concated code.
;
// Module systems magic dance
(function (definition) {
    // RequireJS
    if (typeof define == "function") {
        define(definition);
    // YUI3
    } else if (typeof YUI == "function") {
        YUI.add("es5", definition);
    // CommonJS and <script>
    } else {
        definition();
    }
})(function () {

/**
 * Brings an environment as close to ECMAScript 5 compliance
 * as is possible with the facilities of erstwhile engines.
 *
 * Annotated ES5: http://es5.github.com/ (specific links below)
 * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
 * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
 */

// ES-5 15.1.2.2
if (parseInt('08') !== 8) {
    parseInt = (function (origParseInt) {
        var hexRegex = /^0[xX]/;
        return function parseIntES5(str, radix) {
            str = String(str).trim();
            if (!+radix) {
                radix = hexRegex.test(str) ? 16 : 10;
            }
            return origParseInt(str, radix);
        };
    }(parseInt));
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

if (!Function.prototype.bind) {
    Function.prototype.bind = function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (typeof target != "function") {
            throw new TypeError("Function.prototype.bind called on incompatible " + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = _Array_slice_.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(_Array_slice_.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(_Array_slice_.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push("$" + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only 
        // way to set the length property of a function. 
        // In environments where Content Security Policies enabled (Chrome extensions, 
        // for ex.) all use of eval or Function costructor throws an exception. 
        // However in all of these environments Function.prototype.bind exists 
        // and so this code will never be executed.
        var bound = Function("binder", "return function(" + boundArgs.join(",") + "){return binder.apply(this,arguments)}")(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    };
}

// Shortcut to an often accessed properties, in order to avoid multiple
// dereference that costs universally.
// _Please note: Shortcuts are defined after `Function.prototype.bind` as we
// us it in defining shortcuts.
var call = Function.prototype.call;
var prototypeOfArray = Array.prototype;
var prototypeOfObject = Object.prototype;
var _Array_slice_ = prototypeOfArray.slice;
// Having a toString local variable name breaks in Opera so use _toString.
var _toString = call.bind(prototypeOfObject.toString);
var owns = call.bind(prototypeOfObject.hasOwnProperty);

// If JS engine supports accessors creating shortcuts.
var defineGetter;
var defineSetter;
var lookupGetter;
var lookupSetter;
var supportsAccessors;
if ((supportsAccessors = owns(prototypeOfObject, "__defineGetter__"))) {
    defineGetter = call.bind(prototypeOfObject.__defineGetter__);
    defineSetter = call.bind(prototypeOfObject.__defineSetter__);
    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
}

//
// Array
// =====
//

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.12
// Default value for second param
// [bugfix, ielt9, old browsers]
// IE < 9 bug: [1,2].splice(0).join("") == "" but should be "12"
if ([1,2].splice(0).length != 2) {
    var array_splice = Array.prototype.splice;
    var array_push = Array.prototype.push;
    var array_unshift = Array.prototype.unshift;

    if (function() { // test IE < 9 to splice bug - see issue #138
        function makeArray(l) {
            var a = [];
            while (l--) {
                a.unshift(l)
            }
            return a
        }

        var array = []
            , lengthBefore
        ;

        array.splice.bind(array, 0, 0).apply(null, makeArray(20));
        array.splice.bind(array, 0, 0).apply(null, makeArray(26));

        lengthBefore = array.length; //20
        array.splice(5, 0, "XXX"); // add one element

        if (lengthBefore + 1 == array.length) {
            return true;// has right splice implementation without bugs
        }
        // else {
        //    IE8 bug
        // }
    }()) {//IE 6/7
        Array.prototype.splice = function(start, deleteCount) {
            if (!arguments.length) {
                return [];
            } else {
                return array_splice.apply(this, [
                    start === void 0 ? 0 : start,
                    deleteCount === void 0 ? (this.length - start) : deleteCount
                ].concat(_Array_slice_.call(arguments, 2)))
            }
        };
    }
    else {//IE8
        Array.prototype.splice = function(start, deleteCount) {
            var result
                , args = _Array_slice_.call(arguments, 2)
                , addElementsCount = args.length
            ;

            if (!arguments.length) {
                return [];
            }

            if (start === void 0) { // default
                start = 0;
            }
            if (deleteCount === void 0) { // default
                deleteCount = this.length - start;
            }

            if (addElementsCount > 0) {
                if (deleteCount <= 0) {
                    if (start == this.length) { // tiny optimisation #1
                        array_push.apply(this, args);
                        return [];
                    }

                    if (start == 0) { // tiny optimisation #2
                        array_unshift.apply(this, args);
                        return [];
                    }
                }

                // Array.prototype.splice implementation
                result = _Array_slice_.call(this, start, start + deleteCount);// delete part
                args.push.apply(args, _Array_slice_.call(this, start + deleteCount, this.length));// right part
                args.unshift.apply(args, _Array_slice_.call(this, 0, start));// left part

                // delete all items from this array and replace it to 'left part' + _Array_slice_.call(arguments, 2) + 'right part'
                args.unshift(0, this.length);

                array_splice.apply(this, args);

                return result;
            }

            return array_splice.call(this, start, deleteCount);
        }

    }
}

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.13
// Return len+argCount.
// [bugfix, ielt8]
// IE < 8 bug: [].unshift(0) == undefined but should be "1"
if ([].unshift(0) != 1) {
    var array_unshift = Array.prototype.unshift;
    Array.prototype.unshift = function() {
        array_unshift.apply(this, arguments);
        return this.length;
    };
}

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
if (!Array.isArray) {
    Array.isArray = function isArray(obj) {
        return _toString(obj) == "[object Array]";
    };
}

// The IsCallable() check in the Array functions
// has been replaced with a strict check on the
// internal class of the object to trap cases where
// the provided function was actually a regular
// expression literal, which in V8 and
// JavaScriptCore is a typeof "function".  Only in
// V8 are regular expression literals permitted as
// reduce parameters, so it is desirable in the
// general case for the shim to match the more
// strict and common behavior of rejecting regular
// expressions.

// ES5 15.4.4.18
// http://es5.github.com/#x15.4.4.18
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach

// Check failure of by-index access of string characters (IE < 9)
// and failure of `0 in boxedString` (Rhino)
var boxedString = Object("a"),
    splitString = boxedString[0] != "a" || !(0 in boxedString);
// Check node 0.6.21 bug where third parameter is not boxed
var boxedForEach = true;
if (Array.prototype.forEach) {
    Array.prototype.forEach.call("foo", function(item, i, obj) {
        if (typeof obj !== 'object') boxedForEach = false;
    });
}

if (!Array.prototype.forEach || !boxedForEach) {
    Array.prototype.forEach = function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    };
}

// ES5 15.4.4.19
// http://es5.github.com/#x15.4.4.19
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
if (!Array.prototype.map) {
    Array.prototype.map = function map(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0,
            result = Array(length),
            thisp = arguments[1];

        // If no callback function or if callback is not a callable function
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self)
                result[i] = fun.call(thisp, self[i], i, object);
        }
        return result;
    };
}

// ES5 15.4.4.20
// http://es5.github.com/#x15.4.4.20
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
if (!Array.prototype.filter) {
    Array.prototype.filter = function filter(fun /*, thisp */) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                    object,
            length = self.length >>> 0,
            result = [],
            value,
            thisp = arguments[1];

        // If no callback function or if callback is not a callable function
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self) {
                value = self[i];
                if (fun.call(thisp, value, i, object)) {
                    result.push(value);
                }
            }
        }
        return result;
    };
}

// ES5 15.4.4.16
// http://es5.github.com/#x15.4.4.16
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
if (!Array.prototype.every) {
    Array.prototype.every = function every(fun /*, thisp */) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0,
            thisp = arguments[1];

        // If no callback function or if callback is not a callable function
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self && !fun.call(thisp, self[i], i, object)) {
                return false;
            }
        }
        return true;
    };
}

// ES5 15.4.4.17
// http://es5.github.com/#x15.4.4.17
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
if (!Array.prototype.some) {
    Array.prototype.some = function some(fun /*, thisp */) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0,
            thisp = arguments[1];

        // If no callback function or if callback is not a callable function
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        for (var i = 0; i < length; i++) {
            if (i in self && fun.call(thisp, self[i], i, object)) {
                return true;
            }
        }
        return false;
    };
}

// ES5 15.4.4.21
// http://es5.github.com/#x15.4.4.21
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
if (!Array.prototype.reduce) {
    Array.prototype.reduce = function reduce(fun /*, initial*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        // no value to return if no initial value and an empty array
        if (!length && arguments.length == 1) {
            throw new TypeError("reduce of empty array with no initial value");
        }

        var i = 0;
        var result;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i++];
                    break;
                }

                // if array contains no values, no initial value to return
                if (++i >= length) {
                    throw new TypeError("reduce of empty array with no initial value");
                }
            } while (true);
        }

        for (; i < length; i++) {
            if (i in self) {
                result = fun.call(void 0, result, self[i], i, object);
            }
        }

        return result;
    };
}

// ES5 15.4.4.22
// http://es5.github.com/#x15.4.4.22
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
if (!Array.prototype.reduceRight) {
    Array.prototype.reduceRight = function reduceRight(fun /*, initial*/) {
        var object = toObject(this),
            self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                object,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (_toString(fun) != "[object Function]") {
            throw new TypeError(fun + " is not a function");
        }

        // no value to return if no initial value, empty array
        if (!length && arguments.length == 1) {
            throw new TypeError("reduceRight of empty array with no initial value");
        }

        var result, i = length - 1;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i--];
                    break;
                }

                // if array contains no values, no initial value to return
                if (--i < 0) {
                    throw new TypeError("reduceRight of empty array with no initial value");
                }
            } while (true);
        }

        if (i < 0) {
            return result;
        }

        do {
            if (i in this) {
                result = fun.call(void 0, result, self[i], i, object);
            }
        } while (i--);

        return result;
    };
}

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
if (!Array.prototype.indexOf || ([0, 1].indexOf(1, 2) != -1)) {
    Array.prototype.indexOf = function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    };
}

// ES5 15.4.4.15
// http://es5.github.com/#x15.4.4.15
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
if (!Array.prototype.lastIndexOf || ([0, 1].lastIndexOf(0, -3) != -1)) {
    Array.prototype.lastIndexOf = function lastIndexOf(sought /*, fromIndex */) {
        var self = splitString && _toString(this) == "[object String]" ?
                this.split("") :
                toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }
        var i = length - 1;
        if (arguments.length > 1) {
            i = Math.min(i, toInteger(arguments[1]));
        }
        // handle negative indices
        i = i >= 0 ? i : length - Math.abs(i);
        for (; i >= 0; i--) {
            if (i in self && sought === self[i]) {
                return i;
            }
        }
        return -1;
    };
}

//
// Object
// ======
//

// ES5 15.2.3.14
// http://es5.github.com/#x15.2.3.14
if (!Object.keys) {
    // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
    var hasDontEnumBug = true,
        dontEnums = [
            "toString",
            "toLocaleString",
            "valueOf",
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable",
            "constructor"
        ],
        dontEnumsLength = dontEnums.length;

    for (var key in {"toString": null}) {
        hasDontEnumBug = false;
    }

    Object.keys = function keys(object) {

        if (
            (typeof object != "object" && typeof object != "function") ||
            object === null
        ) {
            throw new TypeError("Object.keys called on a non-object");
        }

        var keys = [];
        for (var name in object) {
            if (owns(object, name)) {
                keys.push(name);
            }
        }

        if (hasDontEnumBug) {
            for (var i = 0, ii = dontEnumsLength; i < ii; i++) {
                var dontEnum = dontEnums[i];
                if (owns(object, dontEnum)) {
                    keys.push(dontEnum);
                }
            }
        }
        return keys;
    };

}

//
// Date
// ====
//

// ES5 15.9.5.43
// http://es5.github.com/#x15.9.5.43
// This function returns a String value represent the instance in time
// represented by this Date object. The format of the String is the Date Time
// string format defined in 15.9.1.15. All fields are present in the String.
// The time zone is always UTC, denoted by the suffix Z. If the time value of
// this object is not a finite Number a RangeError exception is thrown.
var negativeDate = -62198755200000,
    negativeYearString = "-000001";
if (
    !Date.prototype.toISOString ||
    (new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1)
) {
    Date.prototype.toISOString = function toISOString() {
        var result, length, value, year, month;
        if (!isFinite(this)) {
            throw new RangeError("Date.prototype.toISOString called on non-finite value.");
        }

        year = this.getUTCFullYear();

        month = this.getUTCMonth();
        // see https://github.com/es-shims/es5-shim/issues/111
        year += Math.floor(month / 12);
        month = (month % 12 + 12) % 12;

        // the date time string format is specified in 15.9.1.15.
        result = [month + 1, this.getUTCDate(),
            this.getUTCHours(), this.getUTCMinutes(), this.getUTCSeconds()];
        year = (
            (year < 0 ? "-" : (year > 9999 ? "+" : "")) +
            ("00000" + Math.abs(year))
            .slice(0 <= year && year <= 9999 ? -4 : -6)
        );

        length = result.length;
        while (length--) {
            value = result[length];
            // pad months, days, hours, minutes, and seconds to have two
            // digits.
            if (value < 10) {
                result[length] = "0" + value;
            }
        }
        // pad milliseconds to have three digits.
        return (
            year + "-" + result.slice(0, 2).join("-") +
            "T" + result.slice(2).join(":") + "." +
            ("000" + this.getUTCMilliseconds()).slice(-3) + "Z"
        );
    };
}


// ES5 15.9.5.44
// http://es5.github.com/#x15.9.5.44
// This function provides a String representation of a Date object for use by
// JSON.stringify (15.12.3).
var dateToJSONIsSupported = false;
try {
    dateToJSONIsSupported = (
        Date.prototype.toJSON &&
        new Date(NaN).toJSON() === null &&
        new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&
        Date.prototype.toJSON.call({ // generic
            toISOString: function () {
                return true;
            }
        })
    );
} catch (e) {
}
if (!dateToJSONIsSupported) {
    Date.prototype.toJSON = function toJSON(key) {
        // When the toJSON method is called with argument key, the following
        // steps are taken:

        // 1.  Let O be the result of calling ToObject, giving it the this
        // value as its argument.
        // 2. Let tv be toPrimitive(O, hint Number).
        var o = Object(this),
            tv = toPrimitive(o),
            toISO;
        // 3. If tv is a Number and is not finite, return null.
        if (typeof tv === "number" && !isFinite(tv)) {
            return null;
        }
        // 4. Let toISO be the result of calling the [[Get]] internal method of
        // O with argument "toISOString".
        toISO = o.toISOString;
        // 5. If IsCallable(toISO) is false, throw a TypeError exception.
        if (typeof toISO != "function") {
            throw new TypeError("toISOString property is not callable");
        }
        // 6. Return the result of calling the [[Call]] internal method of
        //  toISO with O as the this value and an empty argument list.
        return toISO.call(o);

        // NOTE 1 The argument is ignored.

        // NOTE 2 The toJSON function is intentionally generic; it does not
        // require that its this value be a Date object. Therefore, it can be
        // transferred to other kinds of objects for use as a method. However,
        // it does require that any such object have a toISOString method. An
        // object is free to use the argument key to filter its
        // stringification.
    };
}

// ES5 15.9.4.2
// http://es5.github.com/#x15.9.4.2
// based on work shared by Daniel Friesen (dantman)
// http://gist.github.com/303249
if (!Date.parse || "Date.parse is buggy") {
    // XXX global assignment won't work in embeddings that use
    // an alternate object for the context.
    Date = (function(NativeDate) {

        // Date.length === 7
        function Date(Y, M, D, h, m, s, ms) {
            var length = arguments.length;
            if (this instanceof NativeDate) {
                var date = length == 1 && String(Y) === Y ? // isString(Y)
                    // We explicitly pass it through parse:
                    new NativeDate(Date.parse(Y)) :
                    // We have to manually make calls depending on argument
                    // length here
                    length >= 7 ? new NativeDate(Y, M, D, h, m, s, ms) :
                    length >= 6 ? new NativeDate(Y, M, D, h, m, s) :
                    length >= 5 ? new NativeDate(Y, M, D, h, m) :
                    length >= 4 ? new NativeDate(Y, M, D, h) :
                    length >= 3 ? new NativeDate(Y, M, D) :
                    length >= 2 ? new NativeDate(Y, M) :
                    length >= 1 ? new NativeDate(Y) :
                                  new NativeDate();
                // Prevent mixups with unfixed Date object
                date.constructor = Date;
                return date;
            }
            return NativeDate.apply(this, arguments);
        };

        // 15.9.1.15 Date Time String Format.
        var isoDateExpression = new RegExp("^" +
            "(\\d{4}|[\+\-]\\d{6})" + // four-digit year capture or sign +
                                      // 6-digit extended year
            "(?:-(\\d{2})" + // optional month capture
            "(?:-(\\d{2})" + // optional day capture
            "(?:" + // capture hours:minutes:seconds.milliseconds
                "T(\\d{2})" + // hours capture
                ":(\\d{2})" + // minutes capture
                "(?:" + // optional :seconds.milliseconds
                    ":(\\d{2})" + // seconds capture
                    "(?:(\\.\\d{1,}))?" + // milliseconds capture
                ")?" +
            "(" + // capture UTC offset component
                "Z|" + // UTC capture
                "(?:" + // offset specifier +/-hours:minutes
                    "([-+])" + // sign capture
                    "(\\d{2})" + // hours offset capture
                    ":(\\d{2})" + // minutes offset capture
                ")" +
            ")?)?)?)?" +
        "$");

        var months = [
            0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365
        ];

        function dayFromMonth(year, month) {
            var t = month > 1 ? 1 : 0;
            return (
                months[month] +
                Math.floor((year - 1969 + t) / 4) -
                Math.floor((year - 1901 + t) / 100) +
                Math.floor((year - 1601 + t) / 400) +
                365 * (year - 1970)
            );
        }

        function toUTC(t) {
            return Number(new NativeDate(1970, 0, 1, 0, 0, 0, t));
        }

        // Copy any custom methods a 3rd party library may have added
        for (var key in NativeDate) {
            Date[key] = NativeDate[key];
        }

        // Copy "native" methods explicitly; they may be non-enumerable
        Date.now = NativeDate.now;
        Date.UTC = NativeDate.UTC;
        Date.prototype = NativeDate.prototype;
        Date.prototype.constructor = Date;

        // Upgrade Date.parse to handle simplified ISO 8601 strings
        Date.parse = function parse(string) {
            var match = isoDateExpression.exec(string);
            if (match) {
                // parse months, days, hours, minutes, seconds, and milliseconds
                // provide default values if necessary
                // parse the UTC offset component
                var year = Number(match[1]),
                    month = Number(match[2] || 1) - 1,
                    day = Number(match[3] || 1) - 1,
                    hour = Number(match[4] || 0),
                    minute = Number(match[5] || 0),
                    second = Number(match[6] || 0),
                    millisecond = Math.floor(Number(match[7] || 0) * 1000),
                    // When time zone is missed, local offset should be used
                    // (ES 5.1 bug)
                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112
                    isLocalTime = Boolean(match[4] && !match[8]),
                    signOffset = match[9] === "-" ? 1 : -1,
                    hourOffset = Number(match[10] || 0),
                    minuteOffset = Number(match[11] || 0),
                    result;
                if (
                    hour < (
                        minute > 0 || second > 0 || millisecond > 0 ?
                        24 : 25
                    ) &&
                    minute < 60 && second < 60 && millisecond < 1000 &&
                    month > -1 && month < 12 && hourOffset < 24 &&
                    minuteOffset < 60 && // detect invalid offsets
                    day > -1 &&
                    day < (
                        dayFromMonth(year, month + 1) -
                        dayFromMonth(year, month)
                    )
                ) {
                    result = (
                        (dayFromMonth(year, month) + day) * 24 +
                        hour +
                        hourOffset * signOffset
                    ) * 60;
                    result = (
                        (result + minute + minuteOffset * signOffset) * 60 +
                        second
                    ) * 1000 + millisecond;
                    if (isLocalTime) {
                        result = toUTC(result);
                    }
                    if (-8.64e15 <= result && result <= 8.64e15) {
                        return result;
                    }
                }
                return NaN;
            }
            return NativeDate.parse.apply(this, arguments);
        };

        return Date;
    })(Date);
}

// ES5 15.9.4.4
// http://es5.github.com/#x15.9.4.4
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}


//
// Number
// ======
//

// ES5.1 15.7.4.5
// http://es5.github.com/#x15.7.4.5
if (!Number.prototype.toFixed || (0.00008).toFixed(3) !== '0.000' || (0.9).toFixed(0) === '0' || (1.255).toFixed(2) !== '1.25' || (1000000000000000128).toFixed(0) !== "1000000000000000128") {
    // Hide these variables and functions
    (function () {
        var base, size, data, i;

        base = 1e7;
        size = 6;
        data = [0, 0, 0, 0, 0, 0];

        function multiply(n, c) {
            var i = -1;
            while (++i < size) {
                c += n * data[i];
                data[i] = c % base;
                c = Math.floor(c / base);
            }
        }

        function divide(n) {
            var i = size, c = 0;
            while (--i >= 0) {
                c += data[i];
                data[i] = Math.floor(c / n);
                c = (c % n) * base;
            }
        }

        function toString() {
            var i = size;
            var s = '';
            while (--i >= 0) {
                if (s !== '' || i === 0 || data[i] !== 0) {
                    var t = String(data[i]);
                    if (s === '') {
                        s = t;
                    } else {
                        s += '0000000'.slice(0, 7 - t.length) + t;
                    }
                }
            }
            return s;
        }

        function pow(x, n, acc) {
            return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));
        }

        function log(x) {
            var n = 0;
            while (x >= 4096) {
                n += 12;
                x /= 4096;
            }
            while (x >= 2) {
                n += 1;
                x /= 2;
            }
            return n;
        }

        Number.prototype.toFixed = function (fractionDigits) {
            var f, x, s, m, e, z, j, k;

            // Test for NaN and round fractionDigits down
            f = Number(fractionDigits);
            f = f !== f ? 0 : Math.floor(f);

            if (f < 0 || f > 20) {
                throw new RangeError("Number.toFixed called with invalid number of decimals");
            }

            x = Number(this);

            // Test for NaN
            if (x !== x) {
                return "NaN";
            }

            // If it is too big or small, return the string value of the number
            if (x <= -1e21 || x >= 1e21) {
                return String(x);
            }

            s = "";

            if (x < 0) {
                s = "-";
                x = -x;
            }

            m = "0";

            if (x > 1e-21) {
                // 1e-21 < x < 1e21
                // -70 < log2(x) < 70
                e = log(x * pow(2, 69, 1)) - 69;
                z = (e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1));
                z *= 0x10000000000000; // Math.pow(2, 52);
                e = 52 - e;

                // -18 < e < 122
                // x = z / 2 ^ e
                if (e > 0) {
                    multiply(0, z);
                    j = f;

                    while (j >= 7) {
                        multiply(1e7, 0);
                        j -= 7;
                    }

                    multiply(pow(10, j, 1), 0);
                    j = e - 1;

                    while (j >= 23) {
                        divide(1 << 23);
                        j -= 23;
                    }

                    divide(1 << j);
                    multiply(1, 1);
                    divide(2);
                    m = toString();
                } else {
                    multiply(0, z);
                    multiply(1 << (-e), 0);
                    m = toString() + '0.00000000000000000000'.slice(2, 2 + f);
                }
            }

            if (f > 0) {
                k = m.length;

                if (k <= f) {
                    m = s + '0.0000000000000000000'.slice(0, f - k + 2) + m;
                } else {
                    m = s + m.slice(0, k - f) + '.' + m.slice(k - f);
                }
            } else {
                m = s + m;
            }

            return m;
        }
    }());
}


//
// String
// ======
//


// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = String.prototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === "t" ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec("")[1] === void 0; // NPCG: nonparticipating capturing group

        String.prototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0)
                return [];

            // If `separator` is not a regex, use native split
            if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
                return string_split.apply(this, arguments);
            }

            var output = [],
                flags = (separator.ignoreCase ? "i" : "") +
                        (separator.multiline  ? "m" : "") +
                        (separator.extended   ? "x" : "") + // Proposed for ES6
                        (separator.sticky     ? "y" : ""), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator = new RegExp(separator.source, flags + "g"),
                separator2, match, lastIndex, lastLength;
            string += ""; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                limit >>> 0; // ToUint32(limit)
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        Array.prototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test("")) {
                    output.push("");
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ("0".split(void 0, 0).length) {
    String.prototype.split = function(separator, limit) {
        if (separator === void 0 && limit === 0) return [];
        return string_split.apply(this, arguments);
    }
}


// ECMA-262, 3rd B.2.3
// Note an ECMAScript standart, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
if ("".substr && "0b".substr(-1) !== "b") {
    var string_substr = String.prototype.substr;
    /**
     *  Get the substring of a string
     *  @param  {integer}  start   where to start the substring
     *  @param  {integer}  length  how many characters to return
     *  @return {string}
     */
    String.prototype.substr = function(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}

// ES5 15.5.4.20
// http://es5.github.com/#x15.5.4.20
var ws = "\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003" +
    "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028" +
    "\u2029\uFEFF";
if (!String.prototype.trim || ws.trim()) {
    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
    // http://perfectionkills.com/whitespace-deviations/
    ws = "[" + ws + "]";
    var trimBeginRegexp = new RegExp("^" + ws + ws + "*"),
        trimEndRegexp = new RegExp(ws + ws + "*$");
    String.prototype.trim = function trim() {
        if (this === void 0 || this === null) {
            throw new TypeError("can't convert "+this+" to object");
        }
        return String(this)
            .replace(trimBeginRegexp, "")
            .replace(trimEndRegexp, "");
    };
}

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(n) {
    n = +n;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1/0) && n !== -(1/0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function isPrimitive(input) {
    var type = typeof input;
    return (
        input === null ||
        type === "undefined" ||
        type === "boolean" ||
        type === "number" ||
        type === "string"
    );
}

function toPrimitive(input) {
    var val, valueOf, toString;
    if (isPrimitive(input)) {
        return input;
    }
    valueOf = input.valueOf;
    if (typeof valueOf === "function") {
        val = valueOf.call(input);
        if (isPrimitive(val)) {
            return val;
        }
    }
    toString = input.toString;
    if (typeof toString === "function") {
        val = toString.call(input);
        if (isPrimitive(val)) {
            return val;
        }
    }
    throw new TypeError();
}

// ES5 9.9
// http://es5.github.com/#x9.9
var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert "+o+" to object");
    }
    return Object(o);
};

});

}, "json2ify/index": function(exports, require, module) {/*
    json2.js
    2014-02-04

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx,
        escapable,
        gap,
        indent,
        meta,
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        };
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

}, "gfx/index": function(exports, require, module) {module.exports = require('./lib/gfx');}, "gfx/lib/gfx": function(exports, require, module) {(function() {
  var $, defaults, n, prefix, transformTypes, vendor, vendorNames;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (this[i] === item) return i;
    }
    return -1;
  };
  $ = typeof jQuery !== "undefined" && jQuery !== null ? jQuery : require('jqueryify');
  if (!$) {
    throw 'jQuery required';
  }
  defaults = {
    duration: 400,
    queue: true,
    easing: ''
  };
  vendor = $.browser.mozilla ? 'moz' : void 0;
  vendor || (vendor = 'webkit');
  prefix = "-" + vendor + "-";
  vendorNames = n = {
    transition: "" + prefix + "transition",
    transform: "" + prefix + "transform",
    transitionEnd: "" + vendor + "TransitionEnd"
  };
  transformTypes = ['scale', 'scaleX', 'scaleY', 'scale3d', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'rotate3d', 'translate', 'translateX', 'translateY', 'translateZ', 'translate3d', 'skew', 'skewX', 'skewY', 'matrix', 'matrix3d', 'perspective'];
  $.fn.queueNext = function(callback, type) {
    type || (type = "fx");
    return this.queue(function() {
      var redraw;
      callback.apply(this, arguments);
      redraw = this.offsetHeight;
      return jQuery.dequeue(this, type);
    });
  };
  $.fn.emulateTransitionEnd = function(duration) {
    var callback, called;
    called = false;
    $(this).one(n.transitionEnd, function() {
      return called = true;
    });
    callback = __bind(function() {
      if (!called) {
        return $(this).trigger(n.transitionEnd);
      }
    }, this);
    return setTimeout(callback, duration);
  };
  $.fn.transform = function(properties) {
    var key, transforms, value;
    transforms = [];
    for (key in properties) {
      value = properties[key];
      if (__indexOf.call(transformTypes, key) >= 0) {
        transforms.push("" + key + "(" + value + ")");
        delete properties[key];
      }
    }
    if (transforms.length) {
      properties[n.transform] = transforms.join(' ');
    }
    return $(this).css(properties);
  };
  $.fn.gfx = function(properties, options) {
    var callback, opts;
    opts = $.extend({}, defaults, options);
    properties[n.transition] = "all " + opts.duration + "ms " + opts.easing;
    callback = function() {
      var _ref;
      $(this).css(n.transition, '');
      if ((_ref = opts.complete) != null) {
        _ref.apply(this, arguments);
      }
      return $(this).dequeue();
    };
    return this[opts.queue === false ? 'each' : 'queue'](function() {
      $(this).one(n.transitionEnd, callback);
      $(this).transform(properties);
      return $(this).emulateTransitionEnd(opts.duration + 50);
    });
  };
  $.fn.gfxPopIn = function(options) {
    var _ref;
    if (options == null) {
      options = {};
    }
        if ((_ref = options.scale) != null) {
      _ref;
    } else {
      options.scale = '.2';
    };
    $(this).queueNext(function() {
      return $(this).transform({
        '-webkit-transform-origin': '50% 50%',
        '-moz-transform-origin': '50% 50%',
        scale: options.scale,
        opacity: '0',
        display: 'block'
      });
    });
    return $(this).gfx({
      scale: '1',
      opacity: '1'
    }, options);
  };
  $.fn.gfxPopOut = function(options) {
    $(this).queueNext(function() {
      return $(this).transform({
        '-webkit-transform-origin': '50% 50%',
        '-moz-transform-origin': '50% 50%',
        scale: '1',
        opacity: '1'
      });
    });
    $(this).gfx({
      scale: '.2',
      opacity: '0'
    }, options);
    return $(this).queueNext(function() {
      return $(this).transform({
        display: 'none',
        opacity: '1',
        scale: '1'
      });
    });
  };
  $.fn.gfxFadeIn = function(options) {
    var _ref;
    if (options == null) {
      options = {};
    }
        if ((_ref = options.duration) != null) {
      _ref;
    } else {
      options.duration = 1000;
    };
    $(this).queueNext(function() {
      return $(this).css({
        opacity: '0'
      }).show();
    });
    return $(this).gfx({
      opacity: 1
    }, options);
  };
  $.fn.gfxFadeOut = function(options) {
    if (options == null) {
      options = {};
    }
    $(this).queueNext(function() {
      return $(this).css({
        opacity: 1
      });
    });
    $(this).gfx({
      opacity: 0
    }, options);
    return $(this).queueNext(function() {
      return $(this).hide().css({
        opacity: 1
      });
    });
  };
  $.fn.gfxShake = function(options) {
    var distance, _ref, _ref2;
    if (options == null) {
      options = {};
    }
        if ((_ref = options.duration) != null) {
      _ref;
    } else {
      options.duration = 100;
    };
        if ((_ref2 = options.easing) != null) {
      _ref2;
    } else {
      options.easing = 'ease-out';
    };
    distance = options.distance || 20;
    $(this).gfx({
      translateX: "-" + distance + "px"
    }, options);
    $(this).gfx({
      translateX: "" + distance + "px"
    }, options);
    $(this).gfx({
      translateX: "-" + distance + "px"
    }, options);
    $(this).gfx({
      translateX: "" + distance + "px"
    }, options);
    return $(this).queueNext(function() {
      return $(this).transform({
        translateX: 0
      });
    });
  };
  $.fn.gfxBlip = function(options) {
    if (options == null) {
      options = {};
    }
    options.scale || (options.scale = '1.15');
    $(this).gfx({
      scale: options.scale
    }, options);
    return $(this).gfx({
      scale: '1'
    }, options);
  };
  $.fn.gfxExplodeIn = function(options) {
    if (options == null) {
      options = {};
    }
    options.scale || (options.scale = '3');
    $(this).queueNext(function() {
      return $(this).transform({
        scale: options.scale,
        opacity: '0',
        display: 'block'
      });
    });
    return $(this).gfx({
      scale: '1',
      opacity: '1'
    }, options);
  };
  $.fn.gfxExplodeOut = function(options) {
    if (options == null) {
      options = {};
    }
    options.scale || (options.scale = '3');
    $(this).queueNext(function() {
      return $(this).transform({
        scale: '1',
        opacity: '1'
      });
    });
    $(this).gfx({
      scale: options.scale,
      opacity: '0'
    }, options);
    if (options.reset !== false) {
      $(this).queueNext(function() {
        return $(this).transform({
          scale: '1',
          opacity: '1',
          display: 'none'
        });
      });
    }
    return this;
  };
  $.fn.gfxFlipIn = function(options) {
    if (options == null) {
      options = {};
    }
    $(this).queueNext(function() {
      return $(this).transform({
        rotateY: '180deg',
        scale: '.8',
        display: 'block'
      });
    });
    return $(this).gfx({
      rotateY: 0,
      scale: 1
    }, options);
  };
  $.fn.gfxFlipOut = function(options) {
    if (options == null) {
      options = {};
    }
    $(this).queueNext(function() {
      return $(this).transform({
        rotateY: 0,
        scale: 1
      });
    });
    $(this).gfx({
      rotateY: '-180deg',
      scale: '.8'
    }, options);
    if (options.reset !== false) {
      $(this).queueNext(function() {
        return $(this).transform({
          scale: 1,
          rotateY: 0,
          display: 'none'
        });
      });
    }
    return this;
  };
  $.fn.gfxRotateOut = function(options) {
    if (options == null) {
      options = {};
    }
    $(this).queueNext(function() {
      return $(this).transform({
        rotateY: 0
      }).fix();
    });
    $(this).gfx({
      rotateY: '-180deg'
    }, options);
    if (options.reset !== false) {
      $(this).queueNext(function() {
        return $(this).transform({
          rotateY: 0,
          display: 'none'
        }).unfix();
      });
    }
    return this;
  };
  $.fn.gfxRotateIn = function(options) {
    if (options == null) {
      options = {};
    }
    $(this).queueNext(function() {
      return $(this).transform({
        rotateY: '180deg',
        display: 'block'
      }).fix();
    });
    $(this).gfx({
      rotateY: 0
    }, options);
    $(this).queueNext(function() {
      return $(this).unfix();
    });
    return $ = jQuery;
  };
  $.fn.gfxSlideOut = function(options) {
    var distance, opacity;
    if (options == null) {
      options = {};
    }
    options.direction || (options.direction = 'right');
    distance = options.distance || 100;
    if (options.direction === 'left') {
      distance *= -1;
    }
    distance += "%";
    opacity = options.fade ? 0 : 1;
    $(this).queueNext(function() {
      return $(this).show();
    });
    $(this).gfx({
      translate3d: "" + distance + ",0,0",
      opacity: opacity
    }, options);
    return $(this).queueNext(function() {
      return $(this).transform({
        translate3d: "0,0,0",
        opacity: 1
      }).hide();
    });
  };
  $.fn.gfxSlideIn = function(options) {
    var distance, opacity;
    if (options == null) {
      options = {};
    }
    options.direction || (options.direction = 'right');
    distance = options.distance || 100;
    if (options.direction === 'left') {
      distance *= -1;
    }
    distance += "%";
    opacity = options.fade ? 0 : 1;
    $(this).queueNext(function() {
      return $(this).transform({
        translate3d: "" + distance + ",0,0",
        opacity: opacity
      }).show();
    });
    return $(this).gfx({
      translate3d: "0,0,0",
      opacity: 1
    }, options);
  };
  $.fn.fix = function() {
    return $(this).each(function() {
      var element, parentOffset, styles;
      element = $(this);
      styles = element.offset();
      parentOffset = element.parent().offset();
      styles.left -= parentOffset.left;
      styles.top -= parentOffset.top;
      styles.position = 'absolute';
      return element.css(styles);
    });
  };
  $.fn.unfix = function() {
    return $(this).each(function() {
      var element;
      element = $(this);
      return element.css({
        position: '',
        top: '',
        left: ''
      });
    });
  };
}).call(this);
}, "gfx/node_modules/jqueryify/index": function(exports, require, module) {/*!
 * jQuery JavaScript Library v1.7.1
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Mon Nov 21 21:11:03 2011 -0500
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document,
	navigator = window.navigator,
	location = window.location;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Matches dashed string for camelizing
	rdashAlpha = /-([a-z]|[0-9])/ig,
	rmsPrefix = /^-ms-/,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,

	// The deferred used on DOM ready
	readyList,

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = quickExpr.exec( selector );
			}

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context ? context.ownerDocument || context : document );

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
					}

					return jQuery.merge( this, selector );

				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.7.1",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = this.constructor();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );

		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// Add the callback
		readyList.add( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {
		// Either a released hold or an DOMready/load event and not yet ready
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.fireWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger( "ready" ).off( "ready" );
			}
		}
	},

	bindReady: function() {
		if ( readyList ) {
			return;
		}

		readyList = jQuery.Callbacks( "once memory" );

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	// A crude way of determining if an object is a window
	isWindow: function( obj ) {
		return obj && typeof obj === "object" && "setInterval" in obj;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction( object );

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type( array );

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array, i ) {
		var len;

		if ( array ) {
			if ( indexOf ) {
				return indexOf.call( array, elem, i );
			}

			len = array.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in array && array[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key, ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		if ( typeof context === "string" ) {
			var tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		var args = slice.call( arguments, 2 ),
			proxy = function() {
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
			};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, key, value, exec, fn, pass ) {
		var length = elems.length;

		// Setting many attributes
		if ( typeof key === "object" ) {
			for ( var k in key ) {
				jQuery.access( elems, k, key[k], exec, fn, value );
			}
			return elems;
		}

		// Setting one attribute
		if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = !pass && exec && jQuery.isFunction(value);

			for ( var i = 0; i < length; i++ ) {
				fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
			}

			return elems;
		}

		// Getting an attribute
		return length ? fn( elems[0], key ) : undefined;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	sub: function() {
		function jQuerySub( selector, context ) {
			return new jQuerySub.fn.init( selector, context );
		}
		jQuery.extend( true, jQuerySub, this );
		jQuerySub.superclass = this;
		jQuerySub.fn = jQuerySub.prototype = this();
		jQuerySub.fn.constructor = jQuerySub;
		jQuerySub.sub = this.sub;
		jQuerySub.fn.init = function init( selector, context ) {
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
				context = jQuerySub( context );
			}

			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
		};
		jQuerySub.fn.init.prototype = jQuerySub.fn;
		var rootjQuerySub = jQuerySub(document);
		return jQuerySub;
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

// IE doesn't match non-breaking spaces with \s
if ( rnotwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

return jQuery;

})();


// String to Object flags format cache
var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
function createFlags( flags ) {
	var object = flagsCache[ flags ] = {},
		i, length;
	flags = flags.split( /\s+/ );
	for ( i = 0, length = flags.length; i < length; i++ ) {
		object[ flags[i] ] = true;
	}
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	flags:	an optional list of space-separated flags that will change how
 *			the callback list behaves
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible flags:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( flags ) {

	// Convert flags from String-formatted to Object-formatted
	// (we check in cache first)
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

	var // Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = [],
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Add one or several callbacks to the list
		add = function( args ) {
			var i,
				length,
				elem,
				type,
				actual;
			for ( i = 0, length = args.length; i < length; i++ ) {
				elem = args[ i ];
				type = jQuery.type( elem );
				if ( type === "array" ) {
					// Inspect recursively
					add( elem );
				} else if ( type === "function" ) {
					// Add if not in unique mode and callback is not in
					if ( !flags.unique || !self.has( elem ) ) {
						list.push( elem );
					}
				}
			}
		},
		// Fire callbacks
		fire = function( context, args ) {
			args = args || [];
			memory = !flags.memory || [ context, args ];
			firing = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
					memory = true; // Mark as halted
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( !flags.once ) {
					if ( stack && stack.length ) {
						memory = stack.shift();
						self.fireWith( memory[ 0 ], memory[ 1 ] );
					}
				} else if ( memory === true ) {
					self.disable();
				} else {
					list = [];
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					var length = list.length;
					add( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away, unless previous
					// firing was halted (stopOnFalse)
					} else if ( memory && memory !== true ) {
						firingStart = length;
						fire( memory[ 0 ], memory[ 1 ] );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					var args = arguments,
						argIndex = 0,
						argLength = args.length;
					for ( ; argIndex < argLength ; argIndex++ ) {
						for ( var i = 0; i < list.length; i++ ) {
							if ( args[ argIndex ] === list[ i ] ) {
								// Handle firingIndex and firingLength
								if ( firing ) {
									if ( i <= firingLength ) {
										firingLength--;
										if ( i <= firingIndex ) {
											firingIndex--;
										}
									}
								}
								// Remove the element
								list.splice( i--, 1 );
								// If we have some unicity property then
								// we only need to do this once
								if ( flags.unique ) {
									break;
								}
							}
						}
					}
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				if ( list ) {
					var i = 0,
						length = list.length;
					for ( ; i < length; i++ ) {
						if ( fn === list[ i ] ) {
							return true;
						}
					}
				}
				return false;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory || memory === true ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( stack ) {
					if ( firing ) {
						if ( !flags.once ) {
							stack.push( [ context, args ] );
						}
					} else if ( !( flags.once && memory ) ) {
						fire( context, args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!memory;
			}
		};

	return self;
};




var // Static reference to slice
	sliceDeferred = [].slice;

jQuery.extend({

	Deferred: function( func ) {
		var doneList = jQuery.Callbacks( "once memory" ),
			failList = jQuery.Callbacks( "once memory" ),
			progressList = jQuery.Callbacks( "memory" ),
			state = "pending",
			lists = {
				resolve: doneList,
				reject: failList,
				notify: progressList
			},
			promise = {
				done: doneList.add,
				fail: failList.add,
				progress: progressList.add,

				state: function() {
					return state;
				},

				// Deprecated
				isResolved: doneList.fired,
				isRejected: failList.fired,

				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
					return this;
				},
				always: function() {
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
					return this;
				},
				pipe: function( fnDone, fnFail, fnProgress ) {
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( {
							done: [ fnDone, "resolve" ],
							fail: [ fnFail, "reject" ],
							progress: [ fnProgress, "notify" ]
						}, function( handler, data ) {
							var fn = data[ 0 ],
								action = data[ 1 ],
								returned;
							if ( jQuery.isFunction( fn ) ) {
								deferred[ handler ](function() {
									returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								});
							} else {
								deferred[ handler ]( newDefer[ action ] );
							}
						});
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					if ( obj == null ) {
						obj = promise;
					} else {
						for ( var key in promise ) {
							obj[ key ] = promise[ key ];
						}
					}
					return obj;
				}
			},
			deferred = promise.promise({}),
			key;

		for ( key in lists ) {
			deferred[ key ] = lists[ key ].fire;
			deferred[ key + "With" ] = lists[ key ].fireWith;
		}

		// Handle state
		deferred.done( function() {
			state = "resolved";
		}, failList.disable, progressList.lock ).fail( function() {
			state = "rejected";
		}, doneList.disable, progressList.lock );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( firstParam ) {
		var args = sliceDeferred.call( arguments, 0 ),
			i = 0,
			length = args.length,
			pValues = new Array( length ),
			count = length,
			pCount = length,
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
				firstParam :
				jQuery.Deferred(),
			promise = deferred.promise();
		function resolveFunc( i ) {
			return function( value ) {
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				if ( !( --count ) ) {
					deferred.resolveWith( deferred, args );
				}
			};
		}
		function progressFunc( i ) {
			return function( value ) {
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				deferred.notifyWith( promise, pValues );
			};
		}
		if ( length > 1 ) {
			for ( ; i < length; i++ ) {
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
				} else {
					--count;
				}
			}
			if ( !count ) {
				deferred.resolveWith( deferred, args );
			}
		} else if ( deferred !== firstParam ) {
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
		}
		return promise;
	}
});




jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		marginDiv,
		fragment,
		tds,
		events,
		eventName,
		i,
		isSupported,
		div = document.createElement( "div" ),
		documentElement = document.documentElement;

	// Preliminary tests
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName( "*" );
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement( "select" );
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName( "input" )[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent( "onclick" );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	support.radioValue = input.value === "t";

	input.setAttribute("checked", "checked");
	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	div.innerHTML = "";

	// Check if div with explicit width and no margin-right incorrectly
	// gets computed margin-right based on width of container. For more
	// info see bug #3333
	// Fails in WebKit before Feb 2011 nightlies
	// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
	if ( window.getComputedStyle ) {
		marginDiv = document.createElement( "div" );
		marginDiv.style.width = "0";
		marginDiv.style.marginRight = "0";
		div.style.width = "2px";
		div.appendChild( marginDiv );
		support.reliableMarginRight =
			( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
	}

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for( i in {
			submit: 1,
			change: 1,
			focusin: 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	fragment.removeChild( div );

	// Null elements to avoid leaks in IE
	fragment = select = opt = marginDiv = div = input = null;

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, outer, inner, table, td, offsetSupport,
			conMarginTop, ptlm, vb, style, html,
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		conMarginTop = 1;
		ptlm = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;";
		vb = "visibility:hidden;border:0;";
		style = "style='" + ptlm + "border:5px solid #000;padding:0;'";
		html = "<div " + style + "><div></div></div>" +
			"<table " + style + " cellpadding='0' cellspacing='0'>" +
			"<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = vb + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName( "td" );
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Figure out if the W3C box model works as expected
		div.innerHTML = "";
		div.style.width = div.style.paddingLeft = "1px";
		jQuery.boxModel = support.boxModel = div.offsetWidth === 2;

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.style.display = "inline";
			div.style.zoom = 1;
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 2 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "";
			div.innerHTML = "<div style='width:4px;'></div>";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 2 );
		}

		div.style.cssText = ptlm + vb;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

		body.removeChild( container );
		div  = container = null;

		jQuery.extend( support, offsetSupport );
	});

	return support;
})();




var rbrace = /^(?:\{.*\}|\[.*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var privateCache, thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
			isEvents = name === "events";

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = ++jQuery.uuid;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		privateCache = thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Users should not attempt to inspect the internal events object using jQuery.data,
		// it is undocumented and subject to change. But does anyone listen? No.
		if ( isEvents && !thisCache[ name ] ) {
			return privateCache.events;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			// Reference to internal data cache key
			internalKey = jQuery.expando,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,

			// See jQuery.data for more information
			id = isNode ? elem[ internalKey ] : internalKey;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject(cache[ id ]) ) {
				return;
			}
		}

		// Browsers that fail expando deletion also refuse to delete expandos on
		// the window, but it will allow it on all other JS objects; other browsers
		// don't care
		// Ensure that `cache` is not a window object #10080
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
			delete cache[ id ];
		} else {
			cache[ id ] = null;
		}

		// We destroyed the cache and need to eliminate the expando on the node to avoid
		// false lookups in the cache for entries that no longer exist
		if ( isNode ) {
			// IE does not allow us to delete expando properties from nodes,
			// nor does it have a removeAttribute function on Document nodes;
			// we must handle all of these cases
			if ( jQuery.support.deleteExpando ) {
				delete elem[ internalKey ];
			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( internalKey );
			} else {
				elem[ internalKey ] = null;
			}
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, attr, name,
			data = null;

		if ( typeof key === "undefined" ) {
			if ( this.length ) {
				data = jQuery.data( this[0] );

				if ( this[0].nodeType === 1 && !jQuery._data( this[0], "parsedAttrs" ) ) {
					attr = this[0].attributes;
					for ( var i = 0, l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( this[0], name, data[ name ] );
						}
					}
					jQuery._data( this[0], "parsedAttrs", true );
				}
			}

			return data;

		} else if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split(".");
		parts[1] = parts[1] ? "." + parts[1] : "";

		if ( value === undefined ) {
			data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);

			// Try to fetch any internally stored data first
			if ( data === undefined && this.length ) {
				data = jQuery.data( this[0], key );
				data = dataAttr( this[0], key, data );
			}

			return data === undefined && parts[1] ?
				this.data( parts[0] ) :
				data;

		} else {
			return this.each(function() {
				var self = jQuery( this ),
					args = [ parts[0], value ];

				self.triggerHandler( "setData" + parts[1] + "!", args );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + parts[1] + "!", args );
			});
		}
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				jQuery.isNumeric( data ) ? parseFloat( data ) :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	for ( var name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}




function handleQueueMarkDefer( elem, type, src ) {
	var deferDataKey = type + "defer",
		queueDataKey = type + "queue",
		markDataKey = type + "mark",
		defer = jQuery._data( elem, deferDataKey );
	if ( defer &&
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
		// Give room for hard-coded callbacks to fire first
		// and eventually mark/queue something else on the element
		setTimeout( function() {
			if ( !jQuery._data( elem, queueDataKey ) &&
				!jQuery._data( elem, markDataKey ) ) {
				jQuery.removeData( elem, deferDataKey, true );
				defer.fire();
			}
		}, 0 );
	}
}

jQuery.extend({

	_mark: function( elem, type ) {
		if ( elem ) {
			type = ( type || "fx" ) + "mark";
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
		}
	},

	_unmark: function( force, elem, type ) {
		if ( force !== true ) {
			type = elem;
			elem = force;
			force = false;
		}
		if ( elem ) {
			type = type || "fx";
			var key = type + "mark",
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
			if ( count ) {
				jQuery._data( elem, key, count );
			} else {
				jQuery.removeData( elem, key, true );
				handleQueueMarkDefer( elem, type, "mark" );
			}
		}
	},

	queue: function( elem, type, data ) {
		var q;
		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			q = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !q || jQuery.isArray(data) ) {
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					q.push( data );
				}
			}
			return q || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift(),
			hooks = {};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			jQuery._data( elem, type + ".run", hooks );
			fn.call( elem, function() {
				jQuery.dequeue( elem, type );
			}, hooks );
		}

		if ( !queue.length ) {
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
			handleQueueMarkDefer( elem, type, "queue" );
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
		}

		if ( data === undefined ) {
			return jQuery.queue( this[0], type );
		}
		return this.each(function() {
			var queue = jQuery.queue( this, type, data );

			if ( type === "fx" && queue[0] !== "inprogress" ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, object ) {
		if ( typeof type !== "string" ) {
			object = type;
			type = undefined;
		}
		type = type || "fx";
		var defer = jQuery.Deferred(),
			elements = this,
			i = elements.length,
			count = 1,
			deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			tmp;
		function resolve() {
			if ( !( --count ) ) {
				defer.resolveWith( elements, [ elements ] );
			}
		}
		while( i-- ) {
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
				count++;
				tmp.add( resolve );
			}
		}
		resolve();
		return defer.promise();
	}
});




var rclass = /[\n\t\r]/g,
	rspace = /\s+/,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	nodeHook, boolHook, fixSpecified;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, name, value, true, jQuery.attr );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, name, value, true, jQuery.prop );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, i, l, elem, className, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			classNames = ( value || "" ).split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						className = (" " + elem.className + " ").replace( rclass, " " );
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[ c ] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.nodeName.toLowerCase() ] || jQuery.valHooks[ elem.type ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var self = jQuery(this), val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.nodeName.toLowerCase() ] || jQuery.valHooks[ this.type ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, "" + value );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, l,
			i = 0;

		if ( value && elem.nodeType === 1 ) {
			attrNames = value.toLowerCase().split( rspace );
			l = attrNames.length;

			for ( ; i < l; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;

					// See #9699 for explanation of this approach (setting first, then removal)
					jQuery.attr( elem, name, "" );
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( rboolean.test( name ) && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
				ret.nodeValue :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.nodeValue = value + "" );
		}
	};

	// Apply the nodeHook to tabindex
	jQuery.attrHooks.tabindex.set = nodeHook.set;

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = "" + value );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});




var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	rhoverHack = /\bhover(\.\S+)?\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	quickParse = function( selector ) {
		var quick = rquickIs.exec( selector );
		if ( quick ) {
			//   0  1    2   3
			// [ _, tag, id, class ]
			quick[1] = ( quick[1] || "" ).toLowerCase();
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
		}
		return quick;
	},
	quickIs = function( elem, m ) {
		var attrs = elem.attributes || {};
		return (
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
			(!m[2] || (attrs.id || {}).value === m[2]) &&
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
		);
	},
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, quick, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				quick: quickParse( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
			t, tns, type, origType, namespaces, origCount,
			j, events, special, handle, eventType, handleObj;

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, [ "events", "handle" ], true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var type = event.type || event,
			namespaces = [],
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			old = null;
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old && old === elem.ownerDocument ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = [].slice.call( arguments, 0 ),
			run_all = !event.exclusive && !event.namespace,
			handlerQueue = [],
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Determine handlers that should run if there are delegated events
		// Avoid disabled elements in IE (#6911) and non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !event.target.disabled && !(event.button && event.type === "click") ) {

			// Pregenerate a single jQuery object for reuse with .is()
			jqcur = jQuery(this);
			jqcur.context = this.ownerDocument || this;

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {
				selMatch = {};
				matches = [];
				jqcur[0] = cur;
				for ( i = 0; i < delegateCount; i++ ) {
					handleObj = handlers[ i ];
					sel = handleObj.selector;

					if ( selMatch[ sel ] === undefined ) {
						selMatch[ sel ] = (
							handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
						);
					}
					if ( selMatch[ sel ] ) {
						matches.push( handleObj );
					}
				}
				if ( matches.length ) {
					handlerQueue.push({ elem: cur, matches: matches });
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
		if ( event.metaKey === undefined ) {
			event.metaKey = event.ctrlKey;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady
		},

		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector,
				ret;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !form._submit_attached ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						// If form was submitted by the user, bubble the event up the tree
						if ( this.parentNode && !event.isTrigger ) {
							jQuery.event.simulate( "submit", this.parentNode, event, true );
						}
					});
					form._submit_attached = true;
				}
			});
			// return undefined since we don't need an event listener
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
							jQuery.event.simulate( "change", this, event, true );
						}
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					elem._change_attached = true;
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on.call( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			var handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace? handleObj.type + "." + handleObj.namespace : handleObj.type,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( var type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});



/*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true,
	rBackslash = /\\/g,
	rReturn = /\r\n/g,
	rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}
	
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;
	
	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];
		
			parts.push( m[1] );
		
			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context, seed );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}
				
				set = posProcess( selector, set, seed );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set, i, len, match, type, left;

	if ( !expr ) {
		return [];
	}

	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
		type = Expr.order[i];
		
		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace( rBackslash, "" );
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( "*" ) :
			[];
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		type, found, item, filter, left,
		i, pass,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				filter = Expr.filter[ type ];
				left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							pass = not ^ found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Utility function for retreiving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
var getText = Sizzle.getText = function( elem ) {
    var i, node,
		nodeType = elem.nodeType,
		ret = "";

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 ) {
			// Use textContent || innerText for elements
			if ( typeof elem.textContent === 'string' ) {
				return elem.textContent;
			} else if ( typeof elem.innerText === 'string' ) {
				// Replace IE's carriage returns
				return elem.innerText.replace( rReturn, '' );
			} else {
				// Traverse it's children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	} else {

		// If no nodeType, this is expected to be an array
		for ( i = 0; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			if ( node.nodeType !== 8 ) {
				ret += getText( node );
			}
		}
	}
	return ret;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		},
		type: function( elem ) {
			return elem.getAttribute( "type" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !rNonWord.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !rNonWord.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( match[1] );
			}
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace( rBackslash, "" ) + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace( rBackslash, "" );
		},

		TAG: function( match, curLoop ) {
			return match[1].replace( rBackslash, "" ).toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1] = match[1].replace( rBackslash, "" );
			
			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			// Handle if an un-quoted value was used
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}
			
			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},
	
	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},
		
		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}
			
			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			var attr = elem.getAttribute( "type" ), type = elem.type;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc) 
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
		},

		radio: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
		},

		file: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
		},

		password: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
		},

		submit: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "submit" === elem.type;
		},

		image: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
		},

		reset: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "reset" === elem.type;
		},

		button: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && "button" === elem.type || name === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		},

		focus: function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},

		CHILD: function( elem, match ) {
			var first, last,
				doneName, parent, cache,
				count, diff,
				type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					if ( type === "first" ) { 
						return true; 
					}

					node = elem;

				case "last":
					while ( (node = node.nextSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					return true;

				case "nth":
					first = match[2];
					last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}
					
					doneName = match[0];
					parent = elem.parentNode;
	
					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
						count = 0;
						
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						} 

						parent[ expando ] = doneName;
					}
					
					diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
		},
		
		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Sizzle.attr ?
					Sizzle.attr( elem, name ) :
					Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				!type && Sizzle.attr ?
				result != null :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}
	
	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}
	
		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				// See if we find a selector to speed up
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );
				
				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
					// Speed-up: Sizzle("TAG")
					if ( match[1] ) {
						return makeArray( context.getElementsByTagName( query ), extra );
					
					// Speed-up: Sizzle(".CLASS")
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
						return makeArray( context.getElementsByClassName( match[2] ), extra );
					}
				}
				
				if ( context.nodeType === 9 ) {
					// Speed-up: Sizzle("body")
					// The body element only exists once, optimize finding it
					if ( query === "body" && context.body ) {
						return makeArray( [ context.body ], extra );
						
					// Speed-up: Sizzle("#ID")
					} else if ( match && match[3] ) {
						var elem = context.getElementById( match[3] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id === match[3] ) {
								return makeArray( [ elem ], extra );
							}
							
						} else {
							return makeArray( [], extra );
						}
					}
					
					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var oldContext = context,
						old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							oldContext.removeAttribute( "id" );
						}
					}
				}
			}
		
			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

	if ( matches ) {
		// Check to see if it's possible to do matchesSelector
		// on a disconnected node (IE 9 fails this)
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
			pseudoWorks = false;

		try {
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( document.documentElement, "[test!='']:sizzle" );
	
		} catch( pseudoError ) {
			pseudoWorks = true;
		}

		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try { 
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						var ret = matches.call( node, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || !disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9, so check for that
								node.document && node.document.nodeType !== 11 ) {
							return ret;
						}
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}
	
	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem[ expando ] = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;
			
			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem[ expando ] = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833) 
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context, seed ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet, seed );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
Sizzle.selectors.attrMap = {};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.POS,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self = this,
			i, l;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		var ret = this.pushStack( "", "find", selector ),
			length, n, r;

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && ( 
			typeof selector === "string" ?
				// If this is a positional selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				POS.test( selector ) ? 
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];
		
		// Array (deprecated as of jQuery 1.7)
		if ( jQuery.isArray( selectors ) ) {
			var level = 1;

			while ( cur && cur.ownerDocument && cur !== context ) {
				for ( i = 0; i < selectors.length; i++ ) {

					if ( jQuery( cur ).is( selectors[ i ] ) ) {
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
					}
				}

				cur = cur.parentNode;
				level++;
			}

			return ret;
		}

		// String
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( elem.parentNode.firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}




function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")", "i"),
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( text ) {
		if ( jQuery.isFunction(text) ) {
			return this.each(function(i) {
				var self = jQuery( this );

				self.text( text.call(this, i, self.text()) );
			});
		}

		if ( typeof text !== "object" && text !== undefined ) {
			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
		}

		return jQuery.text( this );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery.clean(arguments) );
			return set;
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		if ( value === undefined ) {
			return this[0] && this[0].nodeType === 1 ?
				this[0].innerHTML.replace(rinlinejQuery, "") :
				null;

		// See if we can take a shortcut and just use innerHTML
		} else if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {

			value = value.replace(rxhtmlTag, "<$1></$2>");

			try {
				for ( var i = 0, l = this.length; i < l; i++ ) {
					// Remove element nodes and prevent memory leaks
					if ( this[i].nodeType === 1 ) {
						jQuery.cleanData( this[i].getElementsByTagName("*") );
						this[i].innerHTML = value;
					}
				}

			// If using innerHTML throws an exception, use the fallback method
			} catch(e) {
				this.empty().append( value );
			}

		} else if ( jQuery.isFunction( value ) ) {
			this.each(function(i){
				var self = jQuery( this );

				self.html( value.call(this, i, self.html()) );
			});

		} else {
			this.empty().append( value );
		}

		return this;
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.length ?
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
				this;
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}

			fragment = results.fragment;

			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						// Make sure that we do not leak memory by inadvertently discarding
						// the original fragment (which might have attached data) instead of
						// using it; in addition, use the original fragment object for the last
						// item instead of first because it can end up being emptied incorrectly
						// in certain situations (Bug #8070).
						// Fragments from the fragment cache must always be cloned and never used
						// in place.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
							jQuery.clone( fragment, true, true ) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, evalScript );
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type + ( events[ type ][ i ].namespace ? "." : "" ) + events[ type ][ i ].namespace, events[ type ][ i ], events[ type ][ i ].data );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 fail to clone children inside object elements that use
	// the proprietary classid attribute value (rather than the type
	// attribute) to identify the type of content to display
	if ( nodeName === "object" ) {
		dest.outerHTML = src.outerHTML;

	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set
		if ( src.checked ) {
			dest.defaultChecked = dest.checked = src.checked;
		}

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults, doc,
	first = args[ 0 ];

	// nodes may contain either an explicit document object,
	// a jQuery collection or context object.
	// If nodes[0] contains a valid object to assign to doc
	if ( nodes && nodes[0] ) {
		doc = nodes[0].ownerDocument || nodes[0];
	}

	// Ensure that an attr object doesn't incorrectly stand in as a document object
	// Chrome and Firefox seem to allow this to occur and will throw exception
	// Fixes #8950
	if ( !doc.createDocumentFragment ) {
		doc = document;
	}

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		cacheable = true;

		cacheresults = jQuery.fragments[ first ];
		if ( cacheresults && cacheresults !== 1 ) {
			fragment = cacheresults;
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;

		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;

		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
		elem.defaultChecked = elem.checked;
	}
}
// Finds all inputs and passes them to fixDefaultChecked
function findInputs( elem ) {
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	if ( nodeName === "input" ) {
		fixDefaultChecked( elem );
	// Skip scripts, get other children
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	}
}

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
function shimCloneNode( elem ) {
	var div = document.createElement( "div" );
	safeFragment.appendChild( div );

	div.innerHTML = elem.outerHTML;
	return div.firstChild;
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			// IE<=8 does not properly clone detached, unknown element nodes
			clone = jQuery.support.html5Clone || !rnoshimcache.test( "<" + elem.nodeName ) ?
				elem.cloneNode( true ) :
				shimCloneNode( elem );

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var checkScriptType;

		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		var ret = [], j;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
						wrap = wrapMap[ tag ] || wrapMap._default,
						depth = wrap[0],
						div = context.createElement("div");

					// Append wrapper element to unknown element safe doc fragment
					if ( context === document ) {
						// Use the fragment we've already created for this document
						safeFragment.appendChild( div );
					} else {
						// Use a fragment created with the owner document
						createSafeFragment( context ).appendChild( div );
					}

					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;
				}
			}

			// Resets defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			var len;
			if ( !jQuery.support.appendChecked ) {
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
					for ( j = 0; j < len; j++ ) {
						findInputs( elem[j] );
					}
				} else {
					findInputs( elem );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			checkScriptType = function( elem ) {
				return !elem.type || rscriptType.test( elem.type );
			};
			for ( i = 0; ret[i]; i++ ) {
				if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );

				} else {
					if ( ret[i].nodeType === 1 ) {
						var jsTags = jQuery.grep( ret[i].getElementsByTagName( "script" ), checkScriptType );

						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
					}
					fragment.appendChild( ret[i] );
				}
			}
		}

		return ret;
	},

	cleanData: function( elems ) {
		var data, id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];

			if ( id ) {
				data = cache[ id ];

				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}

					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
					if ( data.handle ) {
						data.handle.elem = null;
					}
				}

				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}

				delete cache[ id ];
			}
		}
	}
});

function evalScript( i, elem ) {
	if ( elem.src ) {
		jQuery.ajax({
			url: elem.src,
			async: false,
			dataType: "script"
		});
	} else {
		jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
	}

	if ( elem.parentNode ) {
		elem.parentNode.removeChild( elem );
	}
}




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	// fixed for IE9, see #8346
	rupper = /([A-Z]|^ms)/g,
	rnumpx = /^-?\d+(?:px)?$/i,
	rnum = /^-?\d/,
	rrelNum = /^([\-+])=([\-+.\de]+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssWidth = [ "Left", "Right" ],
	cssHeight = [ "Top", "Bottom" ],
	curCSS,

	getComputedStyle,
	currentStyle;

jQuery.fn.css = function( name, value ) {
	// Setting 'undefined' is a no-op
	if ( arguments.length === 2 && value === undefined ) {
		return this;
	}

	return jQuery.access( this, name, value, true, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	});
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity", "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		var ret, hooks;

		// Make sure that we're working with the right name
		name = jQuery.camelCase( name );
		hooks = jQuery.cssHooks[ name ];
		name = jQuery.cssProps[ name ] || name;

		// cssFloat needs a special treatment
		if ( name === "cssFloat" ) {
			name = "float";
		}

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {};

		// Remember the old values, and insert the new ones
		for ( var name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	}
});

// DEPRECATED, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

jQuery.each(["height", "width"], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			var val;

			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					return getWH( elem, name, extra );
				} else {
					jQuery.swap( elem, cssShow, function() {
						val = getWH( elem, name, extra );
					});
				}

				return val;
			}
		},

		set: function( elem, value ) {
			if ( rnumpx.test( value ) ) {
				// ignore negative width and height values #1599
				value = parseFloat( value );

				if ( value >= 0 ) {
					return value + "px";
				}

			} else {
				return value;
			}
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery(function() {
	// This hook cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				var ret;
				jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						ret = curCSS( elem, "margin-right", "marginRight" );
					} else {
						ret = elem.style.marginRight;
					}
				});
				return ret;
			}
		};
	}
});

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, name ) {
		var ret, defaultView, computedStyle;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( (defaultView = elem.ownerDocument.defaultView) &&
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {
			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft, uncomputed,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret === null && style && (uncomputed = style[ name ]) ) {
			ret = uncomputed;
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ( ret || 0 );
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWH( elem, name, extra ) {

	// Start with offset property
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		which = name === "width" ? cssWidth : cssHeight,
		i = 0,
		len = which.length;

	if ( val > 0 ) {
		if ( extra !== "border" ) {
			for ( ; i < len; i++ ) {
				if ( !extra ) {
					val -= parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
				} else {
					val -= parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
				}
			}
		}

		return val + "px";
	}

	// Fall back to computed then uncomputed css if necessary
	val = curCSS( elem, name, name );
	if ( val < 0 || val == null ) {
		val = elem.style[ name ] || 0;
	}
	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Add padding, border, margin
	if ( extra ) {
		for ( ; i < len; i++ ) {
			val += parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
			if ( extra !== "padding" ) {
				val += parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
			}
			if ( extra === "margin" ) {
				val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
			}
		}
	}

	return val + "px";
}

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rspacesAjax = /\s+/,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Document location
	ajaxLocation,

	// Document location segments
	ajaxLocParts,

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		if ( jQuery.isFunction( func ) ) {
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
				i = 0,
				length = dataTypes.length,
				dataType,
				list,
				placeBefore;

			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters ),
		selection;

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf( " " );
		if ( off >= 0 ) {
			var selector = url.slice( off, url.length );
			url = url.slice( 0, off );
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = undefined;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			// Complete callback (responseText is used internally)
			complete: function( jqXHR, status, responseText ) {
				// Store the response as specified by the jqXHR object
				responseText = jqXHR.responseText;
				// If successful, inject the HTML into all the matched elements
				if ( jqXHR.isResolved() ) {
					// #4825: Get the actual response in case
					// a dataFilter is present in ajaxSettings
					jqXHR.done(function( r ) {
						responseText = r;
					});
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						responseText );
				}

				if ( callback ) {
					self.each( callback, [ responseText, status, jqXHR ] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},

	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// ifModified key
			ifModifiedKey,
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// The jqXHR state
			state = 0,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || "abort";
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			var isSuccess,
				success,
				error,
				statusText = nativeStatusText,
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
				lastModified,
				etag;

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
					}
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
						jQuery.etag[ ifModifiedKey ] = etag;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					try {
						success = ajaxConvert( s, response );
						statusText = "success";
						isSuccess = true;
					} catch(e) {
						// We have a parsererror
						statusText = "parsererror";
						error = e;
					}
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = "" + ( nativeStatusText || statusText );

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.then( tmp, tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );

		// Determine if a cross-domain request is in order
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefiler, stop there
		if ( state === 2 ) {
			return false;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already
				jqXHR.abort();
				return false;

		}

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : value;
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && obj != null && typeof obj === "object" ) {
		// Serialize object item.
		for ( var name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields,
		ct,
		type,
		finalDataType,
		firstDataType;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	var dataTypes = s.dataTypes,
		converters = {},
		i,
		key,
		length = dataTypes.length,
		tmp,
		// Current and previous dataTypes
		current = dataTypes[ 0 ],
		prev,
		// Conversion expression
		conversion,
		// Conversion function
		conv,
		// Conversion functions (transitive conversion)
		conv1,
		conv2;

	// For each dataType in the chain
	for ( i = 1; i < length; i++ ) {

		// Create converters map
		// with lowercased keys
		if ( i === 1 ) {
			for ( key in s.converters ) {
				if ( typeof key === "string" ) {
					converters[ key.toLowerCase() ] = s.converters[ key ];
				}
			}
		}

		// Get the dataTypes
		prev = current;
		current = dataTypes[ i ];

		// If current is auto dataType, update it to prev
		if ( current === "*" ) {
			current = prev;
		// If no auto and dataTypes are actually different
		} else if ( prev !== "*" && prev !== current ) {

			// Get the converter
			conversion = prev + " " + current;
			conv = converters[ conversion ] || converters[ "* " + current ];

			// If there is no direct converter, search transitively
			if ( !conv ) {
				conv2 = undefined;
				for ( conv1 in converters ) {
					tmp = conv1.split( " " );
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
						conv2 = converters[ tmp[1] + " " + current ];
						if ( conv2 ) {
							conv1 = converters[ conv1 ];
							if ( conv1 === true ) {
								conv = conv2;
							} else if ( conv2 === true ) {
								conv = conv1;
							}
							break;
						}
					}
				}
			}
			// If we found no converter, dispatch an error
			if ( !( conv || conv2 ) ) {
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
			}
			// If found converter is not an equivalence
			if ( conv !== true ) {
				// Convert with 1 or 2 converters accordingly
				response = conv ? conv( response ) : conv2( conv1(response) );
			}
		}
	}
	return response;
}




var jsc = jQuery.now(),
	jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		return jQuery.expando + "_" + ( jsc++ );
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var inspectData = s.contentType === "application/x-www-form-urlencoded" &&
		( typeof s.data === "string" );

	if ( s.dataTypes[ 0 ] === "jsonp" ||
		s.jsonp !== false && ( jsre.test( s.url ) ||
				inspectData && jsre.test( s.data ) ) ) {

		var responseContainer,
			jsonpCallback = s.jsonpCallback =
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
			previous = window[ jsonpCallback ],
			url = s.url,
			data = s.data,
			replace = "$1" + jsonpCallback + "$2";

		if ( s.jsonp !== false ) {
			url = url.replace( jsre, replace );
			if ( s.url === url ) {
				if ( inspectData ) {
					data = data.replace( jsre, replace );
				}
				if ( s.data === data ) {
					// Add callback manually
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
				}
			}
		}

		s.url = url;
		s.data = data;

		// Install callback
		window[ jsonpCallback ] = function( response ) {
			responseContainer = [ response ];
		};

		// Clean-up function
		jqXHR.always(function() {
			// Set callback back to previous value
			window[ jsonpCallback ] = previous;
			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( previous ) ) {
				window[ jsonpCallback ]( responseContainer[ 0 ] );
			}
		});

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( jsonpCallback + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Delegate to script
		return "script";
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});




var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0,
	xhrCallbacks;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var xhr = s.xhr(),
						handle,
						i;

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occured
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}
									responses.text = xhr.responseText;

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					// if we're in sync mode or it's in cache
					// and has been retrieved directly (IE6 & IE7)
					// we need to manually fire the callback
					if ( !s.async || xhr.readyState === 4 ) {
						callback();
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}




var elemdisplay = {},
	iframe, iframeDoc,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	],
	fxNow;

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback );

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
						display = elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( display === "" && jQuery.css(elem, "display") === "none" ) {
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					if ( display === "" || display === "none" ) {
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
					}
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			var elem, display,
				i = 0,
				j = this.length;

			for ( ; i < j; i++ ) {
				elem = this[i];
				if ( elem.style ) {
					display = jQuery.css( elem, "display" );

					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
						jQuery._data( elem, "olddisplay", display );
					}
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				if ( this[i].style ) {
					this[i].style.display = "none";
				}
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed( speed, easing, callback );

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete, [ false ] );
		}

		// Do not change referenced properties as per-property easing will be lost
		prop = jQuery.extend( {}, prop );

		function doAnimation() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			if ( optall.queue === false ) {
				jQuery._mark( this );
			}

			var opt = jQuery.extend( {}, optall ),
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				name, val, p, e,
				parts, start, end, unit,
				method;

			// will store per property easing and be used to determine when an animation is complete
			opt.animatedProperties = {};

			for ( p in prop ) {

				// property name normalization
				name = jQuery.camelCase( p );
				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
				}

				val = prop[ name ];

				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
				if ( jQuery.isArray( val ) ) {
					opt.animatedProperties[ name ] = val[ 1 ];
					val = prop[ name ] = val[ 0 ];
				} else {
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
				}

				if ( val === "hide" && hidden || val === "show" && !hidden ) {
					return opt.complete.call( this );
				}

				if ( isElement && ( name === "height" || name === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {

						// inline-level elements accept inline-block;
						// block-level elements need to be inline with layout
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
							this.style.display = "inline-block";

						} else {
							this.style.zoom = 1;
						}
					}
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			for ( p in prop ) {
				e = new jQuery.fx( this, opt, p );
				val = prop[ p ];

				if ( rfxtypes.test( val ) ) {

					// Tracks whether to show or hide based on private
					// data attached to the element
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
					if ( method ) {
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
						e[ method ]();
					} else {
						e[ val ]();
					}

				} else {
					parts = rfxnum.exec( val );
					start = e.cur();

					if ( parts ) {
						end = parseFloat( parts[2] );
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( this, p, (end || 1) + unit);
							start = ( (end || 1) / e.cur() ) * start;
							jQuery.style( this, p, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			}

			// For JS strict compliance
			return true;
		}

		return optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},

	stop: function( type, clearQueue, gotoEnd ) {
		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var index,
				hadTimers = false,
				timers = jQuery.timers,
				data = jQuery._data( this );

			// clear marker counters if we know they won't be
			if ( !gotoEnd ) {
				jQuery._unmark( true, this );
			}

			function stopQueue( elem, data, index ) {
				var hooks = data[ index ];
				jQuery.removeData( elem, index, true );
				hooks.stop( gotoEnd );
			}

			if ( type == null ) {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
						stopQueue( this, data, index );
					}
				}
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
				stopQueue( this, data, index );
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					if ( gotoEnd ) {

						// force the next step to be the last
						timers[ index ]( true );
					} else {
						timers[ index ].saveState();
					}
					hadTimers = true;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( !( gotoEnd && hadTimers ) ) {
				jQuery.dequeue( this, type );
			}
		});
	}

});

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout( clearFxNow, 0 );
	return ( fxNow = jQuery.now() );
}

function clearFxNow() {
	fxNow = undefined;
}

// Generate parameters to create a standard animation
function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx( "show", 1 ),
	slideUp: genFx( "hide", 1 ),
	slideToggle: genFx( "toggle", 1 ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function( noUnmark ) {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			} else if ( noUnmark !== false ) {
				jQuery._unmark( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p, n, firstNum, diff ) {
			return firstNum + diff * p;
		},
		swing: function( p, n, firstNum, diff ) {
			return ( ( -Math.cos( p*Math.PI ) / 2 ) + 0.5 ) * diff + firstNum;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		options.orig = options.orig || {};
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
			return this.elem[ this.prop ];
		}

		var parsed,
			r = jQuery.css( this.elem, this.prop );
		// Empty strings, null, undefined and "auto" are converted to 0,
		// complex values such as "rotate(1rad)" are returned as is,
		// simple values such as "10px" are parsed to Float.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = fxNow || createFxNow();
		this.end = to;
		this.now = this.start = from;
		this.pos = this.state = 0;
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

		function t( gotoEnd ) {
			return self.step( gotoEnd );
		}

		t.queue = this.options.queue;
		t.elem = this.elem;
		t.saveState = function() {
			if ( self.options.hide && jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
				jQuery._data( self.elem, "fxshow" + self.prop, self.start );
			}
		};

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval( fx.tick, fx.interval );
		}
	},

	// Simple 'show' function
	show: function() {
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );

		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any flash of content
		if ( dataShow !== undefined ) {
			// This show is picking up where a previous hide or show left off
			this.custom( this.cur(), dataShow );
		} else {
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
		}

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom( this.cur(), 0 );
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var p, n, complete,
			t = fxNow || createFxNow(),
			done = true,
			elem = this.elem,
			options = this.options;

		if ( gotoEnd || t >= options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			options.animatedProperties[ this.prop ] = true;

			for ( p in options.animatedProperties ) {
				if ( options.animatedProperties[ p ] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {

					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
						elem.style[ "overflow" + value ] = options.overflow[ index ];
					});
				}

				// Hide the element if the "hide" operation was done
				if ( options.hide ) {
					jQuery( elem ).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( options.hide || options.show ) {
					for ( p in options.animatedProperties ) {
						jQuery.style( elem, p, options.orig[ p ] );
						jQuery.removeData( elem, "fxshow" + p, true );
						// Toggle data is no longer needed
						jQuery.removeData( elem, "toggle" + p, true );
					}
				}

				// Execute the complete function
				// in the event that the complete function throws an exception
				// we must ensure it won't be called twice. #5684

				complete = options.complete;
				if ( complete ) {

					options.complete = false;
					complete.call( elem );
				}
			}

			return false;

		} else {
			// classical easing cannot be used with an Infinity duration
			if ( options.duration == Infinity ) {
				this.now = t;
			} else {
				n = t - this.startTime;
				this.state = n / options.duration;

				// Perform the easing function, defaults to swing
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
				this.now = this.start + ( (this.end - this.start) * this.pos );
			}
			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

// Adds width/height step functions
// Do not set anything below 0
jQuery.each([ "width", "height" ], function( i, prop ) {
	jQuery.fx.step[ prop ] = function( fx ) {
		jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
	};
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

// Try to restore the default display value of an element
function defaultDisplay( nodeName ) {

	if ( !elemdisplay[ nodeName ] ) {

		var body = document.body,
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
			display = elem.css( "display" );
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if ( display === "none" || display === "" ) {
			// No iframe to use yet, so create it
			if ( !iframe ) {
				iframe = document.createElement( "iframe" );
				iframe.frameBorder = iframe.width = iframe.height = 0;
			}

			body.appendChild( iframe );

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if ( !iframeDoc || !iframe.createElement ) {
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
				iframeDoc.write( ( document.compatMode === "CSS1Compat" ? "<!doctype html>" : "" ) + "<html><body>" );
				iframeDoc.close();
			}

			elem = iframeDoc.createElement( nodeName );

			iframeDoc.body.appendChild( elem );

			display = jQuery.css( elem, "display" );
			body.removeChild( iframe );
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	jQuery.fn.offset = function( options ) {
		var elem = this[0], box;

		if ( options ) {
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		var doc = elem.ownerDocument,
			docElem = doc.documentElement;

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow(doc),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	jQuery.fn.offset = function( options ) {
		var elem = this[0];

		if ( options ) {
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			doc = elem.ownerDocument,
			docElem = doc.documentElement,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( ["Left", "Top"], function( i, name ) {
	var method = "scroll" + name;

	jQuery.fn[ method ] = function( val ) {
		var elem, win;

		if ( val === undefined ) {
			elem = this[ 0 ];

			if ( !elem ) {
				return null;
			}

			win = getWindow( elem );

			// Return the scroll offset
			return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :
				jQuery.support.boxModel && win.document.documentElement[ method ] ||
					win.document.body[ method ] :
				elem[ method ];
		}

		// Set the scroll offset
		return this.each(function() {
			win = getWindow( this );

			if ( win ) {
				win.scrollTo(
					!i ? val : jQuery( win ).scrollLeft(),
					 i ? val : jQuery( win ).scrollTop()
				);

			} else {
				this[ method ] = val;
			}
		});
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each([ "Height", "Width" ], function( i, name ) {

	var type = name.toLowerCase();

	// innerHeight and innerWidth
	jQuery.fn[ "inner" + name ] = function() {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
			this[ type ]() :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn[ "outer" + name ] = function( margin ) {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
			this[ type ]() :
			null;
	};

	jQuery.fn[ type ] = function( size ) {
		// Get window width or height
		var elem = this[0];
		if ( !elem ) {
			return size == null ? null : this;
		}

		if ( jQuery.isFunction( size ) ) {
			return this.each(function( i ) {
				var self = jQuery( this );
				self[ type ]( size.call( this, i, self[ type ]() ) );
			});
		}

		if ( jQuery.isWindow( elem ) ) {
			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
			// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
			var docElemProp = elem.document.documentElement[ "client" + name ],
				body = elem.document.body;
			return elem.document.compatMode === "CSS1Compat" && docElemProp ||
				body && body[ "client" + name ] || docElemProp;

		// Get document width or height
		} else if ( elem.nodeType === 9 ) {
			// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
			return Math.max(
				elem.documentElement["client" + name],
				elem.body["scroll" + name], elem.documentElement["scroll" + name],
				elem.body["offset" + name], elem.documentElement["offset" + name]
			);

		// Get or set width or height on the element
		} else if ( size === undefined ) {
			var orig = jQuery.css( elem, type ),
				ret = parseFloat( orig );

			return jQuery.isNumeric( ret ) ? ret : orig;

		// Set the width or height on the element (default to pixels if value is unitless)
		} else {
			return this.css( type, typeof size === "string" ? size : size + "px" );
		}
	};

});




// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}



})( window );

module.exports = jQuery;}, "spine/index": function(exports, require, module) {module.exports = require('./lib/spine');}, "spine/lib/spine": function(exports, require, module) {// Generated by CoffeeScript 1.7.1

/*
Spine.js MVC library
Released under the MIT License
 */

(function() {
  var $, Controller, Events, Log, Model, Module, Spine, createObject, isArray, isBlank, makeArray, moduleKeywords,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Events = {
    bind: function(ev, callback) {
      var evs, name, _base, _i, _len;
      evs = ev.split(' ');
      if (!(this.hasOwnProperty('_callbacks') && this._callbacks)) {
        this._callbacks = {};
      }
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        (_base = this._callbacks)[name] || (_base[name] = []);
        this._callbacks[name].push(callback);
      }
      return this;
    },
    one: function(ev, callback) {
      var handler;
      return this.bind(ev, handler = function() {
        this.unbind(ev, handler);
        return callback.apply(this, arguments);
      });
    },
    trigger: function() {
      var args, callback, ev, list, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ev = args.shift();
      list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
      if (!list) {
        return;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        callback = list[_i];
        if (callback.apply(this, args) === false) {
          break;
        }
      }
      return true;
    },
    listenTo: function(obj, ev, callback) {
      obj.bind(ev, callback);
      this.listeningTo || (this.listeningTo = []);
      this.listeningTo.push({
        obj: obj,
        ev: ev,
        callback: callback
      });
      return this;
    },
    listenToOnce: function(obj, ev, callback) {
      var handler, listeningToOnce;
      listeningToOnce = this.listeningToOnce || (this.listeningToOnce = []);
      obj.bind(ev, handler = function() {
        var i, idx, lt, _i, _len;
        idx = -1;
        for (i = _i = 0, _len = listeningToOnce.length; _i < _len; i = ++_i) {
          lt = listeningToOnce[i];
          if (lt.obj === obj) {
            if (lt.ev === ev && lt.callback === callback) {
              idx = i;
            }
          }
        }
        obj.unbind(ev, handler);
        if (idx !== -1) {
          listeningToOnce.splice(idx, 1);
        }
        return callback.apply(this, arguments);
      });
      listeningToOnce.push({
        obj: obj,
        ev: ev,
        callback: callback,
        handler: handler
      });
      return this;
    },
    stopListening: function(obj, events, callback) {
      var e, ev, evts, idx, listeningTo, lt, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
      if (arguments.length === 0) {
        _ref = [this.listeningTo, this.listeningToOnce];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listeningTo = _ref[_i];
          if (!listeningTo) {
            continue;
          }
          for (_j = 0, _len1 = listeningTo.length; _j < _len1; _j++) {
            lt = listeningTo[_j];
            lt.obj.unbind(lt.ev, lt.handler || lt.callback);
          }
        }
        this.listeningTo = void 0;
        return this.listeningToOnce = void 0;
      } else if (obj) {
        _ref1 = [this.listeningTo, this.listeningToOnce];
        _results = [];
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          listeningTo = _ref1[_k];
          if (!listeningTo) {
            continue;
          }
          events = events ? events.split(' ') : [void 0];
          _results.push((function() {
            var _l, _len3, _results1;
            _results1 = [];
            for (_l = 0, _len3 = events.length; _l < _len3; _l++) {
              ev = events[_l];
              _results1.push((function() {
                var _m, _ref2, _results2;
                _results2 = [];
                for (idx = _m = _ref2 = listeningTo.length - 1; _ref2 <= 0 ? _m <= 0 : _m >= 0; idx = _ref2 <= 0 ? ++_m : --_m) {
                  lt = listeningTo[idx];
                  if (callback && (lt.handler || lt.callback) !== callback) {
                    continue;
                  }
                  if ((!ev) || (ev === lt.ev)) {
                    lt.obj.unbind(lt.ev, lt.handler || lt.callback);
                    if (idx !== -1) {
                      _results2.push(listeningTo.splice(idx, 1));
                    } else {
                      _results2.push(void 0);
                    }
                  } else if (ev) {
                    evts = lt.ev.split(' ');
                    if (__indexOf.call(evts, ev) >= 0) {
                      evts = (function() {
                        var _len4, _n, _results3;
                        _results3 = [];
                        for (_n = 0, _len4 = evts.length; _n < _len4; _n++) {
                          e = evts[_n];
                          if (e !== ev) {
                            _results3.push(e);
                          }
                        }
                        return _results3;
                      })();
                      lt.ev = $.trim(evts.join(' '));
                      _results2.push(lt.obj.unbind(ev, lt.handler || lt.callback));
                    } else {
                      _results2.push(void 0);
                    }
                  } else {
                    _results2.push(void 0);
                  }
                }
                return _results2;
              })());
            }
            return _results1;
          })());
        }
        return _results;
      }
    },
    unbind: function(ev, callback) {
      var cb, evs, i, list, name, _i, _j, _len, _len1, _ref;
      if (arguments.length === 0) {
        this._callbacks = {};
        return this;
      }
      if (!ev) {
        return this;
      }
      evs = ev.split(' ');
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        list = (_ref = this._callbacks) != null ? _ref[name] : void 0;
        if (!list) {
          continue;
        }
        if (!callback) {
          delete this._callbacks[name];
          continue;
        }
        for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
          cb = list[i];
          if (!(cb === callback)) {
            continue;
          }
          list = list.slice();
          list.splice(i, 1);
          this._callbacks[name] = list;
          break;
        }
      }
      return this;
    }
  };

  Events.on = Events.bind;

  Events.off = Events.unbind;

  Log = {
    trace: true,
    logPrefix: '(App)',
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.trace) {
        return;
      }
      if (this.logPrefix) {
        args.unshift(this.logPrefix);
      }
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.log === "function") {
          console.log.apply(console, args);
        }
      }
      return this;
    }
  };

  moduleKeywords = ['included', 'extended'];

  Module = (function() {
    Module.include = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('include(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.extend = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('extend(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.proxy = function(func) {
      return (function(_this) {
        return function() {
          return func.apply(_this, arguments);
        };
      })(this);
    };

    Module.prototype.proxy = function(func) {
      return (function(_this) {
        return function() {
          return func.apply(_this, arguments);
        };
      })(this);
    };

    function Module() {
      if (typeof this.init === "function") {
        this.init.apply(this, arguments);
      }
    }

    return Module;

  })();

  Model = (function(_super) {
    __extends(Model, _super);

    Model.extend(Events);

    Model.records = [];

    Model.irecords = {};

    Model.attributes = [];

    Model.configure = function() {
      var attributes, name;
      name = arguments[0], attributes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.className = name;
      this.deleteAll();
      if (attributes.length) {
        this.attributes = attributes;
      }
      this.attributes && (this.attributes = makeArray(this.attributes));
      this.attributes || (this.attributes = []);
      this.unbind();
      return this;
    };

    Model.toString = function() {
      return "" + this.className + "(" + (this.attributes.join(", ")) + ")";
    };

    Model.find = function(id, notFound) {
      var _ref;
      if (notFound == null) {
        notFound = this.notFound;
      }
      return ((_ref = this.irecords[id]) != null ? _ref.clone() : void 0) || (typeof notFound === "function" ? notFound(id) : void 0);
    };

    Model.findAll = function(ids, notFound) {
      var id, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = ids.length; _i < _len; _i++) {
        id = ids[_i];
        if (this.find(id, notFound)) {
          _results.push(this.find(id));
        }
      }
      return _results;
    };

    Model.notFound = function(id) {
      return null;
    };

    Model.exists = function(id) {
      return Boolean(this.irecords[id]);
    };

    Model.addRecord = function(record, options) {
      var _base, _base1, _name, _name1;
      if (options == null) {
        options = {};
      }
      if (record.id && this.irecords[record.id]) {
        this.irecords[record.id].remove(options);
        if (!options.clear) {
          record = this.irecords[record.id].load(record);
        }
      }
      record.id || (record.id = record.cid);
      if ((_base = this.irecords)[_name = record.id] == null) {
        _base[_name] = record;
      }
      if ((_base1 = this.irecords)[_name1 = record.cid] == null) {
        _base1[_name1] = record;
      }
      return this.records.push(record);
    };

    Model.refresh = function(values, options) {
      var record, records, result, _i, _len;
      if (options == null) {
        options = {};
      }
      if (options.clear) {
        this.deleteAll();
      }
      records = this.fromJSON(values);
      if (!isArray(records)) {
        records = [records];
      }
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        this.addRecord(record, options);
      }
      this.sort();
      result = this.cloneArray(records);
      this.trigger('refresh', result, options);
      return result;
    };

    Model.select = function(callback) {
      var record, _i, _len, _ref, _results;
      _ref = this.records;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        record = _ref[_i];
        if (callback(record)) {
          _results.push(record.clone());
        }
      }
      return _results;
    };

    Model.findByAttribute = function(name, value) {
      var record, _i, _len, _ref;
      _ref = this.records;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        record = _ref[_i];
        if (record[name] === value) {
          return record.clone();
        }
      }
      return null;
    };

    Model.findAllByAttribute = function(name, value) {
      return this.select(function(item) {
        return item[name] === value;
      });
    };

    Model.each = function(callback) {
      var record, _i, _len, _ref, _results;
      _ref = this.records;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        record = _ref[_i];
        _results.push(callback(record.clone()));
      }
      return _results;
    };

    Model.all = function() {
      return this.cloneArray(this.records);
    };

    Model.slice = function(begin, end) {
      if (begin == null) {
        begin = 0;
      }
      return this.cloneArray(this.records.slice(begin, end));
    };

    Model.first = function(end) {
      var _ref;
      if (end == null) {
        end = 1;
      }
      if (end > 1) {
        return this.cloneArray(this.records.slice(0, end));
      } else {
        return (_ref = this.records[0]) != null ? _ref.clone() : void 0;
      }
    };

    Model.last = function(begin) {
      var _ref;
      if (typeof begin === 'number') {
        return this.cloneArray(this.records.slice(-begin));
      } else {
        return (_ref = this.records[this.records.length - 1]) != null ? _ref.clone() : void 0;
      }
    };

    Model.count = function() {
      return this.records.length;
    };

    Model.deleteAll = function() {
      this.records = [];
      return this.irecords = {};
    };

    Model.destroyAll = function(options) {
      var record, _i, _len, _ref, _results;
      _ref = this.records;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        record = _ref[_i];
        _results.push(record.destroy(options));
      }
      return _results;
    };

    Model.update = function(id, atts, options) {
      return this.find(id).updateAttributes(atts, options);
    };

    Model.create = function(atts, options) {
      var record;
      record = new this(atts);
      return record.save(options);
    };

    Model.destroy = function(id, options) {
      return this.find(id).destroy(options);
    };

    Model.change = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('change', callbackOrParams);
      } else {
        return this.trigger.apply(this, ['change'].concat(__slice.call(arguments)));
      }
    };

    Model.fetch = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('fetch', callbackOrParams);
      } else {
        return this.trigger.apply(this, ['fetch'].concat(__slice.call(arguments)));
      }
    };

    Model.toJSON = function() {
      return this.records;
    };

    Model.fromJSON = function(objects) {
      var value, _i, _len, _results;
      if (!objects) {
        return;
      }
      if (typeof objects === 'string') {
        objects = JSON.parse(objects);
      }
      if (isArray(objects)) {
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          value = objects[_i];
          if (value instanceof this) {
            _results.push(value);
          } else {
            _results.push(new this(value));
          }
        }
        return _results;
      } else {
        if (objects instanceof this) {
          return objects;
        }
        return new this(objects);
      }
    };

    Model.fromForm = function() {
      var _ref;
      return (_ref = new this).fromForm.apply(_ref, arguments);
    };

    Model.sort = function() {
      if (this.comparator) {
        this.records.sort(this.comparator);
      }
      return this;
    };

    Model.cloneArray = function(array) {
      var value, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        _results.push(value.clone());
      }
      return _results;
    };

    Model.idCounter = 0;

    Model.uid = function(prefix) {
      var uid;
      if (prefix == null) {
        prefix = '';
      }
      uid = prefix + this.idCounter++;
      if (this.exists(uid)) {
        uid = this.uid(prefix);
      }
      return uid;
    };

    function Model(atts) {
      Model.__super__.constructor.apply(this, arguments);
      if ((this.constructor.uuid != null) && typeof this.constructor.uuid === 'function') {
        this.cid = this.constructor.uuid();
        if (!this.id) {
          this.id = this.cid;
        }
      } else {
        this.cid = (atts != null ? atts.cid : void 0) || this.constructor.uid('c-');
      }
      if (atts) {
        this.load(atts);
      }
    }

    Model.prototype.isNew = function() {
      return !this.exists();
    };

    Model.prototype.isValid = function() {
      return !this.validate();
    };

    Model.prototype.validate = function() {};

    Model.prototype.load = function(atts) {
      var key, value;
      if (atts.id) {
        this.id = atts.id;
      }
      for (key in atts) {
        value = atts[key];
        if (typeof this[key] === 'function') {
          if (typeof value === 'function') {
            continue;
          }
          this[key](value);
        } else {
          this[key] = value;
        }
      }
      return this;
    };

    Model.prototype.attributes = function() {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = this.constructor.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (key in this) {
          if (typeof this[key] === 'function') {
            result[key] = this[key]();
          } else {
            result[key] = this[key];
          }
        }
      }
      if (this.id) {
        result.id = this.id;
      }
      return result;
    };

    Model.prototype.eql = function(rec) {
      return rec && rec.constructor === this.constructor && ((rec.cid === this.cid) || (rec.id && rec.id === this.id));
    };

    Model.prototype.save = function(options) {
      var error, record;
      if (options == null) {
        options = {};
      }
      if (options.validate !== false) {
        error = this.validate();
        if (error) {
          this.trigger('error', error);
          return false;
        }
      }
      this.trigger('beforeSave', options);
      record = this.isNew() ? this.create(options) : this.update(options);
      this.stripCloneAttrs();
      this.trigger('save', options);
      return record;
    };

    Model.prototype.stripCloneAttrs = function() {
      var key, value;
      if (this.hasOwnProperty('cid')) {
        return;
      }
      for (key in this) {
        if (!__hasProp.call(this, key)) continue;
        value = this[key];
        if (__indexOf.call(this.constructor.attributes, key) >= 0) {
          delete this[key];
        }
      }
      return this;
    };

    Model.prototype.updateAttribute = function(name, value, options) {
      var atts;
      atts = {};
      atts[name] = value;
      return this.updateAttributes(atts, options);
    };

    Model.prototype.updateAttributes = function(atts, options) {
      this.load(atts);
      return this.save(options);
    };

    Model.prototype.changeID = function(id) {
      var records;
      if (id === this.id) {
        return;
      }
      records = this.constructor.irecords;
      records[id] = records[this.id];
      if (this.cid !== this.id) {
        delete records[this.id];
      }
      this.id = id;
      return this.save();
    };

    Model.prototype.remove = function(options) {
      var i, record, records, _i, _len;
      if (options == null) {
        options = {};
      }
      records = this.constructor.records.slice(0);
      for (i = _i = 0, _len = records.length; _i < _len; i = ++_i) {
        record = records[i];
        if (!(this.eql(record))) {
          continue;
        }
        records.splice(i, 1);
        break;
      }
      this.constructor.records = records;
      if (options.clear) {
        delete this.constructor.irecords[this.id];
        return delete this.constructor.irecords[this.cid];
      }
    };

    Model.prototype.destroy = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.clear == null) {
        options.clear = true;
      }
      this.trigger('beforeDestroy', options);
      this.remove(options);
      this.destroyed = true;
      this.trigger('destroy', options);
      this.trigger('change', 'destroy', options);
      if (this.listeningTo) {
        this.stopListening();
      }
      this.unbind();
      return this;
    };

    Model.prototype.dup = function(newRecord) {
      var atts;
      if (newRecord == null) {
        newRecord = true;
      }
      atts = this.attributes();
      if (newRecord) {
        delete atts.id;
      } else {
        atts.cid = this.cid;
      }
      return new this.constructor(atts);
    };

    Model.prototype.clone = function() {
      return createObject(this);
    };

    Model.prototype.reload = function() {
      var original;
      if (this.isNew()) {
        return this;
      }
      original = this.constructor.find(this.id);
      this.load(original.attributes());
      return original;
    };

    Model.prototype.refresh = function(data) {
      var root;
      root = this.constructor.irecords[this.id];
      root.load(data);
      this.trigger('refresh');
      return this;
    };

    Model.prototype.toJSON = function() {
      return this.attributes();
    };

    Model.prototype.toString = function() {
      return "<" + this.constructor.className + " (" + (JSON.stringify(this)) + ")>";
    };

    Model.prototype.fromForm = function(form) {
      var checkbox, key, name, result, _i, _j, _k, _len, _len1, _len2, _name, _ref, _ref1, _ref2;
      result = {};
      _ref = $(form).find('[type=checkbox]:not([value])');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checkbox = _ref[_i];
        result[checkbox.name] = $(checkbox).prop('checked');
      }
      _ref1 = $(form).find('[type=checkbox][name$="[]"]');
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        checkbox = _ref1[_j];
        name = checkbox.name.replace(/\[\]$/, '');
        result[name] || (result[name] = []);
        if ($(checkbox).prop('checked')) {
          result[name].push(checkbox.value);
        }
      }
      _ref2 = $(form).serializeArray();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        key = _ref2[_k];
        result[_name = key.name] || (result[_name] = key.value);
      }
      return this.load(result);
    };

    Model.prototype.exists = function() {
      return this.constructor.exists(this.id);
    };

    Model.prototype.update = function(options) {
      var clone, records;
      this.trigger('beforeUpdate', options);
      records = this.constructor.irecords;
      records[this.id].load(this.attributes());
      this.constructor.sort();
      clone = records[this.id].clone();
      clone.trigger('update', options);
      clone.trigger('change', 'update', options);
      return clone;
    };

    Model.prototype.create = function(options) {
      var clone, record;
      this.trigger('beforeCreate', options);
      this.id || (this.id = this.cid);
      record = this.dup(false);
      this.constructor.addRecord(record);
      this.constructor.sort();
      clone = record.clone();
      clone.trigger('create', options);
      clone.trigger('change', 'create', options);
      return clone;
    };

    Model.prototype.bind = function(events, callback) {
      var binder, singleEvent, _fn, _i, _len, _ref;
      this.constructor.bind(events, binder = (function(_this) {
        return function(record) {
          if (record && _this.eql(record)) {
            return callback.apply(_this, arguments);
          }
        };
      })(this));
      _ref = events.split(' ');
      _fn = (function(_this) {
        return function(singleEvent) {
          var unbinder;
          return _this.constructor.bind("unbind", unbinder = function(record, event, cb) {
            if (record && _this.eql(record)) {
              if (event && event !== singleEvent) {
                return;
              }
              if (cb && cb !== callback) {
                return;
              }
              _this.constructor.unbind(singleEvent, binder);
              return _this.constructor.unbind("unbind", unbinder);
            }
          });
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        singleEvent = _ref[_i];
        _fn(singleEvent);
      }
      return this;
    };

    Model.prototype.one = function(events, callback) {
      var handler;
      return this.bind(events, handler = (function(_this) {
        return function() {
          _this.unbind(events, handler);
          return callback.apply(_this, arguments);
        };
      })(this));
    };

    Model.prototype.trigger = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.splice(1, 0, this);
      return (_ref = this.constructor).trigger.apply(_ref, args);
    };

    Model.prototype.listenTo = function() {
      return Events.listenTo.apply(this, arguments);
    };

    Model.prototype.listenToOnce = function() {
      return Events.listenToOnce.apply(this, arguments);
    };

    Model.prototype.stopListening = function() {
      return Events.stopListening.apply(this, arguments);
    };

    Model.prototype.unbind = function(events, callback) {
      var event, _i, _len, _ref, _results;
      if (arguments.length === 0) {
        return this.trigger('unbind');
      } else if (events) {
        _ref = events.split(' ');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          event = _ref[_i];
          _results.push(this.trigger('unbind', event, callback));
        }
        return _results;
      }
    };

    return Model;

  })(Module);

  Model.prototype.on = Model.prototype.bind;

  Model.prototype.off = Model.prototype.unbind;

  Controller = (function(_super) {
    __extends(Controller, _super);

    Controller.include(Events);

    Controller.include(Log);

    Controller.prototype.eventSplitter = /^(\S+)\s*(.*)$/;

    Controller.prototype.tag = 'div';

    function Controller(options) {
      this.release = __bind(this.release, this);
      var context, key, parent_prototype, value, _ref;
      this.options = options;
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      if (!this.el) {
        this.el = document.createElement(this.tag);
      }
      this.el = $(this.el);
      this.$el = this.el;
      if (this.className) {
        this.el.addClass(this.className);
      }
      if (this.attributes) {
        this.el.attr(this.attributes);
      }
      if (!this.events) {
        this.events = this.constructor.events;
      }
      if (!this.elements) {
        this.elements = this.constructor.elements;
      }
      context = this;
      while (parent_prototype = context.constructor.__super__) {
        if (parent_prototype.events) {
          this.events = $.extend({}, parent_prototype.events, this.events);
        }
        if (parent_prototype.elements) {
          this.elements = $.extend({}, parent_prototype.elements, this.elements);
        }
        context = parent_prototype;
      }
      if (this.events) {
        this.delegateEvents(this.events);
      }
      if (this.elements) {
        this.refreshElements();
      }
      Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.release = function() {
      this.trigger('release', this);
      this.el.remove();
      this.unbind();
      return this.stopListening();
    };

    Controller.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    Controller.prototype.delegateEvents = function(events) {
      var eventName, key, match, method, selector, _results;
      _results = [];
      for (key in events) {
        method = events[key];
        if (typeof method === 'function') {
          method = (function(_this) {
            return function(method) {
              return function() {
                method.apply(_this, arguments);
                return true;
              };
            };
          })(this)(method);
        } else {
          if (!this[method]) {
            throw new Error("" + method + " doesn't exist");
          }
          method = (function(_this) {
            return function(method) {
              return function() {
                _this[method].apply(_this, arguments);
                return true;
              };
            };
          })(this)(method);
        }
        match = key.match(this.eventSplitter);
        eventName = match[1];
        selector = match[2];
        if (selector === '') {
          _results.push(this.el.bind(eventName, method));
        } else {
          _results.push(this.el.on(eventName, selector, method));
        }
      }
      return _results;
    };

    Controller.prototype.refreshElements = function() {
      var key, value, _ref, _results;
      _ref = this.elements;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this[value] = this.$(key));
      }
      return _results;
    };

    Controller.prototype.delay = function(func, timeout) {
      return setTimeout(this.proxy(func), timeout || 0);
    };

    Controller.prototype.html = function(element) {
      this.el.html(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.append = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).append.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.appendTo = function(element) {
      this.el.appendTo(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.prepend = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).prepend.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.replace = function(element) {
      var previous, _ref, _ref1;
      element = element.el || element;
      if (typeof element === "string") {
        element = $.trim(element);
      }
      _ref1 = [this.el, $(((_ref = $.parseHTML(element)) != null ? _ref[0] : void 0) || element)], previous = _ref1[0], this.el = _ref1[1];
      previous.replaceWith(this.el);
      this.delegateEvents(this.events);
      this.refreshElements();
      return this.el;
    };

    return Controller;

  })(Module);

  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
    return element;
  };

  createObject = Object.create || function(o) {
    var Func;
    Func = function() {};
    Func.prototype = o;
    return new Func();
  };

  isArray = function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };

  isBlank = function(value) {
    var key;
    if (!value) {
      return true;
    }
    for (key in value) {
      return false;
    }
    return true;
  };

  makeArray = function(args) {
    return Array.prototype.slice.call(args, 0);
  };

  Spine = this.Spine = {};

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine;
  }

  Spine.version = '1.3.2';

  Spine.isArray = isArray;

  Spine.isBlank = isBlank;

  Spine.$ = $;

  Spine.Events = Events;

  Spine.Log = Log;

  Spine.Module = Module;

  Spine.Controller = Controller;

  Spine.Model = Model;

  Module.extend.call(Spine, Events);

  Module.create = Module.sub = Controller.create = Controller.sub = Model.sub = function(instances, statics) {
    var Result;
    Result = (function(_super) {
      __extends(Result, _super);

      function Result() {
        return Result.__super__.constructor.apply(this, arguments);
      }

      return Result;

    })(this);
    if (instances) {
      Result.include(instances);
    }
    if (statics) {
      Result.extend(statics);
    }
    if (typeof Result.unbind === "function") {
      Result.unbind();
    }
    return Result;
  };

  Model.setup = function(name, attributes) {
    var Instance;
    if (attributes == null) {
      attributes = [];
    }
    Instance = (function(_super) {
      __extends(Instance, _super);

      function Instance() {
        return Instance.__super__.constructor.apply(this, arguments);
      }

      return Instance;

    })(this);
    Instance.configure.apply(Instance, [name].concat(__slice.call(attributes)));
    return Instance;
  };

  Spine.Class = Module;

}).call(this);

//# sourceMappingURL=spine.map
}, "spine/lib/ajax": function(exports, require, module) {// Generated by CoffeeScript 1.7.1
(function() {
  var $, Ajax, Base, Collection, Extend, GenerateURL, Include, Model, Queue, Singleton, Spine,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  Model = Spine.Model;

  Queue = $({});

  Ajax = {
    getURL: function(object) {
      if (object.className != null) {
        return this.generateURL(object);
      } else {
        return this.generateURL(object, encodeURIComponent(object.id));
      }
    },
    getCollectionURL: function(object) {
      return this.generateURL(object);
    },
    getScope: function(object) {
      return (typeof object.scope === "function" ? object.scope() : void 0) || object.scope;
    },
    getCollection: function(object) {
      if (object.url !== object.generateURL) {
        if (typeof object.url === 'function') {
          return object.url();
        } else {
          return object.url;
        }
      } else if (object.className != null) {
        return object.className.toLowerCase() + 's';
      }
    },
    generateURL: function() {
      var args, collection, object, path, scope;
      object = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      collection = Ajax.getCollection(object) || Ajax.getCollection(object.constructor);
      scope = Ajax.getScope(object) || Ajax.getScope(object.constructor);
      args.unshift(collection);
      args.unshift(scope);
      path = args.join('/');
      path = path.replace(/(\/\/)/g, "/");
      path = path.replace(/^\/|\/$/g, "");
      if (path.indexOf("../") !== 0) {
        return Model.host + "/" + path;
      } else {
        return path;
      }
    },
    enabled: true,
    disable: function(callback) {
      var e;
      if (this.enabled) {
        this.enabled = false;
        try {
          return callback();
        } catch (_error) {
          e = _error;
          throw e;
        } finally {
          this.enabled = true;
        }
      } else {
        return callback();
      }
    },
    queue: function(request) {
      if (request) {
        return Queue.queue(request);
      } else {
        return Queue.queue();
      }
    },
    clearQueue: function() {
      return this.queue([]);
    },
    config: {
      loadMethod: 'GET',
      updateMethod: 'PUT',
      createMethod: 'POST',
      destroyMethod: 'DELETE'
    }
  };

  Base = (function() {
    function Base() {}

    Base.prototype.defaults = {
      dataType: 'json',
      processData: false,
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    };

    Base.prototype.queue = Ajax.queue;

    Base.prototype.ajax = function(params, defaults) {
      return $.ajax(this.ajaxSettings(params, defaults));
    };

    Base.prototype.ajaxQueue = function(params, defaults, record) {
      var deferred, jqXHR, parallel, promise, request, settings;
      jqXHR = null;
      deferred = $.Deferred();
      promise = deferred.promise();
      if (!Ajax.enabled) {
        return promise;
      }
      settings = this.ajaxSettings(params, defaults);
      parallel = settings.parallel !== void 0 ? settings.parallel : settings.type === 'GET';
      request = function(next) {
        var _ref;
        if ((record != null ? record.id : void 0) != null) {
          if (settings.url == null) {
            settings.url = Ajax.getURL(record);
          }
          if ((_ref = settings.data) != null) {
            _ref.id = record.id;
          }
        }
        if (typeof settings.data !== 'string' && settings.processData !== true) {
          settings.data = JSON.stringify(settings.data);
        }
        jqXHR = $.ajax(settings).done(deferred.resolve).fail(deferred.reject).then(next, next);
        if (parallel) {
          return Queue.dequeue();
        }
      };
      promise.abort = function(statusText) {
        var index;
        if (jqXHR) {
          return jqXHR.abort(statusText);
        }
        index = $.inArray(request, this.queue());
        if (index > -1) {
          this.queue().splice(index, 1);
        }
        deferred.rejectWith(settings.context || settings, [promise, statusText, '']);
        return promise;
      };
      this.queue(request);
      return promise;
    };

    Base.prototype.ajaxSettings = function(params, defaults) {
      return $.extend({}, this.defaults, defaults, params);
    };

    return Base;

  })();

  Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection(model) {
      this.model = model;
      this.failResponse = __bind(this.failResponse, this);
      this.recordsResponse = __bind(this.recordsResponse, this);
    }

    Collection.prototype.find = function(id, params, options) {
      var record;
      if (options == null) {
        options = {};
      }
      record = new this.model({
        id: id
      });
      return this.ajaxQueue(params, {
        type: options.method || Ajax.config.loadMethod,
        url: options.url || Ajax.getURL(record),
        parallel: options.parallel
      }).done(this.recordsResponse).fail(this.failResponse);
    };

    Collection.prototype.all = function(params, options) {
      if (options == null) {
        options = {};
      }
      return this.ajaxQueue(params, {
        type: options.method || Ajax.config.loadMethod,
        url: options.url || Ajax.getURL(this.model),
        parallel: options.parallel
      }).done(this.recordsResponse).fail(this.failResponse);
    };

    Collection.prototype.fetch = function(params, options) {
      var id;
      if (params == null) {
        params = {};
      }
      if (options == null) {
        options = {};
      }
      if (id = params.id) {
        delete params.id;
        return this.find(id, params, options).done((function(_this) {
          return function(record) {
            return _this.model.refresh(record, options);
          };
        })(this));
      } else {
        return this.all(params, options).done((function(_this) {
          return function(records) {
            return _this.model.refresh(records, options);
          };
        })(this));
      }
    };

    Collection.prototype.recordsResponse = function(data, status, xhr) {
      return this.model.trigger('ajaxSuccess', null, status, xhr);
    };

    Collection.prototype.failResponse = function(xhr, statusText, error) {
      return this.model.trigger('ajaxError', null, xhr, statusText, error);
    };

    return Collection;

  })(Base);

  Singleton = (function(_super) {
    __extends(Singleton, _super);

    function Singleton(record) {
      this.record = record;
      this.failResponse = __bind(this.failResponse, this);
      this.recordResponse = __bind(this.recordResponse, this);
      this.model = this.record.constructor;
    }

    Singleton.prototype.reload = function(params, options) {
      if (options == null) {
        options = {};
      }
      return this.ajaxQueue(params, {
        type: options.method || Ajax.config.loadMethod,
        url: options.url,
        parallel: options.parallel
      }, this.record).done(this.recordResponse(options)).fail(this.failResponse(options));
    };

    Singleton.prototype.create = function(params, options) {
      if (options == null) {
        options = {};
      }
      return this.ajaxQueue(params, {
        type: options.method || Ajax.config.createMethod,
        contentType: 'application/json',
        data: this.record.toJSON(),
        url: options.url || Ajax.getCollectionURL(this.record),
        parallel: options.parallel
      }).done(this.recordResponse(options)).fail(this.failResponse(options));
    };

    Singleton.prototype.update = function(params, options) {
      if (options == null) {
        options = {};
      }
      return this.ajaxQueue(params, {
        type: options.method || Ajax.config.updateMethod,
        contentType: 'application/json',
        data: this.record.toJSON(),
        url: options.url,
        parallel: options.parallel
      }, this.record).done(this.recordResponse(options)).fail(this.failResponse(options));
    };

    Singleton.prototype.destroy = function(params, options) {
      if (options == null) {
        options = {};
      }
      return this.ajaxQueue(params, {
        type: options.method || Ajax.config.destroyMethod,
        url: options.url,
        parallel: options.parallel
      }, this.record).done(this.recordResponse(options)).fail(this.failResponse(options));
    };

    Singleton.prototype.recordResponse = function(options) {
      if (options == null) {
        options = {};
      }
      return (function(_this) {
        return function(data, status, xhr) {
          var _ref;
          Ajax.disable(function() {
            if (!(Spine.isBlank(data) || _this.record.destroyed)) {
              if (data.id && _this.record.id !== data.id) {
                _this.record.changeID(data.id);
              }
              return _this.record.refresh(data);
            }
          });
          _this.record.trigger('ajaxSuccess', data, status, xhr);
          return (_ref = options.done) != null ? _ref.apply(_this.record) : void 0;
        };
      })(this);
    };

    Singleton.prototype.failResponse = function(options) {
      if (options == null) {
        options = {};
      }
      return (function(_this) {
        return function(xhr, statusText, error) {
          var _ref;
          _this.record.trigger('ajaxError', xhr, statusText, error);
          return (_ref = options.fail) != null ? _ref.apply(_this.record) : void 0;
        };
      })(this);
    };

    return Singleton;

  })(Base);

  Model.host = '';

  GenerateURL = {
    include: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.unshift(encodeURIComponent(this.id));
      return Ajax.generateURL.apply(Ajax, [this].concat(__slice.call(args)));
    },
    extend: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Ajax.generateURL.apply(Ajax, [this].concat(__slice.call(args)));
    }
  };

  Include = {
    ajax: function() {
      return new Singleton(this);
    },
    generateURL: GenerateURL.include,
    url: GenerateURL.include
  };

  Extend = {
    ajax: function() {
      return new Collection(this);
    },
    generateURL: GenerateURL.extend,
    url: GenerateURL.extend
  };

  Model.Ajax = {
    extended: function() {
      this.fetch(this.ajaxFetch);
      this.change(this.ajaxChange);
      this.extend(Extend);
      return this.include(Include);
    },
    ajaxFetch: function() {
      var _ref;
      return (_ref = this.ajax()).fetch.apply(_ref, arguments);
    },
    ajaxChange: function(record, type, options) {
      if (options == null) {
        options = {};
      }
      if (options.ajax === false) {
        return;
      }
      return record.ajax()[type](options.ajax, options);
    }
  };

  Model.Ajax.Methods = {
    extended: function() {
      this.extend(Extend);
      return this.include(Include);
    }
  };

  Ajax.defaults = Base.prototype.defaults;

  Ajax.Base = Base;

  Ajax.Singleton = Singleton;

  Ajax.Collection = Collection;

  Spine.Ajax = Ajax;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Ajax;
  }

}).call(this);

//# sourceMappingURL=ajax.map
}, "spine/lib/local": function(exports, require, module) {// Generated by CoffeeScript 1.7.1
(function() {
  var Spine;

  Spine = this.Spine || require('spine');

  Spine.Model.Local = {
    extended: function() {
      this.change(this.saveLocal);
      return this.fetch(this.loadLocal);
    },
    saveLocal: function() {
      var result;
      result = JSON.stringify(this);
      return localStorage[this.className] = result;
    },
    loadLocal: function(options) {
      var result;
      if (options == null) {
        options = {};
      }
      if (!options.hasOwnProperty('clear')) {
        options.clear = true;
      }
      result = localStorage[this.className];
      return this.refresh(result || [], options);
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine.Model.Local;
  }

}).call(this);

//# sourceMappingURL=local.map
}, "spine/lib/route": function(exports, require, module) {// Generated by CoffeeScript 1.7.1
(function() {
  var $, Path, Route, Spine, escapeRegExp, hashStrip, namedParam, splatParam,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  hashStrip = /^#*/;

  namedParam = /:([\w\d]+)/g;

  splatParam = /\*([\w\d]+)/g;

  escapeRegExp = /[-[\]{}()+?.,\\^$|#\s]/g;

  Path = (function(_super) {
    __extends(Path, _super);

    function Path(path, callback) {
      var match;
      this.path = path;
      this.callback = callback;
      this.names = [];
      if (typeof path === 'string') {
        namedParam.lastIndex = 0;
        while ((match = namedParam.exec(path)) !== null) {
          this.names.push(match[1]);
        }
        splatParam.lastIndex = 0;
        while ((match = splatParam.exec(path)) !== null) {
          this.names.push(match[1]);
        }
        path = path.replace(escapeRegExp, '\\$&').replace(namedParam, '([^\/]*)').replace(splatParam, '(.*?)');
        this.route = new RegExp("^" + path + "$");
      } else {
        this.route = path;
      }
    }

    Path.prototype.match = function(path, options) {
      var i, match, param, params, _i, _len;
      if (options == null) {
        options = {};
      }
      if (!(match = this.route.exec(path))) {
        return false;
      }
      options.match = match;
      params = match.slice(1);
      if (this.names.length) {
        for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
          param = params[i];
          options[this.names[i]] = param;
        }
      }
      Route.trigger('before', this);
      return this.callback.call(null, options) !== false;
    };

    return Path;

  })(Spine.Module);

  Route = (function(_super) {
    var _ref;

    __extends(Route, _super);

    Route.extend(Spine.Events);

    Route.historySupport = ((_ref = window.history) != null ? _ref.pushState : void 0) != null;

    Route.options = {
      trigger: true,
      history: false,
      shim: false,
      replace: false,
      redirect: false
    };

    Route.routers = [];

    Route.setup = function(options) {
      if (options == null) {
        options = {};
      }
      this.options = $.extend({}, this.options, options);
      if (this.options.history) {
        this.history = this.historySupport && this.options.history;
      }
      if (this.options.shim) {
        return;
      }
      if (this.history) {
        $(window).bind('popstate', this.change);
      } else {
        $(window).bind('hashchange', this.change);
      }
      return this.change();
    };

    Route.unbind = function() {
      var unbindResult;
      unbindResult = Spine.Events.unbind.apply(this, arguments);
      if (arguments.length > 0) {
        return unbindResult;
      }
      if (this.options.shim) {
        return;
      }
      if (this.history) {
        return $(window).unbind('popstate', this.change);
      } else {
        return $(window).unbind('hashchange', this.change);
      }
    };

    Route.navigate = function() {
      var args, lastArg, options, path, routes;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      options = {};
      lastArg = args[args.length - 1];
      if (typeof lastArg === 'object') {
        options = args.pop();
      } else if (typeof lastArg === 'boolean') {
        options.trigger = args.pop();
      }
      options = $.extend({}, this.options, options);
      path = args.join('/');
      if (this.path === path) {
        return;
      }
      this.path = path;
      if (options.trigger) {
        this.trigger('navigate', this.path);
        routes = this.matchRoutes(this.path, options);
        if (!routes.length) {
          if (typeof options.redirect === 'function') {
            return options.redirect.apply(this, [this.path, options]);
          } else {
            if (options.redirect === true) {
              this.redirect(this.path);
            }
          }
        }
      }
      if (options.shim) {
        return true;
      } else if (this.history && options.replace) {
        return history.replaceState({}, document.title, this.path);
      } else if (this.history) {
        return history.pushState({}, document.title, this.path);
      } else {
        return window.location.hash = this.path;
      }
    };

    Route.create = function() {
      var router;
      router = new this;
      this.routers.push(router);
      return router;
    };

    Route.add = function(path, callback) {
      return this.router.add(path, callback);
    };

    Route.prototype.add = function(path, callback) {
      var key, value, _results;
      if (typeof path === 'object' && !(path instanceof RegExp)) {
        _results = [];
        for (key in path) {
          value = path[key];
          _results.push(this.add(key, value));
        }
        return _results;
      } else {
        return this.routes.push(new Path(path, callback));
      }
    };

    Route.prototype.destroy = function() {
      var r;
      this.routes.length = 0;
      return this.constructor.routers = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.constructor.routers;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          r = _ref1[_i];
          if (r !== this) {
            _results.push(r);
          }
        }
        return _results;
      }).call(this);
    };

    Route.getPath = function() {
      var path;
      if (this.history) {
        path = window.location.pathname;
        if (path.substr(0, 1) !== '/') {
          path = '/' + path;
        }
      } else {
        path = window.location.hash;
        path = path.replace(hashStrip, '');
      }
      return path;
    };

    Route.getHost = function() {
      return "" + window.location.protocol + "//" + window.location.host;
    };

    Route.change = function() {
      var path;
      path = Route.getPath();
      if (path === Route.path) {
        return;
      }
      Route.path = path;
      return Route.matchRoutes(Route.path);
    };

    Route.matchRoutes = function(path, options) {
      var match, matches, router, _i, _len, _ref1;
      matches = [];
      _ref1 = this.routers.concat([this.router]);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        router = _ref1[_i];
        match = router.matchRoute(path, options);
        if (match) {
          matches.push(match);
        }
      }
      if (matches.length) {
        this.trigger('change', matches, path);
      }
      return matches;
    };

    Route.redirect = function(path) {
      return window.location = path;
    };

    function Route() {
      this.routes = [];
    }

    Route.prototype.matchRoute = function(path, options) {
      var route, _i, _len, _ref1;
      _ref1 = this.routes;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        route = _ref1[_i];
        if (route.match(path, options)) {
          return route;
        }
      }
    };

    Route.prototype.trigger = function() {
      var args, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.splice(1, 0, this);
      return (_ref1 = this.constructor).trigger.apply(_ref1, args);
    };

    return Route;

  })(Spine.Module);

  Route.router = new Route;

  Spine.Controller.include({
    route: function(path, callback) {
      if (this.router instanceof Spine.Route) {
        return this.router.add(path, this.proxy(callback));
      } else {
        return Spine.Route.add(path, this.proxy(callback));
      }
    },
    routes: function(routes) {
      var key, value, _results;
      _results = [];
      for (key in routes) {
        value = routes[key];
        _results.push(this.route(key, value));
      }
      return _results;
    },
    navigate: function() {
      return Spine.Route.navigate.apply(Spine.Route, arguments);
    }
  });

  Route.Path = Path;

  Spine.Route = Route;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Route;
  }

}).call(this);

//# sourceMappingURL=route.map
}, "spine/lib/manager": function(exports, require, module) {// Generated by CoffeeScript 1.7.1
(function() {
  var $, Spine,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  Spine.Manager = (function(_super) {
    __extends(Manager, _super);

    Manager.include(Spine.Events);

    function Manager() {
      this.controllers = [];
      this.bind('change', this.change);
      this.add.apply(this, arguments);
    }

    Manager.prototype.add = function() {
      var cont, controllers, _i, _len, _results;
      controllers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        cont = controllers[_i];
        _results.push(this.addOne(cont));
      }
      return _results;
    };

    Manager.prototype.addOne = function(controller) {
      controller.bind('active', (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.trigger.apply(_this, ['change', controller].concat(__slice.call(args)));
        };
      })(this));
      controller.bind('release', (function(_this) {
        return function() {
          var c;
          return _this.controllers = (function() {
            var _i, _len, _ref, _results;
            _ref = this.controllers;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              c = _ref[_i];
              if (c !== controller) {
                _results.push(c);
              }
            }
            return _results;
          }).call(_this);
        };
      })(this));
      return this.controllers.push(controller);
    };

    Manager.prototype.deactivate = function() {
      return this.trigger.apply(this, ['change', false].concat(__slice.call(arguments)));
    };

    Manager.prototype.change = function() {
      var args, cont, current, _i, _len, _ref;
      current = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.controllers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        if (cont !== current) {
          cont.deactivate.apply(cont, args);
        }
      }
      if (current) {
        return current.activate.apply(current, args);
      }
    };

    return Manager;

  })(Spine.Module);

  Spine.Controller.include({
    active: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (typeof args[0] === 'function') {
        this.bind('active', args[0]);
      } else {
        args.unshift('active');
        this.trigger.apply(this, args);
      }
      return this;
    },
    isActive: function() {
      return this.el.hasClass('active');
    },
    activate: function() {
      this.el.addClass('active');
      return this;
    },
    deactivate: function() {
      this.el.removeClass('active');
      return this;
    }
  });

  Spine.Stack = (function(_super) {
    __extends(Stack, _super);

    Stack.prototype.controllers = {};

    Stack.prototype.routes = {};

    Stack.prototype.className = 'spine stack';

    function Stack() {
      this.release = __bind(this.release, this);
      var key, value, _fn, _ref, _ref1, _ref2;
      Stack.__super__.constructor.apply(this, arguments);
      this.manager = new Spine.Manager;
      this.router = (_ref = Spine.Route) != null ? _ref.create() : void 0;
      _ref1 = this.controllers;
      for (key in _ref1) {
        value = _ref1[key];
        if (this[key] != null) {
          throw Error("'@" + key + "' already assigned");
        }
        this[key] = new value({
          stack: this
        });
        this.add(this[key]);
      }
      _ref2 = this.routes;
      _fn = (function(_this) {
        return function(key, value) {
          var callback;
          if (typeof value === 'function') {
            callback = value;
          }
          callback || (callback = function() {
            var _ref3;
            return (_ref3 = _this[value]).active.apply(_ref3, arguments);
          });
          return _this.route(key, callback);
        };
      })(this);
      for (key in _ref2) {
        value = _ref2[key];
        _fn(key, value);
      }
      if (this["default"]) {
        this[this["default"]].active();
      }
    }

    Stack.prototype.add = function(controller) {
      this.manager.add(controller);
      return this.append(controller);
    };

    Stack.prototype.release = function() {
      var _ref;
      if ((_ref = this.router) != null) {
        _ref.destroy();
      }
      return Stack.__super__.release.apply(this, arguments);
    };

    return Stack;

  })(Spine.Controller);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine.Manager;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports.Stack = Spine.Stack;
  }

}).call(this);

//# sourceMappingURL=manager.map
}, "rx/dist/rx.lite": function(exports, require, module) {// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

;(function (undefined) {

  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  var root = (objectTypes[typeof window] && window) || this,
    freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
    freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
    moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
    freeGlobal = objectTypes[typeof global] && global;
  
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  var Rx = { 
      internals: {}, 
      config: {
        Promise: root.Promise // Detect if promise exists
      },
      helpers: { }
  };
    
  // Defaults
  var noop = Rx.helpers.noop = function () { },
    identity = Rx.helpers.identity = function (x) { return x; },
    pluck = Rx.helpers.pluck = function (property) { return function (x) { return x[property]; }; },
    just = Rx.helpers.just = function (value) { return function () { return value; }; },    
    defaultNow = Rx.helpers.defaultNow = Date.now,
    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.then === 'function' && p.then !== Rx.Observable.prototype.then; },
    asArray = Rx.helpers.asArray = function () { return Array.prototype.slice.call(arguments); },
    not = Rx.helpers.not = function (a) { return !a; };

  // Errors
  var sequenceContainsNoElements = 'Sequence contains no elements.';
  var argumentOutOfRange = 'Argument out of range';
  var objectDisposed = 'Object has been disposed';
  function checkDisposed() { if (this.isDisposed) { throw new Error(objectDisposed); } }

  // Shim in iterator support
  var $iterator$ = (typeof Symbol === 'object' && Symbol.iterator) ||
    '_es6shim_iterator_';
  // Firefox ships a partial implementation using the name @@iterator.
  // https://bugzilla.mozilla.org/show_bug.cgi?id=907077#c14
  // So use that name if we detect it.
  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
    $iterator$ = '@@iterator';
  }
  var doneEnumerator = { done: true, value: undefined };

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
    arrayClass = '[object Array]',
    boolClass = '[object Boolean]',
    dateClass = '[object Date]',
    errorClass = '[object Error]',
    funcClass = '[object Function]',
    numberClass = '[object Number]',
    objectClass = '[object Object]',
    regexpClass = '[object RegExp]',
    stringClass = '[object String]';

  var toString = Object.prototype.toString,
    hasOwnProperty = Object.prototype.hasOwnProperty,  
    supportsArgsClass = toString.call(arguments) == argsClass, // For less <IE9 && FF<4
    suportNodeClass,
    errorProto = Error.prototype,
    objectProto = Object.prototype,
    propertyIsEnumerable = objectProto.propertyIsEnumerable;

  try {
      suportNodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
  } catch(e) {
      suportNodeClass = true;
  }

  var shadowedProps = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'
  ];

  var nonEnumProps = {};
  nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
  nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
  nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
  nonEnumProps[objectClass] = { 'constructor': true };

  var support = {};
  (function () {
    var ctor = function() { this.x = 1; },
      props = [];

    ctor.prototype = { 'valueOf': 1, 'y': 1 };
    for (var key in new ctor) { props.push(key); }      
    for (key in arguments) { }

    // Detect if `name` or `message` properties of `Error.prototype` are enumerable by default.
    support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

    // Detect if `prototype` properties are enumerable by default.
    support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

    // Detect if `arguments` object indexes are non-enumerable
    support.nonEnumArgs = key != 0;

    // Detect if properties shadowing those on `Object.prototype` are non-enumerable.
    support.nonEnumShadows = !/valueOf/.test(props);
  }(1));

  function isObject(value) {
    // check if the value is the ECMAScript language type of Object
    // http://es5.github.io/#x8
    // and avoid a V8 bug
    // https://code.google.com/p/v8/issues/detail?id=2291
    var type = typeof value;
    return value && (type == 'function' || type == 'object') || false;
  }

  function keysIn(object) {
    var result = [];
    if (!isObject(object)) {
      return result;
    }
    if (support.nonEnumArgs && object.length && isArguments(object)) {
      object = slice.call(object);
    }
    var skipProto = support.enumPrototypes && typeof object == 'function',
        skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);

    for (var key in object) {
      if (!(skipProto && key == 'prototype') &&
          !(skipErrorProps && (key == 'message' || key == 'name'))) {
        result.push(key);
      }
    }

    if (support.nonEnumShadows && object !== objectProto) {
      var ctor = object.constructor,
          index = -1,
          length = shadowedProps.length;

      if (object === (ctor && ctor.prototype)) {
        var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
            nonEnum = nonEnumProps[className];
      }
      while (++index < length) {
        key = shadowedProps[index];
        if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
    }
    return result;
  }

  function internalFor(object, callback, keysFunc) {
    var index = -1,
      props = keysFunc(object),
      length = props.length;

    while (++index < length) {
      var key = props[index];
      if (callback(object[key], key, object) === false) {
        break;
      }
    }
    return object;
  }   

  function internalForIn(object, callback) {
    return internalFor(object, callback, keysIn);
  }

  function isNode(value) {
    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
    // methods that are `typeof` "string" and still can coerce nodes to strings
    return typeof value.toString != 'function' && typeof (value + '') == 'string';
  }

  function isArguments(value) {
    return (value && typeof value == 'object') ? toString.call(value) == argsClass : false;
  }

  // fallback for browsers that can't detect `arguments` objects by [[Class]]
  if (!supportsArgsClass) {
    isArguments = function(value) {
      return (value && typeof value == 'object') ? hasOwnProperty.call(value, 'callee') : false;
    };
  }

  function isFunction(value) {
    return typeof value == 'function' || false;
  }

  // fallback for older versions of Chrome and Safari
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return typeof value == 'function' && toString.call(value) == funcClass;
    };
  }        

  var isEqual = Rx.internals.isEqual = function (x, y) {
    return deepEquals(x, y, [], []); 
  };

  /** @private
   * Used for deep comparison
   **/
  function deepEquals(a, b, stackA, stackB) {
    // exit early for identical values
    if (a === b) {
      // treat `+0` vs. `-0` as not equal
      return a !== 0 || (1 / a == 1 / b);
    }

    var type = typeof a,
        otherType = typeof b;

    // exit early for unlike primitive values
    if (a === a && (a == null || b == null ||
        (type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object'))) {
      return false;
    }

    // compare [[Class]] names
    var className = toString.call(a),
        otherClass = toString.call(b);

    if (className == argsClass) {
      className = objectClass;
    }
    if (otherClass == argsClass) {
      otherClass = objectClass;
    }
    if (className != otherClass) {
      return false;
    }
    switch (className) {
      case boolClass:
      case dateClass:
        // coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
        return +a == +b;

      case numberClass:
        // treat `NaN` vs. `NaN` as equal
        return (a != +a)
          ? b != +b
          // but treat `-0` vs. `+0` as not equal
          : (a == 0 ? (1 / a == 1 / b) : a == +b);

      case regexpClass:
      case stringClass:
        // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
        // treat string primitives and their corresponding object instances as equal
        return a == String(b);
    }
    var isArr = className == arrayClass;
    if (!isArr) {

      // exit for functions and DOM nodes
      if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
        return false;
      }
      // in older versions of Opera, `arguments` objects have `Array` constructors
      var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
          ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

      // non `Object` object instances with different constructors are not equal
      if (ctorA != ctorB &&
            !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) &&
            !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
            ('constructor' in a && 'constructor' in b)
          ) {
        return false;
      }
    }
    // assume cyclic structures are equal
    // the algorithm for detecting cyclic structures is adapted from ES 5.1
    // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
    var initedStack = !stackA;
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == a) {
        return stackB[length] == b;
      }
    }
    var size = 0;
    result = true;

    // add `a` and `b` to the stack of traversed objects
    stackA.push(a);
    stackB.push(b);

    // recursively compare objects and arrays (susceptible to call stack limits)
    if (isArr) {
      // compare lengths to determine if a deep comparison is necessary
      length = a.length;
      size = b.length;
      result = size == length;

      if (result) {
        // deep compare the contents, ignoring non-numeric properties
        while (size--) {
          var index = length,
              value = b[size];

          if (!(result = deepEquals(a[size], value, stackA, stackB))) {
            break;
          }
        }
      }
    }
    else {
      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
      // which, in this case, is more costly
      internalForIn(b, function(value, key, b) {
        if (hasOwnProperty.call(b, key)) {
          // count the number of properties.
          size++;
          // deep compare each property value.
          return (result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB));
        }
      });

      if (result) {
        // ensure both objects have the same number of properties
        internalForIn(a, function(value, key, a) {
          if (hasOwnProperty.call(a, key)) {
            // `size` will be `-1` if `a` has more properties than `b`
            return (result = --size > -1);
          }
        });
      }
    }
    stackA.pop();
    stackB.pop();

    return result;
  }
    var slice = Array.prototype.slice;
    function argsOrArray(args, idx) {
        return args.length === 1 && Array.isArray(args[idx]) ?
            args[idx] :
            slice.call(args);
    }
    var hasProp = {}.hasOwnProperty;

    /** @private */
    var inherits = this.inherits = Rx.internals.inherits = function (child, parent) {
        function __() { this.constructor = child; }
        __.prototype = parent.prototype;
        child.prototype = new __();
    };

    /** @private */    
    var addProperties = Rx.internals.addProperties = function (obj) {
        var sources = slice.call(arguments, 1);
        for (var i = 0, len = sources.length; i < len; i++) {
            var source = sources[i];
            for (var prop in source) {
                obj[prop] = source[prop];
            }
        }
    };

    // Rx Utils
    var addRef = Rx.internals.addRef = function (xs, r) {
        return new AnonymousObservable(function (observer) {
            return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
        });
    };

    // Collection polyfills
    function arrayInitialize(count, factory) {
        var a = new Array(count);
        for (var i = 0; i < count; i++) {
            a[i] = factory();
        }
        return a;
    }

    // Collections
    var IndexedItem = function (id, value) {
        this.id = id;
        this.value = value;
    };

    IndexedItem.prototype.compareTo = function (other) {
        var c = this.value.compareTo(other.value);
        if (c === 0) {
            c = this.id - other.id;
        }
        return c;
    };

    // Priority Queue for Scheduling
    var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
        this.items = new Array(capacity);
        this.length = 0;
    };

    var priorityProto = PriorityQueue.prototype;
    priorityProto.isHigherPriority = function (left, right) {
        return this.items[left].compareTo(this.items[right]) < 0;
    };

    priorityProto.percolate = function (index) {
        if (index >= this.length || index < 0) {
            return;
        }
        var parent = index - 1 >> 1;
        if (parent < 0 || parent === index) {
            return;
        }
        if (this.isHigherPriority(index, parent)) {
            var temp = this.items[index];
            this.items[index] = this.items[parent];
            this.items[parent] = temp;
            this.percolate(parent);
        }
    };

    priorityProto.heapify = function (index) {
        if (index === undefined) {
            index = 0;
        }
        if (index >= this.length || index < 0) {
            return;
        }
        var left = 2 * index + 1,
            right = 2 * index + 2,
            first = index;
        if (left < this.length && this.isHigherPriority(left, first)) {
            first = left;
        }
        if (right < this.length && this.isHigherPriority(right, first)) {
            first = right;
        }
        if (first !== index) {
            var temp = this.items[index];
            this.items[index] = this.items[first];
            this.items[first] = temp;
            this.heapify(first);
        }
    };
    
    priorityProto.peek = function () {  return this.items[0].value; };

    priorityProto.removeAt = function (index) {
        this.items[index] = this.items[--this.length];
        delete this.items[this.length];
        this.heapify();
    };

    priorityProto.dequeue = function () {
        var result = this.peek();
        this.removeAt(0);
        return result;
    };

    priorityProto.enqueue = function (item) {
        var index = this.length++;
        this.items[index] = new IndexedItem(PriorityQueue.count++, item);
        this.percolate(index);
    };

    priorityProto.remove = function (item) {
        for (var i = 0; i < this.length; i++) {
            if (this.items[i].value === item) {
                this.removeAt(i);
                return true;
            }
        }
        return false;
    };
    PriorityQueue.count = 0;
    /**
     * Represents a group of disposable resources that are disposed together.
     * @constructor
     */
    var CompositeDisposable = Rx.CompositeDisposable = function () {
        this.disposables = argsOrArray(arguments, 0);
        this.isDisposed = false;
        this.length = this.disposables.length;
    };

    var CompositeDisposablePrototype = CompositeDisposable.prototype;

    /**
     * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
     * @param {Mixed} item Disposable to add.
     */    
    CompositeDisposablePrototype.add = function (item) {
        if (this.isDisposed) {
            item.dispose();
        } else {
            this.disposables.push(item);
            this.length++;
        }
    };

    /**
     * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
     * @param {Mixed} item Disposable to remove.
     * @returns {Boolean} true if found; false otherwise.
     */
    CompositeDisposablePrototype.remove = function (item) {
        var shouldDispose = false;
        if (!this.isDisposed) {
            var idx = this.disposables.indexOf(item);
            if (idx !== -1) {
                shouldDispose = true;
                this.disposables.splice(idx, 1);
                this.length--;
                item.dispose();
            }

        }
        return shouldDispose;
    };

    /**
     *  Disposes all disposables in the group and removes them from the group.  
     */
    CompositeDisposablePrototype.dispose = function () {
        if (!this.isDisposed) {
            this.isDisposed = true;
            var currentDisposables = this.disposables.slice(0);
            this.disposables = [];
            this.length = 0;

            for (var i = 0, len = currentDisposables.length; i < len; i++) {
                currentDisposables[i].dispose();
            }
        }
    };

    /**
     * Removes and disposes all disposables from the CompositeDisposable, but does not dispose the CompositeDisposable.
     */   
    CompositeDisposablePrototype.clear = function () {
        var currentDisposables = this.disposables.slice(0);
        this.disposables = [];
        this.length = 0;
        for (var i = 0, len = currentDisposables.length; i < len; i++) {
            currentDisposables[i].dispose();
        }
    };

    /**
     * Determines whether the CompositeDisposable contains a specific disposable.    
     * @param {Mixed} item Disposable to search for.
     * @returns {Boolean} true if the disposable was found; otherwise, false.
     */    
    CompositeDisposablePrototype.contains = function (item) {
        return this.disposables.indexOf(item) !== -1;
    };

    /**
     * Converts the existing CompositeDisposable to an array of disposables
     * @returns {Array} An array of disposable objects.
     */  
    CompositeDisposablePrototype.toArray = function () {
        return this.disposables.slice(0);
    };
    
    /**
     * Provides a set of static methods for creating Disposables.
     *
     * @constructor 
     * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
     */
    var Disposable = Rx.Disposable = function (action) {
        this.isDisposed = false;
        this.action = action || noop;
    };

    /** Performs the task of cleaning up resources. */     
    Disposable.prototype.dispose = function () {
        if (!this.isDisposed) {
            this.action();
            this.isDisposed = true;
        }
    };

    /**
     * Creates a disposable object that invokes the specified action when disposed.
     * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
     * @return {Disposable} The disposable object that runs the given action upon disposal.
     */
    var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };

    /** 
     * Gets the disposable that does nothing when disposed. 
     */
    var disposableEmpty = Disposable.empty = { dispose: noop };

    var BooleanDisposable = (function () {
        function BooleanDisposable (isSingle) {
            this.isSingle = isSingle;
            this.isDisposed = false;
            this.current = null;
        }

        var booleanDisposablePrototype = BooleanDisposable.prototype;

        /**
         * Gets the underlying disposable.
         * @return The underlying disposable.
         */
        booleanDisposablePrototype.getDisposable = function () {
            return this.current;
        };

        /**
         * Sets the underlying disposable.
         * @param {Disposable} value The new underlying disposable.
         */  
        booleanDisposablePrototype.setDisposable = function (value) {
            if (this.current && this.isSingle) {
                throw new Error('Disposable has already been assigned');
            }

            var shouldDispose = this.isDisposed, old;
            if (!shouldDispose) {
                old = this.current;
                this.current = value;
            }
            if (old) {
                old.dispose();
            }
            if (shouldDispose && value) {
                value.dispose();
            }
        };

        /** 
         * Disposes the underlying disposable as well as all future replacements.
         */
        booleanDisposablePrototype.dispose = function () {
            var old;
            if (!this.isDisposed) {
                this.isDisposed = true;
                old = this.current;
                this.current = null;
            }
            if (old) {
                old.dispose();
            }
        };

        return BooleanDisposable;
    }());

    /**
     * Represents a disposable resource which only allows a single assignment of its underlying disposable resource.
     * If an underlying disposable resource has already been set, future attempts to set the underlying disposable resource will throw an Error.
     */
    var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = (function (super_) {
        inherits(SingleAssignmentDisposable, super_);

        function SingleAssignmentDisposable() {
            super_.call(this, true);
        }

        return SingleAssignmentDisposable;
    }(BooleanDisposable));

    /**
     * Represents a disposable resource whose underlying disposable resource can be replaced by another disposable resource, causing automatic disposal of the previous underlying disposable resource.
     */
    var SerialDisposable = Rx.SerialDisposable = (function (super_) {
        inherits(SerialDisposable, super_);

        function SerialDisposable() {
            super_.call(this, false);
        }

        return SerialDisposable;
    }(BooleanDisposable));

    /**
     * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
     */  
    var RefCountDisposable = Rx.RefCountDisposable = (function () {

        function InnerDisposable(disposable) {
            this.disposable = disposable;
            this.disposable.count++;
            this.isInnerDisposed = false;
        }

        InnerDisposable.prototype.dispose = function () {
            if (!this.disposable.isDisposed) {
                if (!this.isInnerDisposed) {
                    this.isInnerDisposed = true;
                    this.disposable.count--;
                    if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
                        this.disposable.isDisposed = true;
                        this.disposable.underlyingDisposable.dispose();
                    }
                }
            }
        };

        /**
         * Initializes a new instance of the RefCountDisposable with the specified disposable.
         * @constructor
         * @param {Disposable} disposable Underlying disposable.
          */
        function RefCountDisposable(disposable) {
            this.underlyingDisposable = disposable;
            this.isDisposed = false;
            this.isPrimaryDisposed = false;
            this.count = 0;
        }

        /** 
         * Disposes the underlying disposable only when all dependent disposables have been disposed 
         */
        RefCountDisposable.prototype.dispose = function () {
            if (!this.isDisposed) {
                if (!this.isPrimaryDisposed) {
                    this.isPrimaryDisposed = true;
                    if (this.count === 0) {
                        this.isDisposed = true;
                        this.underlyingDisposable.dispose();
                    }
                }
            }
        };

        /**
         * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.      
         * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
         */        
        RefCountDisposable.prototype.getDisposable = function () {
            return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
        };

        return RefCountDisposable;
    })();

    var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
        this.scheduler = scheduler;
        this.state = state;
        this.action = action;
        this.dueTime = dueTime;
        this.comparer = comparer || defaultSubComparer;
        this.disposable = new SingleAssignmentDisposable();
    }

    ScheduledItem.prototype.invoke = function () {
        this.disposable.setDisposable(this.invokeCore());
    };

    ScheduledItem.prototype.compareTo = function (other) {
        return this.comparer(this.dueTime, other.dueTime);
    };

    ScheduledItem.prototype.isCancelled = function () {
        return this.disposable.isDisposed;
    };

    ScheduledItem.prototype.invokeCore = function () {
        return this.action(this.scheduler, this.state);
    };

    /** Provides a set of static properties to access commonly used schedulers. */
    var Scheduler = Rx.Scheduler = (function () {

        function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
            this.now = now;
            this._schedule = schedule;
            this._scheduleRelative = scheduleRelative;
            this._scheduleAbsolute = scheduleAbsolute;
        }

        function invokeRecImmediate(scheduler, pair) {
            var state = pair.first, action = pair.second, group = new CompositeDisposable(),
            recursiveAction = function (state1) {
                action(state1, function (state2) {
                    var isAdded = false, isDone = false,
                    d = scheduler.scheduleWithState(state2, function (scheduler1, state3) {
                        if (isAdded) {
                            group.remove(d);
                        } else {
                            isDone = true;
                        }
                        recursiveAction(state3);
                        return disposableEmpty;
                    });
                    if (!isDone) {
                        group.add(d);
                        isAdded = true;
                    }
                });
            };
            recursiveAction(state);
            return group;
        }

        function invokeRecDate(scheduler, pair, method) {
            var state = pair.first, action = pair.second, group = new CompositeDisposable(),
            recursiveAction = function (state1) {
                action(state1, function (state2, dueTime1) {
                    var isAdded = false, isDone = false,
                    d = scheduler[method].call(scheduler, state2, dueTime1, function (scheduler1, state3) {
                        if (isAdded) {
                            group.remove(d);
                        } else {
                            isDone = true;
                        }
                        recursiveAction(state3);
                        return disposableEmpty;
                    });
                    if (!isDone) {
                        group.add(d);
                        isAdded = true;
                    }
                });
            };
            recursiveAction(state);
            return group;
        }

        function invokeAction(scheduler, action) {
            action();
            return disposableEmpty;
        }

        var schedulerProto = Scheduler.prototype;
        
        /**
         * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.       
         * @param {Number} period Period for running the work periodically.
         * @param {Function} action Action to be executed.
         * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
         */        
        schedulerProto.schedulePeriodic = function (period, action) {
            return this.schedulePeriodicWithState(null, period, function () {
                action();
            });
        };

        /**
         * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.       
         * @param {Mixed} state Initial state passed to the action upon the first iteration.
         * @param {Number} period Period for running the work periodically.
         * @param {Function} action Action to be executed, potentially updating the state.
         * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
         */
        schedulerProto.schedulePeriodicWithState = function (state, period, action) {
            var s = state, id = setInterval(function () {
                s = action(s);
            }, period);
            return disposableCreate(function () {
                clearInterval(id);
            });
        };

        /**
         * Schedules an action to be executed.        
         * @param {Function} action Action to execute.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.schedule = function (action) {
            return this._schedule(action, invokeAction);
        };

        /**
         * Schedules an action to be executed.    
         * @param state State passed to the action to be executed.
         * @param {Function} action Action to be executed.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleWithState = function (state, action) {
            return this._schedule(state, action);
        };

        /**
         * Schedules an action to be executed after the specified relative due time.       
         * @param {Function} action Action to execute.
         * @param {Number} dueTime Relative time after which to execute the action.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleWithRelative = function (dueTime, action) {
            return this._scheduleRelative(action, dueTime, invokeAction);
        };

        /**
         * Schedules an action to be executed after dueTime.     
         * @param {Mixed} state State passed to the action to be executed.
         * @param {Function} action Action to be executed.
         * @param {Number} dueTime Relative time after which to execute the action.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleWithRelativeAndState = function (state, dueTime, action) {
            return this._scheduleRelative(state, dueTime, action);
        };

        /**
         * Schedules an action to be executed at the specified absolute due time.    
         * @param {Function} action Action to execute.
         * @param {Number} dueTime Absolute time at which to execute the action.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
          */
        schedulerProto.scheduleWithAbsolute = function (dueTime, action) {
            return this._scheduleAbsolute(action, dueTime, invokeAction);
        };

        /**
         * Schedules an action to be executed at dueTime.     
         * @param {Mixed} state State passed to the action to be executed.
         * @param {Function} action Action to be executed.
         * @param {Number}dueTime Absolute time at which to execute the action.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleWithAbsoluteAndState = function (state, dueTime, action) {
            return this._scheduleAbsolute(state, dueTime, action);
        };

        /**
         * Schedules an action to be executed recursively.
         * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleRecursive = function (action) {
            return this.scheduleRecursiveWithState(action, function (_action, self) {
                _action(function () {
                    self(_action);
                });
            });
        };

        /**
         * Schedules an action to be executed recursively.     
         * @param {Mixed} state State passed to the action to be executed.
         * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleRecursiveWithState = function (state, action) {
            return this.scheduleWithState({ first: state, second: action }, function (s, p) {
                return invokeRecImmediate(s, p);
            });
        };

        /**
         * Schedules an action to be executed recursively after a specified relative due time.     
         * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
         * @param {Number}dueTime Relative time after which to execute the action for the first time.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleRecursiveWithRelative = function (dueTime, action) {
            return this.scheduleRecursiveWithRelativeAndState(action, dueTime, function (_action, self) {
                _action(function (dt) {
                    self(_action, dt);
                });
            });
        };

        /**
         * Schedules an action to be executed recursively after a specified relative due time.  
         * @param {Mixed} state State passed to the action to be executed.
         * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
         * @param {Number}dueTime Relative time after which to execute the action for the first time.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleRecursiveWithRelativeAndState = function (state, dueTime, action) {
            return this._scheduleRelative({ first: state, second: action }, dueTime, function (s, p) {
                return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
            });
        };

        /**
         * Schedules an action to be executed recursively at a specified absolute due time.    
         * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
         * @param {Number}dueTime Absolute time at which to execute the action for the first time.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleRecursiveWithAbsolute = function (dueTime, action) {
            return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, function (_action, self) {
                _action(function (dt) {
                    self(_action, dt);
                });
            });
        };

        /**
         * Schedules an action to be executed recursively at a specified absolute due time.     
         * @param {Mixed} state State passed to the action to be executed.
         * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
         * @param {Number}dueTime Absolute time at which to execute the action for the first time.
         * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
         */
        schedulerProto.scheduleRecursiveWithAbsoluteAndState = function (state, dueTime, action) {
            return this._scheduleAbsolute({ first: state, second: action }, dueTime, function (s, p) {
                return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
            });
        };

        /** Gets the current time according to the local machine's system clock. */
        Scheduler.now = defaultNow;

        /**
         * Normalizes the specified TimeSpan value to a positive value.
         * @param {Number} timeSpan The time span value to normalize.
         * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
         */   
        Scheduler.normalize = function (timeSpan) {
            if (timeSpan < 0) {
                timeSpan = 0;
            }
            return timeSpan;
        };

        return Scheduler;
    }());

    var normalizeTime = Scheduler.normalize;
    
  /**
   * Gets a scheduler that schedules work immediately on the current thread.
   */    
  var immediateScheduler = Scheduler.immediate = (function () {

    function scheduleNow(state, action) { return action(this, state); }

    function scheduleRelative(state, dueTime, action) {
      var dt = normalizeTime(dt);
      while (dt - this.now() > 0) { }
      return action(this, state);
    }

    function scheduleAbsolute(state, dueTime, action) {
      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
    }

    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
  }());

    /** 
     * Gets a scheduler that schedules work as soon as possible on the current thread.
     */
    var currentThreadScheduler = Scheduler.currentThread = (function () {
        var queue;

        function runTrampoline (q) {
            var item;
            while (q.length > 0) {
                item = q.dequeue();
                if (!item.isCancelled()) {
                    // Note, do not schedule blocking work!
                    while (item.dueTime - Scheduler.now() > 0) {
                    }
                    if (!item.isCancelled()) {
                        item.invoke();
                    }
                }
            }            
        }

        function scheduleNow(state, action) {
            return this.scheduleWithRelativeAndState(state, 0, action);
        }

        function scheduleRelative(state, dueTime, action) {
            var dt = this.now() + Scheduler.normalize(dueTime),
                    si = new ScheduledItem(this, state, action, dt),
                    t;
            if (!queue) {
                queue = new PriorityQueue(4);
                queue.enqueue(si);
                try {
                    runTrampoline(queue);
                } catch (e) { 
                    throw e;
                } finally {
                    queue = null;
                }
            } else {
                queue.enqueue(si);
            }
            return si.disposable;
        }

        function scheduleAbsolute(state, dueTime, action) {
            return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
        }

        var currentScheduler = new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
        currentScheduler.scheduleRequired = function () { return queue === null; };
        currentScheduler.ensureTrampoline = function (action) {
            if (queue === null) {
                return this.schedule(action);
            } else {
                return action();
            }
        };

        return currentScheduler;
    }());

    var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
        function tick(command, recurse) {
            recurse(0, this._period);
            try {
                this._state = this._action(this._state);
            } catch (e) {
                this._cancel.dispose();
                throw e;
            }
        }

        function SchedulePeriodicRecursive(scheduler, state, period, action) {
            this._scheduler = scheduler;
            this._state = state;
            this._period = period;
            this._action = action;
        }

        SchedulePeriodicRecursive.prototype.start = function () {
            var d = new SingleAssignmentDisposable();
            this._cancel = d;
            d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));

            return d;
        };

        return SchedulePeriodicRecursive;
    }());

  
  var scheduleMethod, clearMethod = noop;
  (function () {

      var reNative = RegExp('^' +
        String(toString)
          .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
          .replace(/toString| for [^\]]+/g, '.*?') + '$'
      );

      var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
        !reNative.test(setImmediate) && setImmediate,
        clearImmediate = typeof (clearImmediate = freeGlobal && moduleExports && freeGlobal.clearImmediate) == 'function' &&
        !reNative.test(clearImmediate) && clearImmediate;

      function postMessageSupported () {
        // Ensure not in a worker
        if (!root.postMessage || root.importScripts) { return false; }
        var isAsync = false, 
            oldHandler = root.onmessage;
        // Test for async
        root.onmessage = function () { isAsync = true; };
        root.postMessage('','*');
        root.onmessage = oldHandler;

        return isAsync;
      }

      // Use in order, nextTick, setImmediate, postMessage, MessageChannel, script readystatechanged, setTimeout
      if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
        scheduleMethod = process.nextTick;
      } else if (typeof setImmediate === 'function') {
        scheduleMethod = setImmediate;
        clearMethod = clearImmediate;
      } else if (postMessageSupported()) {
          var MSG_PREFIX = 'ms.rx.schedule' + Math.random(),
            tasks = {},
            taskId = 0;

          function onGlobalPostMessage(event) {
            // Only if we're a match to avoid any other global events
            if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
              var handleId = event.data.substring(MSG_PREFIX.length),
                action = tasks[handleId];
              action();
              delete tasks[handleId];
            }
          }

          if (root.addEventListener) {
            root.addEventListener('message', onGlobalPostMessage, false);
          } else {
            root.attachEvent('onmessage', onGlobalPostMessage, false);
          }

          scheduleMethod = function (action) {
            var currentId = taskId++;
            tasks[currentId] = action;
            root.postMessage(MSG_PREFIX + currentId, '*');
          };
      } else if (!!root.MessageChannel) {
          var channel = new root.MessageChannel(),
            channelTasks = {},
            channelTaskId = 0;

          channel.port1.onmessage = function (event) {
            var id = event.data,
              action = channelTasks[id];
            action();
            delete channelTasks[id];
          };

          scheduleMethod = function (action) {
            var id = channelTaskId++;
            channelTasks[id] = action;
            channel.port2.postMessage(id);     
          };
      } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {
          
        scheduleMethod = function (action) {
          var scriptElement = root.document.createElement('script');
          scriptElement.onreadystatechange = function () { 
            action();
            scriptElement.onreadystatechange = null;
            scriptElement.parentNode.removeChild(scriptElement);
            scriptElement = null;  
          };
          root.document.documentElement.appendChild(scriptElement);  
        };

      } else {
        scheduleMethod = function (action) { return setTimeout(action, 0); };
        clearMethod = clearTimeout;
      }
  }());

  /** 
   * Gets a scheduler that schedules work via a timed callback based upon platform.
   */
  var timeoutScheduler = Scheduler.timeout = (function () {

    function scheduleNow(state, action) {
        var scheduler = this,
          disposable = new SingleAssignmentDisposable();
        var id = scheduleMethod(function () {
          if (!disposable.isDisposed) {
            disposable.setDisposable(action(scheduler, state));
          }
        });
        return new CompositeDisposable(disposable, disposableCreate(function () {
          clearMethod(id);
        }));
    }

    function scheduleRelative(state, dueTime, action) {
        var scheduler = this,
          dt = Scheduler.normalize(dueTime);
        if (dt === 0) {
          return scheduler.scheduleWithState(state, action);
        }
        var disposable = new SingleAssignmentDisposable();
        var id = setTimeout(function () {
          if (!disposable.isDisposed) {
            disposable.setDisposable(action(scheduler, state));
          }
        }, dt);
        return new CompositeDisposable(disposable, disposableCreate(function () {
          clearTimeout(id);
        }));
    }

    function scheduleAbsolute(state, dueTime, action) {
      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
    }

    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
  })();

    /**
     *  Represents a notification to an observer.
     */
    var Notification = Rx.Notification = (function () {
        function Notification(kind, hasValue) { 
            this.hasValue = hasValue == null ? false : hasValue;
            this.kind = kind;
        }

        var NotificationPrototype = Notification.prototype;

        /**
         * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
         * 
         * @memberOf Notification
         * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..
         * @param {Function} onError Delegate to invoke for an OnError notification.
         * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.
         * @returns {Any} Result produced by the observation.
         */
        NotificationPrototype.accept = function (observerOrOnNext, onError, onCompleted) {
            if (arguments.length === 1 && typeof observerOrOnNext === 'object') {
                return this._acceptObservable(observerOrOnNext);
            }
            return this._accept(observerOrOnNext, onError, onCompleted);
        };

        /**
         * Returns an observable sequence with a single notification.
         * 
         * @memberOf Notification
         * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
         * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
         */
        NotificationPrototype.toObservable = function (scheduler) {
            var notification = this;
            scheduler || (scheduler = immediateScheduler);
            return new AnonymousObservable(function (observer) {
                return scheduler.schedule(function () {
                    notification._acceptObservable(observer);
                    if (notification.kind === 'N') {
                        observer.onCompleted();
                    }
                });
            });
        };

        return Notification;
    })();

    /**
     * Creates an object that represents an OnNext notification to an observer.
     * @param {Any} value The value contained in the notification.
     * @returns {Notification} The OnNext notification containing the value.
     */
    var notificationCreateOnNext = Notification.createOnNext = (function () {

        function _accept (onNext) {
            return onNext(this.value);
        }

        function _acceptObservable(observer) {
            return observer.onNext(this.value);
        }

        function toString () {
            return 'OnNext(' + this.value + ')';
        }

        return function (value) {
            var notification = new Notification('N', true);
            notification.value = value;
            notification._accept = _accept;
            notification._acceptObservable = _acceptObservable;
            notification.toString = toString;
            return notification;
        };
    }());

    /**
     * Creates an object that represents an OnError notification to an observer.
     * @param {Any} error The exception contained in the notification.
     * @returns {Notification} The OnError notification containing the exception.
     */
    var notificationCreateOnError = Notification.createOnError = (function () {

        function _accept (onNext, onError) {
            return onError(this.exception);
        }

        function _acceptObservable(observer) {
            return observer.onError(this.exception);
        }

        function toString () {
            return 'OnError(' + this.exception + ')';
        }

        return function (exception) {
            var notification = new Notification('E');
            notification.exception = exception;
            notification._accept = _accept;
            notification._acceptObservable = _acceptObservable;
            notification.toString = toString;
            return notification;
        };
    }());

    /**
     * Creates an object that represents an OnCompleted notification to an observer.
     * @returns {Notification} The OnCompleted notification.
     */
    var notificationCreateOnCompleted = Notification.createOnCompleted = (function () {

        function _accept (onNext, onError, onCompleted) {
            return onCompleted();
        }

        function _acceptObservable(observer) {
            return observer.onCompleted();
        }

        function toString () {
            return 'OnCompleted()';
        }

        return function () {
            var notification = new Notification('C');
            notification._accept = _accept;
            notification._acceptObservable = _acceptObservable;
            notification.toString = toString;
            return notification;
        };
    }());

  var Enumerator = Rx.internals.Enumerator = function (next) {
    this._next = next;
  };

  Enumerator.prototype.next = function () {
    return this._next();
  };

  Enumerator.prototype[$iterator$] = function () { return this; }

  var Enumerable = Rx.internals.Enumerable = function (iterator) {
    this._iterator = iterator;
  };

  Enumerable.prototype[$iterator$] = function () {
    return this._iterator();
  };

  Enumerable.prototype.concat = function () {
    var sources = this;
    return new AnonymousObservable(function (observer) {
      var e;
      try {
        e = sources[$iterator$]();
      } catch(err) {
        observer.onError();
        return;
      }

      var isDisposed, 
        subscription = new SerialDisposable();
      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
        var currentItem;
        if (isDisposed) { return; }

        try {
          currentItem = e.next();
        } catch (ex) {
          observer.onError(ex);
          return;
        }

        if (currentItem.done) {
          observer.onCompleted();
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var d = new SingleAssignmentDisposable();
        subscription.setDisposable(d);
        d.setDisposable(currentValue.subscribe(
          observer.onNext.bind(observer),
          observer.onError.bind(observer),
          function () { self(); })
        );
      });

      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
        isDisposed = true;
      }));
    });
  };

  Enumerable.prototype.catchException = function () {
    var sources = this;
    return new AnonymousObservable(function (observer) {
      var e;
      try {
        e = sources[$iterator$]();
      } catch(err) {
        observer.onError();
        return;
      }

      var isDisposed, 
        lastException,
        subscription = new SerialDisposable();
      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
        if (isDisposed) { return; }

        var currentItem;
        try {
          currentItem = e.next();
        } catch (ex) {
          observer.onError(ex);
          return;
        }

        if (currentItem.done) {
          if (lastException) {
            observer.onError(lastException);
          } else {
            observer.onCompleted();
          }
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));        

        var d = new SingleAssignmentDisposable();
        subscription.setDisposable(d);
        d.setDisposable(currentValue.subscribe(
          observer.onNext.bind(observer),
          function (exn) {
            lastException = exn;
            self();
          },
          observer.onCompleted.bind(observer)));
      });
      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
        isDisposed = true;
      }));
    });
  };

  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
    if (repeatCount == null) { repeatCount = -1; }
    return new Enumerable(function () {
      var left = repeatCount;
      return new Enumerator(function () {
        if (left === 0) { return doneEnumerator; }
        if (left > 0) { left--; }
        return { done: false, value: value };
      });
    });
  };

  var enumerableFor = Enumerable.forEach = function (source, selector, thisArg) {
    selector || (selector = identity);
    return new Enumerable(function () {
      var index = -1;
      return new Enumerator(
        function () {
          return ++index < source.length ?
            { done: false, value: selector.call(thisArg, source[index], index, source) } :
            doneEnumerator;
        });
    });
  };

    /**
     * Supports push-style iteration over an observable sequence.
     */
    var Observer = Rx.Observer = function () { };

    /**
     *  Creates a notification callback from an observer.
     *  
     * @param observer Observer object.
     * @returns The action that forwards its input notification to the underlying observer.
     */
    Observer.prototype.toNotifier = function () {
        var observer = this;
        return function (n) {
            return n.accept(observer);
        };
    };

    /**
     *  Hides the identity of an observer.

     * @returns An observer that hides the identity of the specified observer. 
     */   
    Observer.prototype.asObserver = function () {
        return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
    };

    /**
     *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
     *  
     * @static
     * @memberOf Observer
     * @param {Function} [onNext] Observer's OnNext action implementation.
     * @param {Function} [onError] Observer's OnError action implementation.
     * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
     * @returns {Observer} The observer object implemented using the given actions.
     */
    var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
        onNext || (onNext = noop);
        onError || (onError = defaultError);
        onCompleted || (onCompleted = noop);
        return new AnonymousObserver(onNext, onError, onCompleted);
    };

    /**
     *  Creates an observer from a notification callback.
     *  
     * @static
     * @memberOf Observer
     * @param {Function} handler Action that handles a notification.
     * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
     */
    Observer.fromNotifier = function (handler) {
        return new AnonymousObserver(function (x) {
            return handler(notificationCreateOnNext(x));
        }, function (exception) {
            return handler(notificationCreateOnError(exception));
        }, function () {
            return handler(notificationCreateOnCompleted());
        });
    };
    
    /**
     * Abstract base class for implementations of the Observer class.
     * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages. 
     */
    var AbstractObserver = Rx.internals.AbstractObserver = (function (_super) {
        inherits(AbstractObserver, _super);

        /**
         * Creates a new observer in a non-stopped state.
         *
         * @constructor
         */
        function AbstractObserver() {
            this.isStopped = false;
            _super.call(this);
        }

        /**
         * Notifies the observer of a new element in the sequence.
         *  
         * @memberOf AbstractObserver
         * @param {Any} value Next element in the sequence. 
         */
        AbstractObserver.prototype.onNext = function (value) {
            if (!this.isStopped) {
                this.next(value);
            }
        };

        /**
         * Notifies the observer that an exception has occurred.
         * 
         * @memberOf AbstractObserver
         * @param {Any} error The error that has occurred.     
         */    
        AbstractObserver.prototype.onError = function (error) {
            if (!this.isStopped) {
                this.isStopped = true;
                this.error(error);
            }
        };

        /**
         * Notifies the observer of the end of the sequence.
         */    
        AbstractObserver.prototype.onCompleted = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this.completed();
            }
        };

        /**
         * Disposes the observer, causing it to transition to the stopped state.
         */
        AbstractObserver.prototype.dispose = function () {
            this.isStopped = true;
        };

        AbstractObserver.prototype.fail = function (e) {
            if (!this.isStopped) {
                this.isStopped = true;
                this.error(e);
                return true;
            }

            return false;
        };

        return AbstractObserver;
    }(Observer));

  /**
   * Class to create an Observer instance from delegate-based implementations of the on* methods.
   */
  var AnonymousObserver = Rx.AnonymousObserver = (function (_super) {
    inherits(AnonymousObserver, _super);

    /**
     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
     * @param {Any} onNext Observer's OnNext action implementation.
     * @param {Any} onError Observer's OnError action implementation.
     * @param {Any} onCompleted Observer's OnCompleted action implementation.  
     */      
    function AnonymousObserver(onNext, onError, onCompleted) {
      _super.call(this);
      this._onNext = onNext;
      this._onError = onError;
      this._onCompleted = onCompleted;
    }

    /**
     * Calls the onNext action.
     * @param {Any} value Next element in the sequence.   
     */     
    AnonymousObserver.prototype.next = function (value) {
      this._onNext(value);
    };

    /**
     * Calls the onError action.
     * @param {Any} error The error that has occurred.   
     */     
    AnonymousObserver.prototype.error = function (exception) {
      this._onError(exception);
    };

    /**
     *  Calls the onCompleted action.
     */        
    AnonymousObserver.prototype.completed = function () {
      this._onCompleted();
    };

    return AnonymousObserver;
  }(AbstractObserver));

  var observableProto;

  /**
   * Represents a push-style collection.
   */
  var Observable = Rx.Observable = (function () {

    function Observable(subscribe) {
      this._subscribe = subscribe;
    }

    observableProto = Observable.prototype;

    /**
     *  Subscribes an observer to the observable sequence.
     *  
     * @example
     *  1 - source.subscribe();
     *  2 - source.subscribe(observer);
     *  3 - source.subscribe(function (x) { console.log(x); });
     *  4 - source.subscribe(function (x) { console.log(x); }, function (err) { console.log(err); });
     *  5 - source.subscribe(function (x) { console.log(x); }, function (err) { console.log(err); }, function () { console.log('done'); });
     *  @param {Mixed} [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
     *  @returns {Diposable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler. 
     */
    observableProto.subscribe = observableProto.forEach = function (observerOrOnNext, onError, onCompleted) {
      var subscriber = typeof observerOrOnNext === 'object' ?
        observerOrOnNext :
        observerCreate(observerOrOnNext, onError, onCompleted);

      return this._subscribe(subscriber);
    };

    return Observable;
  })();

  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (_super) {
    inherits(ScheduledObserver, _super);

    function ScheduledObserver(scheduler, observer) {
      _super.call(this);
      this.scheduler = scheduler;
      this.observer = observer;
      this.isAcquired = false;
      this.hasFaulted = false;
      this.queue = [];
      this.disposable = new SerialDisposable();
    }

    ScheduledObserver.prototype.next = function (value) {
      var self = this;
      this.queue.push(function () {
        self.observer.onNext(value);
      });
    };

    ScheduledObserver.prototype.error = function (exception) {
      var self = this;
      this.queue.push(function () {
        self.observer.onError(exception);
      });
    };

    ScheduledObserver.prototype.completed = function () {
      var self = this;
      this.queue.push(function () {
        self.observer.onCompleted();
      });
    };

    ScheduledObserver.prototype.ensureActive = function () {
      var isOwner = false, parent = this;
      if (!this.hasFaulted && this.queue.length > 0) {
        isOwner = !this.isAcquired;
        this.isAcquired = true;
      }
      if (isOwner) {
        this.disposable.setDisposable(this.scheduler.scheduleRecursive(function (self) {
          var work;
          if (parent.queue.length > 0) {
            work = parent.queue.shift();
          } else {
            parent.isAcquired = false;
            return;
          }
          try {
            work();
          } catch (ex) {
            parent.queue = [];
            parent.hasFaulted = true;
            throw ex;
          }
          self();
        }));
      }
    };

    ScheduledObserver.prototype.dispose = function () {
      _super.prototype.dispose.call(this);
      this.disposable.dispose();
    };

    return ScheduledObserver;
  }(AbstractObserver));

  /**
   * Creates a list from an observable sequence.
   * @returns An observable sequence containing a single element with a list containing all the elements of the source sequence.  
   */
  observableProto.toArray = function () {
    var self = this;
    return new AnonymousObservable(function(observer) {
      var arr = [];
      return self.subscribe(
        arr.push.bind(arr),
        observer.onError.bind(observer),
        function () {
          observer.onNext(arr);
          observer.onCompleted();
        });
    });
  };

    /**
     *  Creates an observable sequence from a specified subscribe method implementation.
     *  
     * @example
     *  var res = Rx.Observable.create(function (observer) { return function () { } );
     *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } ); 
     *  var res = Rx.Observable.create(function (observer) { } ); 
     *  
     * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
     * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
     */
    Observable.create = Observable.createWithDisposable = function (subscribe) {
        return new AnonymousObservable(subscribe);
    };

  /**
   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
   *  
   * @example
   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });    
   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
   */
  var observableDefer = Observable.defer = function (observableFactory) {
    return new AnonymousObservable(function (observer) {
      var result;
      try {
        result = observableFactory();
      } catch (e) {
        return observableThrow(e).subscribe(observer);
      }
      isPromise(result) && (result = observableFromPromise(result));
      return result.subscribe(observer);
    });
  };

    /**
     *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
     *  
     * @example
     *  var res = Rx.Observable.empty();  
     *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);  
     * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
     * @returns {Observable} An observable sequence with no elements.
     */
    var observableEmpty = Observable.empty = function (scheduler) {
        scheduler || (scheduler = immediateScheduler);
        return new AnonymousObservable(function (observer) {
            return scheduler.schedule(function () {
                observer.onCompleted();
            });
        });
    };

  /**
   *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
   *  
   * @example
   *  var res = Rx.Observable.fromArray([1,2,3]);
   *  var res = Rx.Observable.fromArray([1,2,3], Rx.Scheduler.timeout);
   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
   * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
   */
  var observableFromArray = Observable.fromArray = function (array, scheduler) {
    scheduler || (scheduler = currentThreadScheduler);
    return new AnonymousObservable(function (observer) {
      var count = 0, len = array.length;
      return scheduler.scheduleRecursive(function (self) {
        if (count < len) {
          observer.onNext(array[count++]);
          self();
        } else {
          observer.onCompleted();
        }
      });
    });
  };

  /**
   *  Converts an iterable into an Observable sequence
   *  
   * @example
   *  var res = Rx.Observable.fromIterable(new Map());
   *  var res = Rx.Observable.fromIterable(new Set(), Rx.Scheduler.timeout);
   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
   * @returns {Observable} The observable sequence whose elements are pulled from the given generator sequence.
   */
  Observable.fromIterable = function (iterable, scheduler) {
    scheduler || (scheduler = currentThreadScheduler);
    return new AnonymousObservable(function (observer) {
      var iterator;
      try {
        iterator = iterable[$iterator$]();
      } catch (e) {
        observer.onError(e);
        return;
      }

      return scheduler.scheduleRecursive(function (self) {
        var next;
        try {
          next = iterator.next();
        } catch (err) {
          observer.onError(err);
          return;
        }

        if (next.done) {
          observer.onCompleted();
        } else {
          observer.onNext(next.value);
          self();
        }
      });
    });
  };

    /**
     *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
     *  
     * @example
     *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
     *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
     * @param {Mixed} initialState Initial state.
     * @param {Function} condition Condition to terminate generation (upon returning false).
     * @param {Function} iterate Iteration step function.
     * @param {Function} resultSelector Selector function for results produced in the sequence.
     * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
     * @returns {Observable} The generated sequence.
     */
    Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
        scheduler || (scheduler = currentThreadScheduler);
        return new AnonymousObservable(function (observer) {
            var first = true, state = initialState;
            return scheduler.scheduleRecursive(function (self) {
                var hasResult, result;
                try {
                    if (first) {
                        first = false;
                    } else {
                        state = iterate(state);
                    }
                    hasResult = condition(state);
                    if (hasResult) {
                        result = resultSelector(state);
                    }
                } catch (exception) {
                    observer.onError(exception);
                    return;
                }
                if (hasResult) {
                    observer.onNext(result);
                    self();
                } else {
                    observer.onCompleted();
                }
            });
        });
    };

    /**
     *  Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
     * @returns {Observable} An observable sequence whose observers will never get called.
     */
    var observableNever = Observable.never = function () {
        return new AnonymousObservable(function () {
            return disposableEmpty;
        });
    };

  /**
   *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
   * @example
   *  var res = Rx.Observable.of(1,2,3);
   * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
   */
  Observable.of = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return observableFromArray(args);
  };

  /**
   *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments. 
   * @example
   *  var res = Rx.Observable.of(1,2,3);
   * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
   * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
   */
  var observableOf = Observable.ofWithScheduler = function (scheduler) {
    var len = arguments.length - 1, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i + 1]; }
    return observableFromArray(args, scheduler);
  };

    /**
     *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
     *  
     * @example
     *  var res = Rx.Observable.range(0, 10);
     *  var res = Rx.Observable.range(0, 10, Rx.Scheduler.timeout);
     * @param {Number} start The value of the first integer in the sequence.
     * @param {Number} count The number of sequential integers to generate.
     * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
     * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
     */
    Observable.range = function (start, count, scheduler) {
        scheduler || (scheduler = currentThreadScheduler);
        return new AnonymousObservable(function (observer) {
            return scheduler.scheduleRecursiveWithState(0, function (i, self) {
                if (i < count) {
                    observer.onNext(start + i);
                    self(i + 1);
                } else {
                    observer.onCompleted();
                }
            });
        });
    };

    /**
     *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
     *  
     * @example
     *  var res = Rx.Observable.repeat(42);
     *  var res = Rx.Observable.repeat(42, 4);
     *  3 - res = Rx.Observable.repeat(42, 4, Rx.Scheduler.timeout);
     *  4 - res = Rx.Observable.repeat(42, null, Rx.Scheduler.timeout);
     * @param {Mixed} value Element to repeat.
     * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
     * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
     * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
     */
    Observable.repeat = function (value, repeatCount, scheduler) {
        scheduler || (scheduler = currentThreadScheduler);
        if (repeatCount == null) {
            repeatCount = -1;
        }
        return observableReturn(value, scheduler).repeat(repeatCount);
    };

  /**
   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
   *  There is an alias called 'just', and 'returnValue' for browsers <IE9.
   *  
   * @example
   *  var res = Rx.Observable.return(42);
   *  var res = Rx.Observable.return(42, Rx.Scheduler.timeout);
   * @param {Mixed} value Single element in the resulting observable sequence.
   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} An observable sequence containing the single specified element.
   */
  var observableReturn = Observable['return'] = Observable.returnValue = Observable.just = function (value, scheduler) {
    scheduler || (scheduler = immediateScheduler);
    return new AnonymousObservable(function (observer) {
      return scheduler.schedule(function () {
        observer.onNext(value);
        observer.onCompleted();
      });
    });
  };

    /**
     *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
     *  There is an alias to this method called 'throwException' for browsers <IE9.
     *  
     * @example
     *  var res = Rx.Observable.throwException(new Error('Error'));
     *  var res = Rx.Observable.throwException(new Error('Error'), Rx.Scheduler.timeout);
     * @param {Mixed} exception An object used for the sequence's termination.
     * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
     * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
     */
    var observableThrow = Observable['throw'] = Observable.throwException = function (exception, scheduler) {
        scheduler || (scheduler = immediateScheduler);
        return new AnonymousObservable(function (observer) {
            return scheduler.schedule(function () {
                observer.onError(exception);
            });
        });
    };

  function observableCatchHandler(source, handler) {
    return new AnonymousObservable(function (observer) {
      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
      subscription.setDisposable(d1);
      d1.setDisposable(source.subscribe(observer.onNext.bind(observer), function (exception) {
        var d, result;
        try {
          result = handler(exception);
        } catch (ex) {
          observer.onError(ex);
          return;
        }
        isPromise(result) && (result = observableFromPromise(result));

        d = new SingleAssignmentDisposable();
        subscription.setDisposable(d);
        d.setDisposable(result.subscribe(observer));
      }, observer.onCompleted.bind(observer)));
      
      return subscription;
    });
  }

  /**
   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
   * @example
   * 1 - xs.catchException(ys)
   * 2 - xs.catchException(function (ex) { return ys(ex); })
   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
   */      
  observableProto['catch'] = observableProto.catchException = function (handlerOrSecond) {
    return typeof handlerOrSecond === 'function' ?
      observableCatchHandler(this, handlerOrSecond) :
      observableCatch([this, handlerOrSecond]);
  };

    /**
     * Continues an observable sequence that is terminated by an exception with the next observable sequence.
     * 
     * @example
     * 1 - res = Rx.Observable.catchException(xs, ys, zs);
     * 2 - res = Rx.Observable.catchException([xs, ys, zs]);
     * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
     */
    var observableCatch = Observable.catchException = Observable['catch'] = function () {
        var items = argsOrArray(arguments, 0);
        return enumerableFor(items).catchException();
    };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
   * This can be in the form of an argument list of observables or an array.
   *
   * @example
   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function. 
   */
  observableProto.combineLatest = function () {
    var args = slice.call(arguments);
    if (Array.isArray(args[0])) {
      args[0].unshift(this);
    } else {
      args.unshift(this);
    }
    return combineLatest.apply(this, args);
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
   * 
   * @example
   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });     
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  var combineLatest = Observable.combineLatest = function () {
    var args = slice.call(arguments), resultSelector = args.pop();
    
    if (Array.isArray(args[0])) {
      args = args[0];
    }

    return new AnonymousObservable(function (observer) {
      var falseFactory = function () { return false; },
        n = args.length,
        hasValue = arrayInitialize(n, falseFactory),
        hasValueAll = false,
        isDone = arrayInitialize(n, falseFactory),
        values = new Array(n);

      function next(i) {
        var res;
        hasValue[i] = true;
        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
          try {
            res = resultSelector.apply(null, values);
          } catch (ex) {
            observer.onError(ex);
            return;
          }
          observer.onNext(res);
        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
          observer.onCompleted();
        }
      }

      function done (i) {
        isDone[i] = true;
        if (isDone.every(identity)) {
          observer.onCompleted();
        }
      }

      var subscriptions = new Array(n);
      for (var idx = 0; idx < n; idx++) {
        (function (i) {
          var source = args[i], sad = new SingleAssignmentDisposable();
          isPromise(source) && (source = observableFromPromise(source));
          sad.setDisposable(source.subscribe(function (x) {
            values[i] = x;
            next(i);
          }, observer.onError.bind(observer), function () {
            done(i);
          }));
          subscriptions[i] = sad;
        }(idx));
      }

      return new CompositeDisposable(subscriptions);
    });
  };

    /**
     * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
     * 
     * @example
     * 1 - concatenated = xs.concat(ys, zs);
     * 2 - concatenated = xs.concat([ys, zs]);
     * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order. 
     */ 
    observableProto.concat = function () {
        var items = slice.call(arguments, 0);
        items.unshift(this);
        return observableConcat.apply(this, items);
    };

    /**
     * Concatenates all the observable sequences.
     * 
     * @example
     * 1 - res = Rx.Observable.concat(xs, ys, zs);
     * 2 - res = Rx.Observable.concat([xs, ys, zs]);
     * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order. 
     */
    var observableConcat = Observable.concat = function () {
        var sources = argsOrArray(arguments, 0);
        return enumerableFor(sources).concat();
    };  

    /**
     * Concatenates an observable sequence of observable sequences.
     * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order. 
     */ 
    observableProto.concatObservable = observableProto.concatAll =function () {
        return this.merge(1);
    };

    /**
     * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
     * Or merges two observable sequences into a single observable sequence.
     * 
     * @example
     * 1 - merged = sources.merge(1);
     * 2 - merged = source.merge(otherSource);  
     * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
     * @returns {Observable} The observable sequence that merges the elements of the inner sequences. 
     */ 
    observableProto.merge = function (maxConcurrentOrOther) {
        if (typeof maxConcurrentOrOther !== 'number') {
            return observableMerge(this, maxConcurrentOrOther);
        }
        var sources = this;
        return new AnonymousObservable(function (observer) {
            var activeCount = 0,
                group = new CompositeDisposable(),
                isStopped = false,
                q = [],
                subscribe = function (xs) {
                    var subscription = new SingleAssignmentDisposable();
                    group.add(subscription);

                    // Check for promises support
                    if (isPromise(xs)) { xs = observableFromPromise(xs); }

                    subscription.setDisposable(xs.subscribe(observer.onNext.bind(observer), observer.onError.bind(observer), function () {
                        var s;
                        group.remove(subscription);
                        if (q.length > 0) {
                            s = q.shift();
                            subscribe(s);
                        } else {
                            activeCount--;
                            if (isStopped && activeCount === 0) {
                                observer.onCompleted();
                            }
                        }
                    }));
                };
            group.add(sources.subscribe(function (innerSource) {
                if (activeCount < maxConcurrentOrOther) {
                    activeCount++;
                    subscribe(innerSource);
                } else {
                    q.push(innerSource);
                }
            }, observer.onError.bind(observer), function () {
                isStopped = true;
                if (activeCount === 0) {
                    observer.onCompleted();
                }
            }));
            return group;
        });
    };

    /**
     * Merges all the observable sequences into a single observable sequence.  
     * The scheduler is optional and if not specified, the immediate scheduler is used.
     * 
     * @example
     * 1 - merged = Rx.Observable.merge(xs, ys, zs);
     * 2 - merged = Rx.Observable.merge([xs, ys, zs]);
     * 3 - merged = Rx.Observable.merge(scheduler, xs, ys, zs);
     * 4 - merged = Rx.Observable.merge(scheduler, [xs, ys, zs]);    
     * @returns {Observable} The observable sequence that merges the elements of the observable sequences. 
     */  
    var observableMerge = Observable.merge = function () {
        var scheduler, sources;
        if (!arguments[0]) {
            scheduler = immediateScheduler;
            sources = slice.call(arguments, 1);
        } else if (arguments[0].now) {
            scheduler = arguments[0];
            sources = slice.call(arguments, 1);
        } else {
            scheduler = immediateScheduler;
            sources = slice.call(arguments, 0);
        }
        if (Array.isArray(sources[0])) {
            sources = sources[0];
        }
        return observableFromArray(sources, scheduler).mergeObservable();
    };   

  /**
   * Merges an observable sequence of observable sequences into an observable sequence.
   * @returns {Observable} The observable sequence that merges the elements of the inner sequences.   
   */  
  observableProto.mergeObservable = observableProto.mergeAll =function () {
    var sources = this;
    return new AnonymousObservable(function (observer) {
      var group = new CompositeDisposable(),
        isStopped = false,
        m = new SingleAssignmentDisposable();

      group.add(m);
      m.setDisposable(sources.subscribe(function (innerSource) {
        var innerSubscription = new SingleAssignmentDisposable();
        group.add(innerSubscription);

        // Check if Promise or Observable
        if (isPromise(innerSource)) {
            innerSource = observableFromPromise(innerSource);
        }

        innerSubscription.setDisposable(innerSource.subscribe(function (x) {
            observer.onNext(x);
        }, observer.onError.bind(observer), function () {
            group.remove(innerSubscription);
            if (isStopped && group.length === 1) { observer.onCompleted(); }
        }));
      }, observer.onError.bind(observer), function () {
        isStopped = true;
        if (group.length === 1) { observer.onCompleted(); }
      }));
      return group;
    });
  };

  /**
   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.    
   */
  observableProto.skipUntil = function (other) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var isOpen = false;
      var disposables = new CompositeDisposable(source.subscribe(function (left) {
        isOpen && observer.onNext(left);
      }, observer.onError.bind(observer), function () {
        isOpen && observer.onCompleted();
      }));

      isPromise(other) && (other = observableFromPromise(other));

      var rightSubscription = new SingleAssignmentDisposable();
      disposables.add(rightSubscription);
      rightSubscription.setDisposable(other.subscribe(function () {
        isOpen = true;
        rightSubscription.dispose();
      }, observer.onError.bind(observer), function () {
        rightSubscription.dispose();
      }));

      return disposables;
    });
  };

    /**
     * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
     * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.  
     */
    observableProto['switch'] = observableProto.switchLatest = function () {
        var sources = this;
        return new AnonymousObservable(function (observer) {
            var hasLatest = false,
                innerSubscription = new SerialDisposable(),
                isStopped = false,
                latest = 0,
                subscription = sources.subscribe(function (innerSource) {
                    var d = new SingleAssignmentDisposable(), id = ++latest;
                    hasLatest = true;
                    innerSubscription.setDisposable(d);

                    // Check if Promise or Observable
                    if (isPromise(innerSource)) {
                        innerSource = observableFromPromise(innerSource);
                    }

                    d.setDisposable(innerSource.subscribe(function (x) {
                        if (latest === id) {
                            observer.onNext(x);
                        }
                    }, function (e) {
                        if (latest === id) {
                            observer.onError(e);
                        }
                    }, function () {
                        if (latest === id) {
                            hasLatest = false;
                            if (isStopped) {
                                observer.onCompleted();
                            }
                        }
                    }));
                }, observer.onError.bind(observer), function () {
                    isStopped = true;
                    if (!hasLatest) {
                        observer.onCompleted();
                    }
                });
            return new CompositeDisposable(subscription, innerSubscription);
        });
    };

  /**
   * Returns the values from the source observable sequence until the other observable sequence produces a value.
   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.   
   */
  observableProto.takeUntil = function (other) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      isPromise(other) && (other = observableFromPromise(other));
      return new CompositeDisposable(
        source.subscribe(observer),
        other.subscribe(observer.onCompleted.bind(observer), observer.onError.bind(observer), noop)
      );
    });
  };

  function zipArray(second, resultSelector) {
    var first = this;
    return new AnonymousObservable(function (observer) {
      var index = 0, len = second.length;
      return first.subscribe(function (left) {
        if (index < len) {
          var right = second[index++], result;
          try {
            result = resultSelector(left, right);
          } catch (e) {
            observer.onError(e);
            return;
          }
          observer.onNext(result);
        } else {
          observer.onCompleted();
        }
      }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
    });
  }    

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the sources.
   *
   * @example
   * 1 - res = obs1.zip(obs2, fn);
   * 1 - res = x1.zip([1,2,3], fn);  
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function. 
   */   
  observableProto.zip = function () {
    if (Array.isArray(arguments[0])) {
      return zipArray.apply(this, arguments);
    }
    var parent = this, sources = slice.call(arguments), resultSelector = sources.pop();
    sources.unshift(parent);
    return new AnonymousObservable(function (observer) {
      var n = sources.length,
        queues = arrayInitialize(n, function () { return []; }),
        isDone = arrayInitialize(n, function () { return false; });
        
      function next(i) {
        var res, queuedValues;
        if (queues.every(function (x) { return x.length > 0; })) {
          try {
            queuedValues = queues.map(function (x) { return x.shift(); });
            res = resultSelector.apply(parent, queuedValues);
          } catch (ex) {
            observer.onError(ex);
            return;
          }
          observer.onNext(res);
        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
          observer.onCompleted();
        }
      };

      function done(i) {
        isDone[i] = true;
        if (isDone.every(function (x) { return x; })) {
          observer.onCompleted();
        }
      }

      var subscriptions = new Array(n);
      for (var idx = 0; idx < n; idx++) {
        (function (i) {
          var source = sources[i], sad = new SingleAssignmentDisposable();
          isPromise(source) && (source = observableFromPromise(source));
          sad.setDisposable(source.subscribe(function (x) {
            queues[i].push(x);
            next(i);
          }, observer.onError.bind(observer), function () {
            done(i);
          }));
          subscriptions[i] = sad;
        })(idx);
      }

      return new CompositeDisposable(subscriptions);
    });
  };
    /**
     * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
     * @param arguments Observable sources.
     * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
     * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
     */
    Observable.zip = function () {
        var args = slice.call(arguments, 0),
            first = args.shift();
        return first.zip.apply(first, args);
    };

    /**
     * Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
     * @param arguments Observable sources.
     * @returns {Observable} An observable sequence containing lists of elements at corresponding indexes.
     */
    Observable.zipArray = function () {
        var sources = argsOrArray(arguments, 0);
        return new AnonymousObservable(function (observer) {
            var n = sources.length,
              queues = arrayInitialize(n, function () { return []; }),
              isDone = arrayInitialize(n, function () { return false; });

            function next(i) {
                if (queues.every(function (x) { return x.length > 0; })) {
                    var res = queues.map(function (x) { return x.shift(); });
                    observer.onNext(res);
                } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
                    observer.onCompleted();
                    return;
                }
            };

            function done(i) {
                isDone[i] = true;
                if (isDone.every(identity)) {
                    observer.onCompleted();
                    return;
                }
            }

            var subscriptions = new Array(n);
            for (var idx = 0; idx < n; idx++) {
                (function (i) {
                    subscriptions[i] = new SingleAssignmentDisposable();
                    subscriptions[i].setDisposable(sources[i].subscribe(function (x) {
                        queues[i].push(x);
                        next(i);
                    }, observer.onError.bind(observer), function () {
                        done(i);
                    }));
                })(idx);
            }

            var compositeDisposable = new CompositeDisposable(subscriptions);
            compositeDisposable.add(disposableCreate(function () {
                for (var qIdx = 0, qLen = queues.length; qIdx < qLen; qIdx++) {
                    queues[qIdx] = [];
                }
            }));
            return compositeDisposable;
        });
    };

    /**
     *  Hides the identity of an observable sequence.
     * @returns {Observable} An observable sequence that hides the identity of the source sequence.    
     */
    observableProto.asObservable = function () {
        var source = this;
        return new AnonymousObservable(function (observer) {
            return source.subscribe(observer);
        });
    };

    /**
     * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
     * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
     */ 
    observableProto.dematerialize = function () {
        var source = this;
        return new AnonymousObservable(function (observer) {
            return source.subscribe(function (x) {
                return x.accept(observer);
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
     *  
     *  var obs = observable.distinctUntilChanged();
     *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });
     *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });
     *
     * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
     * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
     * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.   
     */
    observableProto.distinctUntilChanged = function (keySelector, comparer) {
        var source = this;
        keySelector || (keySelector = identity);
        comparer || (comparer = defaultComparer);
        return new AnonymousObservable(function (observer) {
            var hasCurrentKey = false, currentKey;
            return source.subscribe(function (value) {
                var comparerEquals = false, key;
                try {
                    key = keySelector(value);
                } catch (exception) {
                    observer.onError(exception);
                    return;
                }
                if (hasCurrentKey) {
                    try {
                        comparerEquals = comparer(currentKey, key);
                    } catch (exception) {
                        observer.onError(exception);
                        return;
                    }
                }
                if (!hasCurrentKey || !comparerEquals) {
                    hasCurrentKey = true;
                    currentKey = key;
                    observer.onNext(value);
                }
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
     *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
     *  
     * @example
     *  var res = observable.doAction(observer);
     *  var res = observable.doAction(onNext);
     *  var res = observable.doAction(onNext, onError);
     *  var res = observable.doAction(onNext, onError, onCompleted);
     * @param {Mixed} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
     * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
     * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
     * @returns {Observable} The source sequence with the side-effecting behavior applied.   
     */
    observableProto['do'] = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
        var source = this, onNextFunc;
        if (typeof observerOrOnNext === 'function') {
            onNextFunc = observerOrOnNext;
        } else {
            onNextFunc = observerOrOnNext.onNext.bind(observerOrOnNext);
            onError = observerOrOnNext.onError.bind(observerOrOnNext);
            onCompleted = observerOrOnNext.onCompleted.bind(observerOrOnNext);
        }
        return new AnonymousObservable(function (observer) {
            return source.subscribe(function (x) {
                try {
                    onNextFunc(x);
                } catch (e) {
                    observer.onError(e);
                }
                observer.onNext(x);
            }, function (exception) {
                if (!onError) {
                    observer.onError(exception);
                } else {
                    try {
                        onError(exception);
                    } catch (e) {
                        observer.onError(e);
                    }
                    observer.onError(exception);
                }
            }, function () {
                if (!onCompleted) {
                    observer.onCompleted();
                } else {
                    try {
                        onCompleted();
                    } catch (e) {
                        observer.onError(e);
                    }
                    observer.onCompleted();
                }
            });
        });
    };

  /**
   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
   *  
   * @example
   *  var res = observable.finallyAction(function () { console.log('sequence ended'; });
   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
   * @returns {Observable} Source sequence with the action-invoking termination behavior applied. 
   */  
  observableProto['finally'] = observableProto.finallyAction = function (action) {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var subscription;
      try {
        subscription = source.subscribe(observer);
      } catch (e) {
        action();
        throw e;
      }
      return disposableCreate(function () {
        try {
          subscription.dispose();
        } catch (e) { 
          throw e;                    
        } finally {
          action();
        }
      });
    });
  };

    /**
     *  Ignores all elements in an observable sequence leaving only the termination messages.
     * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.    
     */
    observableProto.ignoreElements = function () {
        var source = this;
        return new AnonymousObservable(function (observer) {
            return source.subscribe(noop, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Materializes the implicit notifications of an observable sequence as explicit notification values.
     * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
     */    
    observableProto.materialize = function () {
        var source = this;
        return new AnonymousObservable(function (observer) {
            return source.subscribe(function (value) {
                observer.onNext(notificationCreateOnNext(value));
            }, function (e) {
                observer.onNext(notificationCreateOnError(e));
                observer.onCompleted();
            }, function () {
                observer.onNext(notificationCreateOnCompleted());
                observer.onCompleted();
            });
        });
    };

    /**
     *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
     *  
     * @example
     *  var res = repeated = source.repeat();
     *  var res = repeated = source.repeat(42);
     * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
     * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.   
     */
    observableProto.repeat = function (repeatCount) {
        return enumerableRepeat(this, repeatCount).concat();
    };

    /**
     *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
     *  
     * @example
     *  var res = retried = retry.repeat();
     *  var res = retried = retry.repeat(42);
     * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
     * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully. 
     */
    observableProto.retry = function (retryCount) {
        return enumerableRepeat(this, retryCount).catchException();
    };

    /**
     *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
     *  For aggregation behavior with no intermediate results, see Observable.aggregate.
     * @example
     *  var res = source.scan(function (acc, x) { return acc + x; });
     *  var res = source.scan(0, function (acc, x) { return acc + x; });
     * @param {Mixed} [seed] The initial accumulator value.
     * @param {Function} accumulator An accumulator function to be invoked on each element.
     * @returns {Observable} An observable sequence containing the accumulated values.
     */
    observableProto.scan = function () {
        var hasSeed = false, seed, accumulator, source = this;
        if (arguments.length === 2) {
            hasSeed = true;
            seed = arguments[0];
            accumulator = arguments[1];        
        } else {
            accumulator = arguments[0];
        }
        return new AnonymousObservable(function (observer) {
            var hasAccumulation, accumulation, hasValue;
            return source.subscribe (
                function (x) {
                    try {
                        if (!hasValue) {
                            hasValue = true;
                        }
     
                        if (hasAccumulation) {
                            accumulation = accumulator(accumulation, x);
                        } else {
                            accumulation = hasSeed ? accumulator(seed, x) : x;
                            hasAccumulation = true;
                        }                    
                    } catch (e) {
                        observer.onError(e);
                        return;
                    }
     
                    observer.onNext(accumulation);
                },
                observer.onError.bind(observer),
                function () {
                    if (!hasValue && hasSeed) {
                        observer.onNext(seed);
                    }
                    observer.onCompleted();
                }
            );
        });
    };

    /**
     *  Bypasses a specified number of elements at the end of an observable sequence.
     * @description
     *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
     *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.     
     * @param count Number of elements to bypass at the end of the source sequence.
     * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.   
     */
    observableProto.skipLast = function (count) {
        var source = this;
        return new AnonymousObservable(function (observer) {
            var q = [];
            return source.subscribe(function (x) {
                q.push(x);
                if (q.length > count) {
                    observer.onNext(q.shift());
                }
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
     *  
     *  var res = source.startWith(1, 2, 3);
     *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
     *  
     * @memberOf Observable#
     * @returns {Observable} The source sequence prepended with the specified values.  
     */
    observableProto.startWith = function () {
        var values, scheduler, start = 0;
        if (!!arguments.length && 'now' in Object(arguments[0])) {
            scheduler = arguments[0];
            start = 1;
        } else {
            scheduler = immediateScheduler;
        }
        values = slice.call(arguments, start);
        return enumerableFor([observableFromArray(values, scheduler), this]).concat();
    };

    /**
     *  Returns a specified number of contiguous elements from the end of an observable sequence, using an optional scheduler to drain the queue.
     *  
     * @example
     *  var res = source.takeLast(5);
     *  var res = source.takeLast(5, Rx.Scheduler.timeout);
     *  
     * @description
     *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
     *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
     * @param {Number} count Number of elements to take from the end of the source sequence.
     * @param {Scheduler} [scheduler] Scheduler used to drain the queue upon completion of the source sequence.
     * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
     */   
    observableProto.takeLast = function (count, scheduler) {
        return this.takeLastBuffer(count).selectMany(function (xs) { return observableFromArray(xs, scheduler); });
    };

    /**
     *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
     *  
     * @description
     *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
     *  source sequence, this buffer is produced on the result sequence.       
     * @param {Number} count Number of elements to take from the end of the source sequence.
     * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
     */
    observableProto.takeLastBuffer = function (count) {
        var source = this;
        return new AnonymousObservable(function (observer) {
            var q = [];
            return source.subscribe(function (x) {
                q.push(x);
                if (q.length > count) {
                    q.shift();
                }
            }, observer.onError.bind(observer), function () {
                observer.onNext(q);
                observer.onCompleted();
            });
        });
    };

    function concatMap(selector) {
      return this.map(function (x, i) {
        var result = selector(x, i);
        return isPromise(result) ? observableFromPromise(result) : result;
      }).concatAll();
    }

    function concatMapObserver(onNext, onError, onCompleted) {
      var source = this;
      return new AnonymousObservable(function (observer) {
        var index = 0;

        return source.subscribe(
          function (x) {
            observer.onNext(onNext(x, index++));
          },
          function (err) {
            observer.onNext(onError(err));
            observer.completed();
          }, 
          function () {
            observer.onNext(onCompleted());
            observer.onCompleted();
          });
      }).concatAll();
    }

    /**
     *  One of the Following:
     *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
     *  
     * @example
     *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
     *  Or:
     *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
     *  
     *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
     *  Or:
     *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
     *  
     *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
     * @param selector A transform function to apply to each element or an observable sequence to project each element from the 
     * source sequence onto which could be either an observable or Promise.
     * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
     * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.   
     */
    observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector) {
      if (resultSelector) {
          return this.concatMap(function (x, i) {
            var selectorResult = selector(x, i),
              result = isPromise(selectorResult) ? observableFromPromise(selectorResult) : selectorResult;

            return result.map(function (y) {
              return resultSelector(x, y, i);
            });
          });
      }
      if (typeof selector === 'function') {
        return concatMap.call(this, selector);
      }
      return concatMap.call(this, function () {
        return selector;
      });
    };

    /**
     *  Projects each element of an observable sequence into a new form by incorporating the element's index.
     * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source. 
     */
    observableProto.select = observableProto.map = function (selector, thisArg) {
        var parent = this;
        return new AnonymousObservable(function (observer) {
            var count = 0;
            return parent.subscribe(function (value) {
                var result;
                try {
                    result = selector.call(thisArg, value, count++, parent);
                } catch (exception) {
                    observer.onError(exception);
                    return;
                }
                observer.onNext(result);
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     * Retrieves the value of a specified property from all elements in the Observable sequence.
     * @param {String} property The property to pluck.
     * @returns {Observable} Returns a new Observable sequence of property values.
     */
    observableProto.pluck = function (property) {
        return this.select(function (x) { return x[property]; });
    };

    function selectMany(selector) {
      return this.select(function (x, i) {
        var result = selector(x, i);
        return isPromise(result) ? observableFromPromise(result) : result;
      }).mergeObservable();
    }

    function selectManyObserver(onNext, onError, onCompleted) {
      var source = this;
      return new AnonymousObservable(function (observer) {
        var index = 0;

        return source.subscribe(
          function (x) {
            observer.onNext(onNext(x, index++));
          },
          function (err) {
            observer.onNext(onError(err));
            observer.completed();
          }, 
          function () {
            observer.onNext(onCompleted());
            observer.onCompleted();
          });
      }).mergeAll();
    }

    /**
     *  One of the Following:
     *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
     *  
     * @example
     *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
     *  Or:
     *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
     *  
     *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
     *  Or:
     *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
     *  
     *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
     * @param selector A transform function to apply to each element or an observable sequence to project each element from the 
     * source sequence onto which could be either an observable or Promise.
     * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
     * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.   
     */
    observableProto.selectMany = observableProto.flatMap = function (selector, resultSelector) {
      if (resultSelector) {
          return this.selectMany(function (x, i) {
            var selectorResult = selector(x, i),
              result = isPromise(selectorResult) ? observableFromPromise(selectorResult) : selectorResult;

            return result.select(function (y) {
              return resultSelector(x, y, i);
            });
          });
      }
      if (typeof selector === 'function') {
        return selectMany.call(this, selector);
      }
      return selectMany.call(this, function () {
        return selector;
      });
    };

    /**
     *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then 
     *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
     * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences 
     *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.
     */
    observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function (selector, thisArg) {
        return this.select(selector, thisArg).switchLatest();
    };

    /**
     * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
     * @param {Number} count The number of elements to skip before returning the remaining elements.
     * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.   
     */
    observableProto.skip = function (count) {
        if (count < 0) {
            throw new Error(argumentOutOfRange);
        }
        var observable = this;
        return new AnonymousObservable(function (observer) {
            var remaining = count;
            return observable.subscribe(function (x) {
                if (remaining <= 0) {
                    observer.onNext(x);
                } else {
                    remaining--;
                }
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
     *  The element's index is used in the logic of the predicate function.
     *  
     *  var res = source.skipWhile(function (value) { return value < 10; });
     *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
     * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
     * @param {Any} [thisArg] Object to use as this when executing callback.     
     * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.   
     */
    observableProto.skipWhile = function (predicate, thisArg) {
        var source = this;
        return new AnonymousObservable(function (observer) {
            var i = 0, running = false;
            return source.subscribe(function (x) {
                if (!running) {
                    try {
                        running = !predicate.call(thisArg, x, i++, source);
                    } catch (e) {
                        observer.onError(e);
                        return;
                    }
                }
                if (running) {
                    observer.onNext(x);
                }
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
     *  
     *  var res = source.take(5);
     *  var res = source.take(0, Rx.Scheduler.timeout);
     * @param {Number} count The number of elements to return.
     * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
     * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.  
     */
    observableProto.take = function (count, scheduler) {
        if (count < 0) {
            throw new Error(argumentOutOfRange);
        }
        if (count === 0) {
            return observableEmpty(scheduler);
        }
        var observable = this;
        return new AnonymousObservable(function (observer) {
            var remaining = count;
            return observable.subscribe(function (x) {
                if (remaining > 0) {
                    remaining--;
                    observer.onNext(x);
                    if (remaining === 0) {
                        observer.onCompleted();
                    }
                }
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Returns elements from an observable sequence as long as a specified condition is true.
     *  The element's index is used in the logic of the predicate function.
     *  
     * @example
     *  var res = source.takeWhile(function (value) { return value < 10; });
     *  var res = source.takeWhile(function (value, index) { return value < 10 || index < 10; });
     * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
     * @param {Any} [thisArg] Object to use as this when executing callback.     
     * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.  
     */
    observableProto.takeWhile = function (predicate, thisArg) {
        var observable = this;
        return new AnonymousObservable(function (observer) {
            var i = 0, running = true;
            return observable.subscribe(function (x) {
                if (running) {
                    try {
                        running = predicate.call(thisArg, x, i++, observable);
                    } catch (e) {
                        observer.onError(e);
                        return;
                    }
                    if (running) {
                        observer.onNext(x);
                    } else {
                        observer.onCompleted();
                    }
                }
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
     *  
     * @example
     *  var res = source.where(function (value) { return value < 10; });
     *  var res = source.where(function (value, index) { return value < 10 || index < 10; });
     * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.   
     */
    observableProto.where = observableProto.filter = function (predicate, thisArg) {
        var parent = this;
        return new AnonymousObservable(function (observer) {
            var count = 0;
            return parent.subscribe(function (value) {
                var shouldRun;
                try {
                    shouldRun = predicate.call(thisArg, value, count++, parent);
                } catch (exception) {
                    observer.onError(exception);
                    return;
                }
                if (shouldRun) {
                    observer.onNext(value);
                }
            }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
        });
    };

    /**
     * Converts a callback function to an observable sequence. 
     * 
     * @param {Function} function Function with a callback as the last parameter to convert to an Observable sequence.
     * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
     * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
     * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
     * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
     */
    Observable.fromCallback = function (func, scheduler, context, selector) {
        scheduler || (scheduler = immediateScheduler);
        return function () {
            var args = slice.call(arguments, 0);

            return new AnonymousObservable(function (observer) {
                return scheduler.schedule(function () {
                    function handler(e) {
                        var results = e;
                        
                        if (selector) {
                            try {
                                results = selector(arguments);
                            } catch (err) {
                                observer.onError(err);
                                return;
                            }
                        } else {
                            if (results.length === 1) {
                                results = results[0];
                            }
                        }

                        observer.onNext(results);
                        observer.onCompleted();
                    }

                    args.push(handler);
                    func.apply(context, args);
                });
            });
        };
    };

    /**
     * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
     * @param {Function} func The function to call
     * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
     * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
     * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.     
     * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
     */
    Observable.fromNodeCallback = function (func, scheduler, context, selector) {
        scheduler || (scheduler = immediateScheduler);
        return function () {
            var args = slice.call(arguments, 0);

            return new AnonymousObservable(function (observer) {
                return scheduler.schedule(function () {
                    
                    function handler(err) {
                        if (err) {
                            observer.onError(err);
                            return;
                        }

                        var results = slice.call(arguments, 1);
                        
                        if (selector) {
                            try {
                                results = selector(results);
                            } catch (e) {
                                observer.onError(e);
                                return;
                            }
                        } else {
                            if (results.length === 1) {
                                results = results[0];
                            }
                        }

                        observer.onNext(results);
                        observer.onCompleted();
                    }

                    args.push(handler);
                    func.apply(context, args);
                });
            });
        };
    };

  function createListener (element, name, handler) {
    // Node.js specific
    if (element.addListener) {
      element.addListener(name, handler);
      return disposableCreate(function () {
        element.removeListener(name, handler);
      });
    } 
    if (element.addEventListener) {
      element.addEventListener(name, handler, false);
      return disposableCreate(function () {
        element.removeEventListener(name, handler, false);
      });
    }
    throw new Error('No listener found');
  }

  function createEventListener (el, eventName, handler) {
    var disposables = new CompositeDisposable();

    // Asume NodeList
    if (typeof el.item === 'function' && typeof el.length === 'number') {
      for (var i = 0, len = el.length; i < len; i++) {
        disposables.add(createEventListener(el.item(i), eventName, handler));
      }
    } else if (el) {
      disposables.add(createListener(el, eventName, handler));
    }

    return disposables;
  }

  // Check for Angular/jQuery/Zepto support
  var jq =
   !!root.angular && !!angular.element ? angular.element :
   (!!root.jQuery ? root.jQuery : (
     !!root.Zepto ? root.Zepto : null));

  // Check for ember
  var ember = !!root.Ember && typeof root.Ember.addListener === 'function';

  /**
   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
   *
   * @example
   *   var source = Rx.Observable.fromEvent(element, 'mouseup');
   * 
   * @param {Object} element The DOMElement or NodeList to attach a listener.
   * @param {String} eventName The event name to attach the observable sequence.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.     
   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
   */
  Observable.fromEvent = function (element, eventName, selector) {
    if (ember) {
      return fromEventPattern(
        function (h) { Ember.addListener(element, eventName, h); },
        function (h) { Ember.removeListener(element, eventName, h); },
        selector);
    }    
    if (jq) {
      var $elem = jq(element);
      return fromEventPattern(
        function (h) { $elem.on(eventName, h); },
        function (h) { $elem.off(eventName, h); },
        selector);
    }
    return new AnonymousObservable(function (observer) {
      return createEventListener(
        element, 
        eventName, 
        function handler (e) { 
          var results = e;

          if (selector) {
            try {
              results = selector(arguments);
            } catch (err) {
              observer.onError(err);
              return
            }
          }

          observer.onNext(results); 
        });
    }).publish().refCount();
  };

  /**
   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
   * @param {Function} addHandler The function to add a handler to the emitter.
   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns {Observable} An observable sequence which wraps an event from an event emitter
   */
  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
    return new AnonymousObservable(function (observer) {
      function innerHandler (e) {
        var result = e;
        if (selector) {
          try {
            result = selector(arguments);
          } catch (err) {
            observer.onError(err);
            return;
          }
        }
        observer.onNext(result);
      }

      var returnValue = addHandler(innerHandler);
      return disposableCreate(function () {
        if (removeHandler) {
          removeHandler(innerHandler, returnValue);
        }
      });
    }).publish().refCount();
  };

  /**
   * Converts a Promise to an Observable sequence
   * @param {Promise} An ES6 Compliant promise.
   * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
   */
  var observableFromPromise = Observable.fromPromise = function (promise) {
    return new AnonymousObservable(function (observer) {
      promise.then(
        function (value) {
          observer.onNext(value);
          observer.onCompleted();
        }, 
        function (reason) {
          observer.onError(reason);
        });

      return function () {
        if (promise && promise.abort) {
          promise.abort();
        }
      }
    });
  };
    /*
     * Converts an existing observable sequence to an ES6 Compatible Promise
     * @example
     * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
     * 
     * // With config
     * Rx.config.Promise = RSVP.Promise;
     * var promise = Rx.Observable.return(42).toPromise();
     * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
     * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
     */
    observableProto.toPromise = function (promiseCtor) {
        promiseCtor || (promiseCtor = Rx.config.Promise);
        if (!promiseCtor) {
            throw new Error('Promise type not provided nor in Rx.config.Promise');
        }
        var source = this;
        return new promiseCtor(function (resolve, reject) {
            // No cancellation can be done
            var value, hasValue = false;
            source.subscribe(function (v) {
                value = v;
                hasValue = true;
            }, function (err) {
                reject(err);
            }, function () {
                if (hasValue) {
                    resolve(value);
                }
            });
        });
    };
  /**
   * Invokes the asynchronous function, surfacing the result through an observable sequence.
   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
   */
  Observable.startAsync = function (functionAsync) {
    var promise;
    try {
      promise = functionAsync();
    } catch (e) {
      return observableThrow(e);
    }
    return observableFromPromise(promise);
  }

    /**
     * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
     * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
     * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
     * 
     * @example
     * 1 - res = source.multicast(observable);
     * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
     * 
     * @param {Function|Subject} subjectOrSubjectSelector 
     * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
     * Or:
     * Subject to push source elements into.
     * 
     * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
     * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
     */
    observableProto.multicast = function (subjectOrSubjectSelector, selector) {
        var source = this;
        return typeof subjectOrSubjectSelector === 'function' ?
            new AnonymousObservable(function (observer) {
                var connectable = source.multicast(subjectOrSubjectSelector());
                return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
            }) :
            new ConnectableObservable(source, subjectOrSubjectSelector);
    };

    /**
     * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
     * This operator is a specialization of Multicast using a regular Subject.
     * 
     * @example
     * var resres = source.publish();
     * var res = source.publish(function (x) { return x; });
     * 
     * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
     * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
     */
    observableProto.publish = function (selector) {
        return !selector ?
            this.multicast(new Subject()) :
            this.multicast(function () {
                return new Subject();
            }, selector);
    };

    /**
     * Returns an observable sequence that shares a single subscription to the underlying sequence.
     * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
     * 
     * @example
     * var res = source.share();
     * 
     * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
     */
    observableProto.share = function () {
        return this.publish(null).refCount();
    };

    /**
     * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
     * This operator is a specialization of Multicast using a AsyncSubject.
     * 
     * @example
     * var res = source.publishLast();
     * var res = source.publishLast(function (x) { return x; });
     * 
     * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
     * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
     */
    observableProto.publishLast = function (selector) {
        return !selector ?
            this.multicast(new AsyncSubject()) :
            this.multicast(function () {
                return new AsyncSubject();
            }, selector);
    };

    /**
     * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
     * This operator is a specialization of Multicast using a BehaviorSubject.
     * 
     * @example
     * var res = source.publishValue(42);
     * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
     * 
     * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
     * @param {Mixed} initialValue Initial value received by observers upon subscription.
     * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
     */
    observableProto.publishValue = function (initialValueOrSelector, initialValue) {
        return arguments.length === 2 ?
            this.multicast(function () {
                return new BehaviorSubject(initialValue);
            }, initialValueOrSelector) :
            this.multicast(new BehaviorSubject(initialValueOrSelector));
    };

    /**
     * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
     * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
     * 
     * @example
     * var res = source.shareValue(42);
     * 
     * @param {Mixed} initialValue Initial value received by observers upon subscription.
     * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
     */
    observableProto.shareValue = function (initialValue) {
        return this.publishValue(initialValue).
            refCount();
    };

    /**
     * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
     * This operator is a specialization of Multicast using a ReplaySubject.
     * 
     * @example
     * var res = source.replay(null, 3);
     * var res = source.replay(null, 3, 500);
     * var res = source.replay(null, 3, 500, scheduler);
     * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
     * 
     * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
     * @param bufferSize [Optional] Maximum element count of the replay buffer.
     * @param window [Optional] Maximum time length of the replay buffer.
     * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
     * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
     */
    observableProto.replay = function (selector, bufferSize, window, scheduler) {
        return !selector ?
            this.multicast(new ReplaySubject(bufferSize, window, scheduler)) :
            this.multicast(function () {
                return new ReplaySubject(bufferSize, window, scheduler);
            }, selector);
    };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   * 
   * @example
   * var res = source.shareReplay(3);
   * var res = source.shareReplay(3, 500);
   * var res = source.shareReplay(3, 500, scheduler);
   * 

   * @param bufferSize [Optional] Maximum element count of the replay buffer.
   * @param window [Optional] Maximum time length of the replay buffer.
   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.shareReplay = function (bufferSize, window, scheduler) {
    return this.replay(null, bufferSize, window, scheduler).refCount();
  };

    /** @private */
    var ConnectableObservable = Rx.ConnectableObservable = (function (_super) {
        inherits(ConnectableObservable, _super);

        /**
         * @constructor
         * @private
         */
        function ConnectableObservable(source, subject) {
            var state = {
                subject: subject,
                source: source.asObservable(),
                hasSubscription: false,
                subscription: null
            };

            this.connect = function () {
                if (!state.hasSubscription) {
                    state.hasSubscription = true;
                    state.subscription = new CompositeDisposable(state.source.subscribe(state.subject), disposableCreate(function () {
                        state.hasSubscription = false;
                    }));
                }
                return state.subscription;
            };

            function subscribe(observer) {
                return state.subject.subscribe(observer);
            }

            _super.call(this, subscribe);
        }

        /**
         * @private
         * @memberOf ConnectableObservable
         */
        ConnectableObservable.prototype.connect = function () { return this.connect(); };

        /**
         * @private
         * @memberOf ConnectableObservable
         */        
        ConnectableObservable.prototype.refCount = function () {
            var connectableSubscription = null, count = 0, source = this;
            return new AnonymousObservable(function (observer) {
                var shouldConnect, subscription;
                count++;
                shouldConnect = count === 1;
                subscription = source.subscribe(observer);
                if (shouldConnect) {
                    connectableSubscription = source.connect();
                }
                return disposableCreate(function () {
                    subscription.dispose();
                    count--;
                    if (count === 0) {
                        connectableSubscription.dispose();
                    }
                });
            });
        };

        return ConnectableObservable;
    }(Observable));

    function observableTimerTimeSpan(dueTime, scheduler) {
        var d = normalizeTime(dueTime);
        return new AnonymousObservable(function (observer) {
            return scheduler.scheduleWithRelative(d, function () {
                observer.onNext(0);
                observer.onCompleted();
            });
        });
    }

  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
    if (dueTime === period) {
      return new AnonymousObservable(function (observer) {
        return scheduler.schedulePeriodicWithState(0, period, function (count) {
          observer.onNext(count);
          return count + 1;
        });
      });
    }
    return observableDefer(function () {
      return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
    });
  }

  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
    var p = normalizeTime(period);
    return new AnonymousObservable(function (observer) {
      var count = 0, d = dueTime;
      return scheduler.scheduleRecursiveWithAbsolute(d, function (self) {
        var now;
        if (p > 0) {
          now = scheduler.now();
          d = d + p;
          if (d <= now) {
            d = now + p;
          }
        }
        observer.onNext(count++);
        self(d);
      });
    });
  }

    /**
     *  Returns an observable sequence that produces a value after each period.
     *  
     * @example
     *  1 - res = Rx.Observable.interval(1000);
     *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
     *      
     * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
     * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
     * @returns {Observable} An observable sequence that produces a value after each period.
     */
    var observableinterval = Observable.interval = function (period, scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        return observableTimerTimeSpanAndPeriod(period, period, scheduler);
    };

    /**
     *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
     *  
     * @example
     *  var res = Rx.Observable.timer(5000);
     *  var res = Rx.Observable.timer(5000, 1000);
     *  var res = Rx.Observable.timer(5000, Rx.Scheduler.timeout);
     *  var res = Rx.Observable.timer(5000, 1000, Rx.Scheduler.timeout);
     *  
     * @param {Number} dueTime Relative time (specified as an integer denoting milliseconds) at which to produce the first value.
     * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
     * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
     * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
     */
    var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
        var period;
        scheduler || (scheduler = timeoutScheduler);
        if (typeof periodOrScheduler === 'number') {
            period = periodOrScheduler;
        } else if (typeof periodOrScheduler === 'object' && 'now' in periodOrScheduler) {
            scheduler = periodOrScheduler;
        }
        return period === undefined ?
            observableTimerTimeSpan(dueTime, scheduler) :
            observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
    };

    /**
     *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
     *  
     * @example
     *  var res = Rx.Observable.delay(5000);
     *  var res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);
     * @memberOf Observable#
     * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
     * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
     * @returns {Observable} Time-shifted sequence.
     */
    observableProto.delay = function (dueTime, scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        var source = this;  
        return new AnonymousObservable(function (observer) {
            var active = false,
                cancelable = new SerialDisposable(),
                exception = null,
                q = [],
                running = false,
                subscription;
            subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
                var d, shouldRun;
                if (notification.value.kind === 'E') {
                    q = [];
                    q.push(notification);
                    exception = notification.value.exception;
                    shouldRun = !running;
                } else {
                    q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
                    shouldRun = !active;
                    active = true;
                }
                if (shouldRun) {
                    if (exception !== null) {
                        observer.onError(exception);
                    } else {
                        d = new SingleAssignmentDisposable();
                        cancelable.setDisposable(d);
                        d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function (self) {
                            var e, recurseDueTime, result, shouldRecurse;
                            if (exception !== null) {
                                return;
                            }
                            running = true;
                            do {
                                result = null;
                                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
                                    result = q.shift().value;
                                }
                                if (result !== null) {
                                    result.accept(observer);
                                }
                            } while (result !== null);
                            shouldRecurse = false;
                            recurseDueTime = 0;
                            if (q.length > 0) {
                                shouldRecurse = true;
                                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
                            } else {
                                active = false;
                            }
                            e = exception;
                            running = false;
                            if (e !== null) {
                                observer.onError(e);
                            } else if (shouldRecurse) {
                                self(recurseDueTime);
                            }
                        }));
                    }
                }
            });
            return new CompositeDisposable(subscription, cancelable);
        });
    };

    /**
     *  Ignores values from an observable sequence which are followed by another value before dueTime.
     *  
     * @example
     *  1 - res = source.throttle(5000); // 5 seconds
     *  2 - res = source.throttle(5000, scheduler);        
     * 
     * @param {Number} dueTime Duration of the throttle period for each value (specified as an integer denoting milliseconds).
     * @param {Scheduler} [scheduler]  Scheduler to run the throttle timers on. If not specified, the timeout scheduler is used.
     * @returns {Observable} The throttled sequence.
     */
    observableProto.throttle = function (dueTime, scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        var source = this;
        return this.throttleWithSelector(function () { return observableTimer(dueTime, scheduler); })
    };

    /**
     *  Records the time interval between consecutive values in an observable sequence.
     *  
     * @example
     *  1 - res = source.timeInterval();
     *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
     *      
     * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
     * @returns {Observable} An observable sequence with time interval information on values.
     */
    observableProto.timeInterval = function (scheduler) {
        var source = this;
        scheduler || (scheduler = timeoutScheduler);
        return observableDefer(function () {
            var last = scheduler.now();
            return source.select(function (x) {
                var now = scheduler.now(), span = now - last;
                last = now;
                return {
                    value: x,
                    interval: span
                };
            });
        });
    };

    /**
     *  Records the timestamp for each value in an observable sequence.
     *  
     * @example
     *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
     *  2 - res = source.timestamp(Rx.Scheduler.timeout);
     *      
     * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.
     * @returns {Observable} An observable sequence with timestamp information on values.
     */
    observableProto.timestamp = function (scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        return this.select(function (x) {
            return {
                value: x,
                timestamp: scheduler.now()
            };
        });
    };

    function sampleObservable(source, sampler) {
        
        return new AnonymousObservable(function (observer) {
            var atEnd, value, hasValue;

            function sampleSubscribe() {
                if (hasValue) {
                    hasValue = false;
                    observer.onNext(value);
                }
                if (atEnd) {
                    observer.onCompleted();
                }
            }

            return new CompositeDisposable(
                source.subscribe(function (newValue) {
                    hasValue = true;
                    value = newValue;
                }, observer.onError.bind(observer), function () {
                    atEnd = true;
                }),
                sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe)
            );
        });
    }

    /**
     *  Samples the observable sequence at each interval.
     *  
     * @example
     *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
     *  2 - res = source.sample(5000); // 5 seconds
     *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
     *      
     * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
     * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
     * @returns {Observable} Sampled observable sequence.
     */
    observableProto.sample = function (intervalOrSampler, scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        if (typeof intervalOrSampler === 'number') {
            return sampleObservable(this, observableinterval(intervalOrSampler, scheduler));
        }
        return sampleObservable(this, intervalOrSampler);
    };

  /**
   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
   *  
   * @example
   *  1 - res = source.timeout(new Date()); // As a date
   *  2 - res = source.timeout(5000); // 5 seconds
   *  3 - res = source.timeout(new Date(), Rx.Observable.returnValue(42)); // As a date and timeout observable
   *  4 - res = source.timeout(5000, Rx.Observable.returnValue(42)); // 5 seconds and timeout observable
   *  5 - res = source.timeout(new Date(), Rx.Observable.returnValue(42), Rx.Scheduler.timeout); // As a date and timeout observable
   *  6 - res = source.timeout(5000, Rx.Observable.returnValue(42), Rx.Scheduler.timeout); // 5 seconds and timeout observable
   *      
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
   * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
   * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
   */
  observableProto.timeout = function (dueTime, other, scheduler) {
    other || (other = observableThrow(new Error('Timeout')));
    scheduler || (scheduler = timeoutScheduler);
    
    var source = this, schedulerMethod = dueTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';

    return new AnonymousObservable(function (observer) {
      var id = 0,
        original = new SingleAssignmentDisposable(),
        subscription = new SerialDisposable(),
        switched = false,
        timer = new SerialDisposable();

      subscription.setDisposable(original);

      var createTimer = function () {
        var myId = id;
        timer.setDisposable(scheduler[schedulerMethod](dueTime, function () {
          if (id === myId) {
            isPromise(other) && (other = observableFromPromise(other));
            subscription.setDisposable(other.subscribe(observer));
          }
        }));
      };

      createTimer();
      
      original.setDisposable(source.subscribe(function (x) {
        if (!switched) {
          id++;
          observer.onNext(x);
          createTimer();
        }
      }, function (e) {
        if (!switched) {
          id++;
          observer.onError(e);
        }
      }, function () {
        if (!switched) {
          id++;
          observer.onCompleted();
        }
      }));
      return new CompositeDisposable(subscription, timer);
    });
  };

    /**
     *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
     * 
     * @example 
     *  res = source.generateWithRelativeTime(0, 
     *      function (x) { return return true; }, 
     *      function (x) { return x + 1; }, 
     *      function (x) { return x; }, 
     *      function (x) { return 500; }
     *  );
     *      
     * @param {Mixed} initialState Initial state.
     * @param {Function} condition Condition to terminate generation (upon returning false).
     * @param {Function} iterate Iteration step function.
     * @param {Function} resultSelector Selector function for results produced in the sequence.
     * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
     * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
     * @returns {Observable} The generated sequence.
     */
    Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        return new AnonymousObservable(function (observer) {
            var first = true,
                hasResult = false,
                result,
                state = initialState,
                time;
            return scheduler.scheduleRecursiveWithRelative(0, function (self) {
                if (hasResult) {
                    observer.onNext(result);
                }
                try {
                    if (first) {
                        first = false;
                    } else {
                        state = iterate(state);
                    }
                    hasResult = condition(state);
                    if (hasResult) {
                        result = resultSelector(state);
                        time = timeSelector(state);
                    }
                } catch (e) {
                    observer.onError(e);
                    return;
                }
                if (hasResult) {
                    self(time);
                } else {
                    observer.onCompleted();
                }
            });
        });
    };

    /**
     *  Time shifts the observable sequence by delaying the subscription.
     *  
     * @example
     *  1 - res = source.delaySubscription(5000); // 5s
     *  2 - res = source.delaySubscription(5000, Rx.Scheduler.timeout); // 5 seconds
     *      
     * @param {Number} dueTime Absolute or relative time to perform the subscription at.
     * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
     * @returns {Observable} Time-shifted sequence.
     */
    observableProto.delaySubscription = function (dueTime, scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        return this.delayWithSelector(observableTimer(dueTime, scheduler), function () { return observableEmpty(); });
    };

    /**
     *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
     *  
     * @example
     *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only
     *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector
     *
     * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source. 
     * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
     * @returns {Observable} Time-shifted sequence.
     */
    observableProto.delayWithSelector = function (subscriptionDelay, delayDurationSelector) {
        var source = this, subDelay, selector;
        if (typeof subscriptionDelay === 'function') {
            selector = subscriptionDelay;
        } else {
            subDelay = subscriptionDelay;
            selector = delayDurationSelector;
        }
        return new AnonymousObservable(function (observer) {
            var delays = new CompositeDisposable(), atEnd = false, done = function () {
                if (atEnd && delays.length === 0) {
                    observer.onCompleted();
                }
            }, subscription = new SerialDisposable(), start = function () {
                subscription.setDisposable(source.subscribe(function (x) {
                    var delay;
                    try {
                        delay = selector(x);
                    } catch (error) {
                        observer.onError(error);
                        return;
                    }
                    var d = new SingleAssignmentDisposable();
                    delays.add(d);
                    d.setDisposable(delay.subscribe(function () {
                        observer.onNext(x);
                        delays.remove(d);
                        done();
                    }, observer.onError.bind(observer), function () {
                        observer.onNext(x);
                        delays.remove(d);
                        done();
                    }));
                }, observer.onError.bind(observer), function () {
                    atEnd = true;
                    subscription.dispose();
                    done();
                }));
            };

            if (!subDelay) {
                start();
            } else {
                subscription.setDisposable(subDelay.subscribe(function () {
                    start();
                }, observer.onError.bind(observer), function () { start(); }));
            }

            return new CompositeDisposable(subscription, delays);
        });
    };

    /**
     *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
     *  
     * @example
     *  1 - res = source.timeoutWithSelector(Rx.Observable.timer(500)); 
     *  2 - res = source.timeoutWithSelector(Rx.Observable.timer(500), function (x) { return Rx.Observable.timer(200); });
     *  3 - res = source.timeoutWithSelector(Rx.Observable.timer(500), function (x) { return Rx.Observable.timer(200); }, Rx.Observable.returnValue(42));
     *      
     * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().
     * @param {Function} [timeoutDurationSelector] Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.
     * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException(). 
     * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
     */
    observableProto.timeoutWithSelector = function (firstTimeout, timeoutdurationSelector, other) {
        if (arguments.length === 1) {
            timeoutdurationSelector = firstTimeout;
            var firstTimeout = observableNever();
        }
        other || (other = observableThrow(new Error('Timeout')));
        var source = this;
        return new AnonymousObservable(function (observer) {
            var subscription = new SerialDisposable(), timer = new SerialDisposable(), original = new SingleAssignmentDisposable();

            subscription.setDisposable(original);

            var id = 0, switched = false, setTimer = function (timeout) {
                var myId = id, timerWins = function () {
                    return id === myId;
                };
                var d = new SingleAssignmentDisposable();
                timer.setDisposable(d);
                d.setDisposable(timeout.subscribe(function () {
                    if (timerWins()) {
                        subscription.setDisposable(other.subscribe(observer));
                    }
                    d.dispose();
                }, function (e) {
                    if (timerWins()) {
                        observer.onError(e);
                    }
                }, function () {
                    if (timerWins()) {
                        subscription.setDisposable(other.subscribe(observer));
                    }
                }));
            };

            setTimer(firstTimeout);
            var observerWins = function () {
                var res = !switched;
                if (res) {
                    id++;
                }
                return res;
            };

            original.setDisposable(source.subscribe(function (x) {
                if (observerWins()) {
                    observer.onNext(x);
                    var timeout;
                    try {
                        timeout = timeoutdurationSelector(x);
                    } catch (e) {
                        observer.onError(e);
                        return;
                    }
                    setTimer(timeout);
                }
            }, function (e) {
                if (observerWins()) {
                    observer.onError(e);
                }
            }, function () {
                if (observerWins()) {
                    observer.onCompleted();
                }
            }));
            return new CompositeDisposable(subscription, timer);
        });
    };

    /**
     *  Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
     *  
     * @example
     *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(x + x); }); 
     * 
     * @param {Function} throttleDurationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.
     * @returns {Observable} The throttled sequence.
     */
    observableProto.throttleWithSelector = function (throttleDurationSelector) {
        var source = this;
        return new AnonymousObservable(function (observer) {
            var value, hasValue = false, cancelable = new SerialDisposable(), id = 0, subscription = source.subscribe(function (x) {
                var throttle;
                try {
                    throttle = throttleDurationSelector(x);
                } catch (e) {
                    observer.onError(e);
                    return;
                }
                hasValue = true;
                value = x;
                id++;
                var currentid = id, d = new SingleAssignmentDisposable();
                cancelable.setDisposable(d);
                d.setDisposable(throttle.subscribe(function () {
                    if (hasValue && id === currentid) {
                        observer.onNext(value);
                    }
                    hasValue = false;
                    d.dispose();
                }, observer.onError.bind(observer), function () {
                    if (hasValue && id === currentid) {
                        observer.onNext(value);
                    }
                    hasValue = false;
                    d.dispose();
                }));
            }, function (e) {
                cancelable.dispose();
                observer.onError(e);
                hasValue = false;
                id++;
            }, function () {
                cancelable.dispose();
                if (hasValue) {
                    observer.onNext(value);
                }
                observer.onCompleted();
                hasValue = false;
                id++;
            });
            return new CompositeDisposable(subscription, cancelable);
        });
    };

    /**
     *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
     *  
     *  1 - res = source.skipLastWithTime(5000);     
     *  2 - res = source.skipLastWithTime(5000, scheduler); 
     *      
     * @description
     *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
     *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
     *  result sequence. This causes elements to be delayed with duration.          
     * @param {Number} duration Duration for skipping elements from the end of the sequence.
     * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
     * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
     */
    observableProto.skipLastWithTime = function (duration, scheduler) {
        scheduler || (scheduler = timeoutScheduler);
        var source = this;
        return new AnonymousObservable(function (observer) {
            var q = [];
            return source.subscribe(function (x) {
                var now = scheduler.now();
                q.push({ interval: now, value: x });
                while (q.length > 0 && now - q[0].interval >= duration) {
                    observer.onNext(q.shift().value);
                }
            }, observer.onError.bind(observer), function () {
                var now = scheduler.now();
                while (q.length > 0 && now - q[0].interval >= duration) {
                    observer.onNext(q.shift().value);
                }
                observer.onCompleted();
            });
        });
    };

    /**
     *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
     *  
     * @example
     *  1 - res = source.takeLastWithTime(5000, [optional timer scheduler], [optional loop scheduler]); 
     * @description
     *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
     *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
     *  result sequence. This causes elements to be delayed with duration.    
     * @param {Number} duration Duration for taking elements from the end of the sequence.
     * @param {Scheduler} [timerScheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
     * @param {Scheduler} [loopScheduler]  Scheduler to drain the collected elements. If not specified, defaults to Rx.Scheduler.immediate.
     * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
     */
    observableProto.takeLastWithTime = function (duration, timerScheduler, loopScheduler) {
        return this.takeLastBufferWithTime(duration, timerScheduler).selectMany(function (xs) { return observableFromArray(xs, loopScheduler); });
    };

    /**
     *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
     *  
     * @example
     *  1 - res = source.takeLastBufferWithTime(5000, [optional scheduler]); 
     * @description
     *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
     *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
     *  result sequence. This causes elements to be delayed with duration.   
     * @param {Number} duration Duration for taking elements from the end of the sequence.
     * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
     * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
     */
    observableProto.takeLastBufferWithTime = function (duration, scheduler) {
        var source = this;
        scheduler || (scheduler = timeoutScheduler);
        return new AnonymousObservable(function (observer) {
            var q = [];

            return source.subscribe(function (x) {
                var now = scheduler.now();
                q.push({ interval: now, value: x });
                while (q.length > 0 && now - q[0].interval >= duration) {
                    q.shift();
                }
            }, observer.onError.bind(observer), function () {
                var now = scheduler.now(), res = [];
                while (q.length > 0) {
                    var next = q.shift();
                    if (now - next.interval <= duration) {
                        res.push(next.value);
                    }
                }

                observer.onNext(res);
                observer.onCompleted();
            });
        });
    };

    /**
     *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
     *  
     * @example
     *  1 - res = source.takeWithTime(5000,  [optional scheduler]); 
     * @description
     *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
     *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
     *  result sequence. This causes elements to be delayed with duration.    
     * @param {Number} duration Duration for taking elements from the start of the sequence.
     * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
     * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
     */
    observableProto.takeWithTime = function (duration, scheduler) {
        var source = this;
        scheduler || (scheduler = timeoutScheduler);
        return new AnonymousObservable(function (observer) {
            var t = scheduler.scheduleWithRelative(duration, function () {
                observer.onCompleted();
            });

            return new CompositeDisposable(t, source.subscribe(observer));
        });
    };

    /**
     *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
     *  
     * @example
     *  1 - res = source.skipWithTime(5000, [optional scheduler]); 
     *  
     * @description     
     *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
     *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
     *  may not execute immediately, despite the zero due time.
     *  
     *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.      
     * @param {Number} duration Duration for skipping elements from the start of the sequence.
     * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
     * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
     */
    observableProto.skipWithTime = function (duration, scheduler) {
        var source = this;
        scheduler || (scheduler = timeoutScheduler);
        return new AnonymousObservable(function (observer) {
            var open = false,
                t = scheduler.scheduleWithRelative(duration, function () { open = true; }),
                d = source.subscribe(function (x) {
                    if (open) {
                        observer.onNext(x);
                    }
                }, observer.onError.bind(observer), observer.onCompleted.bind(observer));

            return new CompositeDisposable(t, d);
        });
    };

  /**
   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
   *  
   * @examples
   *  1 - res = source.skipUntilWithTime(new Date(), [optional scheduler]);   
   *  2 - res = source.skipUntilWithTime(5000, [optional scheduler]);           
   * @param startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
   * @param scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
   * @returns {Observable} An observable sequence with the elements skipped until the specified start time. 
   */
  observableProto.skipUntilWithTime = function (startTime, scheduler) {
    scheduler || (scheduler = timeoutScheduler);
    var source = this, schedulerMethod = startTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';
    return new AnonymousObservable(function (observer) {
      var open = false;

      return new CompositeDisposable(
        scheduler[schedulerMethod](startTime, function () { open = true; }),
        source.subscribe(
          function (x) { open && observer.onNext(x); }, 
          observer.onError.bind(observer),
          observer.onCompleted.bind(observer)));
    });
  };

  /**
   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
   *  
   * @example
   *  1 - res = source.takeUntilWithTime(new Date(), [optional scheduler]);
   *  2 - res = source.takeUntilWithTime(5000, [optional scheduler]);   
   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
   * @param {Scheduler} scheduler Scheduler to run the timer on.
   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
   */
  observableProto.takeUntilWithTime = function (endTime, scheduler) {
    scheduler || (scheduler = timeoutScheduler);
    var source = this, schedulerMethod = endTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';
    return new AnonymousObservable(function (observer) {
      return new CompositeDisposable(scheduler[schedulerMethod](endTime, function () {
        observer.onCompleted();
      }),  source.subscribe(observer));
    });
  };

  var PausableObservable = (function (_super) {

    inherits(PausableObservable, _super);

    function subscribe(observer) {
      var conn = this.source.publish(),
        subscription = conn.subscribe(observer),
        connection = disposableEmpty;

      var pausable = this.subject.distinctUntilChanged().subscribe(function (b) {
        if (b) {
          connection = conn.connect();
        } else {
          connection.dispose();
          connection = disposableEmpty;
        }
      });

      return new CompositeDisposable(subscription, connection, pausable);
    }

    function PausableObservable(source, subject) {
      this.source = source;
      this.subject = subject || new Subject();
      this.isPaused = true;
      _super.call(this, subscribe);
    }

    PausableObservable.prototype.pause = function () {
      if (this.isPaused === true){
        return;
      }
      this.isPaused = true;
      this.subject.onNext(false);
    };

    PausableObservable.prototype.resume = function () {
      if (this.isPaused === false){
        return;
      }
      this.isPaused = false;
      this.subject.onNext(true);
    };

    return PausableObservable;

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausable(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.pausable = function (pauser) {
    return new PausableObservable(this, pauser);
  };
  function combineLatestSource(source, subject, resultSelector) {
    return new AnonymousObservable(function (observer) {
      var n = 2,
        hasValue = [false, false],
        hasValueAll = false,
        isDone = false,
        values = new Array(n);

      function next(x, i) {
        values[i] = x
        var res;
        hasValue[i] = true;
        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
          try {
            res = resultSelector.apply(null, values);
          } catch (ex) {
            observer.onError(ex);
            return;
          }
          observer.onNext(res);
        } else if (isDone) {
          observer.onCompleted();
        }
      }

      return new CompositeDisposable(
        source.subscribe(
          function (x) {
            next(x, 0);
          },
          observer.onError.bind(observer),
          function () {
            isDone = true;
            observer.onCompleted();
          }),
        subject.subscribe(
          function (x) {
            next(x, 1);
          },
          observer.onError.bind(observer))
        );
    });
  }

  var PausableBufferedObservable = (function (_super) {

    inherits(PausableBufferedObservable, _super);

    function subscribe(observer) {
      var q = [], previous = true;
      
      var subscription =  
        combineLatestSource(
          this.source,
          this.subject.distinctUntilChanged(), 
          function (data, shouldFire) {
            return { data: data, shouldFire: shouldFire };      
          })
          .subscribe(
            function (results) {
              if (results.shouldFire && previous) {
                observer.onNext(results.data);
              }
              if (results.shouldFire && !previous) {
                while (q.length > 0) {
                  observer.onNext(q.shift());
                }
                previous = true;
              } else if (!results.shouldFire && !previous) {
                q.push(results.data);
              } else if (!results.shouldFire && previous) {
                previous = false;
              }

            }, 
            function (err) {
              // Empty buffer before sending error
              while (q.length > 0) {
                observer.onNext(q.shift());
              }
              observer.onError(err);
            },
            function () {
              // Empty buffer before sending completion
              while (q.length > 0) {
                observer.onNext(q.shift());
              }
              observer.onCompleted();              
            }
          );

      this.subject.onNext(false);

      return subscription;      
    }

    function PausableBufferedObservable(source, subject) {
      this.source = source;
      this.subject = subject || new Subject();
      this.isPaused = true;
      _super.call(this, subscribe);
    }

    PausableBufferedObservable.prototype.pause = function () {
      if (this.isPaused === true){
        return;
      }
      this.isPaused = true;
      this.subject.onNext(false);
    };

    PausableBufferedObservable.prototype.resume = function () {
      if (this.isPaused === false){
        return;
      }
      this.isPaused = false;
      this.subject.onNext(true);
    };

    return PausableBufferedObservable; 

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
   * and yields the values that were buffered while paused.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */  
  observableProto.pausableBuffered = function (subject) {
    return new PausableBufferedObservable(this, subject);
  };

  /**
   * Attaches a controller to the observable sequence with the ability to queue.
   * @example
   * var source = Rx.Observable.interval(100).controlled();
   * source.request(3); // Reads 3 values
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */ 
  observableProto.controlled = function (enableQueue) {
    if (enableQueue == null) {  enableQueue = true; }
    return new ControlledObservable(this, enableQueue);
  };
  var ControlledObservable = (function (_super) {

    inherits(ControlledObservable, _super);

    function subscribe (observer) {
      return this.source.subscribe(observer);
    }

    function ControlledObservable (source, enableQueue) {
      _super.call(this, subscribe);
      this.subject = new ControlledSubject(enableQueue);
      this.source = source.multicast(this.subject).refCount();
    }

    ControlledObservable.prototype.request = function (numberOfItems) {
      if (numberOfItems == null) { numberOfItems = -1; }
      return this.subject.request(numberOfItems);
    };

    return ControlledObservable;

  }(Observable));

    var ControlledSubject = Rx.ControlledSubject = (function (_super) {

        function subscribe (observer) {
            return this.subject.subscribe(observer);
        }

        inherits(ControlledSubject, _super);

        function ControlledSubject(enableQueue) {
            if (enableQueue == null) {
                enableQueue = true;
            }

            _super.call(this, subscribe);
            this.subject = new Subject();
            this.enableQueue = enableQueue;
            this.queue = enableQueue ? [] : null;
            this.requestedCount = 0;
            this.requestedDisposable = disposableEmpty;
            this.error = null;
            this.hasFailed = false;
            this.hasCompleted = false;
            this.controlledDisposable = disposableEmpty;
        }

        addProperties(ControlledSubject.prototype, Observer, {
            onCompleted: function () {
                checkDisposed.call(this);
                this.hasCompleted = true;

                if (!this.enableQueue || this.queue.length === 0) {
                    this.subject.onCompleted();
                }
            },
            onError: function (error) {
                checkDisposed.call(this);
                this.hasFailed = true;
                this.error = error;

                if (!this.enableQueue || this.queue.length === 0) {
                    this.subject.onError(error);
                }   
            },
            onNext: function (value) {
                checkDisposed.call(this);
                var hasRequested = false;

                if (this.requestedCount === 0) {
                    if (this.enableQueue) {
                        this.queue.push(value);
                    }
                } else {
                    if (this.requestedCount !== -1) {
                        if (this.requestedCount-- === 0) {
                            this.disposeCurrentRequest();
                        }
                    }
                    hasRequested = true;
                }

                if (hasRequested) {
                    this.subject.onNext(value);
                }
            },
            _processRequest: function (numberOfItems) {
                if (this.enableQueue) {
                    //console.log('queue length', this.queue.length);

                    while (this.queue.length >= numberOfItems && numberOfItems > 0) {
                        //console.log('number of items', numberOfItems);
                        this.subject.onNext(this.queue.shift());
                        numberOfItems--;
                    }

                    if (this.queue.length !== 0) {
                        return { numberOfItems: numberOfItems, returnValue: true };
                    } else {
                        return { numberOfItems: numberOfItems, returnValue: false };
                    }
                }

                if (this.hasFailed) {
                    this.subject.onError(this.error);
                    this.controlledDisposable.dispose();
                    this.controlledDisposable = disposableEmpty;
                } else if (this.hasCompleted) {
                    this.subject.onCompleted();
                    this.controlledDisposable.dispose();
                    this.controlledDisposable = disposableEmpty;                   
                }

                return { numberOfItems: numberOfItems, returnValue: false };
            },
            request: function (number) {
                checkDisposed.call(this);
                this.disposeCurrentRequest();
                var self = this,
                    r = this._processRequest(number);

                number = r.numberOfItems;
                if (!r.returnValue) {
                    this.requestedCount = number;
                    this.requestedDisposable = disposableCreate(function () {
                        self.requestedCount = 0;
                    });

                    return this.requestedDisposable
                } else {
                    return disposableEmpty;
                }
            },
            disposeCurrentRequest: function () {
                this.requestedDisposable.dispose();
                this.requestedDisposable = disposableEmpty;
            },

            dispose: function () {
                this.isDisposed = true;
                this.error = null;
                this.subject.dispose();
                this.requestedDisposable.dispose();
            }
        });

        return ControlledSubject;
    }(Observable));
  /**
   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable. 
   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair. 
   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
   */
  observableProto.pairwise = function () {
    var source = this;
    return new AnonymousObservable(function (observer) {
      var previous, hasPrevious = false;
      return source.subscribe(
        function (x) {
          if (hasPrevious) {
            observer.onNext([previous, x]);
          } else {
            hasPrevious = true;
          }
          previous = x;
        },
        observer.onError.bind(observer),
        observer.onCompleted.bind(observer));
    });
  };
  /** 
   * Returns two observables which partition the observations of the source by the given function.
   * The first will trigger observations for those values for which the predicate returns true. 
   * The second will trigger observations for those values where the predicate returns false. 
   * The predicate is executed once for each subscribed observer. 
   * Both also propagate all error observations arising from the source and each completes 
   * when the source completes.
   * @param {Function} predicate 
   *    The function to determine which output Observable will trigger a particular observation.
   * @returns {Array}
   *    An array of observables. The first triggers when the predicate returns true, 
   *    and the second triggers when the predicate returns false.
  */
  observableProto.partition = function(predicate, thisArg) {
    var published = this.publish().refCount();
    return [ 
      published.filter(predicate, thisArg), 
      published.filter(function (x, i, o) { return !predicate.call(thisArg, x, i, o); })
    ];
  };

  /*
   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
   * Observables that come in between subscriptions will be dropped on the floor.
   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
   */
  observableProto.exclusive = function () {
    var sources = this;
    return new AnonymousObservable(function (observer) {
      var hasCurrent = false,
        isStopped = false,
        m = new SingleAssignmentDisposable(),
        g = new CompositeDisposable();

      g.add(m);

      m.setDisposable(sources.subscribe(
        function (innerSource) {
          if (!hasCurrent) {
            hasCurrent = true;
            
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

            var innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);

            innerSubscription.setDisposable(innerSource.subscribe(
              observer.onNext.bind(observer),
              observer.onError.bind(observer),
              function () {
                g.remove(innerSubscription);
                hasCurrent = false;
                if (isStopped && g.length === 1) {
                  observer.onCompleted();
                }
            }));
          }
        },
        observer.onError.bind(observer),
        function () {
          isStopped = true;
          if (!hasCurrent && g.length === 1) { 
            observer.onCompleted();
          }
        }));

      return g;
    });
  };
  /*
   * Performs a exclusive map waiting for the first to finish before subscribing to another observable.
   * Observables that come in between subscriptions will be dropped on the floor.
   * @param {Function} selector Selector to invoke for every item in the current subscription.
   * @param {Any} [thisArg] An optional context to invoke with the selector parameter.
   * @returns {Observable} An exclusive observable with only the results that happen when subscribed.
   */
  observableProto.exclusiveMap = function (selector, thisArg) {
    var sources = this;
    return new AnonymousObservable(function (observer) {
      var index = 0,
        hasCurrent = false,
        isStopped = true,
        m = new SingleAssignmentDisposable(),
        g = new CompositeDisposable();

      g.add(m);

      m.setDisposable(sources.subscribe(
        function (innerSource) {

          if (!hasCurrent) {
            hasCurrent = true;          

            innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);

            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));      

            innerSubscription.setDisposable(innerSource.subscribe(
              function (x) {
                var result;
                try {
                  result = selector.call(thisArg, x, index++, innerSource);
                } catch (e) {
                  observer.onError(e);
                  return;
                }

                observer.onNext(result);
              },
              observer.onError.bind(observer),
              function () {
                g.remove(innerSubscription);
                hasCurrent = false;

                if (isStopped && g.length === 1) {
                  observer.onCompleted();
                }
              }));
          }
        }, 
        observer.onError.bind(observer),
        function () {
          isStopped = true;
          if (g.length === 1 && !hasCurrent) {
            observer.onCompleted();
          }
        }));
      return g;
    });
  };
  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
    inherits(AnonymousObservable, __super__);

    // Fix subscriber to check for undefined or function returned to decorate as Disposable
    function fixSubscriber(subscriber) {
      if (typeof subscriber === 'undefined') {
        subscriber = disposableEmpty;
      } else if (typeof subscriber === 'function') {
        subscriber = disposableCreate(subscriber);
      }

      return subscriber;
    }

    function AnonymousObservable(subscribe) {
      if (!(this instanceof AnonymousObservable)) {
        return new AnonymousObservable(subscribe);
      }

      function s(observer) {
        var setDisposable = function () {
          try {
            autoDetachObserver.setDisposable(fixSubscriber(subscribe(autoDetachObserver)));
          } catch (e) {
            if (!autoDetachObserver.fail(e)) {
              throw e;
            } 
          }
        };

        var autoDetachObserver = new AutoDetachObserver(observer);
        if (currentThreadScheduler.scheduleRequired()) {
          currentThreadScheduler.schedule(setDisposable);
        } else {
          setDisposable();
        }

        return autoDetachObserver;
      }

      __super__.call(this, s);
    }

    return AnonymousObservable;

  }(Observable));

    /** @private */
    var AutoDetachObserver = (function (_super) {
        inherits(AutoDetachObserver, _super);

        function AutoDetachObserver(observer) {
            _super.call(this);
            this.observer = observer;
            this.m = new SingleAssignmentDisposable();
        }

        var AutoDetachObserverPrototype = AutoDetachObserver.prototype;

        AutoDetachObserverPrototype.next = function (value) {
            var noError = false;
            try {
                this.observer.onNext(value);
                noError = true;
            } catch (e) { 
                throw e;                
            } finally {
                if (!noError) {
                    this.dispose();
                }
            }
        };

        AutoDetachObserverPrototype.error = function (exn) {
            try {
                this.observer.onError(exn);
            } catch (e) { 
                throw e;                
            } finally {
                this.dispose();
            }
        };

        AutoDetachObserverPrototype.completed = function () {
            try {
                this.observer.onCompleted();
            } catch (e) { 
                throw e;                
            } finally {
                this.dispose();
            }
        };

        AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
        AutoDetachObserverPrototype.getDisposable = function (value) { return this.m.getDisposable(); };
        /* @private */
        AutoDetachObserverPrototype.disposable = function (value) {
            return arguments.length ? this.getDisposable() : setDisposable(value);
        };

        AutoDetachObserverPrototype.dispose = function () {
            _super.prototype.dispose.call(this);
            this.m.dispose();
        };

        return AutoDetachObserver;
    }(AbstractObserver));

    /** @private */
    var InnerSubscription = function (subject, observer) {
        this.subject = subject;
        this.observer = observer;
    };

    /**
     * @private
     * @memberOf InnerSubscription
     */
    InnerSubscription.prototype.dispose = function () {
        if (!this.subject.isDisposed && this.observer !== null) {
            var idx = this.subject.observers.indexOf(this.observer);
            this.subject.observers.splice(idx, 1);
            this.observer = null;
        }
    };

    /**
     *  Represents an object that is both an observable sequence as well as an observer.
     *  Each notification is broadcasted to all subscribed observers.
     */
    var Subject = Rx.Subject = (function (_super) {
        function subscribe(observer) {
            checkDisposed.call(this);
            if (!this.isStopped) {
                this.observers.push(observer);
                return new InnerSubscription(this, observer);
            }
            if (this.exception) {
                observer.onError(this.exception);
                return disposableEmpty;
            }
            observer.onCompleted();
            return disposableEmpty;
        }

        inherits(Subject, _super);

        /**
         * Creates a subject.
         * @constructor
         */      
        function Subject() {
            _super.call(this, subscribe);
            this.isDisposed = false,
            this.isStopped = false,
            this.observers = [];
        }

        addProperties(Subject.prototype, Observer, {
            /**
             * Indicates whether the subject has observers subscribed to it.
             * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
             */         
            hasObservers: function () {
                return this.observers.length > 0;
            },
            /**
             * Notifies all subscribed observers about the end of the sequence.
             */                          
            onCompleted: function () {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    var os = this.observers.slice(0);
                    this.isStopped = true;
                    for (var i = 0, len = os.length; i < len; i++) {
                        os[i].onCompleted();
                    }

                    this.observers = [];
                }
            },
            /**
             * Notifies all subscribed observers about the exception.
             * @param {Mixed} error The exception to send to all observers.
             */               
            onError: function (exception) {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    var os = this.observers.slice(0);
                    this.isStopped = true;
                    this.exception = exception;
                    for (var i = 0, len = os.length; i < len; i++) {
                        os[i].onError(exception);
                    }

                    this.observers = [];
                }
            },
            /**
             * Notifies all subscribed observers about the arrival of the specified element in the sequence.
             * @param {Mixed} value The value to send to all observers.
             */                 
            onNext: function (value) {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    var os = this.observers.slice(0);
                    for (var i = 0, len = os.length; i < len; i++) {
                        os[i].onNext(value);
                    }
                }
            },
            /**
             * Unsubscribe all observers and release resources.
             */                
            dispose: function () {
                this.isDisposed = true;
                this.observers = null;
            }
        });

        /**
         * Creates a subject from the specified observer and observable.
         * @param {Observer} observer The observer used to send messages to the subject.
         * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
         * @returns {Subject} Subject implemented using the given observer and observable.
         */
        Subject.create = function (observer, observable) {
            return new AnonymousSubject(observer, observable);
        };

        return Subject;
    }(Observable));

    /**
     *  Represents the result of an asynchronous operation.
     *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
     */   
    var AsyncSubject = Rx.AsyncSubject = (function (_super) {

        function subscribe(observer) {
            checkDisposed.call(this);
            
            if (!this.isStopped) {
                this.observers.push(observer);
                return new InnerSubscription(this, observer);
            }

            var ex = this.exception,
                hv = this.hasValue,
                v = this.value;

            if (ex) {
                observer.onError(ex);
            } else if (hv) {
                observer.onNext(v);
                observer.onCompleted();
            } else {
                observer.onCompleted();
            }

            return disposableEmpty;
        }

        inherits(AsyncSubject, _super);

        /**
         * Creates a subject that can only receive one value and that value is cached for all future observations.
         * @constructor
         */ 
        function AsyncSubject() {
            _super.call(this, subscribe);

            this.isDisposed = false;
            this.isStopped = false;
            this.value = null;
            this.hasValue = false;
            this.observers = [];
            this.exception = null;
        }

        addProperties(AsyncSubject.prototype, Observer, {
            /**
             * Indicates whether the subject has observers subscribed to it.
             * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
             */         
            hasObservers: function () {
                checkDisposed.call(this);
                return this.observers.length > 0;
            },
            /**
             * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
             */ 
            onCompleted: function () {
                var o, i, len;
                checkDisposed.call(this);
                if (!this.isStopped) {
                    this.isStopped = true;
                    var os = this.observers.slice(0),
                        v = this.value,
                        hv = this.hasValue;

                    if (hv) {
                        for (i = 0, len = os.length; i < len; i++) {
                            o = os[i];
                            o.onNext(v);
                            o.onCompleted();
                        }
                    } else {
                        for (i = 0, len = os.length; i < len; i++) {
                            os[i].onCompleted();
                        }
                    }

                    this.observers = [];
                }
            },
            /**
             * Notifies all subscribed observers about the exception.
             * @param {Mixed} error The exception to send to all observers.
             */ 
            onError: function (exception) {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    var os = this.observers.slice(0);
                    this.isStopped = true;
                    this.exception = exception;

                    for (var i = 0, len = os.length; i < len; i++) {
                        os[i].onError(exception);
                    }

                    this.observers = [];
                }
            },
            /**
             * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
             * @param {Mixed} value The value to store in the subject.
             */             
            onNext: function (value) {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    this.value = value;
                    this.hasValue = true;
                }
            },
            /**
             * Unsubscribe all observers and release resources.
             */
            dispose: function () {
                this.isDisposed = true;
                this.observers = null;
                this.exception = null;
                this.value = null;
            }
        });

        return AsyncSubject;
    }(Observable));

    /** @private */
    var AnonymousSubject = (function (_super) {
        inherits(AnonymousSubject, _super);

        function subscribe(observer) {
            return this.observable.subscribe(observer);
        }

        /**
         * @private
         * @constructor
         */
        function AnonymousSubject(observer, observable) {
            _super.call(this, subscribe);
            this.observer = observer;
            this.observable = observable;
        }

        addProperties(AnonymousSubject.prototype, Observer, {
            /**
             * @private
             * @memberOf AnonymousSubject#
            */
            onCompleted: function () {
                this.observer.onCompleted();
            },
            /**
             * @private
             * @memberOf AnonymousSubject#
            */            
            onError: function (exception) {
                this.observer.onError(exception);
            },
            /**
             * @private
             * @memberOf AnonymousSubject#
            */            
            onNext: function (value) {
                this.observer.onNext(value);
            }
        });

        return AnonymousSubject;
    }(Observable));

    /**
     *  Represents a value that changes over time.
     *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
     */
    var BehaviorSubject = Rx.BehaviorSubject = (function (_super) {
        function subscribe(observer) {
            checkDisposed.call(this);
            if (!this.isStopped) {
                this.observers.push(observer);
                observer.onNext(this.value);
                return new InnerSubscription(this, observer);
            }
            var ex = this.exception;
            if (ex) {
                observer.onError(ex);
            } else {
                observer.onCompleted();
            }
            return disposableEmpty;
        }

        inherits(BehaviorSubject, _super);

        /**
         * @constructor
         *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.
         *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.
         */       
        function BehaviorSubject(value) {
            _super.call(this, subscribe);

            this.value = value,
            this.observers = [],
            this.isDisposed = false,
            this.isStopped = false,
            this.exception = null;
        }

        addProperties(BehaviorSubject.prototype, Observer, {
            /**
             * Indicates whether the subject has observers subscribed to it.
             * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
             */         
            hasObservers: function () {
                return this.observers.length > 0;
            },
            /**
             * Notifies all subscribed observers about the end of the sequence.
             */ 
            onCompleted: function () {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    var os = this.observers.slice(0);
                    this.isStopped = true;
                    for (var i = 0, len = os.length; i < len; i++) {
                        os[i].onCompleted();
                    }

                    this.observers = [];
                }
            },
            /**
             * Notifies all subscribed observers about the exception.
             * @param {Mixed} error The exception to send to all observers.
             */             
            onError: function (error) {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    var os = this.observers.slice(0);
                    this.isStopped = true;
                    this.exception = error;

                    for (var i = 0, len = os.length; i < len; i++) {
                        os[i].onError(error);
                    }

                    this.observers = [];
                }
            },
            /**
             * Notifies all subscribed observers about the arrival of the specified element in the sequence.
             * @param {Mixed} value The value to send to all observers.
             */              
            onNext: function (value) {
                checkDisposed.call(this);
                if (!this.isStopped) {
                    this.value = value;
                    var os = this.observers.slice(0);
                    for (var i = 0, len = os.length; i < len; i++) {
                        os[i].onNext(value);
                    }
                }
            },
            /**
             * Unsubscribe all observers and release resources.
             */            
            dispose: function () {
                this.isDisposed = true;
                this.observers = null;
                this.value = null;
                this.exception = null;
            }
        });

        return BehaviorSubject;
    }(Observable));

    /**
     * Represents an object that is both an observable sequence as well as an observer.
     * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
     */  
    var ReplaySubject = Rx.ReplaySubject = (function (_super) {

        function RemovableDisposable (subject, observer) {
            this.subject = subject;
            this.observer = observer;
        };

        RemovableDisposable.prototype.dispose = function () {
            this.observer.dispose();
            if (!this.subject.isDisposed) {
                var idx = this.subject.observers.indexOf(this.observer);
                this.subject.observers.splice(idx, 1);
            }
        };

        function subscribe(observer) {
            var so = new ScheduledObserver(this.scheduler, observer),
                subscription = new RemovableDisposable(this, so);
            checkDisposed.call(this);
            this._trim(this.scheduler.now());
            this.observers.push(so);

            var n = this.q.length;

            for (var i = 0, len = this.q.length; i < len; i++) {
                so.onNext(this.q[i].value);
            }

            if (this.hasError) {
                n++;
                so.onError(this.error);
            } else if (this.isStopped) {
                n++;
                so.onCompleted();
            }

            so.ensureActive(n);
            return subscription;
        }

        inherits(ReplaySubject, _super);

        /**
         *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
         *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
         *  @param {Number} [windowSize] Maximum time length of the replay buffer.
         *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
         */
        function ReplaySubject(bufferSize, windowSize, scheduler) {
            this.bufferSize = bufferSize == null ? Number.MAX_VALUE : bufferSize;
            this.windowSize = windowSize == null ? Number.MAX_VALUE : windowSize;
            this.scheduler = scheduler || currentThreadScheduler;
            this.q = [];
            this.observers = [];
            this.isStopped = false;
            this.isDisposed = false;
            this.hasError = false;
            this.error = null;
            _super.call(this, subscribe);
        }

        addProperties(ReplaySubject.prototype, Observer, {
            /**
             * Indicates whether the subject has observers subscribed to it.
             * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
             */         
            hasObservers: function () {
                return this.observers.length > 0;
            },            
            /* @private  */
            _trim: function (now) {
                while (this.q.length > this.bufferSize) {
                    this.q.shift();
                }
                while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
                    this.q.shift();
                }
            },
            /**
             * Notifies all subscribed observers about the arrival of the specified element in the sequence.
             * @param {Mixed} value The value to send to all observers.
             */              
            onNext: function (value) {
                var observer;
                checkDisposed.call(this);
                if (!this.isStopped) {
                    var now = this.scheduler.now();
                    this.q.push({ interval: now, value: value });
                    this._trim(now);

                    var o = this.observers.slice(0);
                    for (var i = 0, len = o.length; i < len; i++) {
                        observer = o[i];
                        observer.onNext(value);
                        observer.ensureActive();
                    }
                }
            },
            /**
             * Notifies all subscribed observers about the exception.
             * @param {Mixed} error The exception to send to all observers.
             */                 
            onError: function (error) {
                var observer;
                checkDisposed.call(this);
                if (!this.isStopped) {
                    this.isStopped = true;
                    this.error = error;
                    this.hasError = true;
                    var now = this.scheduler.now();
                    this._trim(now);
                    var o = this.observers.slice(0);
                    for (var i = 0, len = o.length; i < len; i++) {
                        observer = o[i];
                        observer.onError(error);
                        observer.ensureActive();
                    }
                    this.observers = [];
                }
            },
            /**
             * Notifies all subscribed observers about the end of the sequence.
             */             
            onCompleted: function () {
                var observer;
                checkDisposed.call(this);
                if (!this.isStopped) {
                    this.isStopped = true;
                    var now = this.scheduler.now();
                    this._trim(now);
                    var o = this.observers.slice(0);
                    for (var i = 0, len = o.length; i < len; i++) {
                        observer = o[i];
                        observer.onCompleted();
                        observer.ensureActive();
                    }
                    this.observers = [];
                }
            },
            /**
             * Unsubscribe all observers and release resources.
             */               
            dispose: function () {
                this.isDisposed = true;
                this.observers = null;
            }
        });

        return ReplaySubject;
    }(Observable));

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        root.Rx = Rx;

        define(function() {
            return Rx;
        });
    } else if (freeExports && freeModule) {
        // in Node.js or RingoJS
        if (moduleExports) {
            (freeModule.exports = Rx).Rx = Rx;
        } else {
          freeExports.Rx = Rx;
        }
    } else {
        // in a browser or Rhino
        root.Rx = Rx;
    }
}.call(this));}, "spine.mobile/index": function(exports, require, module) {(function() {
  require('spine');
  require('spine/lib/manager');
  require('./lib/touch');
  exports.Stage = require('./lib/stage');
  exports.Panel = require('./lib/panel');
}).call(this);}, "spine.mobile/node_modules/spine/index": function(exports, require, module) {module.exports = require('./lib/spine');}, "spine.mobile/node_modules/spine/lib/spine": function(exports, require, module) {// Generated by CoffeeScript 1.4.0
(function() {
  var $, Controller, Events, Log, Model, Module, Spine, createObject, isArray, isBlank, makeArray, moduleKeywords,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Events = {
    bind: function(ev, callback) {
      var calls, evs, name, _i, _len;
      evs = ev.split(' ');
      calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        calls[name] || (calls[name] = []);
        calls[name].push(callback);
      }
      return this;
    },
    one: function(ev, callback) {
      return this.bind(ev, function() {
        this.unbind(ev, arguments.callee);
        return callback.apply(this, arguments);
      });
    },
    trigger: function() {
      var args, callback, ev, list, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ev = args.shift();
      list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
      if (!list) {
        return;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        callback = list[_i];
        if (callback.apply(this, args) === false) {
          break;
        }
      }
      return true;
    },
    unbind: function(ev, callback) {
      var cb, evs, i, list, name, _i, _j, _len, _len1, _ref;
      if (!ev) {
        this._callbacks = {};
        return this;
      }
      evs = ev.split(' ');
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        list = (_ref = this._callbacks) != null ? _ref[name] : void 0;
        if (!list) {
          continue;
        }
        if (!callback) {
          delete this._callbacks[name];
          continue;
        }
        for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
          cb = list[i];
          if (!(cb === callback)) {
            continue;
          }
          list = list.slice();
          list.splice(i, 1);
          this._callbacks[name] = list;
          break;
        }
      }
      return this;
    }
  };

  Events.on = Events.bind;

  Events.off = Events.unbind;

  Log = {
    trace: true,
    logPrefix: '(App)',
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.trace) {
        return;
      }
      if (this.logPrefix) {
        args.unshift(this.logPrefix);
      }
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.log === "function") {
          console.log.apply(console, args);
        }
      }
      return this;
    }
  };

  moduleKeywords = ['included', 'extended'];

  Module = (function() {

    Module.include = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('include(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.extend = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('extend(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    Module.prototype.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    function Module() {
      if (typeof this.init === "function") {
        this.init.apply(this, arguments);
      }
    }

    return Module;

  })();

  Model = (function(_super) {

    __extends(Model, _super);

    Model.extend(Events);

    Model.records = {};

    Model.crecords = {};

    Model.attributes = [];

    Model.configure = function() {
      var attributes, name;
      name = arguments[0], attributes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.className = name;
      this.records = {};
      this.crecords = {};
      if (attributes.length) {
        this.attributes = attributes;
      }
      this.attributes && (this.attributes = makeArray(this.attributes));
      this.attributes || (this.attributes = []);
      this.unbind();
      return this;
    };

    Model.toString = function() {
      return "" + this.className + "(" + (this.attributes.join(", ")) + ")";
    };

    Model.find = function(id) {
      var record;
      record = this.records[id];
      if (!record && ("" + id).match(/c-\d+/)) {
        return this.findCID(id);
      }
      if (!record) {
        throw new Error("\"" + this.className + "\" model could not find a record for the ID \"" + id + "\"");
      }
      return record.clone();
    };

    Model.findCID = function(cid) {
      var record;
      record = this.crecords[cid];
      if (!record) {
        throw new Error("\"" + this.className + "\" model could not find a record for the ID \"" + id + "\"");
      }
      return record.clone();
    };

    Model.exists = function(id) {
      try {
        return this.find(id);
      } catch (e) {
        return false;
      }
    };

    Model.refresh = function(values, options) {
      var record, records, _i, _len;
      if (options == null) {
        options = {};
      }
      if (options.clear) {
        this.records = {};
        this.crecords = {};
      }
      records = this.fromJSON(values);
      if (!isArray(records)) {
        records = [records];
      }
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        record.id || (record.id = record.cid);
        this.records[record.id] = record;
        this.crecords[record.cid] = record;
      }
      this.trigger('refresh', this.cloneArray(records));
      return this;
    };

    Model.select = function(callback) {
      var id, record, result;
      result = (function() {
        var _ref, _results;
        _ref = this.records;
        _results = [];
        for (id in _ref) {
          record = _ref[id];
          if (callback(record)) {
            _results.push(record);
          }
        }
        return _results;
      }).call(this);
      return this.cloneArray(result);
    };

    Model.findByAttribute = function(name, value) {
      var id, record, _ref;
      _ref = this.records;
      for (id in _ref) {
        record = _ref[id];
        if (record[name] === value) {
          return record.clone();
        }
      }
      return null;
    };

    Model.findAllByAttribute = function(name, value) {
      return this.select(function(item) {
        return item[name] === value;
      });
    };

    Model.each = function(callback) {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(callback(value.clone()));
      }
      return _results;
    };

    Model.all = function() {
      return this.cloneArray(this.recordsValues());
    };

    Model.first = function() {
      var record;
      record = this.recordsValues()[0];
      return record != null ? record.clone() : void 0;
    };

    Model.last = function() {
      var record, values;
      values = this.recordsValues();
      record = values[values.length - 1];
      return record != null ? record.clone() : void 0;
    };

    Model.count = function() {
      return this.recordsValues().length;
    };

    Model.deleteAll = function() {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(delete this.records[key]);
      }
      return _results;
    };

    Model.destroyAll = function(options) {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this.records[key].destroy(options));
      }
      return _results;
    };

    Model.update = function(id, atts, options) {
      return this.find(id).updateAttributes(atts, options);
    };

    Model.create = function(atts, options) {
      var record;
      record = new this(atts);
      return record.save(options);
    };

    Model.destroy = function(id, options) {
      return this.find(id).destroy(options);
    };

    Model.change = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('change', callbackOrParams);
      } else {
        return this.trigger('change', callbackOrParams);
      }
    };

    Model.fetch = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('fetch', callbackOrParams);
      } else {
        return this.trigger('fetch', callbackOrParams);
      }
    };

    Model.toJSON = function() {
      return this.recordsValues();
    };

    Model.fromJSON = function(objects) {
      var value, _i, _len, _results;
      if (!objects) {
        return;
      }
      if (typeof objects === 'string') {
        objects = JSON.parse(objects);
      }
      if (isArray(objects)) {
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          value = objects[_i];
          _results.push(new this(value));
        }
        return _results;
      } else {
        return new this(objects);
      }
    };

    Model.fromForm = function() {
      var _ref;
      return (_ref = new this).fromForm.apply(_ref, arguments);
    };

    Model.recordsValues = function() {
      var key, result, value, _ref;
      result = [];
      _ref = this.records;
      for (key in _ref) {
        value = _ref[key];
        result.push(value);
      }
      return result;
    };

    Model.cloneArray = function(array) {
      var value, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        _results.push(value.clone());
      }
      return _results;
    };

    Model.idCounter = 0;

    Model.uid = function(prefix) {
      var uid;
      if (prefix == null) {
        prefix = '';
      }
      uid = prefix + this.idCounter++;
      if (this.exists(uid)) {
        uid = this.uid(prefix);
      }
      return uid;
    };

    function Model(atts) {
      Model.__super__.constructor.apply(this, arguments);
      if (atts) {
        this.load(atts);
      }
      this.cid = this.constructor.uid('c-');
    }

    Model.prototype.isNew = function() {
      return !this.exists();
    };

    Model.prototype.isValid = function() {
      return !this.validate();
    };

    Model.prototype.validate = function() {};

    Model.prototype.load = function(atts) {
      var key, value;
      for (key in atts) {
        value = atts[key];
        if (typeof this[key] === 'function') {
          this[key](value);
        } else {
          this[key] = value;
        }
      }
      return this;
    };

    Model.prototype.attributes = function() {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = this.constructor.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (key in this) {
          if (typeof this[key] === 'function') {
            result[key] = this[key]();
          } else {
            result[key] = this[key];
          }
        }
      }
      if (this.id) {
        result.id = this.id;
      }
      return result;
    };

    Model.prototype.eql = function(rec) {
      return !!(rec && rec.constructor === this.constructor && (rec.cid === this.cid) || (rec.id && rec.id === this.id));
    };

    Model.prototype.save = function(options) {
      var error, record;
      if (options == null) {
        options = {};
      }
      if (options.validate !== false) {
        error = this.validate();
        if (error) {
          this.trigger('error', error);
          return false;
        }
      }
      this.trigger('beforeSave', options);
      record = this.isNew() ? this.create(options) : this.update(options);
      this.stripCloneAttrs();
      this.trigger('save', options);
      return record;
    };

    Model.prototype.stripCloneAttrs = function() {
      var key, value;
      if (this.hasOwnProperty('cid')) {
        return;
      }
      for (key in this) {
        if (!__hasProp.call(this, key)) continue;
        value = this[key];
        if (this.constructor.attributes.indexOf(key) > -1) {
          delete this[key];
        }
      }
      return this;
    };

    Model.prototype.updateAttribute = function(name, value, options) {
      var atts;
      atts = {};
      atts[name] = value;
      return this.updateAttributes(atts, options);
    };

    Model.prototype.updateAttributes = function(atts, options) {
      this.load(atts);
      return this.save(options);
    };

    Model.prototype.changeID = function(id) {
      var records;
      records = this.constructor.records;
      records[id] = records[this.id];
      delete records[this.id];
      this.id = id;
      return this.save();
    };

    Model.prototype.destroy = function(options) {
      if (options == null) {
        options = {};
      }
      this.trigger('beforeDestroy', options);
      delete this.constructor.records[this.id];
      delete this.constructor.crecords[this.cid];
      this.destroyed = true;
      this.trigger('destroy', options);
      this.trigger('change', 'destroy', options);
      this.unbind();
      return this;
    };

    Model.prototype.dup = function(newRecord) {
      var result;
      result = new this.constructor(this.attributes());
      if (newRecord === false) {
        result.cid = this.cid;
      } else {
        delete result.id;
      }
      return result;
    };

    Model.prototype.clone = function() {
      return createObject(this);
    };

    Model.prototype.reload = function() {
      var original;
      if (this.isNew()) {
        return this;
      }
      original = this.constructor.find(this.id);
      this.load(original.attributes());
      return original;
    };

    Model.prototype.toJSON = function() {
      return this.attributes();
    };

    Model.prototype.toString = function() {
      return "<" + this.constructor.className + " (" + (JSON.stringify(this)) + ")>";
    };

    Model.prototype.fromForm = function(form) {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = $(form).serializeArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        result[key.name] = key.value;
      }
      return this.load(result);
    };

    Model.prototype.exists = function() {
      return this.id && this.id in this.constructor.records;
    };

    Model.prototype.update = function(options) {
      var clone, records;
      this.trigger('beforeUpdate', options);
      records = this.constructor.records;
      records[this.id].load(this.attributes());
      clone = records[this.id].clone();
      clone.trigger('update', options);
      clone.trigger('change', 'update', options);
      return clone;
    };

    Model.prototype.create = function(options) {
      var clone, record;
      this.trigger('beforeCreate', options);
      if (!this.id) {
        this.id = this.cid;
      }
      record = this.dup(false);
      this.constructor.records[this.id] = record;
      this.constructor.crecords[this.cid] = record;
      clone = record.clone();
      clone.trigger('create', options);
      clone.trigger('change', 'create', options);
      return clone;
    };

    Model.prototype.bind = function(events, callback) {
      var binder, unbinder,
        _this = this;
      this.constructor.bind(events, binder = function(record) {
        if (record && _this.eql(record)) {
          return callback.apply(_this, arguments);
        }
      });
      this.constructor.bind('unbind', unbinder = function(record) {
        if (record && _this.eql(record)) {
          _this.constructor.unbind(events, binder);
          return _this.constructor.unbind('unbind', unbinder);
        }
      });
      return binder;
    };

    Model.prototype.one = function(events, callback) {
      var binder,
        _this = this;
      return binder = this.bind(events, function() {
        _this.constructor.unbind(events, binder);
        return callback.apply(_this, arguments);
      });
    };

    Model.prototype.trigger = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.splice(1, 0, this);
      return (_ref = this.constructor).trigger.apply(_ref, args);
    };

    Model.prototype.unbind = function() {
      return this.trigger('unbind');
    };

    return Model;

  })(Module);

  Controller = (function(_super) {

    __extends(Controller, _super);

    Controller.include(Events);

    Controller.include(Log);

    Controller.prototype.eventSplitter = /^(\S+)\s*(.*)$/;

    Controller.prototype.tag = 'div';

    function Controller(options) {
      this.release = __bind(this.release, this);

      var key, value, _ref;
      this.options = options;
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      if (!this.el) {
        this.el = document.createElement(this.tag);
      }
      this.el = $(this.el);
      this.$el = this.el;
      if (this.className) {
        this.el.addClass(this.className);
      }
      if (this.attributes) {
        this.el.attr(this.attributes);
      }
      if (!this.events) {
        this.events = this.constructor.events;
      }
      if (!this.elements) {
        this.elements = this.constructor.elements;
      }
      if (this.events) {
        this.delegateEvents(this.events);
      }
      if (this.elements) {
        this.refreshElements();
      }
      Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.release = function() {
      this.trigger('release');
      this.el.remove();
      return this.unbind();
    };

    Controller.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    Controller.prototype.delegateEvents = function(events) {
      var eventName, key, match, method, selector, _results,
        _this = this;
      _results = [];
      for (key in events) {
        method = events[key];
        if (typeof method === 'function') {
          method = (function(method) {
            return function() {
              method.apply(_this, arguments);
              return true;
            };
          })(method);
        } else {
          if (!this[method]) {
            throw new Error("" + method + " doesn't exist");
          }
          method = (function(method) {
            return function() {
              _this[method].apply(_this, arguments);
              return true;
            };
          })(method);
        }
        match = key.match(this.eventSplitter);
        eventName = match[1];
        selector = match[2];
        if (selector === '') {
          _results.push(this.el.bind(eventName, method));
        } else {
          _results.push(this.el.delegate(selector, eventName, method));
        }
      }
      return _results;
    };

    Controller.prototype.refreshElements = function() {
      var key, value, _ref, _results;
      _ref = this.elements;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this[value] = this.$(key));
      }
      return _results;
    };

    Controller.prototype.delay = function(func, timeout) {
      return setTimeout(this.proxy(func), timeout || 0);
    };

    Controller.prototype.html = function(element) {
      this.el.html(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.append = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).append.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.appendTo = function(element) {
      this.el.appendTo(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.prepend = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).prepend.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.replace = function(element) {
      var previous, _ref;
      _ref = [this.el, $(element.el || element)], previous = _ref[0], this.el = _ref[1];
      previous.replaceWith(this.el);
      this.delegateEvents(this.events);
      this.refreshElements();
      return this.el;
    };

    return Controller;

  })(Module);

  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
    return element;
  };

  createObject = Object.create || function(o) {
    var Func;
    Func = function() {};
    Func.prototype = o;
    return new Func();
  };

  isArray = function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };

  isBlank = function(value) {
    var key;
    if (!value) {
      return true;
    }
    for (key in value) {
      return false;
    }
    return true;
  };

  makeArray = function(args) {
    return Array.prototype.slice.call(args, 0);
  };

  Spine = this.Spine = {};

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine;
  }

  Spine.version = '1.0.9';

  Spine.isArray = isArray;

  Spine.isBlank = isBlank;

  Spine.$ = $;

  Spine.Events = Events;

  Spine.Log = Log;

  Spine.Module = Module;

  Spine.Controller = Controller;

  Spine.Model = Model;

  Module.extend.call(Spine, Events);

  Module.create = Module.sub = Controller.create = Controller.sub = Model.sub = function(instances, statics) {
    var Result;
    Result = (function(_super) {

      __extends(Result, _super);

      function Result() {
        return Result.__super__.constructor.apply(this, arguments);
      }

      return Result;

    })(this);
    if (instances) {
      Result.include(instances);
    }
    if (statics) {
      Result.extend(statics);
    }
    if (typeof Result.unbind === "function") {
      Result.unbind();
    }
    return Result;
  };

  Model.setup = function(name, attributes) {
    var Instance;
    if (attributes == null) {
      attributes = [];
    }
    Instance = (function(_super) {

      __extends(Instance, _super);

      function Instance() {
        return Instance.__super__.constructor.apply(this, arguments);
      }

      return Instance;

    })(this);
    Instance.configure.apply(Instance, [name].concat(__slice.call(attributes)));
    return Instance;
  };

  Spine.Class = Module;

}).call(this);
}, "spine.mobile/node_modules/spine/lib/manager": function(exports, require, module) {// Generated by CoffeeScript 1.4.0
(function() {
  var $, Spine,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  Spine.Manager = (function(_super) {

    __extends(Manager, _super);

    Manager.include(Spine.Events);

    function Manager() {
      this.controllers = [];
      this.bind('change', this.change);
      this.add.apply(this, arguments);
    }

    Manager.prototype.add = function() {
      var cont, controllers, _i, _len, _results;
      controllers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        cont = controllers[_i];
        _results.push(this.addOne(cont));
      }
      return _results;
    };

    Manager.prototype.addOne = function(controller) {
      var _this = this;
      controller.bind('active', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.trigger.apply(_this, ['change', controller].concat(__slice.call(args)));
      });
      controller.bind('release', function() {
        return _this.controllers.splice(_this.controllers.indexOf(controller), 1);
      });
      return this.controllers.push(controller);
    };

    Manager.prototype.deactivate = function() {
      return this.trigger.apply(this, ['change', false].concat(__slice.call(arguments)));
    };

    Manager.prototype.change = function() {
      var args, cont, current, _i, _len, _ref, _results;
      current = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        if (cont === current) {
          _results.push(cont.activate.apply(cont, args));
        } else {
          _results.push(cont.deactivate.apply(cont, args));
        }
      }
      return _results;
    };

    return Manager;

  })(Spine.Module);

  Spine.Controller.include({
    active: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (typeof args[0] === 'function') {
        this.bind('active', args[0]);
      } else {
        args.unshift('active');
        this.trigger.apply(this, args);
      }
      return this;
    },
    isActive: function() {
      return this.el.hasClass('active');
    },
    activate: function() {
      this.el.addClass('active');
      return this;
    },
    deactivate: function() {
      this.el.removeClass('active');
      return this;
    }
  });

  Spine.Stack = (function(_super) {

    __extends(Stack, _super);

    Stack.prototype.controllers = {};

    Stack.prototype.routes = {};

    Stack.prototype.className = 'spine stack';

    function Stack() {
      var key, value, _fn, _ref, _ref1,
        _this = this;
      Stack.__super__.constructor.apply(this, arguments);
      this.manager = new Spine.Manager;
      _ref = this.controllers;
      for (key in _ref) {
        value = _ref[key];
        if (this[key] != null) {
          throw Error("'@" + key + "' already assigned - choose a different name");
        }
        this[key] = new value({
          stack: this
        });
        this.add(this[key]);
      }
      _ref1 = this.routes;
      _fn = function(key, value) {
        var callback;
        if (typeof value === 'function') {
          callback = value;
        }
        callback || (callback = function() {
          var _ref2;
          return (_ref2 = _this[value]).active.apply(_ref2, arguments);
        });
        return _this.route(key, callback);
      };
      for (key in _ref1) {
        value = _ref1[key];
        _fn(key, value);
      }
      if (this["default"]) {
        this[this["default"]].active();
      }
    }

    Stack.prototype.add = function(controller) {
      this.manager.add(controller);
      return this.append(controller);
    };

    return Stack;

  })(Spine.Controller);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine.Manager;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports.Stack = Spine.Stack;
  }

}).call(this);
}, "spine.mobile/lib/touch": function(exports, require, module) {(function() {
  var $, m, parentIfText, swipeDirection, touch, types, _fn, _i, _len;
  $ = require('spine').$;
  $.support.touch = 'ontouchstart' in window;
  touch = {};
  parentIfText = function(node) {
    if ('tagName' in node) {
      return node;
    } else {
      return node.parentNode;
    }
  };
  swipeDirection = function(x1, x2, y1, y2) {
    var xDelta, yDelta;
    xDelta = Math.abs(x1 - x2);
    yDelta = Math.abs(y1 - y2);
    if (xDelta >= yDelta) {
      if (x1 - x2 > 0) {
        return 'Left';
      } else {
        return 'Right';
      }
    } else {
      if (y1 - y2 > 0) {
        return 'Up';
      } else {
        return 'Down';
      }
    }
  };
  $(function() {
    return $('body').bind('touchstart', function(e) {
      var delta, now;
      e = e.originalEvent;
      now = Date.now();
      delta = now - (touch.last || now);
      touch.target = parentIfText(e.touches[0].target);
      touch.x1 = e.touches[0].pageX;
      touch.y1 = e.touches[0].pageY;
      return touch.last = now;
    }).bind('touchmove', function(e) {
      e = e.originalEvent;
      touch.x2 = e.touches[0].pageX;
      return touch.y2 = e.touches[0].pageY;
    }).bind('touchend', function(e) {
      e = e.originalEvent;
      if (touch.x2 > 0 || touch.y2 > 0) {
        (Math.abs(touch.x1 - touch.x2) > 30 || Math.abs(touch.y1 - touch.y2) > 30) && $(touch.target).trigger('swipe') && $(touch.target).trigger('swipe' + (swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2)));
        return touch.x1 = touch.x2 = touch.y1 = touch.y2 = touch.last = 0;
      } else if ('last' in touch) {
        $(touch.target).trigger('tap');
        return touch = {};
      }
    }).bind('touchcancel', function(e) {
      return touch = {};
    });
  });
  if ($.support.touch) {
    $('body').bind('click', function(e) {
      return e.preventDefault();
    });
  } else {
    $(function() {
      return $('body').bind('click', function(e) {
        return $(e.target).trigger('tap');
      });
    });
  }
  types = ['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown', 'tap'];
  _fn = function(m) {
    return $.fn[m] = function(callback) {
      return this.bind(m, callback);
    };
  };
  for (_i = 0, _len = types.length; _i < _len; _i++) {
    m = types[_i];
    _fn(m);
  }
}).call(this);
}, "spine.mobile/lib/stage": function(exports, require, module) {(function() {
  var $, Spine, Stage, globalManager;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }, __slice = Array.prototype.slice, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  Spine = require('spine');
  $ = Spine.$;
  globalManager = new Spine.Manager;
  Stage = (function() {
    __extends(Stage, Spine.Controller);
    Stage.globalManager = function() {
      return globalManager;
    };
    Stage.globalStage = function() {
      return this.globalManager().controllers[0];
    };
    Stage.prototype.effectDefaults = {
      duration: 450,
      easing: 'cubic-bezier(.25, .1, .25, 1)'
    };
    Stage.prototype.effectOptions = function(options) {
      if (options == null) {
        options = {};
      }
      return $.extend({}, this.effectDefaults, options);
    };
    Stage.prototype.viewport = true;
    function Stage() {
      Stage.__super__.constructor.apply(this, arguments);
      this.el.addClass('stage');
      this.header = $('<header />');
      this.content = $('<article />');
      this.footer = $('<footer />');
      if (this.viewport) {
        this.content.addClass('viewport');
      }
      this.el.append(this.header, this.content, this.footer);
      if (this.global) {
        globalManager.add(this);
      }
    }
    Stage.prototype.append = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      return (_ref = this.content).append.apply(_ref, elements);
    };
    Stage.prototype.html = function() {
      this.content.html.apply(this.content, arguments);
      this.refreshElements();
      return this.content;
    };
    Stage.prototype.add = function() {
      var panels, _ref;
      panels = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.manager || (this.manager = new Spine.Manager);
      (_ref = this.manager).add.apply(_ref, panels);
      return this.append.apply(this, panels);
    };
    Stage.prototype.activate = function(params) {
      var effect;
      if (params == null) {
        params = {};
      }
      effect = params.transition || params.trans;
      if (effect) {
        return this.effects[effect].apply(this);
      } else {
        return this.el.addClass('active');
      }
    };
    Stage.prototype.deactivate = function(params) {
      var effect;
      if (params == null) {
        params = {};
      }
      if (!this.isActive()) {
        return;
      }
      effect = params.transition || params.trans;
      if (effect) {
        return this.reverseEffects[effect].apply(this);
      } else {
        return this.el.removeClass('active');
      }
    };
    Stage.prototype.isActive = function() {
      return this.el.hasClass('active');
    };
    Stage.prototype.effects = {
      left: function() {
        this.el.addClass('active');
        return this.el.gfxSlideIn(this.effectOptions({
          direction: 'left'
        }));
      },
      right: function() {
        this.el.addClass('active');
        return this.el.gfxSlideIn(this.effectOptions({
          direction: 'right'
        }));
      }
    };
    Stage.prototype.reverseEffects = {
      left: function() {
        this.el.gfxSlideOut(this.effectOptions({
          direction: 'right'
        }));
        return this.el.queueNext(__bind(function() {
          return this.el.removeClass('active');
        }, this));
      },
      right: function() {
        this.el.gfxSlideOut(this.effectOptions({
          direction: 'left'
        }));
        return this.el.queueNext(__bind(function() {
          return this.el.removeClass('active');
        }, this));
      }
    };
    return Stage;
  })();
  Stage.Global = (function() {
    __extends(Global, Stage);
    function Global() {
      Global.__super__.constructor.apply(this, arguments);
    }
    Global.prototype.global = true;
    return Global;
  })();
  (typeof module !== "undefined" && module !== null ? module.exports = Stage : void 0) || (this.Stage = Stage);
}).call(this);
}, "spine.mobile/lib/panel": function(exports, require, module) {(function() {
  var $, Gfx, Panel, Stage;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  $ = Spine.$;
  Gfx = require('gfx');
  Stage = require('./stage');
  Panel = (function() {
    __extends(Panel, Stage);
    Panel.prototype.title = false;
    Panel.prototype.viewport = false;
    function Panel() {
      var _ref, _ref2;
      Panel.__super__.constructor.apply(this, arguments);
      this.el.removeClass('stage').addClass('panel');
      this.header.append($('<h2 />'));
      if (this.title) {
        this.setTitle(this.title);
      }
      if ((_ref = this.stage) == null) {
        this.stage = Stage.globalStage();
      }
      if ((_ref2 = this.stage) != null) {
        _ref2.add(this);
      }
    }
    Panel.prototype.setTitle = function(title) {
      if (title == null) {
        title = '';
      }
      return this.header.find('h2:first').html(title);
    };
    Panel.prototype.addButton = function(text, callback) {
      var button;
      if (typeof callback === 'string') {
        callback = this[callback];
      }
      button = $('<button />').text(text);
      button.tap(this.proxy(callback));
      this.header.append(button);
      return button;
    };
    Panel.prototype.activate = function(params) {
      var effect;
      if (params == null) {
        params = {};
      }
      effect = params.transition || params.trans;
      if (effect) {
        return this.effects[effect].apply(this);
      } else {
        this.content.add(this.header).show();
        return this.el.addClass('active');
      }
    };
    Panel.prototype.deactivate = function(params) {
      var effect;
      if (params == null) {
        params = {};
      }
      if (!this.isActive()) {
        return;
      }
      effect = params.transition || params.trans;
      if (effect) {
        return this.reverseEffects[effect].apply(this);
      } else {
        return this.el.removeClass('active');
      }
    };
    Panel.prototype.effects = {
      left: function() {
        this.el.addClass('active');
        this.content.gfxSlideIn(this.effectOptions({
          direction: 'left'
        }));
        return this.header.gfxSlideIn(this.effectOptions({
          direction: 'left',
          fade: true,
          distance: 50
        }));
      },
      right: function() {
        this.el.addClass('active');
        this.content.gfxSlideIn(this.effectOptions({
          direction: 'right'
        }));
        return this.header.gfxSlideIn(this.effectOptions({
          direction: 'right',
          fade: true,
          distance: 50
        }));
      }
    };
    Panel.prototype.reverseEffects = {
      left: function() {
        this.content.gfxSlideOut(this.effectOptions({
          direction: 'right'
        }));
        this.header.gfxSlideOut(this.effectOptions({
          direction: 'right',
          fade: true,
          distance: 50
        }));
        return this.content.queueNext(__bind(function() {
          return this.el.removeClass('active');
        }, this));
      },
      right: function() {
        this.content.gfxSlideOut(this.effectOptions({
          direction: 'left'
        }));
        this.header.gfxSlideOut(this.effectOptions({
          direction: 'left',
          fade: true,
          distance: 50
        }));
        return this.content.queueNext(__bind(function() {
          return this.el.removeClass('active');
        }, this));
      }
    };
    return Panel;
  })();
  (typeof module !== "undefined" && module !== null ? module.exports = Panel : void 0) || (this.Panel = Panel);
}).call(this);
}, "common/activity-indicator": function(exports, require, module) {(function() {
  var ActivityIndicator;

  ActivityIndicator = (function() {
    ActivityIndicator.prototype.settings = {
      lines: 13,
      length: 6,
      width: 2,
      radius: 7,
      corners: 1,
      rotate: 0,
      direction: 1,
      color: '#000',
      speed: 1,
      trail: 60,
      shadow: false,
      hwaccel: false,
      className: 'spinner',
      zIndex: 2e9,
      top: 'auto',
      left: 'auto'
    };

    function ActivityIndicator(container) {
      this.container = container != null ? container : this._defaultContainer();
      this.spinner = new Spinner(this.settings);
      this.overlayContainer = document.createElement('div');
      this.overlayContainer.className = 'overlay-container';
      this.overlay = document.createElement('div');
      this.overlay.className = 'overlay';
      this.spinnerContainer = document.createElement('div');
      this.spinnerContainer.className = 'spinner-container';
    }

    ActivityIndicator.prototype._defaultContainer = function() {
      return document.getElementsByClassName('app')[0];
    };

    ActivityIndicator.prototype._preventDefault = function(event) {
      return event.preventDefault();
    };

    ActivityIndicator.prototype.show = function() {
      this.overlayContainer.appendChild(this.overlay);
      this.overlayContainer.appendChild(this.spinnerContainer);
      this.container.appendChild(this.overlayContainer);
      this.spinner.spin(this.spinnerContainer);
      return this.overlayContainer.addEventListener('touchmove', this._preventDefault);
    };

    ActivityIndicator.prototype.hide = function() {
      var ref;
      this.spinner.stop();
      return (ref = this.overlayContainer.parentNode) != null ? ref.removeChild(this.overlayContainer) : void 0;
    };

    return ActivityIndicator;

  })();

  module.exports = ActivityIndicator;

}).call(this);
}, "common/alarm/alarm-manager": function(exports, require, module) {(function() {
  var AlarmManager, AppointmentsCollection, SettingsManager, Utils;

  Utils = require('common/utils');

  SettingsManager = require('db/settings-manager');

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  AlarmManager = (function() {
    function AlarmManager() {}

    AlarmManager.API_PATH = Utils.isIOS() ? 'NotificationAlarm' : 'SBNotifier';

    AlarmManager.NAVIGATE_TO_APPOINTMENT_KEY = 'NAVIGATE_TO_APPOINTMENT';

    AlarmManager.currentApptScreen = null;

    AlarmManager._sendRequest = function(action, params) {
      var deferred;
      if (params == null) {
        params = [];
      }
      deferred = new $.Deferred();
      cordova.exec((function() {
        return deferred.resolve();
      }), (function() {
        return deferred.resolve();
      }), AlarmManager.API_PATH, action, params);
      return deferred.promise();
    };

    AlarmManager.scheduleNextVisits = function() {
      return AlarmManager._sendRequest('scheduleNextVisits');
    };

    AlarmManager.cancelNotification = function() {
      return AlarmManager._sendRequest('cancelNotification');
    };

    AlarmManager.loadCallReport = function() {
      return AlarmManager._appointmentId().then(function(apptId) {
        if (!apptId) {
          return;
        }
        return new AppointmentsCollection().fetchEntityById(apptId).then(function(appointment) {
          return AlarmManager._resetAppointmentId().then(function() {
            if (appointment) {
              return AlarmManager._openAppointmentScreen(apptId);
            }
          });
        });
      });
    };

    AlarmManager._openAppointmentScreen = function(apptId) {
      return setTimeout(function() {
        var AppointmentCardEdit, FullscreenStage, Stage;
        AlarmManager._dismissCurrentAppointmentScreen();
        AppointmentCardEdit = require('controllers/appointment-card/appointment-card-edit');
        FullscreenStage = require('controllers/base/stage/fullscreen-stage');
        Stage = require('controllers/base/stage/stage');
        AlarmManager.currentApptScreen = new FullscreenStage;
        AlarmManager.currentApptScreen.on('close', function() {
          return AlarmManager._dismissCurrentAppointmentScreen();
        });
        AlarmManager.currentApptScreen.setPanel(new AppointmentCardEdit(apptId));
        return AlarmManager.currentApptScreen.showInContext(app.mainController.main);
      }, 0);
    };

    AlarmManager._dismissCurrentAppointmentScreen = function() {
      if (AlarmManager.currentApptScreen) {
        AlarmManager.currentApptScreen.release();
        return AlarmManager.currentApptScreen = null;
      }
    };

    AlarmManager._appointmentId = function() {
      if (Utils.isIOS()) {
        return SettingsManager.getValueByKey(AlarmManager.NAVIGATE_TO_APPOINTMENT_KEY);
      } else {
        return $.when(window.callReportId);
      }
    };

    AlarmManager._resetAppointmentId = function(apptId) {
      if (Utils.isIOS()) {
        return SettingsManager.setValueByKey(AlarmManager.NAVIGATE_TO_APPOINTMENT_KEY, '');
      } else {
        return $.when(function() {
          return window.callReportId = 0;
        });
      }
    };

    return AlarmManager;

  })();

  module.exports = AlarmManager;

}).call(this);
}, "common/alarm/alarm-settings-source": function(exports, require, module) {(function() {
  var AlarmSettings;

  AlarmSettings = (function() {
    function AlarmSettings() {}

    AlarmSettings.off = function() {
      return {
        id: 0,
        description: Locale.value('alarmSettingsPopup.Off'),
        value: -1
      };
    };

    AlarmSettings.minutes15 = function() {
      return {
        id: 1,
        description: Locale.value('alarmSettingsPopup.InFifteenMinutes'),
        value: 15
      };
    };

    AlarmSettings.minutes30 = function() {
      return {
        id: 2,
        description: Locale.value('alarmSettingsPopup.InThirtyMinutes'),
        value: 30
      };
    };

    AlarmSettings.hour1 = function() {
      return {
        id: 3,
        description: Locale.value('alarmSettingsPopup.InOneHour'),
        value: 60
      };
    };

    AlarmSettings.hour1_5 = function() {
      return {
        id: 4,
        description: Locale.value('alarmSettingsPopup.InOneHourThirtyMinutes'),
        value: 90
      };
    };

    AlarmSettings.hour2 = function() {
      return {
        id: 5,
        description: Locale.value('alarmSettingsPopup.InTwoHours'),
        value: 120
      };
    };

    AlarmSettings.resources = function() {
      return [this.off(), this.minutes15(), this.minutes30(), this.hour1(), this.hour1_5(), this.hour2()];
    };

    AlarmSettings.getItem = function(value) {
      var filteredItems;
      filteredItems = this.resources().filter(function(item) {
        return item.value === value;
      });
      return filteredItems[0];
    };

    return AlarmSettings;

  })();

  module.exports = AlarmSettings;

}).call(this);
}, "common/alarm/alarm": function(exports, require, module) {(function() {
  var Alarm, AlarmManager, AlarmSettings, ListPopup, SettingsManager;

  ListPopup = require('controls/popups/list-popup');

  SettingsManager = require('db/settings-manager');

  AlarmManager = require('common/alarm/alarm-manager');

  AlarmSettings = require('common/alarm/alarm-settings-source');

  Alarm = (function() {
    function Alarm() {}

    Alarm.currentAlarm = null;

    Alarm.popup = null;

    Alarm.selectedItemHandler = function(selectedItem) {
      var managerAction;
      Alarm.currentAlarm = selectedItem.model;
      managerAction = Alarm.currentAlarm.value ? AlarmManager.scheduleNextVisits : AlarmManager.cancelNotification;
      SettingsManager.setValueByKey('alarm', Alarm.currentAlarm.value).then(managerAction);
      return Alarm.popup.hide();
    };

    Alarm.showSettingsPopup = function() {
      Alarm.popup = new ListPopup(Alarm.settings, Alarm.currentAlarm, Locale.value('alarmSettingsPopup.Title'));
      Alarm.popup.bind('onPopupItemSelected', Alarm.selectedItemHandler);
      return Alarm.popup.show();
    };

    Alarm.setup = function() {
      this.settings = AlarmSettings.resources();
      if (!this.currentAlarm) {
        return SettingsManager.getValueByKey('alarm').then((function(_this) {
          return function(value) {
            _this.currentAlarm = value ? AlarmSettings.getItem(parseInt(value)) : _this.settings[0];
            return _this.showSettingsPopup();
          };
        })(this));
      } else {
        return this.showSettingsPopup();
      }
    };

    return Alarm;

  })();

  module.exports = Alarm;

}).call(this);
}, "common/android-view-resizer": function(exports, require, module) {(function() {
  var AndroidViewResizer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AndroidViewResizer = (function() {
    AndroidViewResizer.prototype.TIMEOUT_DELAY = 100;

    AndroidViewResizer.prototype.RESET_TIMEOUT = 100;

    AndroidViewResizer.prototype.resetTimeoutId = null;

    AndroidViewResizer.prototype.updateTimeoutId = null;

    AndroidViewResizer.prototype.blurTimeoutId = null;

    AndroidViewResizer.prototype.screenScale = null;

    function AndroidViewResizer(content, element) {
      this._resetViewHeight = bind(this._resetViewHeight, this);
      this._refresh = bind(this._refresh, this);
      this._updateViewHeight = bind(this._updateViewHeight, this);
      this._adaptWrapperSize = bind(this._adaptWrapperSize, this);
      this._getContentTopOffset = bind(this._getContentTopOffset, this);
      this._updateContentTopOffset = bind(this._updateContentTopOffset, this);
      this._onBlur = bind(this._onBlur, this);
      this._onFocus = bind(this._onFocus, this);
      this._refreshCenter = bind(this._refreshCenter, this);
      this._refreshScreen = bind(this._refreshScreen, this);
      this._isLessAndroid = bind(this._isLessAndroid, this);
      this._onTap = bind(this._onTap, this);
      this._getScrollableElement = bind(this._getScrollableElement, this);
      var $elements;
      this.screenScale = innerWidth / outerWidth;
      this.outerHeight = outerHeight;
      $elements = jQuery(element);
      this.content = jQuery(content);
      $elements.bind('blur', this._onBlur);
      $elements.bind('focus', this._onFocus);
      $elements.bind('input', this._updateContentTopOffset);
      $elements.bind('elasticUpdate', this._updateContentTopOffset);
      $elements.bind('tap', this._onTap);
    }

    AndroidViewResizer.prototype._getScrollableElement = function(element) {
      var elements, result;
      elements = [];
      while (element.tagName !== 'BODY') {
        element = element.parentNode;
        elements.push(element);
      }
      result = elements.filter(function(el) {
        return (el.scrollHeight !== el.clientHeight) && jQuery(el).css('overflow-y') === 'auto';
      });
      return result[0];
    };

    AndroidViewResizer.prototype._onTap = function(event) {
      event.stopPropagation();
      return this._refreshScreen();
    };

    AndroidViewResizer.prototype._isLessAndroid = function() {
      return this.content.attr('data-strict-height') && parseFloat(device.version) < 4.4;
    };

    AndroidViewResizer.prototype._refreshScreen = function() {
      if (this._isLessAndroid()) {
        return this.refreshTimeoutId = setTimeout(((function(_this) {
          return function() {
            document.body.style.display = 'none';
            return setTimeout((function() {
              document.body.style.display = '';
              return _this.isCentered = false;
            }), 0);
          };
        })(this)), 600);
      } else {
        return this._refreshCenter();
      }
    };

    AndroidViewResizer.prototype._refreshCenter = function() {
      return this.refreshTimeoutId = setTimeout(((function(_this) {
        return function() {
          return _this.isCentered = false;
        };
      })(this)), 100);
    };

    AndroidViewResizer.prototype._onFocus = function(event) {
      this.el = jQuery(event.target);
      if (this._isLessAndroid()) {
        this._refreshCenter();
      }
      clearTimeout(this.blurTimeoutId);
      clearTimeout(this.resetTimeoutId);
      this._updateViewHeight();
      return window.ar = this;
    };

    AndroidViewResizer.prototype._onBlur = function() {
      this.el = null;
      this.isCentered = null;
      this.resetTimeoutId = setTimeout(this._resetViewHeight, this.RESET_TIMEOUT);
      clearTimeout(this.updateTimeoutId);
      clearTimeout(this.refreshTimeoutId);
      return ghostClickPreventer.onBlur();
    };

    AndroidViewResizer.prototype._updateContentTopOffset = function() {
      if (this.scrollWrapper && this.scrollWrapper[0]) {
        return this.scrollWrapper.scrollTop(this._getContentTopOffset());
      }
    };

    AndroidViewResizer.prototype._getContentTopOffset = function() {
      var centerOffset;
      centerOffset = this.el[0].tagName === 'TEXTAREA' ? this.el.textareaHelper('caretPos').top : this.el.outerHeight() / 2;
      return this.scrollWrapper.scrollTop() + this.el.offset().top - this.scrollWrapper.height() / 2 + centerOffset - this.scrollWrapper.offset().top;
    };

    AndroidViewResizer.prototype._adaptWrapperSize = function(availViewHeight) {
      var wrapper;
      if (this.el) {
        wrapper = this.content.parent();
        if (!wrapper.hasClass('android-resized-wrapper')) {
          wrapper.addClass('android-resized-wrapper');
          wrapper.height(this.screenScale * (availViewHeight * 0.85));
          this.content.addClass('android-resized-content');
        }
        if (!this.isCentered) {
          if (this.content.attr('data-strict-height')) {
            this.scrollWrapper = jQuery(this._getScrollableElement(this.content[0]));
          } else {
            this.scrollWrapper = jQuery(this._getScrollableElement(this.el[0].parentNode));
          }
          this._updateContentTopOffset();
          return this.isCentered = true;
        }
      }
    };

    AndroidViewResizer.prototype._updateViewHeight = function() {
      return plugins.softKeyboard.getAvailScreenHeight((function(_this) {
        return function(availViewHeight) {
          _this.updateTimeoutId = setTimeout(_this._updateViewHeight, _this.TIMEOUT_DELAY);
          if (availViewHeight < _this.outerHeight) {
            return _this._adaptWrapperSize(availViewHeight);
          } else {
            return _this._resetViewHeight();
          }
        };
      })(this));
    };

    AndroidViewResizer.prototype._refresh = function() {
      if (!this.content.attr('data-strict-height')) {
        this.content.css('height', this.content.height() + 'px');
        return setTimeout(((function(_this) {
          return function() {
            return _this.content.css('height', '');
          };
        })(this)), 0);
      }
    };

    AndroidViewResizer.prototype._resetViewHeight = function() {
      var ref, wrapper;
      wrapper = this.content.parent();
      if (wrapper.hasClass('android-resized-wrapper')) {
        if ((ref = this.el) != null) {
          ref.blur();
        }
        this._refresh();
        wrapper.removeClass('android-resized-wrapper');
        wrapper.height('');
        return this.content.removeClass('android-resized-content');
      }
    };

    return AndroidViewResizer;

  })();

  module.exports = AndroidViewResizer;

}).call(this);
}, "common/attachment-managers/attachment-file-manager": function(exports, require, module) {(function() {
  var AttachmentFileManager, Utils;

  Utils = require('common/utils');

  AttachmentFileManager = (function() {
    function AttachmentFileManager() {}

    AttachmentFileManager._attachmentsRoot = 'attachments';

    AttachmentFileManager._temporaryRoot = 'temporary';

    AttachmentFileManager._processRootPath = function(url) {
      url = url.replace('file://localhost', '');
      if (!Utils.isIOS()) {
        url = url.replace('file://', '');
      }
      return url;
    };

    AttachmentFileManager._pathToTemporary = function() {
      return AttachmentFileManager._rootPath + "/" + AttachmentFileManager._temporaryRoot;
    };

    AttachmentFileManager._pathToAttachments = function() {
      return AttachmentFileManager._rootPath + "/" + AttachmentFileManager._attachmentsRoot;
    };

    AttachmentFileManager.extractFileName = function(filePath) {
      var regExp, regExpData;
      regExp = /Attachment\/(.*)\/Body/gim;
      regExpData = regExp.exec(filePath);
      if (regExpData) {
        return regExpData[1];
      } else {
        return filePath.replace(/\W/gim, "");
      }
    };

    AttachmentFileManager.extractFileExtension = function(fileName) {
      var regExp, regExpData;
      regExp = /\.([\w\d]+$)/gim;
      regExpData = regExp.exec(fileName);
      if (regExpData) {
        return regExpData[1];
      } else {
        return fileName.replace(/\W/gim, "");
      }
    };

    AttachmentFileManager.getFilePath = function(url, name, isPersistent) {
      var fileExt, fileName, filePath, rootDir;
      if (isPersistent == null) {
        isPersistent = true;
      }
      fileName = AttachmentFileManager.extractFileName(url);
      fileExt = AttachmentFileManager.extractFileExtension(name);
      rootDir = isPersistent ? AttachmentFileManager._pathToAttachments() : AttachmentFileManager._pathToTemporary();
      filePath = rootDir + "/" + fileName + "." + fileExt;
      return filePath;
    };

    AttachmentFileManager.moveToPersistent = function(sourcePath) {
      var deferred;
      sourcePath = AttachmentFileManager._processRootPath(sourcePath);
      deferred = new $.Deferred;
      AttachmentFileManager._rootEntry.getDirectory(AttachmentFileManager._pathToAttachments(), {
        create: true,
        exclusive: false
      }, function(attachmentsDirEntry) {
        return AttachmentFileManager._rootEntry.getFile(sourcePath, {
          create: false,
          exclusive: false
        }, function(fileEntry) {
          return fileEntry.moveTo(attachmentsDirEntry, fileEntry.name, deferred.resolve, deferred.reject);
        }, deferred.reject);
      }, deferred.reject);
      return deferred.promise();
    };

    AttachmentFileManager.fileExist = function(filePath) {
      var deferred;
      filePath = AttachmentFileManager._processRootPath(filePath);
      deferred = new $.Deferred;
      AttachmentFileManager._rootEntry.getFile(filePath, {
        create: false,
        exclusive: false
      }, deferred.resolve, deferred.reject);
      return deferred.promise();
    };

    AttachmentFileManager.removeFile = function(path) {
      var deferred;
      path = AttachmentFileManager._processRootPath(path);
      deferred = new $.Deferred;
      AttachmentFileManager._rootEntry.getFile(path, {
        create: false,
        exclusive: false
      }, function(fileEntry) {
        return fileEntry.remove(deferred.resolve, deferred.reject);
      }, deferred.reject);
      return deferred.promise();
    };

    AttachmentFileManager.removeFolder = function(path, onSuccess, onError) {
      var dirEntry;
      dirEntry = new DirectoryEntry(path, path);
      return dirEntry.removeRecursively(onSuccess, function(fileError) {
        if (fileError.code === 12 || fileError.code === 1) {
          return typeof onSuccess === "function" ? onSuccess() : void 0;
        } else {
          return typeof onError === "function" ? onError() : void 0;
        }
      });
    };

    AttachmentFileManager.wipeStorage = function() {
      var deferred;
      deferred = new $.Deferred;
      AttachmentFileManager.removeFolder(AttachmentFileManager._pathToAttachments(), deferred.resolve, deferred.reject);
      return deferred.promise();
    };

    if (window.requestFileSystem) {
      window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
        AttachmentFileManager._rootPath = AttachmentFileManager._processRootPath(fileSystem.root.toURL());
        return AttachmentFileManager._rootEntry = fileSystem.root;
      }, function(error) {
        return console.log(error);
      });
    } else {
      console.log('File system unavailable');
    }

    return AttachmentFileManager;

  })();

  module.exports = AttachmentFileManager;

}).call(this);
}, "common/attachment-managers/attachment-load-manager": function(exports, require, module) {(function() {
  var AttachmentLoadManager, AttachmentLoader;

  AttachmentLoader = require('common/attachment-managers/attachment-loader');

  AttachmentLoadManager = (function() {
    function AttachmentLoadManager() {}

    AttachmentLoadManager._queue = {};

    AttachmentLoadManager.getLoaderForAttachment = function(attachment) {
      var loader;
      if (!attachment) {
        return null;
      }
      loader = AttachmentLoadManager._queue[attachment.id];
      if (loader) {
        return loader;
      } else {
        return null;
      }
    };

    AttachmentLoadManager.getQueuedPresentations = function() {
      return Object.keys(AttachmentLoadManager._queue);
    };

    AttachmentLoadManager.queue = function(attachment, callbacks, fileManager) {
      var loader;
      loader = null;
      if (!AttachmentLoadManager._queue[attachment.id]) {
        loader = new AttachmentLoader(attachment, fileManager);
        ['onStateChange', 'onFail', 'onSuccess'].forEach(function(callbackName) {
          if (callbacks && callbacks[callbackName]) {
            loader[callbackName] = callbacks[callbackName];
          }
          if (callbackName !== 'onStateChange') {
            return loader[callbackName + "Load"] = function() {
              AttachmentLoadManager.dequeue(attachment);
              if (loader[callbackName]) {
                return loader[callbackName].apply(loader[callbackName], arguments);
              }
            };
          }
        });
        AttachmentLoadManager._queue[attachment.id] = loader;
      } else {
        console.log("AttachmentLoader " + attachment.id + " already queued!");
      }
      return loader;
    };

    AttachmentLoadManager.queueInvoke = function(attachment, callbacks, fileManager) {
      var loader;
      loader = AttachmentLoadManager.queue(attachment, callbacks, fileManager);
      if (loader) {
        loader.download();
      }
      return loader;
    };

    AttachmentLoadManager.dequeue = function(attachment) {
      var loader;
      loader = AttachmentLoadManager._queue[attachment.id];
      delete AttachmentLoadManager._queue[attachment.id];
      return loader;
    };

    AttachmentLoadManager.dequeueInvoke = function(attachment) {
      var loader;
      loader = AttachmentLoadManager.dequeue(attachment);
      if (!loader) {
        return null;
      }
      if (loader) {
        loader.abort();
      }
      return loader;
    };

    return AttachmentLoadManager;

  })();

  module.exports = AttachmentLoadManager;

}).call(this);
}, "common/attachment-managers/attachment-loader": function(exports, require, module) {(function() {
  var AttachmentFileManager, AttachmentLoader, SforceDataContext, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SforceDataContext = require('models/bll/sforce-data-context');

  AttachmentFileManager = require('common/attachment-managers/attachment-file-manager');

  Utils = require('common/utils');

  AttachmentLoader = (function() {
    AttachmentLoader.states = {
      ERROR: -1,
      INITED: 0,
      DOWNLOAD: 1,
      FINISHED: 2
    };

    function AttachmentLoader(attachment, fileManager) {
      this.attachment = attachment;
      this.fileManager = fileManager != null ? fileManager : AttachmentFileManager;
      this.abort = bind(this.abort, this);
      this.download = bind(this.download, this);
      this._successHandler = bind(this._successHandler, this);
      this._errorHandler = bind(this._errorHandler, this);
      this._progressChanged = bind(this._progressChanged, this);
      this._getRequestHeaders = bind(this._getRequestHeaders, this);
      this.status = AttachmentLoader.states.INITED;
      this.fileSize = this.attachment.bodyLength || 0;
      this.loadedSize = 0;
      this.sourceUrl = this.attachment.body;
      this.destPath = this.fileManager.getFilePath(this.attachment.body, this.attachment.title, false);
      this.locationPath = this.fileManager.getFilePath(this.attachment.body, this.attachment.title);
    }

    AttachmentLoader.prototype._getRequestHeaders = function(credentials) {
      return {
        headers: {
          "Authorization": "OAuth " + credentials.accessToken
        }
      };
    };

    AttachmentLoader.prototype._progressChanged = function(progress) {
      if (progress.total > 0) {
        this.fileSize = progress.total;
      }
      this.loadedSize = progress.loaded;
      return typeof this.onStateChange === "function" ? this.onStateChange(this.status, {
        current: this.loadedSize,
        total: this.fileSize
      }) : void 0;
    };

    AttachmentLoader.prototype._errorHandler = function(error) {
      this.status = AttachmentLoader.states.ERROR;
      this.fileManager.removeFile(this.destPath);
      if (!Utils.deviceIsOnline()) {
        error = {
          code: FileTransferError.CONNECTION_ERR
        };
      }
      return typeof this.onFailLoad === "function" ? this.onFailLoad(error) : void 0;
    };

    AttachmentLoader.prototype._successHandler = function(entry) {
      return this.fileManager.moveToPersistent(entry.fullPath).then((function(_this) {
        return function(entry) {
          _this.status = AttachmentLoader.states.FINISHED;
          _this.loadedSize = _this.fileSize;
          if (typeof _this.onStateChange === "function") {
            _this.onStateChange(_this.status, {
              current: _this.loadedSize,
              total: _this.fileSize
            });
          }
          return typeof _this.onSuccessLoad === "function" ? _this.onSuccessLoad(entry) : void 0;
        };
      })(this)).fail(this._errorHandler);
    };

    AttachmentLoader.prototype.download = function() {
      this.fileTransfer = new FileTransfer();
      return SforceDataContext.getAuthCredentials().then((function(_this) {
        return function(credentials) {
          var headers, url;
          headers = _this._getRequestHeaders(credentials);
          url = credentials.instanceUrl + _this.sourceUrl;
          _this.status = AttachmentLoader.states.DOWNLOAD;
          _this.fileTransfer.onprogress = _this._progressChanged;
          return _this.fileTransfer.download(url, _this.destPath, _this._successHandler, _this._errorHandler, true, headers);
        };
      })(this));
    };

    AttachmentLoader.prototype.abort = function() {
      return this.fileTransfer.abort();
    };

    return AttachmentLoader;

  })();

  module.exports = AttachmentLoader;

}).call(this);
}, "common/attachment-managers/attachments-manager": function(exports, require, module) {(function() {
  var AttachmentsManager, Spine;

  Spine = require('spine');

  AttachmentsManager = (function() {
    function AttachmentsManager() {}

    AttachmentsManager._cordovaRef = window.PhoneGap || window.Cordova || window.cordova;

    AttachmentsManager._exec = function(action, params) {
      var deferred;
      deferred = new $.Deferred();
      AttachmentsManager._cordovaRef.exec((function(result) {
        return deferred.resolve(result);
      }), (function(error) {
        return deferred.reject(error);
      }), 'AttachmentsViewer', action, [params]);
      return deferred.promise();
    };

    AttachmentsManager.open = function(path, mimeType) {
      console.log(path, mimeType);
      return AttachmentsManager._exec('open', {
        filePath: path,
        mimeType: mimeType || ''
      });
    };

    return AttachmentsManager;

  })();

  module.exports = AttachmentsManager;

}).call(this);
}, "common/attachment-managers/photo-attachment-file-manager": function(exports, require, module) {(function() {
  var PhotoAttachmentFileManager, Utils;

  Utils = require('common/utils');

  PhotoAttachmentFileManager = (function() {
    function PhotoAttachmentFileManager() {}

    PhotoAttachmentFileManager._attachmentsRoot = 'trade';

    PhotoAttachmentFileManager._photoFolder = 'photos';

    PhotoAttachmentFileManager._temporaryRoot = 'temporary';

    PhotoAttachmentFileManager._processRootPath = function(url) {
      url = url.replace('file://localhost', '');
      if (!Utils.isIOS()) {
        url = url.replace('file://', '');
      }
      return url;
    };

    PhotoAttachmentFileManager._pathToTemporary = function() {
      return PhotoAttachmentFileManager._rootPath + "/" + PhotoAttachmentFileManager._temporaryRoot;
    };

    PhotoAttachmentFileManager._pathToAttachmentsRoot = function() {
      return PhotoAttachmentFileManager._rootPath + "/" + PhotoAttachmentFileManager._attachmentsRoot;
    };

    PhotoAttachmentFileManager._pathToAttachments = function() {
      return PhotoAttachmentFileManager._rootPath + "/" + PhotoAttachmentFileManager._attachmentsRoot + "/" + PhotoAttachmentFileManager._photoFolder;
    };

    PhotoAttachmentFileManager.extractFileName = function(filePath) {
      var regExp, regExpData;
      regExp = /Attachment\/(.*)\/Body/gim;
      regExpData = regExp.exec(filePath);
      if (regExpData) {
        return regExpData[1];
      } else {
        return filePath.replace(/\W/gim, "");
      }
    };

    PhotoAttachmentFileManager.extractFileExtension = function(fileName) {
      var regExp, regExpData;
      regExp = /\.([\w\d]+$)/gim;
      regExpData = regExp.exec(fileName);
      if (regExpData) {
        return regExpData[1];
      } else {
        return fileName.replace(/\W/gim, "");
      }
    };

    PhotoAttachmentFileManager.getFilePath = function(url, name, isPersistent) {
      var fileExt, fileName, filePath, rootDir;
      if (isPersistent == null) {
        isPersistent = true;
      }
      fileName = PhotoAttachmentFileManager.extractFileName(url);
      fileExt = PhotoAttachmentFileManager.extractFileExtension(name);
      rootDir = isPersistent ? PhotoAttachmentFileManager._pathToAttachments() : PhotoAttachmentFileManager._pathToTemporary();
      filePath = rootDir + "/" + fileName + "." + fileExt;
      return filePath;
    };

    PhotoAttachmentFileManager.moveToPersistent = function(sourcePath) {
      var deferred;
      sourcePath = PhotoAttachmentFileManager._processRootPath(sourcePath);
      deferred = new $.Deferred;
      PhotoAttachmentFileManager._rootEntry.getDirectory(PhotoAttachmentFileManager._pathToAttachmentsRoot(), {
        create: true,
        exclusive: false
      }, function(attachmentsRootDirEntry) {
        return PhotoAttachmentFileManager._rootEntry.getDirectory(PhotoAttachmentFileManager._pathToAttachments(), {
          create: true,
          exclusive: false
        }, function(attachmentsDirEntry) {
          return PhotoAttachmentFileManager._rootEntry.getFile(sourcePath, {
            create: false,
            exclusive: false
          }, function(fileEntry) {
            return fileEntry.moveTo(attachmentsDirEntry, fileEntry.name, deferred.resolve, deferred.reject);
          }, deferred.reject);
        }, deferred.reject);
      }, deferred.reject);
      return deferred.promise();
    };

    PhotoAttachmentFileManager.fileExist = function(filePath) {
      var deferred;
      filePath = PhotoAttachmentFileManager._processRootPath(filePath);
      deferred = new $.Deferred;
      PhotoAttachmentFileManager._rootEntry.getFile(filePath, {
        create: false,
        exclusive: false
      }, deferred.resolve, deferred.reject);
      return deferred.promise();
    };

    PhotoAttachmentFileManager.removeFile = function(path) {
      var deferred;
      path = PhotoAttachmentFileManager._processRootPath(path);
      deferred = new $.Deferred;
      PhotoAttachmentFileManager._rootEntry.getFile(path, {
        create: false,
        exclusive: false
      }, function(fileEntry) {
        return fileEntry.remove(deferred.resolve, deferred.reject);
      }, deferred.reject);
      return deferred.promise();
    };

    PhotoAttachmentFileManager.removeFolder = function(path, onSuccess, onError) {
      var dirEntry;
      dirEntry = new DirectoryEntry(path, path);
      return dirEntry.removeRecursively(onSuccess, function(fileError) {
        if (fileError.code === 12 || fileError.code === 1) {
          return typeof onSuccess === "function" ? onSuccess() : void 0;
        } else {
          return typeof onError === "function" ? onError() : void 0;
        }
      });
    };

    PhotoAttachmentFileManager.wipeStorage = function() {
      var deferred;
      deferred = new $.Deferred;
      PhotoAttachmentFileManager.removeFolder(PhotoAttachmentFileManager._pathToAttachmentsRoot(), deferred.resolve, deferred.reject);
      return deferred.promise();
    };

    if (window.requestFileSystem) {
      window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
        PhotoAttachmentFileManager._rootPath = PhotoAttachmentFileManager._processRootPath(fileSystem.root.toURL());
        return PhotoAttachmentFileManager._rootEntry = fileSystem.root;
      }, function(error) {
        return console.log(error);
      });
    } else {
      console.log('File system unavailable');
    }

    return PhotoAttachmentFileManager;

  })();

  module.exports = PhotoAttachmentFileManager;

}).call(this);
}, "common/device-manager": function(exports, require, module) {(function() {
  var DeviceManager, Spine;

  Spine = require('spine');

  DeviceManager = (function() {
    function DeviceManager() {}

    DeviceManager.device = window.device;

    window.plugins.appVersion(function(versionInfo) {
      return DeviceManager._appVersion = versionInfo.appVersion;
    });

    DeviceManager.deviceModel = function() {
      if (this.device) {
        return this.device.model;
      }
      return 'Mobile device';
    };

    DeviceManager.osVersion = function() {
      if (this.device) {
        return this.device.platform + " " + this.device.version;
      }
      return '1.0';
    };

    DeviceManager.appVersion = function() {
      if (this._appVersion) {
        return this._appVersion;
      }
      return '1.0';
    };

    DeviceManager.deviceId = function() {
      if (this.device) {
        return this.device.uuid;
      }
      return '40:F3:08:62:D4:2D';
    };

    return DeviceManager;

  })();

  module.exports = DeviceManager;

}).call(this);
}, "common/drag-and-drop": function(exports, require, module) {(function() {
  var DragAndDrop,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DragAndDrop = (function() {
    DragAndDrop.prototype.START_DELAY = 500;

    DragAndDrop.prototype.SCROLL_DIFF = 10;

    DragAndDrop.prototype.AUTO_SCROLL_DELAY = 30;

    DragAndDrop.prototype.timerId = null;

    DragAndDrop.prototype.scrollTimerId = null;

    function DragAndDrop(cellObject, areaElement, callbacks) {
      this.cellObject = cellObject;
      this.areaElement = areaElement;
      this.callbacks = callbacks;
      this.reset = bind(this.reset, this);
      this._removeTransition = bind(this._removeTransition, this);
      this._addTransition = bind(this._addTransition, this);
      this.refresh = bind(this.refresh, this);
      this._end = bind(this._end, this);
      this._move = bind(this._move, this);
      this._start = bind(this._start, this);
      this._setSizes = bind(this._setSizes, this);
      this._checkLimitAndRefresh = bind(this._checkLimitAndRefresh, this);
      this._checkRightBottom = bind(this._checkRightBottom, this);
      this._checkLeftTop = bind(this._checkLeftTop, this);
      this._scrollTop = bind(this._scrollTop, this);
      this._scrollDown = bind(this._scrollDown, this);
      this._stopEvent = bind(this._stopEvent, this);
      this._clearStartTimerId = bind(this._clearStartTimerId, this);
      this._bindOnScrollEvent = bind(this._bindOnScrollEvent, this);
      this._bindEvents = bind(this._bindEvents, this);
      this.element = this.cellObject.el;
      this.scrollWrapper = this.areaElement.parent();
      this._bindEvents();
      this.reset();
    }

    DragAndDrop.prototype._bindEvents = function() {
      this.element.bind(touchy.events.start, this._start.bind(this));
      this.element.bind(touchy.events.move, this._move.bind(this));
      this.element.bind(touchy.events.end, this._end.bind(this));
      this.element.bind("touchcancel", this._end.bind(this));
      return this._bindOnScrollEvent();
    };

    DragAndDrop.prototype._bindOnScrollEvent = function() {
      var $parent;
      $parent = this.areaElement.parent();
      return $parent.bind('scroll', this._clearStartTimerId);
    };

    DragAndDrop.prototype._clearStartTimerId = function() {
      return clearTimeout(this.timerId);
    };

    DragAndDrop.prototype._stopEvent = function(event) {
      return event.preventDefault();
    };

    DragAndDrop.prototype._scrollDown = function() {
      var limitDistance, maxScroll, scrollDiff;
      maxScroll = this.scrollWrapper.prop("scrollHeight") - this.limitHeight;
      clearTimeout(this.scrollTimerId);
      if (this.scrollWrapper.scrollTop() < maxScroll) {
        limitDistance = maxScroll - this.scrollWrapper.scrollTop();
        scrollDiff = limitDistance < this.SCROLL_DIFF ? limitDistance : this.SCROLL_DIFF;
        this.scrollWrapper.scrollTop(this.scrollWrapper.scrollTop() + scrollDiff);
        this.startPosition.y = this.startPosition.y - scrollDiff;
        this.movePosition.y = this.limitHeight - this.elBottom + this.scrollWrapper.scrollTop();
        this._checkRightBottom();
        return this.scrollTimerId = setTimeout(this._checkLimitAndRefresh, this.AUTO_SCROLL_DELAY);
      }
    };

    DragAndDrop.prototype._scrollTop = function() {
      var scrollDiff;
      clearTimeout(this.scrollTimerId);
      if (this.scrollWrapper.scrollTop() > 0) {
        scrollDiff = this.scrollWrapper.scrollTop() < this.SCROLL_DIFF ? this.scrollWrapper.scrollTop() : this.SCROLL_DIFF;
        this.scrollWrapper.scrollTop(this.scrollWrapper.scrollTop() - scrollDiff);
        this.startPosition.y = this.startPosition.y + scrollDiff;
        this.movePosition.y = this.scrollWrapper.scrollTop() - this.elTop;
        this._checkLeftTop();
        return this.scrollTimerId = setTimeout(this._checkLimitAndRefresh, this.AUTO_SCROLL_DELAY);
      }
    };

    DragAndDrop.prototype._checkLeftTop = function() {
      var diffX, diffY;
      diffX = this.elLeft + this.movePosition.x;
      diffY = this.elTop + this.movePosition.y;
      if (diffX < 0) {
        this.movePosition.x = -this.elLeft;
      }
      if (diffY < 0) {
        return this.movePosition.y = -this.elTop;
      }
    };

    DragAndDrop.prototype._checkRightBottom = function() {
      var diffX, diffY;
      diffX = this.elRight + this.movePosition.x;
      diffY = this.elBottom + this.movePosition.y;
      if (diffX > this.areaWidth) {
        this.movePosition.x = this.areaWidth - this.elRight;
      }
      if (diffY > this.areaHeight) {
        return this.movePosition.y = this.areaHeight - this.elBottom;
      }
    };

    DragAndDrop.prototype._checkLimitAndRefresh = function() {
      this._checkLeftTop();
      this._checkRightBottom();
      if ((this.elTop - this.scrollWrapper.scrollTop() + this.movePosition.y) <= 0) {
        this._scrollTop();
      }
      if ((this.elBottom - this.scrollWrapper.scrollTop() + this.movePosition.y) >= this.limitHeight) {
        this._scrollDown();
      }
      return this.refresh(2);
    };

    DragAndDrop.prototype._setSizes = function() {
      this.areaWidth = this.areaElement.outerWidth();
      this.areaHeight = this.areaElement.outerHeight();
      this.elLeft = this.element.prop('offsetLeft');
      this.elTop = this.element.prop('offsetTop');
      this.elRight = this.elLeft + this.element.outerWidth();
      this.elBottom = this.elTop + this.element.outerHeight();
      return this.limitHeight = this.areaElement.parent().outerHeight();
    };

    DragAndDrop.prototype._start = function(event) {
      var $parent;
      if (this.isBlocked || event.originalEvent.touches.length > 1) {
        return;
      }
      $parent = this.areaElement.parent();
      this.startPosition = {
        x: event.originalEvent.changedTouches[0].pageX,
        y: event.originalEvent.changedTouches[0].pageY
      };
      return this.timerId = setTimeout(((function(_this) {
        return function() {
          var ref;
          _this.isStart = true;
          _this._setSizes();
          return (ref = _this.callbacks) != null ? ref.onStart(_this) : void 0;
        };
      })(this)), this.START_DELAY);
    };

    DragAndDrop.prototype._move = function(event) {
      var diffX, diffY, ref;
      diffX = event.originalEvent.changedTouches[0].pageX - this.startPosition.x;
      diffY = event.originalEvent.changedTouches[0].pageY - this.startPosition.y;
      if (Math.abs(diffX) > 15 || Math.abs(diffY) > 15) {
        this._clearStartTimerId();
      }
      if ((!this.isStart) || (event.originalEvent.touches.length > 1)) {
        return;
      }
      this._stopEvent(event);
      this.movePosition = {
        x: diffX,
        y: diffY
      };
      this._checkLimitAndRefresh();
      return (ref = this.callbacks) != null ? ref.onMove(this) : void 0;
    };

    DragAndDrop.prototype._end = function(event) {
      var ref;
      this._stopEvent(event);
      clearTimeout(this.timerId);
      clearTimeout(this.scrollTimerId);
      if (this.isStart) {
        this.refresh();
        this.elementPosition = this._elementPosition;
      }
      this.isStart = false;
      return (ref = this.callbacks) != null ? ref.onEnd(this) : void 0;
    };

    DragAndDrop.prototype.refresh = function(zIndex) {
      this._elementPosition = {
        x: this.movePosition.x + this.elementPosition.x,
        y: this.movePosition.y + this.elementPosition.y
      };
      return this.element.css({
        "webkitTransform": "translate3d(" + this._elementPosition.x + "px, " + this._elementPosition.y + "px, " + (zIndex || 0) + "px)",
        "zIndex": zIndex || 1
      });
    };

    DragAndDrop.prototype._addTransition = function(duration) {
      this.element.css('webkitTransition', "-webkit-transform linear " + duration + "ms");
      this.element.bind('webkitTransitionEnd', this._removeTransition);
      return this.isBlocked = true;
    };

    DragAndDrop.prototype._removeTransition = function() {
      this.element.css('webkitTransition', '');
      this.element.unbind('webkitTransitionEnd', this._removeTransition);
      this.isBlocked = false;
      return this.refresh();
    };

    DragAndDrop.prototype.reset = function(duration) {
      this.movePosition = this.elementPosition = {
        x: 0,
        y: 0
      };
      if (duration) {
        this._addTransition(duration);
        this.refresh(2);
      } else {
        this.refresh();
      }
      return this.isBlocked = false;
    };

    return DragAndDrop;

  })();

  module.exports = DragAndDrop;

}).call(this);
}, "common/email-manager": function(exports, require, module) {(function() {
  var EmailManager, Spine;

  Spine = require('spine');

  EmailManager = (function() {
    function EmailManager() {}

    EmailManager._defaultEmail = 'abbottmobilelog@gmail.com';

    EmailManager._defaultResultCallback = function(result) {
      return console.log("Email sended with result: " + result);
    };

    EmailManager.sendMail = function(subject, content, recipient) {
      if (recipient == null) {
        recipient = EmailManager._defaultEmail;
      }
      return window.plugins.emailComposer.showEmailComposer(subject, content, [recipient], [], [], true, []);
    };

    EmailManager.sendMailAsync = function(subject, content, recipient, resultCallback) {
      if (recipient == null) {
        recipient = EmailManager._defaultEmail;
      }
      if (resultCallback == null) {
        resultCallback = EmailManager._defaultResultCallback;
      }
      return window.plugins.emailComposer.showEmailComposerWithCallback(resultCallback, subject, content, [recipient], [], [], true, []);
    };

    return EmailManager;

  })();

  module.exports = EmailManager;

}).call(this);
}, "common/events-simulator": function(exports, require, module) {(function() {
  var EventsSimulator,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EventsSimulator = (function() {
    function EventsSimulator(srcElement) {
      this.srcElement = srcElement;
      this.trigger = bind(this.trigger, this);
      this.onEnd = bind(this.onEnd, this);
      this.createTouchEvent = bind(this.createTouchEvent, this);
      this.getProp = bind(this.getProp, this);
      this.getElementByCooridantes = bind(this.getElementByCooridantes, this);
      this.target = null;
      Object.keys(touchy.events).forEach((function(_this) {
        return function(eventType) {
          return _this.srcElement.on(touchy.events[eventType], _this.trigger);
        };
      })(this));
    }

    EventsSimulator.prototype.getElementByCooridantes = function(event) {
      var el, evt;
      evt = touchy.isTouch ? event.changedTouches[0] : event;
      el = document.elementFromPoint(evt.clientX, evt.clientY);
      while (el.tagName === 'IFRAME') {
        el = el.contentWindow.document.elementFromPoint(evt.clientX, evt.clientY);
      }
      return el;
    };

    EventsSimulator.prototype.getProp = function(event, prop, target) {
      var touchList;
      touchList = _.map(event[prop], (function(_this) {
        return function(propItem) {
          return document.createTouch(window, target, propItem.identifier, propItem.pageX, propItem.pageY, propItem.screenX, propItem.screenY, propItem.clientX, propItem.clientY);
        };
      })(this));
      return document.createTouchList.apply(document, touchList);
    };

    EventsSimulator.prototype.createTouchEvent = function(eventType, originalEvent, target) {
      var changedTouches, evt, targetTouches, touches;
      evt = document.createEvent('TouchEvent');
      touches = this.getProp(originalEvent, 'touches', target);
      targetTouches = this.getProp(originalEvent, 'targetTouches', target);
      changedTouches = this.getProp(originalEvent, 'changedTouches', target);
      evt.initTouchEvent(touches, targetTouches, changedTouches, eventType, window, evt.clientX, evt.clientY, evt.clientX, evt.clientY, false, false, false, false);
      evt.clientX = originalEvent.clientX;
      evt.clientY = originalEvent.clientY;
      evt.pageX = originalEvent.pageX;
      evt.pageY = originalEvent.pageY;
      return evt;
    };

    EventsSimulator.prototype.onEnd = function() {
      var ref, reservedTags;
      reservedTags = ['SELECT', 'INPUT', 'TEXTAREA'];
      if (ref = this.target.tagName, indexOf.call(reservedTags, ref) >= 0) {
        return this.target.focus();
      }
    };

    EventsSimulator.prototype.trigger = function(event) {
      var evt;
      event = event.originalEvent;
      this.srcElement.hide();
      if (event.type === touchy.events.start) {
        this.target = this.getElementByCooridantes(event);
      }
      if (!this.target) {
        return;
      }
      evt = this.createTouchEvent(event.type, event, this.target);
      if (event.type === touchy.events.end) {
        this.onEnd();
      }
      this.target.dispatchEvent(evt);
      return this.srcElement.show();
    };

    return EventsSimulator;

  })();

  module.exports = EventsSimulator;

}).call(this);
}, "common/file-processor/file-processor": function(exports, require, module) {(function() {
  var FileProcessor,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FileProcessor = (function() {
    function FileProcessor() {
      this.getFileDirectory = bind(this.getFileDirectory, this);
      this.getFullPath = bind(this.getFullPath, this);
      this.read = bind(this.read, this);
      this.write = bind(this.write, this);
      this._gotFileWriter = bind(this._gotFileWriter, this);
      this._readAsText = bind(this._readAsText, this);
      this._gotFile = bind(this._gotFile, this);
      this._gotFileEntry = bind(this._gotFileEntry, this);
      this._gotFS = bind(this._gotFS, this);
      this._requestFileSystem = bind(this._requestFileSystem, this);
    }

    FileProcessor.prototype._rootPath = null;

    FileProcessor.prototype._requestFileSystem = function() {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(fileSystem) {
          _this._rootPath = fileSystem.root.toURL().replace('file://localhost', '');
          return deferred.resolve(fileSystem);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log(error.code);
        };
      })(this);
      window.requestFileSystem(LocalFileSystem.TEMPORARY, 0, onSuccess, onFail);
      return deferred.promise();
    };

    FileProcessor.prototype._gotFS = function(fileSystem) {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(fileEntry) {
          return deferred.resolve(fileEntry);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log(error.code);
        };
      })(this);
      fileSystem.root.getFile(this.fileName, {
        create: true,
        exclusive: false
      }, onSuccess, onFail);
      return deferred.promise();
    };

    FileProcessor.prototype._gotFileEntry = function(fileEntry) {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(writer) {
          return deferred.resolve(writer);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log(error.code);
        };
      })(this);
      fileEntry.createWriter(onSuccess, onFail);
      return deferred.promise();
    };

    FileProcessor.prototype._gotFile = function(fileEntry) {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(file) {
          return deferred.resolve(file);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log(error.code);
        };
      })(this);
      fileEntry.file(onSuccess, onFail);
      return deferred.promise();
    };

    FileProcessor.prototype._readAsText = function(file) {
      var deferred, reader;
      deferred = new $.Deferred();
      reader = new FileReader();
      reader.onloadend = (function(_this) {
        return function(evt) {
          return deferred.resolve(evt.target.result);
        };
      })(this);
      reader.readAsText(file);
      return deferred.promise();
    };

    FileProcessor.prototype._gotFileWriter = function(writer) {
      var deferred;
      deferred = new $.Deferred();
      writer.onwriteend = (function(_this) {
        return function() {
          return deferred.resolve(writer);
        };
      })(this);
      writer.write(this.dataString);
      return deferred.promise();
    };

    FileProcessor.prototype.write = function(fileName, dataString) {
      this.fileName = fileName;
      this.dataString = dataString;
      return this._requestFileSystem().then(this._gotFS).then(this._gotFileEntry).then(this._gotFileWriter);
    };

    FileProcessor.prototype.read = function(fileName) {
      this.fileName = fileName;
      return this._requestFileSystem().then(this._gotFS).then(this._gotFile).then(this._readAsText);
    };

    FileProcessor.prototype.getFullPath = function(fileName) {
      this.fileName = fileName;
      return this._requestFileSystem().then((function(_this) {
        return function() {
          return _this._rootPath + "/" + _this.fileName;
        };
      })(this));
    };

    FileProcessor.prototype.getFileDirectory = function(fileName) {
      this.fileName = fileName;
      return this._requestFileSystem().then((function(_this) {
        return function() {
          return "" + _this._rootPath;
        };
      })(this));
    };

    return FileProcessor;

  })();

  module.exports = FileProcessor;

}).call(this);
}, "common/ghost-click-preventer": function(exports, require, module) {(function() {
  var GhostClickPreventer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  GhostClickPreventer = (function() {
    GhostClickPreventer.prototype.PREVENT_TIMEOUT = 300;

    function GhostClickPreventer() {
      this.removePointerEvents = bind(this.removePointerEvents, this);
      this.onBlur = bind(this.onBlur, this);
      this.onTouchEnd = bind(this.onTouchEnd, this);
      this.element = $("<div class='ghostclick-preventer'></div>");
      $(document.body).append(this.element);
      $(document).on('touchend', this.onTouchEnd);
    }

    GhostClickPreventer.prototype.onTouchEnd = function(event) {
      var ref, reservedTags;
      reservedTags = ['SELECT', 'INPUT', 'TEXTAREA'];
      if ((event.target.className === 'ghostclick-preventer') || (ref = event.target.tagName, indexOf.call(reservedTags, ref) >= 0)) {
        return;
      }
      this.element.css({
        pointerEvents: 'all'
      });
      return this.timeoutId = setTimeout(this.removePointerEvents, this.PREVENT_TIMEOUT);
    };

    GhostClickPreventer.prototype.onBlur = function(event) {
      this.element.css({
        pointerEvents: 'all'
      });
      return this.timeoutId = setTimeout(this.removePointerEvents, this.PREVENT_TIMEOUT);
    };

    GhostClickPreventer.prototype.removePointerEvents = function() {
      return this.element.css({
        pointerEvents: 'none'
      });
    };

    return GhostClickPreventer;

  })();

  module.exports = GhostClickPreventer;

}).call(this);
}, "common/image-processor/image-processor": function(exports, require, module) {(function() {
  var FileProcessor, ImageProcessor, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FileProcessor = require('common/file-processor/file-processor');

  Utils = require('common/utils');

  ImageProcessor = (function() {
    function ImageProcessor() {
      this.saveFromBase64 = bind(this.saveFromBase64, this);
      this.resize = bind(this.resize, this);
      this.removeThumb = bind(this.removeThumb, this);
      this.remove = bind(this.remove, this);
      this.read = bind(this.read, this);
      this.save = bind(this.save, this);
      this._readAsBase64 = bind(this._readAsBase64, this);
      this._removeFile = bind(this._removeFile, this);
      this._moveFile = bind(this._moveFile, this);
      this._getChildDirEntry = bind(this._getChildDirEntry, this);
      this._getFileEntry = bind(this._getFileEntry, this);
      this._getTempDir = bind(this._getTempDir, this);
      this._getRootDir = bind(this._getRootDir, this);
    }

    ImageProcessor._resizer = window.plugins.imageResizer;

    ImageProcessor._defaultResizeOptions = {
      format: ImageProcessor._resizer.options.FORMAT_JPG,
      imageType: ImageProcessor._resizer.options.IMAGE_DATA_TYPE_URL,
      resizeType: ImageProcessor._resizer.options.RESIZE_TYPE_PIXEL,
      width: 320,
      height: 240,
      quality: 80
    };

    ImageProcessor._defaultSaveOptions = {
      format: ImageProcessor._resizer.options.FORMAT_JPG,
      imageType: ImageProcessor._resizer.options.IMAGE_DATA_TYPE_BASE64,
      directory: '',
      photoAlbum: false
    };

    ImageProcessor.prototype._photoDirectory = "photos";

    ImageProcessor.prototype._tradeDirectory = "trade";

    ImageProcessor.prototype._thumbsDirectory = "thumbs";

    ImageProcessor.prototype._getRootDir = function() {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(fileSystem) {
          return deferred.resolve(fileSystem.root);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log('_getRootDir' + error.code);
        };
      })(this);
      window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, onSuccess, onFail);
      return deferred.promise();
    };

    ImageProcessor.prototype._getTempDir = function() {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(fileSystem) {
          return deferred.resolve(fileSystem.root);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log('_getTempDir' + error.code);
        };
      })(this);
      window.requestFileSystem(LocalFileSystem.TEMPORARY, 0, onSuccess, onFail);
      return deferred.promise();
    };

    ImageProcessor.prototype._getFileEntry = function(dirEntry) {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(fileEntry) {
          _this.fileEntry = fileEntry;
          return deferred.resolve(_this.fileEntry);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log('_getFileEntry' + error.code);
        };
      })(this);
      dirEntry.getFile(this.fileName, null, onSuccess, onFail);
      return deferred.promise();
    };

    ImageProcessor.prototype._getChildDirEntry = function(parentDirEntry, dirName) {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(dirEntry) {
          return deferred.resolve(dirEntry);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log('_getChildDirEntry' + error.code);
        };
      })(this);
      parentDirEntry.getDirectory(dirName, {
        create: true
      }, onSuccess, onFail);
      return deferred.promise();
    };

    ImageProcessor.prototype._moveFile = function(targetDirEntry) {
      var deferred, onFail, onSuccess, timeStamp;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(dirEntry) {
          return deferred.resolve(dirEntry);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          deferred.reject();
          return console.log('_moveFile' + error.code);
        };
      })(this);
      timeStamp = new Date().getTime();
      this.fileEntry.moveTo(targetDirEntry, timeStamp + this.fileName, onSuccess, onFail);
      return deferred.promise();
    };

    ImageProcessor.prototype._removeFile = function() {
      var deferred, onFail, onSuccess;
      deferred = new $.Deferred();
      onSuccess = (function(_this) {
        return function(dirEntry) {
          return deferred.resolve(dirEntry);
        };
      })(this);
      onFail = (function(_this) {
        return function(error) {
          return deferred.reject();
        };
      })(this);
      this.fileEntry.remove(onSuccess, onFail);
      return deferred.promise();
    };

    ImageProcessor.prototype._readAsBase64 = function(file) {
      var deferred, reader;
      deferred = new $.Deferred();
      reader = new FileReader();
      reader.onloadend = (function(_this) {
        return function(evt) {
          return deferred.resolve(evt.target.result);
        };
      })(this);
      reader.readAsDataURL(file);
      return deferred.promise();
    };

    ImageProcessor.prototype.save = function(fileName) {
      this.fileName = fileName.replace(/^.*(\\|\/|\:)/, '');
      return this._getTempDir().then(this._getFileEntry).then(this._getRootDir).then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._tradeDirectory);
        };
      })(this)).then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._photoDirectory);
        };
      })(this)).then(this._moveFile);
    };

    ImageProcessor.prototype.read = function(fileName) {
      this.fileName = fileName.replace(/^.*(\\|\/|\:)/, '');
      return this._getRootDir().then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._tradeDirectory);
        };
      })(this)).then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._photoDirectory);
        };
      })(this)).then(this._getFileEntry).then((function(_this) {
        return function() {
          return new FileProcessor()._gotFile(_this.fileEntry);
        };
      })(this)).then(this._readAsBase64);
    };

    ImageProcessor.prototype.remove = function(fileName) {
      this.fileName = fileName.replace(/^.*(\\|\/|\:)/, '');
      return this._getRootDir().then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._tradeDirectory);
        };
      })(this)).then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._photoDirectory);
        };
      })(this)).then(this._getFileEntry).then(this._removeFile);
    };

    ImageProcessor.prototype.removeThumb = function(fileName) {
      this.fileName = fileName.replace(/^.*(\\|\/|\:)/, '');
      return this._getRootDir().then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._tradeDirectory);
        };
      })(this)).then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._photoDirectory);
        };
      })(this)).then((function(_this) {
        return function(parentDirEntry) {
          return _this._getChildDirEntry(parentDirEntry, _this._thumbsDirectory);
        };
      })(this)).then(this._getFileEntry).then(this._removeFile);
    };

    ImageProcessor.prototype.resize = function(url, options) {
      if (options == null) {
        options = {};
      }
      options = $.extend(ImageProcessor._defaultResizeOptions, options);
      return ImageProcessor._resizer.resizeImage(url, options.width, options.height, options);
    };

    ImageProcessor.prototype.saveFromBase64 = function(imageData, options) {
      if (options == null) {
        options = {};
      }
      options = $.extend(ImageProcessor._defaultSaveOptions, options);
      return ImageProcessor._resizer.storeImage(imageData, options);
    };

    ImageProcessor.getThumbnailPath = function(url) {
      var pathSegments;
      if (!url) {
        return '';
      }
      pathSegments = url.split('/');
      pathSegments[pathSegments.length - 1] = "thumbs/" + pathSegments[pathSegments.length - 1];
      return pathSegments.join('/');
    };

    return ImageProcessor;

  })();

  module.exports = ImageProcessor;

}).call(this);
}, "common/iterator": function(exports, require, module) {(function() {
  var Iterator;

  Iterator = (function() {
    function Iterator(list) {
      this.list = list;
      this.first();
    }

    Iterator.prototype.first = function() {
      return this.current = 0;
    };

    Iterator.prototype.next = function() {
      if (this.hasNext()) {
        return this.list[++this.current];
      }
    };

    Iterator.prototype.prev = function() {
      if (this.hasPrev()) {
        return this.list[--this.current];
      }
    };

    Iterator.prototype.hasNext = function() {
      return this.current < this.list.length - 1;
    };

    Iterator.prototype.hasPrev = function() {
      return this.current > 0;
    };

    Iterator.prototype.isDone = function() {
      return !this.hasNext() || !this.hasPrev();
    };

    Iterator.prototype.currentItem = function() {
      return this.list[this.current];
    };

    Iterator.prototype.currentIndex = function() {
      return this.current;
    };

    Iterator.prototype.setCurrentIndex = function(index) {
      var isIndexValid;
      isIndexValid = index >= 0 && index < this.list.length;
      if (isIndexValid) {
        return this.current = index;
      } else {
        throw 'You are trying to set Iterator index out of bounds';
      }
    };

    return Iterator;

  })();

  module.exports = Iterator;

}).call(this);
}, "common/json2kpi": function(exports, require, module) {(function() {
  var CallReportDataModel, JSON2KPI;

  CallReportDataModel = require('models/clm-call-report-data');

  JSON2KPI = (function() {
    function JSON2KPI() {}

    JSON2KPI.parse = function(json) {
      var callReportData, kpi, slideField;
      kpi = json ? JSON.parse(json) : {
        slides: []
      };
      slideField = kpi.slides ? 'slides' : 'slide';
      callReportData = new CallReportDataModel;
      callReportData.timeOnPresentation = _.reduce(kpi[slideField], (function(result, slide) {
        return result += slide.time;
      }), 0);
      callReportData.timeOnSlides = callReportData.timeOnPresentation / kpi[slideField].length;
      if (!callReportData.timeOnSlides) {
        callReportData.timeOnSlides = 0;
      }
      callReportData.kpiSrcJson = JSON.stringify(kpi);
      return callReportData;
    };

    return JSON2KPI;

  })();

  module.exports = JSON2KPI;

}).call(this);
}, "common/kpi-handler": function(exports, require, module) {(function() {
  var KpiHandler;

  KpiHandler = (function() {
    function KpiHandler() {}

    KpiHandler.getKPIByProduct = function(kpiJson, baseKpi, product, displayProduct) {
      var isDisplayingProductWithAlreadyViewedSlides, json, result, slideField;
      isDisplayingProductWithAlreadyViewedSlides = displayProduct && baseKpi;
      json = (isDisplayingProductWithAlreadyViewedSlides && (product.id === displayProduct.id)) || !isDisplayingProductWithAlreadyViewedSlides ? kpiJson : baseKpi;
      result = _.extend(JSON.parse(JSON.stringify(json)), {
        slides: []
      });
      slideField = kpiJson.slides ? 'slides' : 'slide';
      kpiJson[slideField].forEach(function(slide) {
        var slideKpiJson;
        if (KpiHandler.stringContains("P" + product.presentationId, slide.id) || (displayProduct && (product.id === displayProduct.id))) {
          slideKpiJson = slide;
          slideKpiJson.id = slide.id.replace("P" + product.presentationId + "_", "");
          return result.slides.push(slideKpiJson);
        }
      });
      return result;
    };

    KpiHandler.mergeKPI = function(baseKpiJson, updatedKpiJson) {
      var json, updatedSlides;
      json = _.extend(JSON.parse(JSON.stringify(updatedKpiJson)), {
        slides: baseKpiJson.slides
      });
      baseKpiJson = JSON.parse(JSON.stringify(json));
      updatedSlides = [];
      updatedKpiJson.slides.forEach(function(uSlide, uIndex) {
        return baseKpiJson.slides.forEach(function(bSlide, bIndex) {
          if (KpiHandler.stringContains(bSlide.id, uSlide.id) || KpiHandler.stringContains(uSlide.id, bSlide.id)) {
            updatedSlides.push(uIndex);
            baseKpiJson.slides[bIndex].time += updatedKpiJson.slides[uIndex].time || 0;
            baseKpiJson.slides[bIndex].likes = updatedKpiJson.slides[uIndex].likes || 0;
            return baseKpiJson.slides[bIndex].presentation = updatedKpiJson.slides[uIndex].presentation;
          }
        });
      });
      updatedKpiJson.slides.forEach(function(uSlide, uIndex) {
        if (updatedSlides.indexOf(uIndex) === -1) {
          return baseKpiJson.slides.push(uSlide);
        }
      });
      return JSON.stringify(baseKpiJson);
    };

    KpiHandler.stringContains = function(str1, str2) {
      return new RegExp(str1).test(str2);
    };

    return KpiHandler;

  })();

  module.exports = KpiHandler;

}).call(this);
}, "common/localization/languages-filter": function(exports, require, module) {(function() {
  var LanguagesFilter, Locale;

  Locale = require('common/localization/locale');

  LanguagesFilter = (function() {
    function LanguagesFilter() {}

    LanguagesFilter.resources = function() {
      return _(Locale.language).chain().values().map(function(lang, index) {
        return {
          id: index,
          value: lang,
          description: Locale.value("common:languages." + lang)
        };
      }).value();
    };

    return LanguagesFilter;

  })();

  module.exports = LanguagesFilter;

}).call(this);
}, "common/localization/locale": function(exports, require, module) {(function() {
  var Locale, SettingsManager, Utils;

  SettingsManager = require('db/settings-manager');

  Utils = require('common/utils');

  Locale = (function() {
    function Locale() {}

    Locale.language = {
      english: 'en',
      french: 'fr'
    };

    Locale.defaultLang = Locale.language.english;

    Locale.defaultOpts = {
      ns: {
        namespaces: ['app', 'common'],
        defaultNs: 'app'
      },
      lng: Locale.defaultLang
    };

    Locale.langSettings = 'language';

    Locale.initialize = function() {
      return SettingsManager.getValueByKey(Locale.langSettings).done(function(lang) {
        var deferred;
        if (lang) {
          return Locale.setCurrentLanguage(lang);
        } else {
          if (!navigator.globalization) {
            return Locale.setDefaultAsCurrentLanguage();
          } else {
            deferred = $.Deferred();
            navigator.globalization.getPreferredLanguage(function(language) {
              return Locale.setCurrentLanguage(language.value.substring(0, 2).toLowerCase()).then(function() {
                return deferred.resolve();
              });
            }, function() {
              return Locale.setDefaultAsCurrentLanguage().then(function() {
                return deferred.resolve();
              });
            });
            return deferred.promise();
          }
        }
      }).fail(function() {
        return Locale.setDefaultAsCurrentLanguage();
      });
    };

    Locale.value = function(key, parameters) {
      if (parameters == null) {
        parameters = {};
      }
      return i18n.t(key, parameters);
    };

    Locale.localize = function(el) {
      return el.i18n();
    };

    Locale.currentLanguage = function() {
      return SettingsManager.getValueByKey(Locale.langSettings).then(function(lang) {
        if (lang) {
          return lang;
        } else {
          return i18n.lng();
        }
      });
    };

    Locale.setCurrentLanguage = function(lang) {
      var deferred;
      deferred = $.Deferred();
      lang = Locale.existingLocalizationForLanguage(lang);
      moment.locale(lang);
      i18n.init(_.extend(Locale.defaultOpts, {
        lng: lang
      }), function() {
        return SettingsManager.setValueByKey(Locale.langSettings, lang).then(function() {
          return Locale._setNativeAppLanguage(lang).then(deferred.resolve);
        });
      });
      return deferred.promise();
    };

    Locale._setNativeAppLanguage = function(lang) {
      var deferred;
      deferred = $.Deferred();
      if (Utils.isIOS()) {
        cordova.exec((function() {
          return deferred.resolve();
        }), (function() {
          return deferred.resolve();
        }), 'Locale', 'setLanguage', [lang]);
      } else {
        deferred.resolve();
      }
      return deferred.promise();
    };

    Locale.existingLocalizationForLanguage = function(lang) {
      if (_(Locale.language).chain().values().contains(lang).value()) {
        return lang;
      } else {
        return Locale.defaultLang;
      }
    };

    Locale.setDefaultAsCurrentLanguage = function() {
      return Locale.setCurrentLanguage(Locale.defaultLang);
    };

    return Locale;

  })();

  module.exports = Locale;

}).call(this);
}, "common/lock-manager": function(exports, require, module) {(function() {
  var LockManager, SettingsManager;

  SettingsManager = require('db/settings-manager');

  LockManager = (function() {
    function LockManager() {}

    LockManager.init = function(context) {
      this.context = context;
      this.isActive = false;
      this.document = $(document);
      return this.lockTime = 1000 * 1000;
    };

    LockManager.initialize = function() {
      this._events('bind');
      return this._startTimer();
    };

    LockManager._clearTimer = function() {
      return clearTimeout(this.timer);
    };

    LockManager.destroy = function() {
      this._clearTimer();
      this._events('unbind');
      return this.timer = null;
    };

    LockManager._events = function(action) {
      return this.document[action]('touchend', this._startTimer);
    };

    LockManager.start = function() {
      this.isActive = true;
      return this.initialize();
    };

    LockManager.stop = function() {
      this.isActive = false;
      return this.destroy();
    };

    LockManager._startTimer = function() {
      LockManager._clearTimer();
      LockManager.timeStamp = new Date;
      return LockManager.timer = LockManager._executeAsync(function() {
        return LockManager.lock();
      }, LockManager.lockTime);
    };

    LockManager._executeAsync = function(callback, timeout) {
      if (timeout == null) {
        timeout = 10;
      }
      if (callback != null) {
        return setTimeout(callback, timeout);
      }
    };

    LockManager.lock = function() {
      LockManager.stop();
      return LockManager._setIsLocked(true, function() {
        return LockManager.context.pin.active();
      });
    };

    LockManager.unlock = function() {
      LockManager.start();
      return LockManager._setIsLocked(false, function() {
        return LockManager.context.main.active();
      });
    };

    LockManager._setIsLocked = function(value, callback) {
      return SettingsManager.setValueByKey('IsLocked', value).then(callback);
    };

    LockManager._getIsLocked = function(callback) {
      return SettingsManager.getValueByKey('IsLocked').then(callback);
    };

    LockManager.isLocked = function(callback) {
      return this._getIsLocked(callback);
    };

    return LockManager;

  })();

  module.exports = LockManager;

}).call(this);
}, "common/log-manager": function(exports, require, module) {(function() {
  var DeviceManager, EmailManager, LogManager, SettingsManager;

  SettingsManager = require('db/settings-manager');

  DeviceManager = require('common/device-manager');

  EmailManager = require('common/email-manager');

  LogManager = (function() {
    function LogManager() {}

    LogManager._logStorageKey = 'LastDebugLog';

    LogManager._maxLogLength = 32768;

    LogManager.log = '';

    LogManager.errorMessagesLog = '';

    LogManager.logDateFormat = 'HH:mm:ss:SSS';

    LogManager.startDateFormat = 'DD.MM.YYYY HH:mm';

    LogManager.lineSeparator = '\n';

    LogManager._stepIndexKey = 'stepIndex';

    LogManager.initLog = function() {
      return LogManager.log = LogManager._prepareFirstLog();
    };

    LogManager._prepareFirstLog = function() {
      var OSVersion, appVersion, date, firstLog;
      date = "" + (moment().format(this.startDateFormat)) + this.lineSeparator;
      OSVersion = (Locale.value('helpdesk.OSVersion')) + "-" + (DeviceManager.osVersion()) + this.lineSeparator;
      appVersion = (Locale.value('helpdesk.LogScreen.AppVersion')) + "-" + (DeviceManager.appVersion()) + this.lineSeparator;
      firstLog = date + OSVersion + appVersion;
      this.saveDebugLog(firstLog).then(function() {
        return console.log("SAVED");
      });
      return firstLog;
    };

    LogManager.appendInfoLog = function(message) {
      this.log += (Locale.value('helpdesk.LogScreen.Info')) + " " + (this._formatedDate()) + "-" + message + this.lineSeparator;
      return this.saveDebugLog(this.log + this.lineSeparator);
    };

    LogManager.updateStepsCount = function(stepsCount) {
      this.log = this.log.replace(this._stepIndexKey, stepsCount);
      return this.saveDebugLog(this.log + this.lineSeparator);
    };

    LogManager.appendError = function(error) {
      this.log += (Locale.value('helpdesk.LogScreen.Error')) + " " + (this._formatedDate()) + this.lineSeparator + (this._prepareLogData(error)) + this.lineSeparator;
      return this.saveDebugLog(this.log);
    };

    LogManager.appendWarning = function(warning) {
      this.log += (Locale.value('helpdesk.LogScreen.Warning')) + " " + (this._formatedDate()) + this.lineSeparator + (this._prepareLogData(warning)) + this.lineSeparator;
      return this.saveDebugLog(this.log);
    };

    LogManager.sendLogToSf = function() {
      return LogManager.getLastDebugLog().done(function(logData) {
        var deviceId;
        logData = logData ? logData.split(LogManager.lineSeparator) : [];
        deviceId = (Locale.value('helpdesk.LogScreen.DeviceId')) + ": " + (DeviceManager.deviceId());
        logData.unshift(deviceId);
        return EmailManager.sendMail('Abbott mobile log.', logData.join('<br/>'));
      }).fail(function(error) {
        return console.log(error);
      });
    };

    LogManager._setLastDebugLog = function(lastDebugLog) {
      if (lastDebugLog.length > this._maxLogLength) {
        lastDebugLog = lastDebugLog.substring(lastDebugLog.length - this._maxLogLength + 5, lastDebugLog.length - 1);
        lastDebugLog = "..." + lastDebugLog;
      }
      return this.log = lastDebugLog;
    };

    LogManager.saveDebugLog = function(log) {
      return SettingsManager.setValueByKey(this._logStorageKey, log).then(function() {
        return console.log(log);
      });
    };

    LogManager.getLastDebugLog = function() {
      return SettingsManager.getValueByKey(this._logStorageKey);
    };

    LogManager._prepareLogData = function(error) {
      return JSON.stringify(error);
    };

    LogManager._formatedDate = function() {
      return moment().format(this.logDateFormat);
    };

    return LogManager;

  })();

  module.exports = LogManager;

}).call(this);
}, "common/notifications-module": function(exports, require, module) {(function() {
  var NotificationsModule, Spine,
    slice = [].slice;

  Spine = require('spine');

  NotificationsModule = {
    shouldDeferNotification: function(notification) {
      throw 'Should be overridden';
    },
    executeDeferredNotificationCallbacks: function() {
      var notification;
      while (!_.isEmpty(this.deferredNotificationCallbacks)) {
        notification = this.deferredNotificationCallbacks.pop();
        notification.callback.apply(notification, notification.args);
      }
      return true;
    },
    postNotification: function() {
      var args, notification;
      notification = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return Spine.trigger.apply(Spine, [notification].concat(slice.call(args)));
    },
    subscribeOnNotification: function(notification, callback) {
      return Spine.bind(notification, (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (_this.shouldDeferNotification(notification)) {
            if (_.isEmpty(_this.deferredNotificationCallbacks)) {
              _this.deferredNotificationCallbacks = [];
            }
            if (!_.any(_this.deferredNotificationCallbacks, _.matches({
              callback: callback
            }))) {
              return _this.deferredNotificationCallbacks.push({
                callback: callback,
                args: args
              });
            }
          } else {
            return callback.apply(null, args);
          }
        };
      })(this));
    }
  };

  module.exports = NotificationsModule;

}).call(this);
}, "common/pin-manager": function(exports, require, module) {(function() {
  var PinManager, SettingsManager;

  SettingsManager = require('db/settings-manager');

  PinManager = (function() {
    function PinManager() {}

    PinManager.isPinMatch = function(pin, callback) {
      return this.getPin((function(_this) {
        return function(value) {
          return callback(value !== '' && value === pin);
        };
      })(this));
    };

    PinManager.isPinExists = function(callback) {
      return this.getPin((function(_this) {
        return function(value) {
          var isExists;
          isExists = (value != null) && value !== '';
          return callback(isExists);
        };
      })(this));
    };

    PinManager.removePin = function(callback) {
      return this.setPin("", callback);
    };

    PinManager.setPin = function(pin, callback) {
      return SettingsManager.setValueByKey('pin', pin).then(callback);
    };

    PinManager.getPin = function(callback) {
      return SettingsManager.getValueByKey('pin').then(callback);
    };

    PinManager.setPinAttempts = function(attempts, callback) {
      return SettingsManager.setValueByKey('attempts', attempts).then(callback);
    };

    PinManager.getPinAttempts = function(callback) {
      return SettingsManager.getValueByKey('attempts').then(callback);
    };

    return PinManager;

  })();

  module.exports = PinManager;

}).call(this);
}, "common/presentation-managers/presentation-loader": function(exports, require, module) {(function() {
  var PresentationFileManager, PresentationLoader, SforceDataContext, ZipManager,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PresentationFileManager = require('common/presentation-managers/presentations-file-manager');

  ZipManager = require('common/presentation-managers/zip-manager');

  SforceDataContext = require('models/bll/sforce-data-context');

  PresentationLoader = (function() {
    PresentationLoader.states = {
      INITED: 0,
      DOWNLOAD: 1,
      UNZIP: 2,
      REPLACING: 3,
      FINISHED: 4
    };

    PresentationLoader.prototype.errorHandler = function(error) {
      if (typeof this.onFailLoad === "function") {
        this.onFailLoad(error);
      }
      this._cleanup();
      return console.log("File transfer error handler called: " + error);
    };

    PresentationLoader.prototype._cleanup = function() {
      PresentationFileManager.removeArchive(this.presentationId);
      return PresentationFileManager.removeFolder(this.presentationId);
    };

    PresentationLoader.prototype._onDownloadSuccess = function(entry) {
      if (typeof this.onStateChange === "function") {
        this.onStateChange(this.state, {
          current: this.loadedSize,
          total: this.fileSize
        });
      }
      return this._unzip(entry.fullPath);
    };

    PresentationLoader.prototype._onUnzipSuccess = function() {
      this.state = PresentationLoader.states.REPLACING;
      if (typeof this.onStateChange === "function") {
        this.onStateChange(this.state);
      }
      return PresentationFileManager.replacePresentation(this.presentationId, (function(_this) {
        return function() {
          _this.state = PresentationLoader.states.FINISHED;
          if (typeof _this.onStateChange === "function") {
            _this.onStateChange(_this.state);
          }
          if (typeof _this.onSuccessLoad === "function") {
            _this.onSuccessLoad();
          }
          return PresentationFileManager.removeArchive(_this.presentationId);
        };
      })(this), this.errorHandler);
    };

    PresentationLoader.prototype._unzip = function(source) {
      var destination;
      this.state = PresentationLoader.states.UNZIP;
      if (typeof this.onStateChange === "function") {
        this.onStateChange(this.state);
      }
      destination = this.temporaryDirectory + "/" + this.presentationId;
      this.zipManager = new ZipManager(source, destination);
      return this.zipManager.unzip(((function(_this) {
        return function() {
          return _this._onUnzipSuccess(destination);
        };
      })(this)), this.errorHandler);
    };

    function PresentationLoader(presentationId) {
      this.presentationId = presentationId;
      this.canStop = bind(this.canStop, this);
      this.abort = bind(this.abort, this);
      this.download = bind(this.download, this);
      this._buildUrl = bind(this._buildUrl, this);
      this._unzip = bind(this._unzip, this);
      this._onUnzipSuccess = bind(this._onUnzipSuccess, this);
      this._onDownloadSuccess = bind(this._onDownloadSuccess, this);
      this._cleanup = bind(this._cleanup, this);
      this.errorHandler = bind(this.errorHandler, this);
      this.status = PresentationLoader.states.INITED;
      this.fileSize = 0;
      this.loadedSize = 0;
      this.temporaryDirectory = PresentationFileManager.getPathToTemporaryDir();
      this.temporaryFile = this.temporaryDirectory + "/" + this.presentationId + ".zip";
    }

    PresentationLoader.prototype._buildUrl = function(baseUrl) {
      return SforceDataContext.getAuthCredentials().then((function(_this) {
        return function(credentials) {
          return $.when(baseUrl + "&accessToken=" + credentials.accessToken + "&instanceUrl=" + credentials.instanceUrl);
        };
      })(this));
    };

    PresentationLoader.prototype.download = function(baseUrl) {
      this.state = PresentationLoader.states.DOWNLOAD;
      return this._buildUrl(baseUrl).then((function(_this) {
        return function(url) {
          _this.fileTransfer = new FileTransfer;
          _this.fileTransfer.onprogress = function(progress) {
            _this.fileSize = progress.total;
            _this.loadedSize = progress.loaded;
            return typeof _this.onStateChange === "function" ? _this.onStateChange(_this.state, {
              current: _this.loadedSize,
              total: _this.fileSize
            }) : void 0;
          };
          return _this.fileTransfer.download(url, _this.temporaryFile, _this._onDownloadSuccess, _this.errorHandler, true);
        };
      })(this));
    };

    PresentationLoader.prototype.abort = function() {
      if (this.canStop()) {
        return this.fileTransfer.abort();
      }
    };

    PresentationLoader.prototype.canStop = function() {
      return this.state === PresentationLoader.states.DOWNLOAD || this.state === PresentationLoader.states.FINISHED;
    };

    return PresentationLoader;

  })();

  module.exports = PresentationLoader;

}).call(this);
}, "common/presentation-managers/presentation-structure-manager": function(exports, require, module) {(function() {
  var PresentationFileManager, PresentationStructureManager;

  PresentationFileManager = require('common/presentation-managers/presentations-file-manager');

  PresentationStructureManager = (function() {
    function PresentationStructureManager() {}

    PresentationStructureManager._relativePathToStructure = 'structure.json';

    PresentationStructureManager._parseStructure = function(structureContent, presentationId) {
      var structure;
      structure = JSON.parse(structureContent);
      return Object.keys(structure['chapters']).filter(function(chapterId) {
        return structure['chapters'][chapterId].content.length > 0;
      }).map(function(chapterId) {
        var chapter;
        chapter = structure['chapters'][chapterId];
        chapter['id'] = chapterId;
        chapter['content'] = chapter['content'].map(function(slideId) {
          var slide;
          slide = structure['slides'][slideId];
          slide['id'] = slideId;
          slide['path'] = slide['template'];
          slide['thumbnail'] = PresentationStructureManager._mapThumbnailPath(slideId);
          slide['chapterId'] = chapterId;
          slide['presentationId'] = presentationId;
          delete slide['template'];
          return slide;
        });
        return chapter;
      });
    };

    PresentationStructureManager._mapPathToStructure = function(presentationId) {
      return presentationId + "/" + PresentationStructureManager._relativePathToStructure;
    };

    PresentationStructureManager._mapThumbnailPath = function(slideId) {
      return "/media/images/common/thumbs/" + slideId + ".jpg";
    };

    PresentationStructureManager.getParsedStructure = function(presentationId) {
      var promise, structurePath;
      structurePath = PresentationStructureManager._mapPathToStructure(presentationId);
      promise = new $.Deferred;
      PresentationFileManager.readPresentationFile(structurePath).done(function(structureContent) {
        return promise.resolve(PresentationStructureManager._parseStructure(structureContent, presentationId));
      }).fail(function(error) {
        return promise.reject(error);
      });
      return promise.promise();
    };

    return PresentationStructureManager;

  })();

  module.exports = PresentationStructureManager;

}).call(this);
}, "common/presentation-managers/presentations-file-manager": function(exports, require, module) {(function() {
  var PresentationsFileManager;

  PresentationsFileManager = (function() {
    function PresentationsFileManager() {}

    PresentationsFileManager._rootPath = null;

    PresentationsFileManager._presentationsRoot = 'presentations';

    PresentationsFileManager._temporaryRoot = 'temporary';

    PresentationsFileManager.getPathToTemporaryDir = function() {
      return PresentationsFileManager._rootPath + "/" + PresentationsFileManager._temporaryRoot;
    };

    PresentationsFileManager.getPathToPresentationsDir = function() {
      return PresentationsFileManager._rootPath + "/" + PresentationsFileManager._presentationsRoot;
    };

    PresentationsFileManager.getPathToTemporaryPresentation = function(presentationId) {
      return (PresentationsFileManager.getPathToTemporaryDir()) + "/" + presentationId;
    };

    PresentationsFileManager.getPathToPresentation = function(presentationId) {
      return (PresentationsFileManager.getPathToPresentationsDir()) + "/" + presentationId;
    };

    PresentationsFileManager.presentationExist = function(presentationId) {
      var presentationPath, promise;
      presentationPath = PresentationsFileManager._presentationsRoot + "/" + presentationId;
      promise = new $.Deferred;
      PresentationsFileManager._rootEntry.getDirectory(presentationPath, {
        create: false,
        exclusive: false
      }, promise.resolve, promise.reject);
      return promise.promise();
    };

    PresentationsFileManager.pathExist = function(iconPath) {
      var promise;
      iconPath = PresentationsFileManager._presentationsRoot + "/" + iconPath;
      promise = new $.Deferred;
      PresentationsFileManager._rootEntry.getFile(iconPath, {
        create: false,
        exclusive: false
      }, promise.resolve, promise.reject);
      return promise.promise();
    };

    PresentationsFileManager.readPresentationFile = function(pathToFile) {
      var filePath, onReadError, onReadSuccess, promise;
      filePath = PresentationsFileManager._presentationsRoot + "/" + pathToFile;
      promise = new $.Deferred;
      onReadError = function(error) {
        return promise.reject(error);
      };
      onReadSuccess = function(file) {
        var fileReader;
        fileReader = new FileReader;
        fileReader.onloadend = function(event) {
          return promise.resolve(event.target.result);
        };
        fileReader.onError = onReadError;
        return fileReader.readAsText(file);
      };
      PresentationsFileManager._rootEntry.getFile(filePath, {
        create: false,
        exclusive: false
      }, function(fileEntry) {
        return fileEntry.file(onReadSuccess, onReadError);
      }, onReadError);
      return promise.promise();
    };

    PresentationsFileManager.replacePresentation = function(presentationId, onSuccess, onError) {
      var onFolderDeleted, presentationPath;
      presentationPath = PresentationsFileManager.getPathToPresentation(presentationId);
      onFolderDeleted = function() {
        var tEntry, tempPath;
        tempPath = PresentationsFileManager.getPathToTemporaryPresentation(presentationId);
        tEntry = new DirectoryEntry(tempPath, tempPath);
        return PresentationsFileManager._rootEntry.getDirectory(PresentationsFileManager._presentationsRoot, {
          create: true,
          exclusive: false
        }, function(entry) {
          return tEntry.moveTo(entry, presentationId, onSuccess, onError);
        }, onError);
      };
      return PresentationsFileManager.removeFolder(presentationPath, onFolderDeleted, onError);
    };

    PresentationsFileManager.removeFolder = function(path, onSuccess, onError) {
      var dirEntry;
      dirEntry = new DirectoryEntry(path, path);
      return dirEntry.removeRecursively(onSuccess, function(fileError) {
        if (fileError.code === 12 || fileError.code === 1) {
          return typeof onSuccess === "function" ? onSuccess() : void 0;
        } else {
          return typeof onError === "function" ? onError() : void 0;
        }
      });
    };

    PresentationsFileManager.wipePresentationsStore = function() {
      var deferred;
      deferred = new $.Deferred;
      PresentationsFileManager.removeFolder(PresentationsFileManager.getPathToPresentationsDir(), deferred.resolve, deferred.reject);
      return deferred.promise();
    };

    PresentationsFileManager.removeArchive = function(presentationId) {
      var dirEntry, tempDir;
      tempDir = PresentationsFileManager.getPathToTemporaryDir();
      dirEntry = new DirectoryEntry(tempDir, tempDir);
      return dirEntry.getFile(presentationId + ".zip", {
        create: false,
        exclusive: false
      }, function(entry) {
        return entry.remove();
      });
    };

    if (window.requestFileSystem) {
      window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
        PresentationsFileManager._rootPath = fileSystem.root.toURL().replace('file://localhost', '');
        return PresentationsFileManager._rootEntry = fileSystem.root;
      }, function(error) {
        return console.log(error);
      });
    } else {
      console.log('File system unavailable');
    }

    return PresentationsFileManager;

  })();

  module.exports = PresentationsFileManager;

}).call(this);
}, "common/presentation-managers/presentations-load-manager": function(exports, require, module) {(function() {
  var PresentationLoader, PresentationsLoadManager;

  PresentationLoader = require('common/presentation-managers/presentation-loader');

  PresentationsLoadManager = (function() {
    function PresentationsLoadManager() {}

    PresentationsLoadManager._queue = {};

    PresentationsLoadManager.getLoaderForId = function(presentationId) {
      var loader;
      loader = PresentationsLoadManager._queue[presentationId];
      if (loader) {
        return loader;
      } else {
        return null;
      }
    };

    PresentationsLoadManager.getQueuedPresentations = function() {
      return Object.keys(PresentationsLoadManager._queue);
    };

    PresentationsLoadManager.queue = function(presentationId, callbacks) {
      var loader;
      loader = null;
      if (!PresentationsLoadManager._queue[presentationId]) {
        loader = new PresentationLoader(presentationId);
        ['onStateChange', 'onFail', 'onSuccess'].forEach(function(callbackName) {
          if (callbacks && callbacks[callbackName]) {
            loader[callbackName] = callbacks[callbackName];
          }
          if (callbackName !== 'onStateChange') {
            return loader[callbackName + "Load"] = function() {
              PresentationsLoadManager.dequeue(presentationId);
              if (loader[callbackName]) {
                return loader[callbackName].apply(loader[callbackName], arguments);
              }
            };
          }
        });
        PresentationsLoadManager._queue[presentationId] = loader;
      } else {
        console.log("Presentation " + presentationId + " already queued!");
      }
      return loader;
    };

    PresentationsLoadManager.queueInvoke = function(presentationId, remotePath, callbacks) {
      var loader;
      loader = PresentationsLoadManager.queue(presentationId, callbacks);
      if (loader) {
        loader.download(remotePath);
      }
      return loader;
    };

    PresentationsLoadManager.dequeue = function(presentationId) {
      var loader;
      loader = PresentationsLoadManager._queue[presentationId];
      if (!loader.canStop()) {
        return null;
      }
      delete PresentationsLoadManager._queue[presentationId];
      return loader;
    };

    PresentationsLoadManager.dequeueInvoke = function(presentationId) {
      var loader;
      loader = PresentationsLoadManager.dequeue(presentationId);
      if (!loader) {
        return null;
      }
      if (loader) {
        loader.abort();
      }
      return loader;
    };

    return PresentationsLoadManager;

  })();

  module.exports = PresentationsLoadManager;

}).call(this);
}, "common/presentation-managers/zip-manager": function(exports, require, module) {(function() {
  var ZipManager,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ZipManager = (function() {
    function ZipManager(sourceFile, destinationFolder) {
      this.sourceFile = sourceFile;
      this.destinationFolder = destinationFolder;
      this.unzip = bind(this.unzip, this);
      this.zip = window.plugins.zip;
    }

    ZipManager.prototype.unzip = function(onSuccess, onError) {
      return this.zip.unzip(this.sourceFile, this.destinationFolder, onSuccess, onError);
    };

    return ZipManager;

  })();

  module.exports = ZipManager;

}).call(this);
}, "common/query": function(exports, require, module) {(function() {
  var Query, Utils;

  Utils = require('common/utils');

  Query = (function() {
    Query._isIOS = Utils.isIOS();

    Query.TRUE = Query._isIOS ? "1" : "'true'";

    Query.FALSE = Query._isIOS ? "0" : "'false'";

    Query.ALL = '_soup';

    Query.AND = 'AND';

    Query.OR = 'OR';

    Query.IN = 'IN';

    Query.NOT_IN = 'NOT IN';

    Query.EQ = '=';

    Query.NE = '!=';

    Query.GR = '>';

    Query.LR = '<';

    Query.GRE = '>=';

    Query.LRE = '<=';

    Query.ASC = 'ASC';

    Query.DESC = 'DESC';

    function Query(soup) {
      this.soup = soup;
      this.query = '';
      this.isWhereUsed = false;
      this.isConditionUsed = false;
    }

    Query.prototype.customQuery = function(queryString) {
      this.query += queryString;
      if (this.query.indexOf(" WHERE ") > 0) {
        this.isWhereUsed = true;
      }
      return this;
    };

    Query.prototype.selectFrom = function(soup, fields) {
      var selectConditions;
      this.soup = soup;
      if (fields == null) {
        fields = Query.ALL;
      }
      if (fields === Query.ALL) {
        this.query += "SELECT {" + this.soup + ":" + fields + "} FROM {" + this.soup + "}";
        return this;
      } else {
        selectConditions = fields.map((function(_this) {
          return function(field) {
            return "{" + _this.soup + ":" + field + "}";
          };
        })(this));
        this.query += "SELECT " + selectConditions.join(',')(" FROM {" + this.soup + "}");
        return this;
      }
    };

    Query.prototype.where = function(fieldsValues, eqCondition, joinWith) {
      var field, value, whereConditions;
      if (eqCondition == null) {
        eqCondition = Query.EQ;
      }
      if (joinWith == null) {
        joinWith = Query.AND;
      }
      whereConditions = (function() {
        var results;
        results = [];
        for (field in fieldsValues) {
          value = fieldsValues[field];
          results.push("{" + this.soup + ":" + field + "} " + eqCondition + " " + (this.valueOf(value)));
        }
        return results;
      }).call(this);
      this.query += this._whereCondition() + whereConditions.join(" " + joinWith + " ");
      this.isConditionUsed = false;
      return this;
    };

    Query.prototype.whereLike = function(fieldsValues, joinWith) {
      var field, likeConditions, value;
      if (joinWith == null) {
        joinWith = Query.OR;
      }
      likeConditions = (function() {
        var results;
        results = [];
        for (field in fieldsValues) {
          value = fieldsValues[field];
          results.push("{" + this.soup + ":" + field + "} LIKE '%" + (this._ecranisedValue(value)) + "%'");
        }
        return results;
      }).call(this);
      this.query += this._whereCondition() + '(' + likeConditions.join(" " + joinWith + " ") + ')';
      this.isConditionUsed = false;
      return this;
    };

    Query.prototype.whereIn = function(field, values) {
      values = values.map((function(_this) {
        return function(value) {
          return _this.valueOf(value);
        };
      })(this));
      this.query += this._whereCondition() + (" {" + this.soup + ":" + field + "} " + Query.IN + " (" + (values.join(', ')) + ")");
      return this;
    };

    Query.prototype.whereNotIn = function(field, values) {
      values = values.map((function(_this) {
        return function(value) {
          return _this.valueOf(value);
        };
      })(this));
      this.query += this._whereCondition() + (" {" + this.soup + ":" + field + "} " + Query.NOT_IN + " (" + (values.join(', ')) + ")");
      return this;
    };

    Query.prototype.orderBy = function(fields, order) {
      var isIOS, orderConditions;
      if (order == null) {
        order = Query.ASC;
      }
      isIOS = Utils.isIOS();
      orderConditions = fields.map((function(_this) {
        return function(field) {
          if (Utils.isIOS()) {
            return "{" + _this.soup + ":" + field + "} COLLATE NOCASE " + order;
          } else {
            return "{" + _this.soup + ":" + field + "} = 'null' " + order + ", {" + _this.soup + ":" + field + "} COLLATE NOCASE " + order;
          }
        };
      })(this));
      this.query += ' ORDER BY ' + orderConditions.join(',');
      return this;
    };

    Query.prototype.limit = function(count) {
      this.query += " LIMIT " + count;
      return this;
    };

    Query.prototype.and = function() {
      this.query += this._andQuery();
      return this;
    };

    Query.prototype._andQuery = function() {
      this.isConditionUsed = true;
      return " " + Query.AND + " ";
    };

    Query.prototype.or = function() {
      this.query += " " + Query.OR + " ";
      this.isConditionUsed = true;
      return this;
    };

    Query.prototype.valueOf = function(value) {
      switch (value) {
        case true:
          return Query.TRUE;
        case false:
          return Query.FALSE;
        default:
          return "'" + (this._ecranisedValue(value)) + "'";
      }
    };

    Query.prototype._ecranisedValue = function(value) {
      if (typeof value === 'string') {
        return value.replace('\'', '\'\'');
      } else {
        return value;
      }
    };

    Query.prototype._whereCondition = function() {
      if (this.isWhereUsed) {
        if (this.isConditionUsed) {
          return ' ';
        } else {
          return this._andQuery();
        }
      } else {
        this.isWhereUsed = true;
        return ' WHERE ';
      }
    };

    Query.prototype.toString = function() {
      return this.query;
    };

    return Query;

  })();

  module.exports = Query;

}).call(this);
}, "common/sf-query-builders/callreport-filter-sf-query-builder": function(exports, require, module) {(function() {
  var CallReport, CallreportFilterSFQueryBuilder, SFQueryBuilder, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SFQueryBuilder = require('common/sf-query-builders/sf-query-builder');

  CallReport = require('models/call-report');

  Utils = require('common/utils');

  CallreportFilterSFQueryBuilder = (function(superClass) {
    extend(CallreportFilterSFQueryBuilder, superClass);

    function CallreportFilterSFQueryBuilder() {
      return CallreportFilterSFQueryBuilder.__super__.constructor.apply(this, arguments);
    }

    CallreportFilterSFQueryBuilder.buildWhereFilter = function(callReportField, alreadyHasWhere) {
      var minVisitDate;
      if (alreadyHasWhere == null) {
        alreadyHasWhere = false;
      }
      minVisitDate = Utils.toSalesForceDateTimeFormat(moment().subtract('months', 2));
      return (" " + (CallreportFilterSFQueryBuilder.where(alreadyHasWhere)) + " " + (CallreportFilterSFQueryBuilder.fieldDotConnection(callReportField)) + CallReport.sfdc.dateTimeOfVisit + " > " + minVisitDate) + (" AND " + (CallreportFilterSFQueryBuilder.fieldDotConnection(callReportField)) + "Contact1__r.Id != Null") + (" AND " + (CallreportFilterSFQueryBuilder.fieldDotConnection(callReportField)) + "Organisation__r.Id != Null");
    };

    return CallreportFilterSFQueryBuilder;

  })(SFQueryBuilder);

  module.exports = CallreportFilterSFQueryBuilder;

}).call(this);
}, "common/sf-query-builders/promotion-filter-sf-query-builder": function(exports, require, module) {(function() {
  var PromotionFilterSFQueryBuilder, SFQueryBuilder, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SFQueryBuilder = require('common/sf-query-builders/sf-query-builder');

  Utils = require('common/utils');

  PromotionFilterSFQueryBuilder = (function(superClass) {
    extend(PromotionFilterSFQueryBuilder, superClass);

    function PromotionFilterSFQueryBuilder() {
      return PromotionFilterSFQueryBuilder.__super__.constructor.apply(this, arguments);
    }

    PromotionFilterSFQueryBuilder.buildWhereFilter = function(promotionField, clmConfig, alreadyHasWhere) {
      if (alreadyHasWhere == null) {
        alreadyHasWhere = false;
      }
      return (" " + (PromotionFilterSFQueryBuilder.where(alreadyHasWhere)) + " (" + (PromotionFilterSFQueryBuilder.fieldDotConnection(promotionField)) + "RecordType.Id = '" + clmConfig.contractRecordTypeId + "'") + (" OR " + (PromotionFilterSFQueryBuilder.fieldDotConnection(promotionField)) + "RecordType.Id = '" + clmConfig.campaignRecordTypeId + "')") + (" AND " + (PromotionFilterSFQueryBuilder.fieldDotConnection(promotionField)) + "PromotionEndDate__c >= " + (Utils.currentDate()));
    };

    return PromotionFilterSFQueryBuilder;

  })(SFQueryBuilder);

  module.exports = PromotionFilterSFQueryBuilder;

}).call(this);
}, "common/sf-query-builders/sf-query-builder": function(exports, require, module) {(function() {
  var SFQueryBuilder;

  SFQueryBuilder = (function() {
    function SFQueryBuilder() {}

    SFQueryBuilder.fieldDotConnection = function(field) {
      if (_.isEmpty(field)) {
        return '';
      } else {
        return field + ".";
      }
    };

    SFQueryBuilder.where = function(alreadyHasWhere) {
      if (alreadyHasWhere) {
        return '';
      } else {
        return 'WHERE';
      }
    };

    return SFQueryBuilder;

  })();

  module.exports = SFQueryBuilder;

}).call(this);
}, "common/string-formator": function(exports, require, module) {(function() {
  var StringFormator;

  StringFormator = (function() {
    function StringFormator() {}

    StringFormator.stringToHtml = function(string) {
      return string != null ? string.replace(/\n/gm, '<br />' != null ? '<br />' : '') : void 0;
    };

    return StringFormator;

  })();

  module.exports = StringFormator;

}).call(this);
}, "common/switcher": function(exports, require, module) {(function() {
  var Switcher,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Switcher = (function() {
    function Switcher(scrollElement, hiddenElement) {
      this.scrollElement = scrollElement;
      this.hiddenElement = hiddenElement;
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      this._onEnd = bind(this._onEnd, this);
      this._onMove = bind(this._onMove, this);
      this._onStart = bind(this._onStart, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._scrollWidth = this.hiddenElement.outerWidth(true);
      this._sx = this._ex = this._dx = 0;
      this._sy = 0;
      this.zIndex = 0;
      this._bindEvents();
    }

    Switcher.prototype._bindEvents = function() {
      this.scrollElement.on(touchy.events.start, this._onStart);
      this.scrollElement.on(touchy.events.move, this._onMove);
      this.scrollElement.on(touchy.events.end, this._onEnd);
      return this.scrollElement.on('touchcancel', this._onEnd);
    };

    Switcher.prototype._onStart = function(event) {
      this._isStart = true;
      this.isMove = false;
      this._isPrevented = false;
      this._sx = event.originalEvent.changedTouches[0].pageX + this._ex;
      this._sy = event.originalEvent.changedTouches[0].pageY;
      return this.scrollElement.css("webkitTransition", "all linear 0");
    };

    Switcher.prototype._onMove = function(event) {
      var dy;
      if (!this._isStart) {
        return;
      }
      this._dx = this._sx - event.originalEvent.changedTouches[0].pageX;
      dy = this._sy - event.originalEvent.changedTouches[0].pageY;
      if (Math.abs(this._dx) > Math.abs(dy)) {
        event.preventDefault();
        this._isPrevented = true;
      } else {
        if (!this._isPrevented) {
          return this._onEnd();
        }
      }
      if (this._dx > this._scrollWidth) {
        this._dx = this._scrollWidth;
      }
      if (this._dx < 0) {
        this._dx = 0;
      }
      this.scrollElement.css("webkitTransform", "translate3d(-" + this._dx + "px, 0, 0)");
      return this.isMove = true;
    };

    Switcher.prototype._onEnd = function() {
      this._isStart = false;
      if (this.isMove) {
        if (this._dx / this._scrollWidth < 1 && this._dx / this._scrollWidth > 0) {
          this.scrollElement.css("webkitTransition", "all linear 200ms");
        }
        if (this._dx / this._scrollWidth > 0.5) {
          return this.show();
        } else {
          return this.hide();
        }
      }
    };

    Switcher.prototype.show = function() {
      this.scrollElement.css("webkitTransition", "all linear 200ms");
      this.scrollElement.css("webkitTransform", "translate3d(-" + this._scrollWidth + "px, 0, " + this.zIndex + "px)");
      this._ex = this._scrollWidth;
      return this.scrollElement.trigger('onSwitcherShow', this);
    };

    Switcher.prototype.hide = function() {
      this.scrollElement.css("webkitTransition", "all linear 200ms");
      this.scrollElement.css("webkitTransform", "translate3d(0, 0, " + this.zIndex + "px)");
      this._ex = 0;
      return this.scrollElement.trigger('onSwitcherHide', this);
    };

    return Switcher;

  })();

  module.exports = Switcher;

}).call(this);
}, "common/touchy": function(exports, require, module) {(function() {
  var Touchy,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Touchy = (function() {
    function Touchy(root, eventTarget, preventDefault) {
      this.root = root != null ? root : document;
      this.eventTarget = eventTarget != null ? eventTarget : null;
      this.preventDefault = preventDefault != null ? preventDefault : true;
      this.resetDoubleTap = bind(this.resetDoubleTap, this);
      this.onHold = bind(this.onHold, this);
      this.onScroll = bind(this.onScroll, this);
      this.getAbsDiff = bind(this.getAbsDiff, this);
      this.getScrollableElement = bind(this.getScrollableElement, this);
      this.removeListeners = bind(this.removeListeners, this);
      this.addListeners = bind(this.addListeners, this);
      this.onEnd = bind(this.onEnd, this);
      this.onMove = bind(this.onMove, this);
      this.onStart = bind(this.onStart, this);
      this._preventDefault = bind(this._preventDefault, this);
      this.touchEvents = {
        start: 'touchstart',
        move: 'touchmove',
        end: 'touchend'
      };
      this.mouseEvents = {
        start: 'mousedown',
        move: 'mousemove',
        end: 'mouseup'
      };
      this.isTouch = 'ontouchstart' in window;
      this.HOLD_TIMEOUT = 700;
      this.TAP_TIMEOUT = 600;
      this.SWIPE_TIMEOUT = 400;
      this.doubleTap = false;
      this.doubleTapTimerId = null;
      this.startScrollY = 0;
      this.endScrollY = 0;
      this.events = this.isTouch ? this.touchEvents : this.mouseEvents;
      this.root.addEventListener(this.events.start, this.onStart, false);
    }

    Touchy.prototype._preventDefault = function(event, element) {
      var ref, reservedTags;
      if (this.preventDefault) {
        reservedTags = ['SELECT', 'INPUT', 'TEXTAREA'];
        if (!((ref = element.tagName, indexOf.call(reservedTags, ref) >= 0) || this.scrolableElement)) {
          return event.preventDefault();
        }
      }
    };

    Touchy.prototype.onStart = function(event) {
      var startTouch;
      this.startEle = event.target;
      this.scrolableElement = this.getScrollableElement(this.startEle);
      this._preventDefault(event, this.startEle);
      this.startTime = new Date().getTime();
      startTouch = this.isTouch ? event.touches[0] : event;
      this.nrOfFingers = this.isTouch ? event.touches.length : 1;
      this.moveX = this.startX = startTouch.clientX;
      this.moveY = this.startY = startTouch.clientY;
      if (this.scrolableElement) {
        this.endScrollY = this.startScrollY = this.scrolableElement.scrollTop;
      }
      this.timeId = setTimeout(this.onHold, this.HOLD_TIMEOUT);
      return this.addListeners();
    };

    Touchy.prototype.onMove = function(event) {
      var moveTouch;
      this._preventDefault(event, this.startEle);
      moveTouch = this.isTouch ? event.touches[0] : event;
      this.moveX = moveTouch.clientX;
      this.moveY = moveTouch.clientY;
      return this.nrOfFingers = this.isTouch ? event.touches.length : 1;
    };

    Touchy.prototype.onEnd = function(event, isScroll) {
      var diffX, diffY, direction, endEle, endTime, endTouch, endX, endY, targetElement, timeDiff;
      clearTimeout(this.timeId);
      endEle = event.target;
      this._preventDefault(event, endEle);
      this.removeListeners();
      if (this.nrOfFingers > 1 || isScroll) {
        return;
      }
      endTime = new Date().getTime();
      timeDiff = endTime - this.startTime;
      endTouch = this.isTouch ? event.changedTouches[0] : event;
      endX = endTouch.clientX;
      endY = endTouch.clientY;
      targetElement = this.eventTarget || endEle;
      if (!(targetElement instanceof jQuery)) {
        targetElement = jQuery(targetElement);
      }
      diffX = this.getAbsDiff(this.startX, endX);
      diffY = this.getAbsDiff(this.startY, endY);
      if ((diffX >= 15 || diffY >= 15) && (timeDiff < this.SWIPE_TIMEOUT)) {
        if (diffX > diffY) {
          direction = this.startX > endX ? 'right' : 'left';
        } else {
          direction = this.startY > endY ? 'up' : 'down';
        }
        return targetElement.trigger('swipe' + direction);
      } else if (endEle === this.startEle) {
        if (timeDiff > this.TAP_TIMEOUT) {
          return targetElement.trigger('longTap');
        } else {
          if (this.doubleTap && this.firstEle === this.startEle) {
            targetElement.trigger('doubleTap', [endX, endY]);
            this.doubleTap = false;
            this.firstEle = null;
            clearTimeout(this.doubleTapTimerId);
          } else {
            targetElement.trigger('tap');
            this.firstEle = this.startEle;
            this.doubleTap = true;
          }
          return this.resetDoubleTap();
        }
      }
    };

    Touchy.prototype.addListeners = function() {
      this.startEle.addEventListener(this.events.move, this.onMove, false);
      this.startEle.addEventListener(this.events.end, this.onEnd, false);
      if (this.scrolableElement) {
        return this.scrolableElement.addEventListener('scroll', this.onScroll, false);
      }
    };

    Touchy.prototype.removeListeners = function() {
      this.startEle.removeEventListener(this.events.move, this.onMove, false);
      this.startEle.removeEventListener(this.events.end, this.onEnd, false);
      if (this.scrolableElement) {
        return this.scrolableElement.removeEventListener('scroll', this.onScroll, false);
      }
    };

    Touchy.prototype.getScrollableElement = function(element) {
      var elements, result;
      elements = [];
      while (element.tagName !== 'BODY') {
        element = element.parentNode;
        elements.push(element);
      }
      result = elements.filter(function(el) {
        return (el.scrollHeight !== el.clientHeight) && jQuery(el).css('overflow-y') === 'auto';
      });
      return result[0];
    };

    Touchy.prototype.getAbsDiff = function(startValue, endValue) {
      return Math.abs(endValue - startValue);
    };

    Touchy.prototype.onScroll = function(event) {
      if (this.scrolableElement) {
        this.endScrollY = this.scrolableElement.scrollTop;
      }
      if (this.getAbsDiff(this.startScrollY, this.endScrollY) > 15) {
        return this.onEnd(event, true);
      }
    };

    Touchy.prototype.onHold = function() {
      if (this.getAbsDiff(this.startX, this.moveX) < 15 && this.getAbsDiff(this.startY, this.moveY) < 15 && this.nrOfFingers === 1) {
        return jQuery(this.startEle).trigger('hold');
      }
    };

    Touchy.prototype.resetDoubleTap = function() {
      return this.doubleTapTimerId = setTimeout(((function(_this) {
        return function() {
          _this.doubleTap = false;
          return _this.firstEle = null;
        };
      })(this)), this.TAP_TIMEOUT);
    };

    return Touchy;

  })();

  module.exports = Touchy;

}).call(this);
}, "common/utils": function(exports, require, module) {(function() {
  var Utils;

  Utils = (function() {
    function Utils() {}

    Utils.runSimultaneously = function(functionsList) {
      return $.when.apply(this, functionsList);
    };

    Utils.isIOS = function() {
      return /iphone|ipod|ipad/.test(window.navigator.userAgent.toLowerCase());
    };

    Utils.deviceIsOnline = function() {
      var deviceConnection;
      deviceConnection = cordova.require('salesforce/util/bootstrap');
      return deviceConnection.deviceIsOnline();
    };

    Utils.formatDateTime = function(timeString) {
      return moment(moment.utc(timeString).toDate()).format("DD.MM.YYYY HH:mm");
    };

    Utils.dotFormatDate = function(timeString) {
      return moment(timeString).format("DD.MM.YYYY");
    };

    Utils.slashFormatDate = function(timeString) {
      return moment(timeString).format("DD/MM/YYYY");
    };

    Utils.formatTime = function(timeString) {
      return moment(timeString).format("HH:mm");
    };

    Utils.formatDateVisit = function(date) {
      return moment(date).format("YYYY-MM-DD");
    };

    Utils.generateUID = function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };

    Utils.originalStartOfDate = function(date) {
      var startOfDay;
      startOfDay = moment(date);
      startOfDay.hours(0);
      startOfDay.minutes(0);
      startOfDay.seconds(0);
      startOfDay.milliseconds(0);
      return startOfDay.utc().format("YYYY-MM-DDTHH:mm:ss.SSSZZ");
    };

    Utils.originalDate = function(dateTime) {
      var date;
      date = moment(dateTime);
      date.utc();
      return date.format('YYYY-MM-DD');
    };

    Utils.originalTime = function(dateTime) {
      var time;
      time = moment(dateTime);
      time.utc();
      return time.format('HH:mm');
    };

    Utils.originalEndOfDate = function(date) {
      var endOfDay;
      endOfDay = moment(date);
      endOfDay.hours(23);
      endOfDay.minutes(59);
      endOfDay.seconds(59);
      endOfDay.milliseconds(999);
      return endOfDay.utc().format("YYYY-MM-DDTHH:mm:ss.SSSZZ");
    };

    Utils.originalStartOfToday = function() {
      return this.originalStartOfDate(new Date);
    };

    Utils.originalEndOfToday = function() {
      return this.originalEndOfDate(new Date);
    };

    Utils.originalStartOfTomorrow = function() {
      var date;
      date = new Date;
      date.setDate(date.getDate() + 1);
      return this.originalStartOfDate(date);
    };

    Utils.originalEndOfTomorrow = function() {
      var date;
      date = new Date;
      date.setDate(date.getDate() + 1);
      return this.originalEndOfDate(date);
    };

    Utils.originalDateTime = function(date) {
      var dateString, hh, mm;
      dateString = this.currentDate(date);
      hh = date.getHours();
      mm = date.getMinutes();
      if (hh < 10) {
        hh = '0' + hh;
      }
      if (mm < 10) {
        mm = '0' + mm;
      }
      return moment(dateString + "T" + hh + ":" + mm + ":00").utc().format("YYYY-MM-DDTHH:mm:ss.SSSZZ");
    };

    Utils.getDateByStr = function(dateStr) {
      return moment(dateStr).toDate();
    };

    Utils.originalDateTimeObject = function(timeString) {
      return moment(moment.utc(timeString).toDate()).toDate();
    };

    Utils.formatDateTimeWithBreak = function(timeString) {
      return Utils.formatDateTime(timeString).replace(' ', '<br/>');
    };

    Utils.currentDateTime = function(dateStr) {
      return this.formatDateTime(dateStr != null ? dateStr : new Date());
    };

    Utils.currentDate = function(dateStr) {
      var today;
      today = dateStr ? new Date(dateStr) : new Date();
      return moment(today).format('YYYY-MM-DD');
    };

    Utils.monthByIndex = function(index) {
      return moment.monthsShort("-MMM-", index);
    };

    Utils.dayOfWeekByIndex = function(index) {
      return moment.weekdaysMin(index);
    };

    Utils.toSalesForceDateTimeFormat = function(date) {
      return moment(date).format("YYYY-MM-DDTHH:mm:ss.SSS") + 'Z';
    };

    Utils.isDevice = function() {
      var userAgent;
      userAgent = window.navigator.userAgent.toLowerCase();
      return userAgent.match(/(iphone|ipod|ipad|android)/);
    };

    Utils.minutesOfDay = function(date) {
      return date.minutes() + date.hours() * 60;
    };

    Utils.isIntervalBefore = function(intervalTimeStart, intervalTimeEnd, limitTime) {
      var limitTimeMinutes;
      limitTimeMinutes = this.minutesOfDay(limitTime);
      return this.minutesOfDay(intervalTimeStart) < limitTimeMinutes && this.minutesOfDay(intervalTimeEnd) <= limitTimeMinutes;
    };

    Utils.isTimeBefore = function(timeToCheck, limitTime) {
      return this.minutesOfDay(timeToCheck) <= this.minutesOfDay(limitTime);
    };

    Utils.isTimeAfter = function(timeToCheck, limitTime) {
      return this.minutesOfDay(timeToCheck) >= this.minutesOfDay(limitTime);
    };

    Utils.getDaysBetween = function(startDate, endDate) {
      var datediff;
      datediff = endDate.getTime() - startDate.getTime();
      return datediff / (24 * 60 * 60 * 1000);
    };

    Utils.getDuration = function(startTime, endTime) {
      return Math.round((endTime - startTime) / 1000);
    };

    Utils.dateWithoutTime = function(date) {
      return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    };

    Utils.dateTimeWithoutSeconds = function(date) {
      return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes());
    };

    Utils.timeFromString = function(timeString) {
      var timeParts;
      timeParts = timeString.split(':');
      return moment({
        hours: parseInt(timeParts[0]),
        minutes: parseInt(timeParts[1])
      });
    };

    return Utils;

  })();

  module.exports = Utils;

}).call(this);
}, "controllers/activities/activities-filter": function(exports, require, module) {(function() {
  var ActivitiesFilter;

  ActivitiesFilter = (function() {
    function ActivitiesFilter() {}

    ActivitiesFilter.appointmentsToday = function() {
      return {
        id: 0,
        description: Locale.value('activities.FilterPopup.AppointmentsToday')
      };
    };

    ActivitiesFilter.appointments = function() {
      return {
        id: 1,
        description: Locale.value('activities.FilterPopup.Appointments')
      };
    };

    ActivitiesFilter.appointmentsPast = function() {
      return {
        id: 2,
        description: Locale.value('activities.FilterPopup.AppointmentsPast')
      };
    };

    ActivitiesFilter.appointmentsTomorrow = function() {
      return {
        id: 3,
        description: Locale.value('activities.FilterPopup.AppointmentsTomorrow')
      };
    };

    ActivitiesFilter.calls = function() {
      return {
        id: 4,
        description: Locale.value('activities.FilterPopup.1To1Calls')
      };
    };

    ActivitiesFilter.callsToday = function() {
      return {
        id: 5,
        description: Locale.value('activities.FilterPopup.1To1CallsToday')
      };
    };

    ActivitiesFilter.pharmaEvents = function() {
      return {
        id: 6,
        description: Locale.value('activities.FilterPopup.PharmaEvents')
      };
    };

    ActivitiesFilter.resources = function() {
      return [this.appointmentsToday(), this.appointments(), this.appointmentsPast(), this.appointmentsTomorrow(), this.calls(), this.callsToday(), this.pharmaEvents()];
    };

    return ActivitiesFilter;

  })();

  module.exports = ActivitiesFilter;

}).call(this);
}, "controllers/activities/activities-manager": function(exports, require, module) {(function() {
  var ActivitiesManager, Appointments, AppointmentsPast, AppointmentsToday, AppointmentsTomorrow, Calls, CallsToday, PharmaEvents, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Appointments = require('controllers/activities/appointments/appointments');

  AppointmentsToday = require('controllers/activities/appointments/appointments-today');

  AppointmentsPast = require('controllers/activities/appointments/appointments-past');

  AppointmentsTomorrow = require('controllers/activities/appointments/appointments-tomorrow');

  Calls = require('controllers/activities/calls/calls');

  CallsToday = require('controllers/activities/calls/calls-today');

  PharmaEvents = require('controllers/activities/pharma-events/pharma-events');

  ActivitiesManager = (function(superClass) {
    extend(ActivitiesManager, superClass);

    ActivitiesManager.prototype.controllers = {
      appointmentsToday: AppointmentsToday,
      appointments: Appointments,
      appointmentsPast: AppointmentsPast,
      appointmentsTomorrow: AppointmentsTomorrow,
      calls: Calls,
      callsToday: CallsToday,
      pharmaEvents: PharmaEvents
    };

    ActivitiesManager.prototype.activeController = null;

    function ActivitiesManager() {
      this.defaultController = bind(this.defaultController, this);
      this.release = bind(this.release, this);
      this.activateCurrent = bind(this.activateCurrent, this);
      this.activeCurrent = bind(this.activeCurrent, this);
      this.resetAll = bind(this.resetAll, this);
      this.reloadCurrent = bind(this.reloadCurrent, this);
      this.resetCurrent = bind(this.resetCurrent, this);
      this.filterCurrentBy = bind(this.filterCurrentBy, this);
      this.activeControllerWithSearch = bind(this.activeControllerWithSearch, this);
      this._applyForAll = bind(this._applyForAll, this);
      this.setContext = bind(this.setContext, this);
      ActivitiesManager.__super__.constructor.apply(this, arguments);
      this.activeController = this.defaultController();
    }

    ActivitiesManager.prototype.setContext = function(context) {
      return this._applyForAll(function(controller) {
        return controller.context = context;
      });
    };

    ActivitiesManager.prototype._applyForAll = function(predicate) {
      var controllerName, results;
      results = [];
      for (controllerName in this.controllers) {
        results.push(predicate(this[controllerName]));
      }
      return results;
    };

    ActivitiesManager.prototype.activeControllerWithSearch = function(controller, searchValue) {
      var params;
      params = {
        search: searchValue
      };
      this.activeController = controller;
      return this.activeController.active(params);
    };

    ActivitiesManager.prototype.filterCurrentBy = function(value) {
      return this.activeController.filterBy(value);
    };

    ActivitiesManager.prototype.resetCurrent = function() {
      return this.activeController.reset();
    };

    ActivitiesManager.prototype.reloadCurrent = function() {
      return this.activeController.reload();
    };

    ActivitiesManager.prototype.resetAll = function() {
      return this._applyForAll(function(controller) {
        return controller.reset();
      });
    };

    ActivitiesManager.prototype.activeCurrent = function() {
      return this.activeController.active();
    };

    ActivitiesManager.prototype.activateCurrent = function() {
      return this.activeController.activate();
    };

    ActivitiesManager.prototype.release = function() {
      this._applyForAll(function(controller) {
        return controller.release();
      });
      return ActivitiesManager.__super__.release.apply(this, arguments);
    };

    ActivitiesManager.prototype.defaultController = function() {
      return this.appointmentsToday;
    };

    return ActivitiesManager;

  })(Spine.Stack);

  module.exports = ActivitiesManager;

}).call(this);
}, "controllers/activities/activities": function(exports, require, module) {(function() {
  var Activities, ActivitiesFilter, ActivitiesManager, BaseHeader, HeaderBaseControl, ListPopup, PeCardCreate, RootPanelScreen, Search,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RootPanelScreen = require('controllers/base/panel/root-panel-screen');

  ActivitiesFilter = require('controllers/activities/activities-filter');

  ListPopup = require('controls/popups/list-popup');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  BaseHeader = require('controls/header/base-header');

  Search = require('controls/search/search');

  ActivitiesManager = require('controllers/activities/activities-manager');

  PeCardCreate = require('controllers/pe-card/pe-card-create');

  Activities = (function(superClass) {
    extend(Activities, superClass);

    function Activities() {
      this._onAddPharmaEventTap = bind(this._onAddPharmaEventTap, this);
      this._resetSearchingFilter = bind(this._resetSearchingFilter, this);
      this._onSearchChanged = bind(this._onSearchChanged, this);
      this.reload = bind(this.reload, this);
      this._onFilterTap = bind(this._onFilterTap, this);
      this._initHeader = bind(this._initHeader, this);
      this._searchBlur = bind(this._searchBlur, this);
      this.activate = bind(this.activate, this);
      return Activities.__super__.constructor.apply(this, arguments);
    }

    Activities.prototype.className = 'activities';

    Activities.prototype.elements = {
      'input': 'elInput'
    };

    Activities.prototype.events = {
      'tap header': '_searchBlur',
      'tap .tables-holder': '_searchBlur'
    };

    Activities.prototype.activitiesManager = null;

    Activities.prototype.activate = function(params) {
      var ref;
      if (params == null) {
        params = {};
      }
      Activities.__super__.activate.call(this, params);
      return (ref = this.activitiesManager) != null ? ref.activateCurrent() : void 0;
    };

    Activities.prototype._searchBlur = function() {
      return this.elInput.blur();
    };

    Activities.prototype.active = function() {
      var ref;
      Activities.__super__.active.apply(this, arguments);
      Locale.localize(this.el);
      if ((ref = this.activitiesManager) != null) {
        ref.release();
      }
      this.activitiesManager = new ActivitiesManager;
      this.activitiesManager.setContext(this);
      this._initHeader();
      return this._initTableControllers();
    };

    Activities.prototype.template = function() {
      return require('views/activities/activities')();
    };

    Activities.prototype._initHeader = function() {
      var activitiesHeader, headerFilterBtn;
      this.currentFilter = ActivitiesFilter.resources()[0];
      headerFilterBtn = new HeaderBaseControl(this.currentFilter.description, 'select-btn');
      headerFilterBtn.bind('tap', this._onFilterTap);
      this.search = new Search();
      this.search.bind('searchChanged', this._onSearchChanged);
      this.search.bind('searchClear', this._resetSearchingFilter);
      this.addPharmaEventButton = new HeaderBaseControl('', 'ctrl-add-button');
      this.addPharmaEventButton.bind('tap', this._onAddPharmaEventTap);
      this.addPharmaEventButton.el.hide();
      activitiesHeader = new BaseHeader(Locale.value('activities.HeaderTitle'));
      activitiesHeader.render();
      activitiesHeader.addLeftControlElement(headerFilterBtn.el);
      activitiesHeader.addLeftControlElement(this.addPharmaEventButton.el);
      activitiesHeader.addRightControlElement(this.search.render().el);
      return this.setHeader(activitiesHeader);
    };

    Activities.prototype._onFilterTap = function(headerFilterBtn) {
      var filterPopup;
      filterPopup = new ListPopup(ActivitiesFilter.resources(), this.currentFilter);
      filterPopup.bind('onPopupItemSelected', (function(_this) {
        return function(selectedItem) {
          _this.currentFilter = selectedItem.model;
          headerFilterBtn.updateTitle(_this.currentFilter.description);
          _this.dismissModalController();
          return _this.reload();
        };
      })(this));
      return this.presentModalController(filterPopup);
    };

    Activities.prototype.reload = function() {
      var filterController;
      this.addPharmaEventButton.el.hide();
      filterController = (function() {
        switch (this.currentFilter.id) {
          case ActivitiesFilter.appointments().id:
            return this.activitiesManager.appointments;
          case ActivitiesFilter.appointmentsToday().id:
            return this.activitiesManager.appointmentsToday;
          case ActivitiesFilter.appointmentsPast().id:
            return this.activitiesManager.appointmentsPast;
          case ActivitiesFilter.appointmentsTomorrow().id:
            return this.activitiesManager.appointmentsTomorrow;
          case ActivitiesFilter.calls().id:
            return this.activitiesManager.calls;
          case ActivitiesFilter.callsToday().id:
            return this.activitiesManager.callsToday;
          case ActivitiesFilter.pharmaEvents().id:
            this.addPharmaEventButton.el.show();
            return this.activitiesManager.pharmaEvents;
        }
      }).call(this);
      return this.activitiesManager.activeControllerWithSearch(filterController, this.search.getValue());
    };

    Activities.prototype._onSearchChanged = function(value) {
      return this.activitiesManager.filterCurrentBy(value);
    };

    Activities.prototype._resetSearchingFilter = function() {
      this.activitiesManager.resetAll();
      return this.activitiesManager.activeCurrent();
    };

    Activities.prototype._onAddPharmaEventTap = function() {
      var peCard;
      peCard = new PeCardCreate;
      peCard.on('pharmaEventChanged', (function(_this) {
        return function() {
          return _this.activitiesManager.reloadCurrent();
        };
      })(this));
      return this.stage.push(peCard);
    };

    Activities.prototype._initTableControllers = function() {
      var controllerName;
      for (controllerName in this.activitiesManager.controllers) {
        this.content.append(this.activitiesManager[controllerName].el);
      }
      return this.activitiesManager.activeControllerWithSearch(this.activitiesManager.defaultController());
    };

    return Activities;

  })(RootPanelScreen);

  module.exports = Activities;

}).call(this);
}, "controllers/activities/appointments/appointments-past": function(exports, require, module) {(function() {
  var Appointments, AppointmentsPast, AppointmentsPastCollection, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Appointments = require('controllers/activities/appointments/appointments');

  AppointmentsPastCollection = require('models/bll/call-reports-collection/appointments-past-collection');

  AppointmentsPast = (function(superClass) {
    extend(AppointmentsPast, superClass);

    function AppointmentsPast() {
      this.createCollection = bind(this.createCollection, this);
      return AppointmentsPast.__super__.constructor.apply(this, arguments);
    }

    AppointmentsPast.prototype.className = 'table-view appointments past';

    AppointmentsPast.prototype.createCollection = function() {
      return new AppointmentsPastCollection;
    };

    return AppointmentsPast;

  })(Appointments);

  module.exports = AppointmentsPast;

}).call(this);
}, "controllers/activities/appointments/appointments-table-cell": function(exports, require, module) {(function() {
  var AppointmentsTableCell, Spine, TargetFrequenciesCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');

  AppointmentsTableCell = (function(superClass) {
    extend(AppointmentsTableCell, superClass);

    AppointmentsTableCell.prototype.className = 'row';

    AppointmentsTableCell.prototype.elements = {
      '.date-time': 'elDateTime',
      '.customer': 'elCustomer',
      '.specialty': 'elSpecialty',
      '.priority': 'elPriority',
      '.organization': 'elOrganization',
      '.user': 'elUser',
      '.at-calls': 'elAtCalls',
      '.appointments-contact-cell': 'elAppointmentsContactCell',
      '.appointments-organization-cell': 'elAppointmentsOrganizationCell',
      '.promotions-info': 'elInfoButton'
    };

    function AppointmentsTableCell(appointment) {
      this.appointment = appointment;
      this._onAppointmentsOrganizationCellTap = bind(this._onAppointmentsOrganizationCellTap, this);
      this._onAppointmentsContactCellTap = bind(this._onAppointmentsContactCellTap, this);
      this._onCellTap = bind(this._onCellTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      AppointmentsTableCell.__super__.constructor.call(this, {});
    }

    AppointmentsTableCell.prototype.render = function() {
      var ref;
      this.html(this.template());
      this.elDateTime.html(Utils.formatDateTimeWithBreak(this.appointment.dateTimeOfVisit));
      this.elUser.html(this.appointment.userFullName());
      this.elCustomer.html(this.appointment.contactFullName());
      this.elOrganization.html(this.appointment.organizationName + " <br/> " + ((ref = this.appointment.organizationCity) != null ? ref : ''));
      this.appointment.getContact().then((function(_this) {
        return function(contact) {
          var lastDateTargetFrequency, ref1;
          _this.elPriority.html((ref1 = contact.priority) != null ? ref1 : '');
          if (contact.lastDateTargetFrequency) {
            lastDateTargetFrequency = new TargetFrequenciesCollection().parseEntity(contact.lastDateTargetFrequency);
            return _this.elAtCalls.html(lastDateTargetFrequency.atCalls());
          }
        };
      })(this));
      this.appointment.getSpecialty().then((function(_this) {
        return function(specialty) {
          return _this.elSpecialty.html(_this.appointment.specialty);
        };
      })(this));
      return this;
    };

    AppointmentsTableCell.prototype.template = function() {
      return require('views/activities/appointments/appointments-table-cell')();
    };

    AppointmentsTableCell.prototype.bindEvents = function() {
      this.el.on('tap', this._onCellTap);
      this.elAppointmentsContactCell.on('tap', this._onAppointmentsContactCellTap);
      return this.elAppointmentsOrganizationCell.on('tap', this._onAppointmentsOrganizationCellTap);
    };

    AppointmentsTableCell.prototype._onCellTap = function(event) {
      event.stopPropagation();
      return this.trigger('cellTap', this);
    };

    AppointmentsTableCell.prototype._onAppointmentsContactCellTap = function(event) {
      event.stopPropagation();
      return this.trigger('appointmentsContactCellTap', this);
    };

    AppointmentsTableCell.prototype._onAppointmentsOrganizationCellTap = function(event) {
      event.stopPropagation();
      return this.trigger('appointmentsOrganizationCellTap', this);
    };

    return AppointmentsTableCell;

  })(Spine.Controller);

  module.exports = AppointmentsTableCell;

}).call(this);
}, "controllers/activities/appointments/appointments-today-table-cell": function(exports, require, module) {(function() {
  var AppointmentsTableCell, AppointmentsTableCellToday, PromotionAccountsCollection, PromotionPopup,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppointmentsTableCell = require('controllers/activities/appointments/appointments-table-cell');

  PromotionPopup = require('controls/popups/promotion-popup/promotion-popup');

  PromotionAccountsCollection = require('models/bll/promotion-accounts-collection');

  AppointmentsTableCellToday = (function(superClass) {
    extend(AppointmentsTableCellToday, superClass);

    function AppointmentsTableCellToday() {
      this._showPromotionPopup = bind(this._showPromotionPopup, this);
      this.bindEvents = bind(this.bindEvents, this);
      return AppointmentsTableCellToday.__super__.constructor.apply(this, arguments);
    }

    AppointmentsTableCellToday.prototype.template = function() {
      return require('views/activities/appointments/appointments-today-table-cell')();
    };

    AppointmentsTableCellToday.prototype.bindEvents = function() {
      AppointmentsTableCellToday.__super__.bindEvents.apply(this, arguments);
      return this._initInfoButton();
    };

    AppointmentsTableCellToday.prototype._initInfoButton = function() {
      var promotionAccountsCollection;
      promotionAccountsCollection = new PromotionAccountsCollection({
        pageSize: 1
      });
      return promotionAccountsCollection.getActualPromotionsForAccount(this.appointment.organizationSfId, moment()).then((function(_this) {
        return function(promotionAccounts) {
          if (promotionAccounts.length) {
            return _this.elInfoButton.removeClass('hidden').bind('tap', _this._showPromotionPopup);
          }
        };
      })(this));
    };

    AppointmentsTableCellToday.prototype._showPromotionPopup = function(event) {
      var promotionPopup;
      event.stopPropagation();
      promotionPopup = new PromotionPopup(this.appointment);
      return promotionPopup.show();
    };

    AppointmentsTableCellToday.prototype._showNoPromotionsToast = function() {
      return $.fn.dpToast(Locale.value("card.CallReport.ToastMessage.NoPromosForOrganization"));
    };

    return AppointmentsTableCellToday;

  })(AppointmentsTableCell);

  module.exports = AppointmentsTableCellToday;

}).call(this);
}, "controllers/activities/appointments/appointments-today": function(exports, require, module) {(function() {
  var Appointments, AppointmentsToday, AppointmentsTodayCollection, AppointmentsTodayTableCell, SettingsManager, Spine, TableHeaderItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Appointments = require('controllers/activities/appointments/appointments');

  AppointmentsTodayCollection = require('models/bll/call-reports-collection/appointments-today-collection');

  AppointmentsTodayTableCell = require('controllers/activities/appointments/appointments-today-table-cell');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SettingsManager = require('db/settings-manager');

  AppointmentsToday = (function(superClass) {
    extend(AppointmentsToday, superClass);

    function AppointmentsToday() {
      this.createTableHeaderItemsForModel = bind(this.createTableHeaderItemsForModel, this);
      this.getAppointmentsTableCell = bind(this.getAppointmentsTableCell, this);
      this.createCollection = bind(this.createCollection, this);
      return AppointmentsToday.__super__.constructor.apply(this, arguments);
    }

    AppointmentsToday.prototype.className = 'table-view appointments today';

    AppointmentsToday.prototype.active = function(params) {
      AppointmentsToday.__super__.active.call(this, params);
      return SettingsManager.getValueByKey('isTradeModuleEnabled').then((function(_this) {
        return function(isTradeEnabled) {
          if (isTradeEnabled) {
            return _this.el.removeClass('trade-off');
          } else {
            return _this.el.addClass('trade-off');
          }
        };
      })(this));
    };

    AppointmentsToday.prototype.createCollection = function() {
      return new AppointmentsTodayCollection;
    };

    AppointmentsToday.prototype.getAppointmentsTableCell = function(appointment) {
      return new AppointmentsTodayTableCell(appointment);
    };

    AppointmentsToday.prototype.createTableHeaderItemsForModel = function(model) {
      var headerIteritems;
      headerIteritems = AppointmentsToday.__super__.createTableHeaderItemsForModel.call(this, model);
      headerIteritems.push(new TableHeaderItem(Locale.value('common:names.Promo')));
      return headerIteritems;
    };

    return AppointmentsToday;

  })(Appointments);

  module.exports = AppointmentsToday;

}).call(this);
}, "controllers/activities/appointments/appointments-tomorrow": function(exports, require, module) {(function() {
  var Appointments, AppointmentsTomorrow, AppointmentsTomorrowCollection, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Appointments = require('controllers/activities/appointments/appointments');

  AppointmentsTomorrowCollection = require('models/bll/call-reports-collection/appointments-tomorrow-collection');

  AppointmentsTomorrow = (function(superClass) {
    extend(AppointmentsTomorrow, superClass);

    function AppointmentsTomorrow() {
      this.createCollection = bind(this.createCollection, this);
      return AppointmentsTomorrow.__super__.constructor.apply(this, arguments);
    }

    AppointmentsTomorrow.prototype.className = 'table-view appointments tomorrow';

    AppointmentsTomorrow.prototype.createCollection = function() {
      return new AppointmentsTomorrowCollection;
    };

    return AppointmentsTomorrow;

  })(Appointments);

  module.exports = AppointmentsTomorrow;

}).call(this);
}, "controllers/activities/appointments/appointments": function(exports, require, module) {(function() {
  var AppointmentCardEdit, Appointments, AppointmentsCollection, AppointmentsTableCell, ContactCard, LazyTableController, NotificationsModule, OrganizationCard, SortingTableHeaderItem, Spine, Stage, TableHeaderItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Stage = require('controllers/base/stage/stage');

  LazyTableController = require('controllers/lazy-table-controller');

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  AppointmentsTableCell = require('controllers/activities/appointments/appointments-table-cell');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  AppointmentCardEdit = require('controllers/appointment-card/appointment-card-edit');

  ContactCard = require('controllers/contact-card/contact-card');

  OrganizationCard = require('controllers/organization-card/organization-card');

  NotificationsModule = require('common/notifications-module');

  Appointments = (function(superClass) {
    extend(Appointments, superClass);

    Appointments.include(NotificationsModule);

    Appointments.prototype.className = 'table-view appointments';

    Appointments.prototype.isRendered = false;

    Appointments.prototype.context = null;

    Appointments.prototype.tableController = null;

    function Appointments() {
      this._onAppointmentsOrganizationCellTap = bind(this._onAppointmentsOrganizationCellTap, this);
      this._onAppointmentsContactCellTap = bind(this._onAppointmentsContactCellTap, this);
      this._onCellTap = bind(this._onCellTap, this);
      this.reload = bind(this.reload, this);
      this.reset = bind(this.reset, this);
      this.filterBy = bind(this.filterBy, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this.getAppointmentsTableCell = bind(this.getAppointmentsTableCell, this);
      this.refreshIfTimeChange = bind(this.refreshIfTimeChange, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      this.activate = bind(this.activate, this);
      Appointments.__super__.constructor.apply(this, arguments);
      this.tableController = new LazyTableController({
        datasource: this
      });
      this.subscribeOnNotification('appointmentChanged', this.reload);
      this.subscribeOnNotification('callReportCreated', this.reload);
      document.addEventListener('resume', this.refreshIfTimeChange, false);
    }

    Appointments.prototype.activate = function(params) {
      if (params == null) {
        params = {};
      }
      Appointments.__super__.activate.call(this, params);
      return this.executeDeferredNotificationCallbacks();
    };

    Appointments.prototype.shouldDeferNotification = function(notification) {
      return !Stage.globalStage().isActive() || !this.context.stage.isActive() || !this.context.isActive() || !this.isActive();
    };

    Appointments.prototype.active = function(params) {
      Appointments.__super__.active.apply(this, arguments);
      if (!this.isRendered) {
        this.render();
      }
      return this.tableController.active(params);
    };

    Appointments.prototype.render = function() {
      this.lastRenderTime = (new Date).getTime();
      this.html(this.tableController.el);
      this.isRendered = true;
      return this;
    };

    Appointments.prototype.refreshIfTimeChange = function() {
      var date;
      date = (new Date).getTime();
      if (this.el.hasClass('active') && Math.abs(this.lastRenderTime - date) / (1000 * 3600) >= 1) {
        this.reload();
      }
      return this.lastRenderTime = date;
    };

    Appointments.prototype.createCollection = function() {
      return new AppointmentsCollection;
    };

    Appointments.prototype.createTableHeaderItemsForModel = function(model) {
      var dateTimeOfVisitHeader;
      dateTimeOfVisitHeader = new SortingTableHeaderItem(Locale.value('common:names.DateTimeOfVisit'), model.sfdc.dateTimeOfVisit);
      this.tableController.defaultSortingHeader = dateTimeOfVisitHeader;
      return [dateTimeOfVisitHeader, new SortingTableHeaderItem(Locale.value('common:names.Customer'), 'contactLastName', 'contactFirstName'), new TableHeaderItem(Locale.value('common:names.Specialty')), new TableHeaderItem(Locale.value('common:names.Priority')), new TableHeaderItem(Locale.value('common:names.Organization')), new TableHeaderItem(Locale.value('common:names.User')), new TableHeaderItem(Locale.value('common:names.AtCalls'))];
    };

    Appointments.prototype.getAppointmentsTableCell = function(appointment) {
      return new AppointmentsTableCell(appointment);
    };

    Appointments.prototype.cellForObjectOnTable = function(appointment, table) {
      var appointmentsTableCell;
      appointmentsTableCell = this.getAppointmentsTableCell(appointment);
      appointmentsTableCell.on('cellTap', this._onCellTap);
      appointmentsTableCell.on('appointmentsContactCellTap', this._onAppointmentsContactCellTap);
      appointmentsTableCell.on('appointmentsOrganizationCellTap', this._onAppointmentsOrganizationCellTap);
      return appointmentsTableCell;
    };

    Appointments.prototype.filterBy = function(value) {
      return this.tableController.filterBy(value);
    };

    Appointments.prototype.reset = function() {
      return this.tableController.reset();
    };

    Appointments.prototype.reload = function() {
      var timeout;
      return timeout = setTimeout((function(_this) {
        return function() {
          _this.tableController.reload();
          return clearTimeout(timeout);
        };
      })(this), 0);
    };

    Appointments.prototype._onCellTap = function(cell) {
      return this.context.stage.push(new AppointmentCardEdit(cell.appointment.id));
    };

    Appointments.prototype._onAppointmentsContactCellTap = function(cell) {
      return this.context.stage.push(new ContactCard(cell.appointment.contactSfid));
    };

    Appointments.prototype._onAppointmentsOrganizationCellTap = function(cell) {
      return this.context.stage.push(new OrganizationCard(cell.appointment.organizationSfId));
    };

    return Appointments;

  })(Spine.Controller);

  module.exports = Appointments;

}).call(this);
}, "controllers/activities/calls/calls-table-cell": function(exports, require, module) {(function() {
  var CallsTableCell, Spine, TargetFrequenciesCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');

  CallsTableCell = (function(superClass) {
    extend(CallsTableCell, superClass);

    CallsTableCell.prototype.className = "row";

    CallsTableCell.prototype.elements = {
      '.date-time': 'elDateTime',
      '.customer': 'elCustomer',
      '.specialty': 'elSpecialty',
      '.priority': 'elPriority',
      '.user': 'elUser',
      '.at-calls': 'elAtCalls',
      '.calls-contact-cell': 'elCallsContactCell'
    };

    function CallsTableCell(call) {
      this.call = call;
      this.bindEvents = bind(this.bindEvents, this);
      this._onCallsContactCell = bind(this._onCallsContactCell, this);
      this._onCellTap = bind(this._onCellTap, this);
      CallsTableCell.__super__.constructor.call(this, {});
    }

    CallsTableCell.prototype.template = function() {
      return require('views/activities/calls/calls-table-cell')();
    };

    CallsTableCell.prototype._onCellTap = function() {
      return this.trigger('cellTap', this);
    };

    CallsTableCell.prototype._onCallsContactCell = function(event) {
      event.stopPropagation();
      return this.trigger('callsContactCellTap', this);
    };

    CallsTableCell.prototype.bindEvents = function() {
      this.elCallsContactCell.on('tap', this._onCallsContactCell);
      return this.el.on('tap', this._onCellTap);
    };

    CallsTableCell.prototype.render = function() {
      var ref;
      this.html(this.template());
      this.elDateTime.html(Utils.formatDateTimeWithBreak(this.call.dateTimeOfVisit));
      this.elCustomer.html((this.call.contactFullName()) + " <br/> " + ((ref = this.call.contactRecordType) != null ? ref : ''));
      this.elUser.html(this.call.userFullName());
      this.call.getContact().then((function(_this) {
        return function(contact) {
          var lastDateTargetFrequency;
          _this.elPriority.html(contact.priority);
          if (contact.lastDateTargetFrequency) {
            lastDateTargetFrequency = new TargetFrequenciesCollection().parseEntity(contact.lastDateTargetFrequency);
            return _this.elAtCalls.html(lastDateTargetFrequency.atCalls());
          }
        };
      })(this));
      this.call.getSpecialty().then((function(_this) {
        return function(specialty) {
          return _this.elSpecialty.html(_this.call.specialty);
        };
      })(this));
      return this;
    };

    return CallsTableCell;

  })(Spine.Controller);

  module.exports = CallsTableCell;

}).call(this);
}, "controllers/activities/calls/calls-today": function(exports, require, module) {(function() {
  var Calls, CallsToday, CallsTodayCollection, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Calls = require('controllers/activities/calls/calls');

  CallsTodayCollection = require('models/bll/call-reports-collection/calls-today-collection');

  CallsToday = (function(superClass) {
    extend(CallsToday, superClass);

    function CallsToday() {
      this.createCollection = bind(this.createCollection, this);
      return CallsToday.__super__.constructor.apply(this, arguments);
    }

    CallsToday.prototype.className = 'table-view calls today';

    CallsToday.prototype.createCollection = function() {
      return new CallsTodayCollection;
    };

    return CallsToday;

  })(Calls);

  module.exports = CallsToday;

}).call(this);
}, "controllers/activities/calls/calls": function(exports, require, module) {(function() {
  var CallReportCardView, Calls, CallsCollection, CallsTableCell, ContactCard, LazyTableController, NotificationsModule, SortingTableHeaderItem, Spine, Stage, TableHeaderItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Stage = require('controllers/base/stage/stage');

  LazyTableController = require('controllers/lazy-table-controller');

  CallsCollection = require('models/bll/call-reports-collection/calls-collection');

  CallsTableCell = require('controllers/activities/calls/calls-table-cell');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  ContactCard = require('controllers/contact-card/contact-card');

  CallReportCardView = require('controllers/call-report-card/call-report-card-view');

  NotificationsModule = require('common/notifications-module');

  Calls = (function(superClass) {
    extend(Calls, superClass);

    Calls.include(NotificationsModule);

    Calls.prototype.className = 'table-view calls';

    Calls.prototype.isRendered = false;

    Calls.prototype.context = null;

    Calls.prototype.tableController = null;

    function Calls() {
      this._onCallsContactCellTap = bind(this._onCallsContactCellTap, this);
      this._onCellTap = bind(this._onCellTap, this);
      this.reload = bind(this.reload, this);
      this.reset = bind(this.reset, this);
      this.filterBy = bind(this.filterBy, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this.refreshIfTimeChange = bind(this.refreshIfTimeChange, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      this.activate = bind(this.activate, this);
      Calls.__super__.constructor.apply(this, arguments);
      this.tableController = new LazyTableController({
        datasource: this
      });
      this.subscribeOnNotification('callReportCreated', this.reload);
      document.addEventListener('resume', this.refreshIfTimeChange, false);
    }

    Calls.prototype.active = function(params) {
      Calls.__super__.active.apply(this, arguments);
      if (!this.isRendered) {
        this.render();
      }
      return this.tableController.active(params);
    };

    Calls.prototype.activate = function(params) {
      if (params == null) {
        params = {};
      }
      Calls.__super__.activate.call(this, params);
      return this.executeDeferredNotificationCallbacks();
    };

    Calls.prototype.shouldDeferNotification = function(notification) {
      return !Stage.globalStage().isActive() || !this.context.stage.isActive() || !this.context.isActive() || !this.isActive();
    };

    Calls.prototype.render = function() {
      this.lastRenderTime = (new Date).getTime();
      this.html(this.tableController.el);
      this.isRendered = true;
      return this;
    };

    Calls.prototype.refreshIfTimeChange = function() {
      var date;
      date = (new Date).getTime();
      if (this.el.hasClass('active') && Math.abs(this.lastRenderTime - date) / (1000 * 3600) >= 1) {
        this.reload();
      }
      return this.lastRenderTime = date;
    };

    Calls.prototype.createCollection = function() {
      return new CallsCollection;
    };

    Calls.prototype.createTableHeaderItemsForModel = function(model) {
      var dateTimeOfVisitHeader;
      dateTimeOfVisitHeader = new SortingTableHeaderItem(Locale.value('common:names.DateTimeOfVisit'), model.sfdc.dateTimeOfVisit);
      this.tableController.defaultSortingHeader = dateTimeOfVisitHeader;
      return [dateTimeOfVisitHeader, new SortingTableHeaderItem(Locale.value('common:names.Customer'), 'contactLastName', 'contactFirstName'), new TableHeaderItem(Locale.value('common:names.Specialty')), new TableHeaderItem(Locale.value('common:names.Priority')), new TableHeaderItem(Locale.value('common:names.User')), new TableHeaderItem(Locale.value('common:names.AtCalls'))];
    };

    Calls.prototype.cellForObjectOnTable = function(call, table) {
      var appointmentsTableCell;
      appointmentsTableCell = new CallsTableCell(call);
      appointmentsTableCell.on('cellTap', this._onCellTap);
      appointmentsTableCell.on('callsContactCellTap', this._onCallsContactCellTap);
      return appointmentsTableCell;
    };

    Calls.prototype.filterBy = function(value) {
      return this.tableController.filterBy(value);
    };

    Calls.prototype.reset = function() {
      return this.tableController.reset();
    };

    Calls.prototype.reload = function() {
      var timeout;
      return timeout = setTimeout((function(_this) {
        return function() {
          _this.tableController.reload();
          return clearTimeout(timeout);
        };
      })(this), 0);
    };

    Calls.prototype._onCellTap = function(cell) {
      return this.context.stage.push(new CallReportCardView(cell.call.id));
    };

    Calls.prototype._onCallsContactCellTap = function(cell) {
      return this.context.stage.push(new ContactCard(cell.call.contactSfid));
    };

    return Calls;

  })(Spine.Controller);

  module.exports = Calls;

}).call(this);
}, "controllers/activities/pharma-events/pharma-events-table-cell": function(exports, require, module) {(function() {
  var PePickListManager, PharmaEvent, PharmaEventsTableCell, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  PePickListManager = require('db/picklist-managers/pe-picklist-manager');

  PharmaEvent = require('models/pharma-event');

  PharmaEventsTableCell = (function(superClass) {
    extend(PharmaEventsTableCell, superClass);

    PharmaEventsTableCell.prototype.className = "row";

    PharmaEventsTableCell.prototype.elements = {
      '.status': 'elStatus',
      '.owner': 'elOwner',
      '.event-name': 'elEventName',
      '.type-of-event': 'elTypeOfEvent',
      '.stage': 'elStage',
      '.start-date': 'elStartDate',
      '.location': 'elLocation'
    };

    function PharmaEventsTableCell(pharmaEvent) {
      this.pharmaEvent = pharmaEvent;
      this.bindEvents = bind(this.bindEvents, this);
      this._onCellTap = bind(this._onCellTap, this);
      PharmaEventsTableCell.__super__.constructor.call(this, {});
      this.pePicklistManager = new PePickListManager;
    }

    PharmaEventsTableCell.prototype.template = function() {
      return require('views/activities/pharma-events/pharma-events-table-cell')();
    };

    PharmaEventsTableCell.prototype._onCellTap = function() {
      return this.trigger('cellTap', this);
    };

    PharmaEventsTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    PharmaEventsTableCell.prototype.render = function() {
      this.html(this.template());
      this._fillGeneralInfo();
      this._fillStage();
      this._fillTypeOfEvent();
      this._fillStatus();
      return this;
    };

    PharmaEventsTableCell.prototype._fillGeneralInfo = function() {
      this.elOwner.html(this.pharmaEvent.ownerFullName());
      this.elEventName.text(this.pharmaEvent.eventName);
      this.elStartDate.html(Utils.formatDateTimeWithBreak(this.pharmaEvent.startDate));
      return this.elLocation.text(this.pharmaEvent.location);
    };

    PharmaEventsTableCell.prototype._fillStage = function() {
      return this.pePicklistManager.getLabelByValue(PharmaEvent.sfdc.stage, this.pharmaEvent.stage).then((function(_this) {
        return function(label) {
          return _this.elStage.html(label);
        };
      })(this));
    };

    PharmaEventsTableCell.prototype._fillTypeOfEvent = function() {
      return this.pePicklistManager.getLabelByValue(PharmaEvent.sfdc.eventType, this.pharmaEvent.eventType).then((function(_this) {
        return function(label) {
          return _this.elTypeOfEvent.html(label);
        };
      })(this));
    };

    PharmaEventsTableCell.prototype._fillStatus = function() {
      return this.pePicklistManager.getLabelByValue(PharmaEvent.sfdc.status, this.pharmaEvent.status).then((function(_this) {
        return function(label) {
          return _this.elStatus.html(label);
        };
      })(this));
    };

    return PharmaEventsTableCell;

  })(Spine.Controller);

  module.exports = PharmaEventsTableCell;

}).call(this);
}, "controllers/activities/pharma-events/pharma-events": function(exports, require, module) {(function() {
  var LazyTableController, NotificationsModule, PeCardEdit, PeCardView, PharmaEvents, PharmaEventsCollection, PharmaEventsTableCell, SortingTableHeaderItem, Spine, Stage,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Stage = require('controllers/base/stage/stage');

  LazyTableController = require('controllers/lazy-table-controller');

  PharmaEventsTableCell = require('controllers/activities/pharma-events/pharma-events-table-cell');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  PharmaEventsCollection = require('models/bll/pharma-events-collection');

  PeCardView = require('controllers/pe-card/pe-card-view');

  PeCardEdit = require('controllers/pe-card/pe-card-edit');

  NotificationsModule = require('common/notifications-module');

  PharmaEvents = (function(superClass) {
    extend(PharmaEvents, superClass);

    PharmaEvents.include(NotificationsModule);

    PharmaEvents.prototype.className = 'table-view pharma-events';

    PharmaEvents.prototype.isRendered = false;

    PharmaEvents.prototype.context = null;

    PharmaEvents.prototype.tableController = null;

    function PharmaEvents() {
      this._onCellTap = bind(this._onCellTap, this);
      this.reload = bind(this.reload, this);
      this.reset = bind(this.reset, this);
      this.filterBy = bind(this.filterBy, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      this.activate = bind(this.activate, this);
      PharmaEvents.__super__.constructor.apply(this, arguments);
      this.tableController = new LazyTableController({
        datasource: this
      });
    }

    PharmaEvents.prototype.active = function(params) {
      PharmaEvents.__super__.active.apply(this, arguments);
      if (!this.isRendered) {
        this.render();
      }
      return this.tableController.active(params);
    };

    PharmaEvents.prototype.activate = function(params) {
      if (params == null) {
        params = {};
      }
      PharmaEvents.__super__.activate.call(this, params);
      return this.executeDeferredNotificationCallbacks();
    };

    PharmaEvents.prototype.shouldDeferNotification = function(notification) {
      return !Stage.globalStage().isActive() || !this.context.stage.isActive() || !this.context.isActive() || !this.isActive();
    };

    PharmaEvents.prototype.render = function() {
      this.html(this.tableController.el);
      this.isRendered = true;
      return this;
    };

    PharmaEvents.prototype.createCollection = function() {
      return new PharmaEventsCollection;
    };

    PharmaEvents.prototype.createTableHeaderItemsForModel = function(model) {
      var dateTimeOfStartDateHeader;
      dateTimeOfStartDateHeader = new SortingTableHeaderItem(Locale.value('common:names.StartDate'), model.sfdc.startDate);
      this.tableController.defaultSortingHeader = dateTimeOfStartDateHeader;
      return [new SortingTableHeaderItem(Locale.value('common:names.Status'), model.sfdc.status), new SortingTableHeaderItem(Locale.value('common:names.Owner'), 'ownerLastName', 'ownerFirstName'), new SortingTableHeaderItem(Locale.value('common:names.EventName'), model.sfdc.eventName), new SortingTableHeaderItem(Locale.value('common:names.TypeOfEvent'), model.sfdc.eventType), new SortingTableHeaderItem(Locale.value('common:names.Stage'), model.sfdc.stage), dateTimeOfStartDateHeader, new SortingTableHeaderItem(Locale.value('common:names.Location'), model.sfdc.location)];
    };

    PharmaEvents.prototype.cellForObjectOnTable = function(pharmaEvent, table) {
      var appointmentsTableCell;
      appointmentsTableCell = new PharmaEventsTableCell(pharmaEvent);
      appointmentsTableCell.on('cellTap', this._onCellTap);
      return appointmentsTableCell;
    };

    PharmaEvents.prototype.filterBy = function(value) {
      return this.tableController.filterBy(value);
    };

    PharmaEvents.prototype.reset = function() {
      return this.tableController.reset();
    };

    PharmaEvents.prototype.reload = function() {
      var timeout;
      return timeout = setTimeout((function(_this) {
        return function() {
          _this.tableController.reload();
          return clearTimeout(timeout);
        };
      })(this), 0);
    };

    PharmaEvents.prototype._onCellTap = function(cell) {
      return cell.pharmaEvent.isEditable().then((function(_this) {
        return function(isEditable) {
          var peCard;
          if (isEditable) {
            peCard = new PeCardEdit(cell.pharmaEvent.id);
            peCard.on('pharmaEventChanged', function() {
              return _this.reload();
            });
            return _this.context.stage.push(peCard);
          } else {
            return _this.context.stage.push(new PeCardView(cell.pharmaEvent.id));
          }
        };
      })(this));
    };

    return PharmaEvents;

  })(Spine.Controller);

  module.exports = PharmaEvents;

}).call(this);
}, "controllers/agenda/presentation-structure-generator": function(exports, require, module) {(function() {
  var FileProcessor, PresentationStructureGenerator, PresentationsFileManager;

  FileProcessor = require('common/file-processor/file-processor');

  PresentationsFileManager = require('common/presentation-managers/presentations-file-manager');

  PresentationStructureGenerator = (function() {
    function PresentationStructureGenerator() {}

    PresentationStructureGenerator.generate = function(scenario) {
      var chapterName, fileProcessor, jsonStructure, slidesArray;
      slidesArray = JSON.parse(scenario.structure);
      chapterName = scenario.name || 'preview';
      jsonStructure = {
        slides: {},
        chapters: {},
        storyboard: ["" + chapterName]
      };
      jsonStructure.chapters["" + chapterName] = {
        name: "" + chapterName,
        content: []
      };
      slidesArray.forEach(function(slideObject) {
        var slideId;
        slideId = "P" + slideObject.presentationId + "_" + slideObject.id;
        jsonStructure.slides[slideId] = {
          name: slideObject.name,
          template: (PresentationsFileManager.getPathToPresentation(slideObject.presentationId)) + "/" + slideObject.path
        };
        return jsonStructure.chapters["" + chapterName].content.push(slideId);
      });
      fileProcessor = new FileProcessor;
      fileProcessor.write('structure.json', JSON.stringify(jsonStructure));
      return fileProcessor.getFullPath('structure.json');
    };

    return PresentationStructureGenerator;

  })();

  module.exports = PresentationStructureGenerator;

}).call(this);
}, "controllers/agenda/scenario-detail/scenario-detail-general": function(exports, require, module) {(function() {
  var CommonInput, ListPopup, PresentationsCollection, ScenarioDetailGeneral, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ListPopup = require('controls/popups/list-popup');

  PresentationsCollection = require('models/bll/presentations-collection');

  CommonInput = require('controls/common-input/common-input');

  ScenarioDetailGeneral = (function(superClass) {
    extend(ScenarioDetailGeneral, superClass);

    ScenarioDetailGeneral.prototype._currentPresentation = null;

    ScenarioDetailGeneral.prototype.className = 'sidebar-general';

    ScenarioDetailGeneral.prototype.elements = {
      '.presentation-name': 'elPresentationName',
      '.selected-presentation': 'elSelectedPresentation'
    };

    ScenarioDetailGeneral.prototype.MAX_NAME_LENGTH = 255;

    function ScenarioDetailGeneral(_scenarioName) {
      this._scenarioName = _scenarioName != null ? _scenarioName : '';
      this.hideKeyboard = bind(this.hideKeyboard, this);
      this._updateScenarioName = bind(this._updateScenarioName, this);
      this._openPresentationsList = bind(this._openPresentationsList, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._onPresentationChoosed = bind(this._onPresentationChoosed, this);
      this._loadAvailablePresentations = bind(this._loadAvailablePresentations, this);
      ScenarioDetailGeneral.__super__.constructor.call(this, {});
    }

    ScenarioDetailGeneral.prototype._loadAvailablePresentations = function() {
      return new PresentationsCollection().fetchAllLoaded().then((function(_this) {
        return function(presentations) {
          _this.presentations = presentations;
          _this.presentations = _this.presentations.filter(function(presentation, index) {
            _this.presentations[index]['description'] = _this.presentations[index]['name'];
            return !!presentation.currentVersion;
          });
          _this.presentations.unshift({
            id: null,
            description: 'None',
            name: 'None'
          });
          return $.when();
        };
      })(this));
    };

    ScenarioDetailGeneral.prototype._onPresentationChoosed = function(selectedPresentation) {
      this.elSelectedPresentation.html(selectedPresentation.name);
      this._currentPresentation = selectedPresentation;
      return this.trigger('presentationChanged', selectedPresentation);
    };

    ScenarioDetailGeneral.prototype._bindEvents = function() {
      this.elSelectedPresentation.bind('tap', this._openPresentationsList);
      this.elPresentationName.bind('blur', this._updateScenarioName);
      return this.elPresentationName.bind('touchstart', function(event) {
        return event.stopPropagation();
      });
    };

    ScenarioDetailGeneral.prototype._openPresentationsList = function() {
      return this._loadAvailablePresentations().then((function(_this) {
        return function() {
          return _this._showFilterPopup();
        };
      })(this));
    };

    ScenarioDetailGeneral.prototype._showFilterPopup = function() {
      var filterPopup;
      filterPopup = new ListPopup(this.presentations, this._currentPresentation);
      filterPopup.on('onPopupItemSelected', (function(_this) {
        return function(selectedElement) {
          _this._onPresentationChoosed(selectedElement.model);
          return filterPopup.hide();
        };
      })(this));
      return filterPopup.show();
    };

    ScenarioDetailGeneral.prototype._updateScenarioName = function(event) {
      return this.trigger('scenarioNameChanged', this.elPresentationName[0].getValue());
    };

    ScenarioDetailGeneral.prototype.template = function() {
      return require('views/agenda/scenario-details-general');
    };

    ScenarioDetailGeneral.prototype.render = function() {
      this.html(this.template());
      this.commonInput = new CommonInput(app.mainController.el, this.elPresentationName, this.MAX_NAME_LENGTH, 'touchstart');
      this.commonInput.setValue(this._scenarioName);
      return this._bindEvents();
    };

    ScenarioDetailGeneral.prototype.hideKeyboard = function() {
      return this.commonInput.element.blur();
    };

    return ScenarioDetailGeneral;

  })(Spine.Controller);

  module.exports = ScenarioDetailGeneral;

}).call(this);
}, "controllers/agenda/scenario-detail/scenario-detail-sidebar-cell": function(exports, require, module) {(function() {
  var PresentationFileManager, ScenarioSidebarCell, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PresentationFileManager = require('common/presentation-managers/presentations-file-manager');

  ScenarioSidebarCell = (function(superClass) {
    extend(ScenarioSidebarCell, superClass);

    ScenarioSidebarCell.prototype.className = 'slide-item';

    ScenarioSidebarCell.prototype.tag = 'li';

    ScenarioSidebarCell.prototype.elements = {
      '.slide-thumb': 'elThumbnail',
      '.slide-name': 'elSlideName'
    };

    ScenarioSidebarCell.prototype._onCellTap = function() {
      this.slideData.removed = true;
      return this.trigger('sidebarSlideSelected', this);
    };

    ScenarioSidebarCell.prototype._bindEvents = function() {
      return this.el.bind('tap', this._onCellTap);
    };

    function ScenarioSidebarCell(slideData) {
      this.slideData = slideData;
      this._rootPathForPresentationWithId = bind(this._rootPathForPresentationWithId, this);
      this.template = bind(this.template, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._onCellTap = bind(this._onCellTap, this);
      ScenarioSidebarCell.__super__.constructor.call(this, {});
    }

    ScenarioSidebarCell.prototype.template = function() {
      return require('views/agenda/sidebar-slide-cell');
    };

    ScenarioSidebarCell.prototype.render = function() {
      var fullPath;
      this.html(this.template());
      this.elSlideName.html(this.slideData.name);
      fullPath = this._rootPathForPresentationWithId(this.slideData.presentationId) + this.slideData.thumbnail;
      this.elThumbnail.css('background-image', "url('" + fullPath + "')");
      return this._bindEvents();
    };

    ScenarioSidebarCell.prototype._rootPathForPresentationWithId = function(presentationId) {
      return PresentationFileManager.getPathToPresentation(presentationId);
    };

    return ScenarioSidebarCell;

  })(Spine.Controller);

  module.exports = ScenarioSidebarCell;

}).call(this);
}, "controllers/agenda/scenario-detail/scenario-detail-slides-list": function(exports, require, module) {(function() {
  var PresentationStructureManager, ScenarioDetailSlidesList, ScenarioSidebarGroup, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PresentationStructureManager = require('common/presentation-managers/presentation-structure-manager');

  ScenarioSidebarGroup = require('controllers/agenda/scenario-detail/scenario-sidebar-group');

  ScenarioDetailSlidesList = (function(superClass) {
    extend(ScenarioDetailSlidesList, superClass);

    function ScenarioDetailSlidesList() {
      this.renderPresentationSlides = bind(this.renderPresentationSlides, this);
      this._updateSlidesState = bind(this._updateSlidesState, this);
      this._isInSequence = bind(this._isInSequence, this);
      this.appendSlide = bind(this.appendSlide, this);
      this._onSlideSelected = bind(this._onSlideSelected, this);
      this._cumputeScrollerHeight = bind(this._cumputeScrollerHeight, this);
      return ScenarioDetailSlidesList.__super__.constructor.apply(this, arguments);
    }

    ScenarioDetailSlidesList.prototype.className = 'scenario-slides-list scroll-container';

    ScenarioDetailSlidesList.prototype.scroller = $('<div class="scroll-content"></div>');

    ScenarioDetailSlidesList.prototype._cumputeScrollerHeight = function() {
      var parentHeight, parentNode, syblingsHeight;
      parentNode = this.el.parent();
      parentHeight = parentNode.height();
      syblingsHeight = parentNode.children().outerHeight();
      return this.el.height((parentHeight - syblingsHeight) + "px");
    };

    ScenarioDetailSlidesList.prototype._onSlideSelected = function(selectedSlide) {
      return this.trigger('sidebarSlideSelected', selectedSlide);
    };

    ScenarioDetailSlidesList.prototype.render = function() {
      this.el.scrollTop(0);
      this.scroller.html('');
      this.html(this.scroller);
      this.sidebarGroups = [];
      if (this.presentationStructure) {
        this.presentationStructure.forEach((function(_this) {
          return function(chapter) {
            var sidebarGroup;
            sidebarGroup = new ScenarioSidebarGroup(chapter);
            sidebarGroup.render();
            _this.scroller.append(sidebarGroup.el);
            sidebarGroup.on('sidebarSlideSelected', _this._onSlideSelected);
            return _this.sidebarGroups.push(sidebarGroup);
          };
        })(this));
        return this._cumputeScrollerHeight();
      }
    };

    ScenarioDetailSlidesList.prototype.appendSlide = function(slideData) {
      var targetGroup;
      if (slideData.presentationId === this.presentationId) {
        targetGroup = this.sidebarGroups.filter((function(_this) {
          return function(group) {
            return group.chapterData.id === slideData.chapterId;
          };
        })(this))[0];
        if (targetGroup) {
          return targetGroup.addSlide(slideData);
        }
      }
    };

    ScenarioDetailSlidesList.prototype._isInSequence = function(slide, sequence) {
      return sequence.filter((function(_this) {
        return function(sequenceSlide) {
          return (slide.presentationId === sequenceSlide.presentationId) && (slide.id === sequenceSlide.id);
        };
      })(this)).length > 0;
    };

    ScenarioDetailSlidesList.prototype._updateSlidesState = function(sequence) {
      return this.presentationStructure = this.presentationStructure.map((function(_this) {
        return function(chapter) {
          chapter.content = chapter.content.map(function(slide) {
            slide.removed = _this._isInSequence(slide, sequence);
            return slide;
          });
          return chapter;
        };
      })(this));
    };

    ScenarioDetailSlidesList.prototype.renderPresentationSlides = function(presentationId, existsSequence) {
      this.presentationId = presentationId;
      return PresentationStructureManager.getParsedStructure(this.presentationId).done((function(_this) {
        return function(presentationStructure) {
          _this.presentationStructure = presentationStructure;
          _this._updateSlidesState(existsSequence);
          return _this.render();
        };
      })(this)).fail((function(_this) {
        return function() {
          _this.presentationStructure = [];
          return _this.render();
        };
      })(this));
    };

    return ScenarioDetailSlidesList;

  })(Spine.Controller);

  module.exports = ScenarioDetailSlidesList;

}).call(this);
}, "controllers/agenda/scenario-detail/scenario-sidebar-group": function(exports, require, module) {(function() {
  var ScenarioSidebarCell, ScenarioSidebarGroup, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ScenarioSidebarCell = require('controllers/agenda/scenario-detail/scenario-detail-sidebar-cell');

  ScenarioSidebarGroup = (function(superClass) {
    extend(ScenarioSidebarGroup, superClass);

    ScenarioSidebarGroup.prototype.className = 'sidebar-slide-group';

    ScenarioSidebarGroup.prototype.elements = {
      'h3.group-name': 'elChapterName',
      '.slides-list': 'elSlidesList'
    };

    function ScenarioSidebarGroup(chapterData) {
      this.chapterData = chapterData;
      this._isHideGroup = bind(this._isHideGroup, this);
      this._onCellSelected = bind(this._onCellSelected, this);
      this.addSlide = bind(this.addSlide, this);
      this.template = bind(this.template, this);
      ScenarioSidebarGroup.__super__.constructor.call(this, {});
    }

    ScenarioSidebarGroup.prototype.template = function() {
      return require('views/agenda/scenario-sidebar-group');
    };

    ScenarioSidebarGroup.prototype.render = function() {
      this.html(this.template());
      this.groupCells = [];
      this.elChapterName.html(this.chapterData.name);
      this.chapterData.content.forEach((function(_this) {
        return function(slideData) {
          var sidebarCell;
          sidebarCell = new ScenarioSidebarCell(slideData);
          _this.groupCells.push(sidebarCell);
          if (!slideData.removed) {
            sidebarCell.render();
            _this.elSlidesList.append(sidebarCell.el);
          }
          return sidebarCell.on('sidebarSlideSelected', _this._onCellSelected);
        };
      })(this));
      return this._isHideGroup();
    };

    ScenarioSidebarGroup.prototype.addSlide = function(slideData) {
      var targetCell;
      targetCell = this.groupCells.filter((function(_this) {
        return function(cell) {
          return cell.slideData.id === slideData.id;
        };
      })(this))[0];
      targetCell.slideData.removed = false;
      this.render();
      return this._isHideGroup();
    };

    ScenarioSidebarGroup.prototype._onCellSelected = function(selectedCell) {
      this.trigger('sidebarSlideSelected', selectedCell);
      selectedCell.el.detach();
      return this._isHideGroup();
    };

    ScenarioSidebarGroup.prototype._isHideGroup = function() {
      var action;
      action = this.elSlidesList.children().length ? 'removeClass' : 'addClass';
      return this.el[action]('hidden');
    };

    return ScenarioSidebarGroup;

  })(Spine.Controller);

  module.exports = ScenarioSidebarGroup;

}).call(this);
}, "controllers/agenda/scenario-details": function(exports, require, module) {(function() {
  var ConfirmationPopup, FullscreenPanel, Header, HeaderBaseControl, PanelScreen, PresentationScenarioViewer, Scenario, ScenarioDetailSlidesList, ScenarioDetails, ScenarioDetailsGeneral, ScenariosCollection, ScenariosGridView, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  FullscreenPanel = require('controllers/base/panel/fullscreen-panel');

  PanelScreen = require('controllers/base/panel/panel-screen');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  ScenariosGridView = require('controllers/agenda/scenarios-grid-view');

  ScenarioDetailsGeneral = require('controllers/agenda/scenario-detail/scenario-detail-general');

  ScenarioDetailSlidesList = require('controllers/agenda/scenario-detail/scenario-detail-slides-list');

  Scenario = require('models/scenario');

  ScenariosCollection = require('models/bll/scenarios-collection');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  PresentationScenarioViewer = require('controllers/presentation-viewer/presentation-scenario-viewer');

  ScenarioDetails = (function(superClass) {
    extend(ScenarioDetails, superClass);

    ScenarioDetails.prototype._currentPresentation = null;

    ScenarioDetails.prototype._scenarioName = '';

    ScenarioDetails.prototype._scenarioSequence = [];

    ScenarioDetails.prototype.className = 'scenario-details';

    ScenarioDetails.prototype.elements = {
      '.scenarios-grid-view-wrapper': 'elScenariosGridViewWrapper',
      '.scenarios-side-view': 'elSidebar'
    };

    function ScenarioDetails(entity) {
      this.entity = entity != null ? entity : null;
      this._renderSlidesList = bind(this._renderSlidesList, this);
      this._renderSidebarGeneral = bind(this._renderSidebarGeneral, this);
      this._removeItem = bind(this._removeItem, this);
      this._updateSequence = bind(this._updateSequence, this);
      this._cellMoved = bind(this._cellMoved, this);
      this._initGridView = bind(this._initGridView, this);
      this._saveScenario = bind(this._saveScenario, this);
      this._saveScenarioTap = bind(this._saveScenarioTap, this);
      this._previewScenario = bind(this._previewScenario, this);
      this._previewScenarioBtnTap = bind(this._previewScenarioBtnTap, this);
      this._initHeader = bind(this._initHeader, this);
      this.onBack = bind(this.onBack, this);
      this.render = bind(this.render, this);
      this.template = bind(this.template, this);
      ScenarioDetails.__super__.constructor.apply(this, arguments);
      if (this.entity) {
        this._scenarioName = this.entity.name;
        this._scenarioSequence = JSON.parse(this.entity.structure);
      }
      this.isChanged = false;
    }

    ScenarioDetails.prototype.active = function() {
      ScenarioDetails.__super__.active.apply(this, arguments);
      this.render();
      this._initHeader();
      return this._initGridView();
    };

    ScenarioDetails.prototype.template = function() {
      return require('views/agenda/scenario-details');
    };

    ScenarioDetails.prototype.render = function() {
      this.html(this.template());
      this._renderSidebarGeneral();
      return this._renderSlidesList();
    };

    ScenarioDetails.prototype.onBack = function() {
      var confirm;
      this.generalInfo.hideKeyboard();
      if (!this.isChanged) {
        return ScenarioDetails.__super__.onBack.apply(this, arguments);
      } else {
        confirm = new ConfirmationPopup({
          caption: Locale.value('card.ConfirmationPopup.SaveChanges.Caption')
        });
        confirm.bind('yesClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            return _this._saveScenarioTap();
          };
        })(this));
        confirm.bind('noClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            _this.isChanged = false;
            return ScenarioDetails.__super__.onBack.apply(_this, arguments);
          };
        })(this));
        return this.presentModalController(confirm);
      }
    };

    ScenarioDetails.prototype._initHeader = function() {
      var headerPreviewBtn, headerSaveBtn, scenarioDetailsHeader, title;
      headerPreviewBtn = new HeaderBaseControl(Locale.value('common:buttons.Preview'), 'ctrl-btn');
      headerSaveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      headerPreviewBtn.bind('tap', this._previewScenarioBtnTap);
      headerSaveBtn.bind('tap', this._saveScenarioTap);
      title = this.entity ? Locale.value('scenarioDetails.EditHeaderTitle') : Locale.value('scenarioDetails.HeaderTitle');
      scenarioDetailsHeader = new Header(title);
      scenarioDetailsHeader.render();
      scenarioDetailsHeader.addRightControlElement(headerPreviewBtn.el);
      scenarioDetailsHeader.addRightControlElement(headerSaveBtn.el);
      return this.setHeader(scenarioDetailsHeader);
    };

    ScenarioDetails.prototype._previewScenarioBtnTap = function() {
      var ref;
      if (((ref = this._scenarioSequence) != null ? ref.length : void 0) > 0) {
        return this._previewScenario();
      } else {
        return this._showNoSlidesForPreviewToast();
      }
    };

    ScenarioDetails.prototype._previewScenario = function() {
      var presentationScenarioViewer, scenario;
      scenario = {
        name: this._scenarioName,
        structure: JSON.stringify(this._scenarioSequence)
      };
      presentationScenarioViewer = new PresentationScenarioViewer(scenario);
      presentationScenarioViewer.on('complete', function() {
        return presentationScenarioViewer.closePresentation();
      });
      return presentationScenarioViewer.openPresentation();
    };

    ScenarioDetails.prototype._saveScenarioTap = function() {
      var ref;
      if (((ref = this._scenarioSequence) != null ? ref.length : void 0) > 0) {
        return this._saveScenario();
      } else {
        return this._showNoSlidesForSaveToast();
      }
    };

    ScenarioDetails.prototype._saveScenario = function() {
      var ref, scenario, scenariosCollection, toastMessage;
      this.generalInfo.hideKeyboard();
      if (((ref = this._scenarioName) != null ? ref.length : void 0) > 0) {
        scenariosCollection = new ScenariosCollection;
        if (this.entity) {
          this.entity.name = this._scenarioName;
          this.entity.structure = JSON.stringify(this._scenarioSequence);
          scenariosCollection.updateEntity(this.entity);
        } else {
          scenario = new Scenario;
          scenario.name = this._scenarioName;
          scenario.structure = JSON.stringify(this._scenarioSequence);
          scenariosCollection.createEntity(scenario);
        }
        this.postNotification('scenarioUpdated');
        this.isChanged = false;
        return this.onBack();
      } else {
        toastMessage = Locale.value('card.ToastMessage.RequiredFieldsHeader') + ":<br/> " + Locale.value('common:names.Name');
        return $.fn.dpToast(toastMessage);
      }
    };

    ScenarioDetails.prototype._showNoSlidesForPreviewToast = function() {
      return $.fn.dpToast(Locale.value('scenarioDetails.NoSlidesForPreview'));
    };

    ScenarioDetails.prototype._showNoSlidesForSaveToast = function() {
      return $.fn.dpToast(Locale.value('scenarioDetails.NoSlidesForSave'));
    };

    ScenarioDetails.prototype._initGridView = function() {
      this.scenariosGridView = new ScenariosGridView;
      this.scenariosGridView.on('gridRemoveCell', this._removeItem);
      this.scenariosGridView.on('scenarioSequenceUpdate', this._updateSequence);
      this.scenariosGridView.on('onCellMove', this._cellMoved);
      this.elScenariosGridViewWrapper.append(this.scenariosGridView.el);
      return this.scenariosGridView.loadScenarios(this._scenarioSequence);
    };

    ScenarioDetails.prototype._cellMoved = function() {
      return this.isChanged = true;
    };

    ScenarioDetails.prototype._updateSequence = function(cells) {
      return this._scenarioSequence = cells.map((function(_this) {
        return function(cell) {
          return cell.slideObject;
        };
      })(this));
    };

    ScenarioDetails.prototype._removeItem = function(cellItem) {
      this.isChanged = true;
      return this.slidesListController.appendSlide(cellItem.slideObject);
    };

    ScenarioDetails.prototype._renderSidebarGeneral = function() {
      this.generalInfo = new ScenarioDetailsGeneral(this._scenarioName);
      this.generalInfo.render();
      this.elSidebar.append(this.generalInfo.el);
      this.generalInfo.on('presentationChanged', (function(_this) {
        return function(_currentPresentation) {
          _this._currentPresentation = _currentPresentation;
          return _this.slidesListController.renderPresentationSlides(_this._currentPresentation.id, _this._scenarioSequence);
        };
      })(this));
      return this.generalInfo.on('scenarioNameChanged', (function(_this) {
        return function(scenarioName) {
          if (_this._scenarioName !== scenarioName) {
            _this.isChanged = true;
          }
          return _this._scenarioName = scenarioName;
        };
      })(this));
    };

    ScenarioDetails.prototype._renderSlidesList = function() {
      this.slidesListController = new ScenarioDetailSlidesList;
      this.slidesListController.render();
      this.elSidebar.append(this.slidesListController.el);
      return this.slidesListController.on('sidebarSlideSelected', (function(_this) {
        return function(selectedSlide) {
          _this.isChanged = true;
          selectedSlide.slideData.presentationName = _this._currentPresentation.name;
          return _this.scenariosGridView.addCell(selectedSlide.slideData);
        };
      })(this));
    };

    return ScenarioDetails;

  })(FullscreenPanel);

  module.exports = ScenarioDetails;

}).call(this);
}, "controllers/agenda/scenarios-grid-view-cell": function(exports, require, module) {(function() {
  var PresentationFileManager, ScenariosGridViewCell, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PresentationFileManager = require('common/presentation-managers/presentations-file-manager');

  ScenariosGridViewCell = (function(superClass) {
    extend(ScenariosGridViewCell, superClass);

    ScenariosGridViewCell.prototype.className = 'scenarios-grid-view-cell';

    ScenariosGridViewCell.prototype.events = {
      "tap .scenarios-grid-view-cell-remove": "_removeCell"
    };

    ScenariosGridViewCell.prototype.elements = {
      '.scenarios-grid-view-cell-title': 'elTitle',
      '.scenarios-grid-view-cell-icon': 'elIcon',
      '.scenarios-grid-view-cell-name': 'elName'
    };

    function ScenariosGridViewCell(slideObject) {
      this._removeCell = bind(this._removeCell, this);
      this._rootPathForPresentationWithId = bind(this._rootPathForPresentationWithId, this);
      this.render = bind(this.render, this);
      ScenariosGridViewCell.__super__.constructor.call(this, {});
      this.slideObject = slideObject;
    }

    ScenariosGridViewCell.prototype.template = function() {
      return require('views/agenda/scenarios-grid-view-cell');
    };

    ScenariosGridViewCell.prototype.render = function() {
      var fullPath;
      this.html(this.template());
      this.elTitle.html(this.slideObject.presentationName);
      this.elName.html(this.slideObject.name);
      fullPath = this._rootPathForPresentationWithId(this.slideObject.presentationId) + this.slideObject.thumbnail;
      this.elIcon.css("backgroundImage", "url('" + fullPath + "')");
      return this;
    };

    ScenariosGridViewCell.prototype._rootPathForPresentationWithId = function(presentationId) {
      return PresentationFileManager.getPathToPresentation(presentationId);
    };

    ScenariosGridViewCell.prototype._removeCell = function() {
      return this.trigger('gridRemoveCell', this);
    };

    return ScenariosGridViewCell;

  })(Spine.Controller);

  module.exports = ScenariosGridViewCell;

}).call(this);
}, "controllers/agenda/scenarios-grid-view": function(exports, require, module) {(function() {
  var DragAndDrop, PresentationsFileManager, ScenariosGridView, ScenariosGridViewCell, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ScenariosGridViewCell = require('controllers/agenda/scenarios-grid-view-cell');

  PresentationsFileManager = require('common/presentation-managers/presentations-file-manager');

  DragAndDrop = require('common/drag-and-drop');

  ScenariosGridView = (function(superClass) {
    extend(ScenariosGridView, superClass);

    function ScenariosGridView() {
      this._onCellDown = bind(this._onCellDown, this);
      this._isSameSlides = bind(this._isSameSlides, this);
      this._indexOf = bind(this._indexOf, this);
      this._replaceCell = bind(this._replaceCell, this);
      this._insertAfter = bind(this._insertAfter, this);
      this._getCellCenter = bind(this._getCellCenter, this);
      this._inRect = bind(this._inRect, this);
      this._onCellDndEnd = bind(this._onCellDndEnd, this);
      this._onCellDndMove = bind(this._onCellDndMove, this);
      this._onCellDndStart = bind(this._onCellDndStart, this);
      this._triggerSequenceUpdate = bind(this._triggerSequenceUpdate, this);
      this._removeCell = bind(this._removeCell, this);
      this.addCell = bind(this.addCell, this);
      this.loadScenarios = bind(this.loadScenarios, this);
      this.clear = bind(this.clear, this);
      return ScenariosGridView.__super__.constructor.apply(this, arguments);
    }

    ScenariosGridView.prototype.className = 'scenarios-grid-view scroll-content';

    ScenariosGridView.prototype.RESET_TIME = 300;

    ScenariosGridView.prototype.cells = [];

    ScenariosGridView.prototype.clear = function() {
      return this.cells.forEach((function(_this) {
        return function(cellObject) {
          return cellObject.removeCell();
        };
      })(this));
    };

    ScenariosGridView.prototype.loadScenarios = function(scenario) {
      if (scenario == null) {
        scenario = [];
      }
      this.cells = [];
      this.html('');
      return scenario.forEach((function(_this) {
        return function(slideObject) {
          return _this.addCell(slideObject);
        };
      })(this));
    };

    ScenariosGridView.prototype.addCell = function(slideObject) {
      var scenariosGridViewCell;
      scenariosGridViewCell = new ScenariosGridViewCell(slideObject);
      scenariosGridViewCell.on('gridRemoveCell', this._removeCell);
      this.append(scenariosGridViewCell.render().el);
      new DragAndDrop(scenariosGridViewCell, this.el, {
        onStart: this._onCellDndStart,
        onMove: this._onCellDndMove,
        onEnd: this._onCellDndEnd
      });
      this.cells.push(scenariosGridViewCell);
      return this._triggerSequenceUpdate();
    };

    ScenariosGridView.prototype._removeCell = function(cellObject) {
      this.cells = this.cells.filter((function(_this) {
        return function(cell) {
          return !_this._isSameSlides(cell, cellObject);
        };
      })(this));
      this._triggerSequenceUpdate();
      this.trigger('gridRemoveCell', cellObject);
      return cellObject.release();
    };

    ScenariosGridView.prototype._triggerSequenceUpdate = function() {
      return this.trigger('scenarioSequenceUpdate', this.cells);
    };

    ScenariosGridView.prototype._onCellDndStart = function(dndObj) {
      return dndObj.element.addClass('zoomed');
    };

    ScenariosGridView.prototype._onCellDndMove = function(dndObj) {
      return this.trigger('onCellMove', dndObj);
    };

    ScenariosGridView.prototype._onCellDndEnd = function(dndObj) {
      dndObj.element.removeClass('zoomed');
      return this._onCellDown(dndObj);
    };

    ScenariosGridView.prototype._inRect = function(pointX, pointY, element) {
      var inHorizintal, inVertical, offset;
      offset = element.offset();
      inHorizintal = pointX >= offset.left && pointX <= offset.left + element.outerWidth();
      inVertical = pointY >= offset.top && pointY <= offset.top + element.outerHeight();
      return inHorizintal && inVertical;
    };

    ScenariosGridView.prototype._getCellCenter = function(element) {
      var offset;
      offset = element.offset();
      return {
        x: offset.left + element.outerWidth() / 2,
        y: offset.top + element.outerHeight() / 2
      };
    };

    ScenariosGridView.prototype._insertAfter = function(newNode, referenceNode) {
      return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    };

    ScenariosGridView.prototype._replaceCell = function(indexDest, indexSrc) {
      var destCell;
      destCell = this.cells.splice(indexSrc, 1)[0];
      this.cells.splice(indexDest, 0, destCell);
      return this._triggerSequenceUpdate();
    };

    ScenariosGridView.prototype._indexOf = function(cellObject) {
      var result;
      result = null;
      this.cells.forEach((function(_this) {
        return function(obj, index) {
          if (_this._isSameSlides(obj, cellObject)) {
            return result = index;
          }
        };
      })(this));
      return result;
    };

    ScenariosGridView.prototype._isSameSlides = function(cellObject1, cellObject2) {
      var slide1, slide2;
      slide1 = cellObject1.slideObject;
      slide2 = cellObject2.slideObject;
      return slide1.id === slide2.id && slide1.presentationId === slide2.presentationId;
    };

    ScenariosGridView.prototype._onCellDown = function(dndObj) {
      var $targetElement, cellCenter, dndIndex, targetCell, targetIndex;
      cellCenter = this._getCellCenter(dndObj.element);
      targetCell = this.cells.filter((function(_this) {
        return function(cellObject) {
          return _this._inRect(cellCenter.x, cellCenter.y, cellObject.el) && !_this._isSameSlides(dndObj.cellObject, cellObject);
        };
      })(this));
      if (targetCell.length === 1) {
        dndObj.reset();
        $targetElement = targetCell[0].el;
        targetIndex = this._indexOf(targetCell[0]);
        dndIndex = this._indexOf(dndObj.cellObject);
        if (targetIndex > dndIndex) {
          this._insertAfter(dndObj.element[0], $targetElement[0]);
        } else {
          this.el[0].insertBefore(dndObj.element[0], $targetElement[0]);
        }
        return this._replaceCell(targetIndex, dndIndex);
      } else {
        return dndObj.reset(this.RESET_TIME);
      }
    };

    return ScenariosGridView;

  })(Spine.Controller);

  module.exports = ScenariosGridView;

}).call(this);
}, "controllers/agenda/scenarios-table-cell": function(exports, require, module) {(function() {
  var ScenariosTableCell, Spine, Switcher,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Switcher = require('common/switcher');

  ScenariosTableCell = (function(superClass) {
    extend(ScenariosTableCell, superClass);

    ScenariosTableCell.prototype.className = 'row';

    ScenariosTableCell.prototype.elements = {
      '.name': 'elScenarioName',
      '.open': 'elOpenButton',
      '.openContainer': 'elOpenButtonContainer',
      '.delete': 'elDeleteButton',
      '.cell-wrapper': 'elCellWrapper',
      '.delete-btn-wrapper': 'deleteBtnWrapper'
    };

    ScenariosTableCell.prototype.TIME_DELAY = 400;

    function ScenariosTableCell(scenario) {
      this.scenario = scenario;
      this._hideDeleteButton = bind(this._hideDeleteButton, this);
      this._showDeleteButton = bind(this._showDeleteButton, this);
      this._onDeleteScenarioTap = bind(this._onDeleteScenarioTap, this);
      this._onOpenScenarioTap = bind(this._onOpenScenarioTap, this);
      this._onCellTap = bind(this._onCellTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      ScenariosTableCell.__super__.constructor.call(this, {});
    }

    ScenariosTableCell.prototype.template = function() {
      return require('views/agenda/scenarios-table-cell')();
    };

    ScenariosTableCell.prototype.bindEvents = function() {
      this.el.on('tap', this._onCellTap);
      this.elOpenButton.on('tap', this._onOpenScenarioTap);
      this.elDeleteButton.on('tap', this._onDeleteScenarioTap);
      this.elOpenButtonContainer.on('tap', this._onOpenScenarioTap);
      this.elCellWrapper.on('onSwitcherShow', this._showDeleteButton);
      this.elCellWrapper.on('onSwitcherHide', this._hideDeleteButton);
      return this.switcher = new Switcher(this.elCellWrapper, this.deleteBtnWrapper);
    };

    ScenariosTableCell.prototype._onCellTap = function(event) {
      if (!this.switcher.isMove) {
        return this.trigger('cellTap', this);
      }
    };

    ScenariosTableCell.prototype._onOpenScenarioTap = function(event) {
      event.stopPropagation();
      return this.trigger('openScenarioTap', this);
    };

    ScenariosTableCell.prototype._onDeleteScenarioTap = function(event) {
      event.stopPropagation();
      return this.trigger('deleteScenarioTap', this);
    };

    ScenariosTableCell.prototype.render = function() {
      this.html(this.template());
      this.elScenarioName.html(this.scenario.name);
      Locale.localize(this.el);
      return this;
    };

    ScenariosTableCell.prototype._showDeleteButton = function() {
      return this.trigger('deleteScenarioShow', this);
    };

    ScenariosTableCell.prototype._hideDeleteButton = function() {
      return this.trigger('deleteScenarioHide', this);
    };

    return ScenariosTableCell;

  })(Spine.Controller);

  module.exports = ScenariosTableCell;

}).call(this);
}, "controllers/agenda/scenarios": function(exports, require, module) {(function() {
  var ConfirmationPopup, FullscreenPanel, Header, HeaderBaseControl, LazyTableController, PresentationScenarioViewer, Scenario, ScenarioDetails, Scenarios, ScenariosCollection, ScenariosTableCell,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FullscreenPanel = require('controllers/base/panel/fullscreen-panel');

  LazyTableController = require('controllers/lazy-table-controller');

  ScenariosCollection = require('models/bll/scenarios-collection');

  ScenariosTableCell = require('controllers/agenda/scenarios-table-cell');

  Header = require('controls/header/header');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Scenario = require('models/scenario');

  ScenarioDetails = require('controllers/agenda/scenario-details');

  PresentationScenarioViewer = require('controllers/presentation-viewer/presentation-scenario-viewer');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  Scenarios = (function(superClass) {
    extend(Scenarios, superClass);

    Scenarios.prototype.className = 'table-view scenarios';

    Scenarios.prototype.tableController = null;

    function Scenarios() {
      this._onDeleteScenarioHide = bind(this._onDeleteScenarioHide, this);
      this._onDeleteScenarioShow = bind(this._onDeleteScenarioShow, this);
      this._onDeleteDiscard = bind(this._onDeleteDiscard, this);
      this._onDeleteApprove = bind(this._onDeleteApprove, this);
      this._onDeleteScenarioTap = bind(this._onDeleteScenarioTap, this);
      this._onOpenScenarioTap = bind(this._onOpenScenarioTap, this);
      this._onCellTap = bind(this._onCellTap, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this.reload = bind(this.reload, this);
      this._onAddScenarioTap = bind(this._onAddScenarioTap, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      Scenarios.__super__.constructor.apply(this, arguments);
      this.subscribeOnNotification('scenarioUpdated', this.reload);
    }

    Scenarios.prototype.shouldDeferNotification = function(notification) {
      return true;
    };

    Scenarios.prototype.active = function() {
      Scenarios.__super__.active.apply(this, arguments);
      this._initHeader();
      return this._initContent();
    };

    Scenarios.prototype._initHeader = function() {
      var addScenarioEventButton, scenariosHeader;
      addScenarioEventButton = new HeaderBaseControl('', 'ctrl-add-button');
      addScenarioEventButton.bind('tap', this._onAddScenarioTap);
      scenariosHeader = new Header(Locale.value('scenarios.HeaderTitle'));
      scenariosHeader.render();
      scenariosHeader.addRightControlElement(addScenarioEventButton.el);
      return this.setHeader(scenariosHeader);
    };

    Scenarios.prototype._onAddScenarioTap = function() {
      return this.stage.push(new ScenarioDetails);
    };

    Scenarios.prototype.reload = function() {
      var ref;
      return (ref = this.tableController) != null ? ref.reload() : void 0;
    };

    Scenarios.prototype._initContent = function() {
      this.tableController = new LazyTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    Scenarios.prototype.createCollection = function() {
      return new ScenariosCollection;
    };

    Scenarios.prototype.createTableHeaderItemsForModel = function(model) {
      return null;
    };

    Scenarios.prototype.cellForObjectOnTable = function(scenario, table) {
      var contactsTableCell;
      contactsTableCell = new ScenariosTableCell(scenario);
      contactsTableCell.on('cellTap', this._onCellTap);
      contactsTableCell.on('openScenarioTap', this._onOpenScenarioTap);
      contactsTableCell.on('deleteScenarioTap', this._onDeleteScenarioTap);
      contactsTableCell.on('deleteScenarioShow', this._onDeleteScenarioShow);
      contactsTableCell.on('deleteScenarioHide', this._onDeleteScenarioHide);
      return contactsTableCell;
    };

    Scenarios.prototype._onCellTap = function(cell) {
      var ref, ref1;
      if (this._cellWithDeleteButton) {
        if ((ref = this._cellWithDeleteButton) != null) {
          if ((ref1 = ref.switcher) != null) {
            ref1.hide();
          }
        }
        return this._cellWithDeleteButton = null;
      } else {
        return this.stage.push(new ScenarioDetails(cell.scenario));
      }
    };

    Scenarios.prototype._onOpenScenarioTap = function(cell) {
      var presentationScenarioViewer;
      presentationScenarioViewer = new PresentationScenarioViewer(cell.scenario);
      presentationScenarioViewer.on('complete', function() {
        return presentationScenarioViewer.closePresentation();
      });
      return presentationScenarioViewer.openPresentation();
    };

    Scenarios.prototype._onDeleteScenarioTap = function(cell) {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('scenarios.ConfirmationPopup.DeleteItem.Caption'),
        message: Locale.value('card.ConfirmationPopup.DeleteItem.Question')
      });
      confirm.cell = cell;
      confirm.bind('yesClicked', this._onDeleteApprove);
      confirm.bind('noClicked', this._onDeleteDiscard);
      return this.presentModalController(confirm);
    };

    Scenarios.prototype._onDeleteApprove = function(confirm) {
      var scenariosCollection;
      this.dismissModalController();
      scenariosCollection = new ScenariosCollection;
      return scenariosCollection.removeEntity(confirm.cell.scenario).then((function(_this) {
        return function() {
          _this.reload();
          return _this.postNotification('scenarioUpdated');
        };
      })(this));
    };

    Scenarios.prototype._onDeleteDiscard = function(confirm) {
      return this.dismissModalController();
    };

    Scenarios.prototype._onDeleteScenarioShow = function(cell) {
      var ref, ref1;
      if (cell !== this._cellWithDeleteButton) {
        if ((ref = this._cellWithDeleteButton) != null) {
          if ((ref1 = ref.switcher) != null) {
            ref1.hide();
          }
        }
        return this._cellWithDeleteButton = cell;
      }
    };

    Scenarios.prototype._onDeleteScenarioHide = function(cell) {
      if (cell === this._cellWithDeleteButton) {
        return this._cellWithDeleteButton = null;
      }
    };

    return Scenarios;

  })(FullscreenPanel);

  module.exports = Scenarios;

}).call(this);
}, "controllers/appointment-card/appointment-card-edit": function(exports, require, module) {(function() {
  var AlarmManager, AppointmentCard, AppointmentCardEdit, AppointmentsCollection, CallReport, ConfigurationManager, ConfirmationPopup, ConvertCallReport, DurationFilter, Header, HeaderBaseControl, SforceDataContext, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppointmentCard = require('controllers/appointment-card/appointment-card');

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  Utils = require('common/utils');

  DurationFilter = require('controls/filters/duration-filters/duration-filter');

  CallReport = require('models/call-report');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  SforceDataContext = require('models/bll/sforce-data-context');

  ConfigurationManager = require('db/configuration-manager');

  AlarmManager = require('common/alarm/alarm-manager');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  ConvertCallReport = require('controllers/call-report-card/convert-call-report');

  Utils = require('common/utils');

  AppointmentCardEdit = (function(superClass) {
    extend(AppointmentCardEdit, superClass);

    AppointmentCardEdit.prototype.maxDays = 14;

    AppointmentCardEdit.prototype.collection = null;

    function AppointmentCardEdit(appointmentId) {
      this.appointmentId = appointmentId;
      this._onOrganizationTap = bind(this._onOrganizationTap, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      this._fillGeneralInfo = bind(this._fillGeneralInfo, this);
      this._goToConvertView = bind(this._goToConvertView, this);
      this._saveAppointment = bind(this._saveAppointment, this);
      this._showConvertConfirmationPopup = bind(this._showConvertConfirmationPopup, this);
      this._onConvertTap = bind(this._onConvertTap, this);
      this._onDeleteDiscard = bind(this._onDeleteDiscard, this);
      this._onDeleteApprove = bind(this._onDeleteApprove, this);
      this._onDeleteTap = bind(this._onDeleteTap, this);
      this._setLimitation = bind(this._setLimitation, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      this._fetchAppointmentById = bind(this._fetchAppointmentById, this);
      this.reload = bind(this.reload, this);
      AppointmentCardEdit.__super__.constructor.apply(this, arguments);
      this.collection = new AppointmentsCollection;
      this.subscribeOnNotification('appointmentChanged', this.reload);
    }

    AppointmentCardEdit.prototype.reload = function() {
      return this._fetchAppointmentById(this.appointmentId).then((function(_this) {
        return function(appt) {
          var delayTime;
          if (appt) {
            return _this.active();
          } else {
            delayTime = Utils.isIOS() ? _this.effectDefaults.duration : _this.effectDefaults.duration + 100;
            return _.delay(_this.onBack, delayTime);
          }
        };
      })(this));
    };

    AppointmentCardEdit.prototype._fetchAppointmentById = function(apptId) {
      var keyValue;
      keyValue = {};
      keyValue[CallReport.sfdc.id] = apptId;
      return this.collection.fetchAllWhere(keyValue).then((function(_this) {
        return function(response) {
          return _this.collection.getEntityFromResponse(response);
        };
      })(this));
    };

    AppointmentCardEdit.prototype.shouldDeferNotification = function(notification) {
      return true;
    };

    AppointmentCardEdit.prototype._init = function() {
      return this._setLimitation().then((function(_this) {
        return function() {
          _this.render();
          return _this._bindEvents();
        };
      })(this));
    };

    AppointmentCardEdit.prototype._setLimitation = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(user) {
          if (!user.callReportValidationExcempted) {
            return ConfigurationManager.getConfig('callReportValidationSettings').then(function(dateRangeConfig) {
              if (dateRangeConfig != null ? dateRangeConfig.daysCallReport : void 0) {
                return _this.maxDays = dateRangeConfig.daysCallReport;
              }
            });
          }
        };
      })(this));
    };

    AppointmentCardEdit.prototype._initHeader = function() {
      var apptHeader, convertBtn, deleteBtn;
      this.saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      this.saveBtn.bind('tap', this._onSaveTap);
      deleteBtn = new HeaderBaseControl(Locale.value('common:buttons.DeleteBtn'), 'ctrl-btn red');
      deleteBtn.bind('tap', this._onDeleteTap);
      convertBtn = new HeaderBaseControl(Locale.value('card.Appointment.ConvertBtn'), 'ctrl-btn');
      convertBtn.bind('tap', this._onConvertTap);
      apptHeader = new Header(Locale.value('card.Appointment.HeaderTitle'));
      apptHeader.render();
      apptHeader.addRightControlElement(deleteBtn.el);
      apptHeader.addRightControlElement(convertBtn.el);
      apptHeader.addRightControlElement(this.saveBtn.el);
      return this.setHeader(apptHeader);
    };

    AppointmentCardEdit.prototype._onDeleteTap = function() {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('card.Appointment.ConfirmationPopup.DeleteItem.Caption'),
        message: Locale.value('card.ConfirmationPopup.DeleteItem.Question')
      });
      confirm.bind('yesClicked', this._onDeleteApprove);
      confirm.bind('noClicked', this._onDeleteDiscard);
      return this.presentModalController(confirm);
    };

    AppointmentCardEdit.prototype._onDeleteApprove = function(confirm) {
      this.dismissModalController();
      return this.collection.removeEntity(this.appointment).then((function(_this) {
        return function() {
          AlarmManager.scheduleNextVisits();
          _this.postNotification('appointmentChanged');
          _this.isChanged = false;
          return _this.onBack();
        };
      })(this));
    };

    AppointmentCardEdit.prototype._onDeleteDiscard = function(confirm) {
      return this.dismissModalController();
    };

    AppointmentCardEdit.prototype._onConvertTap = function() {
      if (this.isChanged) {
        return this._showConvertConfirmationPopup();
      } else {
        return this._goToConvertView();
      }
    };

    AppointmentCardEdit.prototype._showConvertConfirmationPopup = function() {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('card.Appointment.ConfirmationPopup.SaveChangesBeforeConverting.Caption')
      });
      confirm.bind('yesClicked', (function(_this) {
        return function() {
          _this.dismissModalController();
          return _this._saveAppointment().done(_this._goToConvertView);
        };
      })(this));
      confirm.bind('noClicked', (function(_this) {
        return function() {
          _this._initDateTime();
          _this.dismissModalController();
          return _this._goToConvertView();
        };
      })(this));
      return this.presentModalController(confirm);
    };

    AppointmentCardEdit.prototype._saveAppointment = function() {
      var deferred;
      deferred = new $.Deferred();
      if (this._validData()) {
        this._save().then((function(_this) {
          return function() {
            return deferred.resolve();
          };
        })(this));
      } else {
        deferred.reject();
      }
      return deferred.promise();
    };

    AppointmentCardEdit.prototype._save = function() {
      this.appointment.createdOffline = true;
      this.appointment.dateTimeOfVisit = Utils.originalDateTime(this.originDateTime);
      this.appointment.dateOfVisit = Utils.originalDate(this.originDateTime);
      this.appointment.duration = this.duration;
      this.appointment.jointVisit = this._jointVisitValue();
      this.appointment.generalComments = this.elComment[0].getValue();
      this.appointment.jointVisitUserSfid = this._jointVisitUserId();
      return this.collection.updateEntity(this.appointment).then((function(_this) {
        return function() {
          AlarmManager.scheduleNextVisits();
          return _this.postNotification('appointmentChanged');
        };
      })(this));
    };

    AppointmentCardEdit.prototype._goToConvertView = function() {
      var callReportCard;
      if (!this._validatePastDateForConvert()) {
        return $.fn.dpToast(Locale.value('card.Appointment.ToastMessage.DateTooFarInThePast'));
      } else if (!this._validateFutureDateForConvert()) {
        return $.fn.dpToast(Locale.value('card.Appointment.ToastMessage.DateGreaterThanNow'));
      } else {
        callReportCard = new ConvertCallReport(this.appointmentId);
        return this.stage.popAndPush(callReportCard);
      }
    };

    AppointmentCardEdit.prototype._validatePastDateForConvert = function() {
      var currentDate, currentDateTime, originDate;
      currentDateTime = new Date;
      currentDate = new Date(currentDateTime.getFullYear(), currentDateTime.getMonth(), currentDateTime.getDate());
      originDate = new Date(this.originDateTime.getFullYear(), this.originDateTime.getMonth(), this.originDateTime.getDate());
      return Utils.getDaysBetween(originDate, currentDate) <= this.maxDays;
    };

    AppointmentCardEdit.prototype._validateFutureDateForConvert = function() {
      var currentDate;
      currentDate = new Date;
      return this.originDateTime.getFullYear() < currentDate.getFullYear() || this.originDateTime.getMonth() < currentDate.getMonth() || (this.originDateTime.getMonth() === currentDate.getMonth() && this.originDateTime.getDate() <= currentDate.getDate());
    };

    AppointmentCardEdit.prototype._initDateTime = function() {
      this.originDateTime = Utils.originalDateTimeObject(this.appointment.dateTimeOfVisit);
      return this.elDateTime.html(Utils.formatDateTime(this.appointment.dateTimeOfVisit));
    };

    AppointmentCardEdit.prototype._fillGeneralInfo = function() {
      return this._fetchAppointmentById(this.appointmentId).then((function(_this) {
        return function(appointment1) {
          _this.appointment = appointment1;
          if (_this.appointment) {
            _this.elCustomer.html((_this.appointment.contactFullName()) + " <br/> " + _this.appointment.contactRecordType);
            _this.elOrganization.html(_this.appointment.organizationNameAndAddress());
            _this._initDateTime();
            return _this._initDurationFilter().then(function() {
              var ref;
              _this._initJointVisitPickList();
              _this._fillJointVisitUser();
              _this._setCommonInput((ref = _this.appointment.generalComments) != null ? ref : '');
              return _this.appointment.getSpecialty().then(function(specialty) {
                return _this.elSpecialty.html(specialty);
              });
            });
          }
        };
      })(this)).then(this._setActiveUser);
    };

    AppointmentCardEdit.prototype._parseAppointment = function(appointment) {
      return this.collection.parseEntity(appointment);
    };

    AppointmentCardEdit.prototype._initDurationFilter = function() {
      if (this.appointment.duration && this.appointment.duration.length !== 0) {
        return DurationFilter.resources().then((function(_this) {
          return function(resources) {
            var ref, ref1;
            _this.durationFilter = resources.filter(function(item) {
              return item.value === parseInt(_this.appointment.duration);
            })[0];
            _this.duration = (ref = (ref1 = _this.durationFilter) != null ? ref1.value : void 0) != null ? ref : resources.defaultValue;
            return _this.elDuration.html(_this.duration);
          };
        })(this));
      } else {
        return $.when();
      }
    };

    AppointmentCardEdit.prototype._fillJointVisitUser = function() {
      this.jointVisitUser = null;
      return this.appointment.getJointVisitUser().then((function(_this) {
        return function(jointVisitUser) {
          var ref;
          _this.jointVisitUser = jointVisitUser;
          return _this.elJointVisitUser.html((ref = _this.jointVisitUser) != null ? ref.fullName() : void 0);
        };
      })(this));
    };

    AppointmentCardEdit.prototype._onCustomerTap = function() {
      var ContactCard;
      ContactCard = require('controllers/contact-card/contact-card');
      return this.stage.push(new ContactCard(this.appointment.contactSfid));
    };

    AppointmentCardEdit.prototype._onOrganizationTap = function() {
      var OrganizationCard;
      OrganizationCard = require('controllers/organization-card/organization-card');
      return this.stage.push(new OrganizationCard(this.appointment.organizationSfId));
    };

    return AppointmentCardEdit;

  })(AppointmentCard);

  module.exports = AppointmentCardEdit;

}).call(this);
}, "controllers/appointment-card/appointment-card": function(exports, require, module) {(function() {
  var AlarmManager, AppointmentsCard, AppointmentsCollection, CallReport, CommentView, CommonInput, ConfigurationManager, ConfirmationPopup, DateTimePicker, DurationFilter, Header, HeaderBaseControl, JointVisitPickListDatasource, ListPopup, PanelScreen, PickList, ReferencesCollection, SforceDataContext, TableDatasource, Users, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  TableDatasource = require('controls/table/table-data-source');

  ReferencesCollection = require('models/bll/references/references-collection');

  CommentView = require('controls/comment-view/comment-view');

  ListPopup = require('controls/popups/list-popup');

  DurationFilter = require('controls/filters/duration-filters/duration-filter');

  DateTimePicker = require('controls/datepicker/date-time-picker');

  Utils = require('common/utils');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  Users = require('controllers/users/users');

  CallReport = require('models/call-report');

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  JointVisitPickListDatasource = require('controllers/call-report-card/joint-visit-picklist-datasource');

  ConfigurationManager = require('db/configuration-manager');

  PickList = require('controls/pick-list/pick-list');

  SforceDataContext = require('models/bll/sforce-data-context');

  CommonInput = require('controls/common-input/common-input');

  AlarmManager = require('common/alarm/alarm-manager');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  AppointmentsCard = (function(superClass) {
    extend(AppointmentsCard, superClass);

    AppointmentsCard.prototype.className = 'appointment card';

    AppointmentsCard.prototype.events = {
      'tap .appointments-card-customer': '_onCustomerTap',
      'tap .appointments-card-organization': '_onOrganizationTap'
    };

    AppointmentsCard.prototype.elements = {
      '.appointments-card-customer': 'elCustomer',
      '.appointments-card-organization': 'elOrganization',
      '.appointments-card-speciality': 'elSpecialty',
      '.appointments-card-user': 'elUser',
      '.appointments-card-date-time': 'elDateTime',
      '.appointments-card-duration ': 'elDuration',
      '.call-comments': 'elComment',
      '.appointments-card-joint-visit': 'elJointVisit',
      '.appointments-card-joint-visit-user': 'elJointVisitUser',
      '.wrapper': 'elWrapper'
    };

    AppointmentsCard.prototype.maxCommentStringLength = 32000;

    AppointmentsCard.prototype.isChanged = false;

    AppointmentsCard.prototype.appointmentRecordTypeId = null;

    AppointmentsCard.prototype.template = function() {
      return require('views/appointment-card/appointment-card')();
    };

    function AppointmentsCard(referenceId) {
      this.referenceId = referenceId;
      this._save = bind(this._save, this);
      this._appointmentChanged = bind(this._appointmentChanged, this);
      this._saveAppointment = bind(this._saveAppointment, this);
      this._showDateTimePicker = bind(this._showDateTimePicker, this);
      this._initDurationFilter = bind(this._initDurationFilter, this);
      this._initJointVisitPickList = bind(this._initJointVisitPickList, this);
      this._setDateTime = bind(this._setDateTime, this);
      this._onDurationTap = bind(this._onDurationTap, this);
      this._onSaveTap = bind(this._onSaveTap, this);
      this.onBack = bind(this.onBack, this);
      this._setActiveUser = bind(this._setActiveUser, this);
      this._onJointVisitUserTap = bind(this._onJointVisitUserTap, this);
      this._onOrganizationTap = bind(this._onOrganizationTap, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      this._resetChangeFlags = bind(this._resetChangeFlags, this);
      this._enableInputs = bind(this._enableInputs, this);
      this.active = bind(this.active, this);
      AppointmentsCard.__super__.constructor.apply(this, arguments);
    }

    AppointmentsCard.prototype.active = function() {
      AppointmentsCard.__super__.active.apply(this, arguments);
      this._resetChangeFlags();
      return ConfigurationManager.getConfig().then((function(_this) {
        return function(config) {
          _this.appointmentRecordTypeId = config.appointmentRecordTypeId;
          return _this._init();
        };
      })(this));
    };

    AppointmentsCard.prototype._enableInputs = function() {
      return setTimeout((function(_this) {
        return function() {
          return _this.elComment.attr("disabled", false);
        };
      })(this), this.effectDefaults.duration);
    };

    AppointmentsCard.prototype._resetChangeFlags = function() {
      return this.isChanged = false;
    };

    AppointmentsCard.prototype._init = function() {
      this.appointment = null;
      this.render();
      this._setCommonInput('');
      this._bindEvents();
      this._initJointVisitPickList();
      return this._initDurationFilter().then((function(_this) {
        return function() {
          _this._initDateTime();
          _this.isAppointmentsChanged = false;
          return _this.jointVisitUser = null;
        };
      })(this));
    };

    AppointmentsCard.prototype._setCommonInput = function(value) {
      this.elComment.val(value);
      new CommonInput(this.elWrapper[0], this.elComment[0]);
      return this.elComment.on('change', this._appointmentChanged);
    };

    AppointmentsCard.prototype.render = function() {
      this.html(this.template());
      this._initHeader();
      Locale.localize(this.el);
      this._fillGeneralInfo();
      this._enableInputs();
      return this;
    };

    AppointmentsCard.prototype._onCustomerTap = function() {
      var ContactCard;
      ContactCard = require('controllers/contact-card/contact-card');
      return this.stage.push(new ContactCard(this.reference.contactSfId));
    };

    AppointmentsCard.prototype._onOrganizationTap = function() {
      var OrganizationCard;
      OrganizationCard = require('controllers/organization-card/organization-card');
      return this.stage.push(new OrganizationCard(this.reference.organizationSfId));
    };

    AppointmentsCard.prototype._onJointVisitUserTap = function() {
      var users;
      users = new Users(this.jointVisitUser);
      users.on('onClose', (function(_this) {
        return function(user) {
          if (user) {
            _this.elJointVisitUser.html(user.fullName());
            _this.jointVisitUser = user;
            _this.elJointVisitUser.removeClass('placeholder');
          } else {
            _this.elJointVisitUser.html(Locale.value('card.GeneralInfoFields.JointVisitUserPlaceholder'));
            _this.jointVisitUser = null;
            _this.elJointVisitUser.addClass('placeholder');
          }
          return _this._appointmentChanged();
        };
      })(this));
      return this.stage.push(users);
    };

    AppointmentsCard.prototype._fillGeneralInfo = function() {
      return this._setActiveUser().then((function(_this) {
        return function() {
          var collection;
          collection = new ReferencesCollection;
          return collection.fetchEntityById(_this.referenceId);
        };
      })(this)).then((function(_this) {
        return function(reference) {
          _this.reference = reference;
          _this.elCustomer.html((_this.reference.contactFullName()) + " <br/> " + _this.reference.contactRecordType);
          _this.elOrganization.html(_this.reference.organizationNameAndAddress());
          _this.elDateTime.html(Utils.currentDateTime());
          return _this.reference.getContact();
        };
      })(this)).then((function(_this) {
        return function(contact) {
          return _this.elSpecialty.html(contact.abbottSpecialty);
        };
      })(this));
    };

    AppointmentsCard.prototype._setActiveUser = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(activeUser) {
          var ref;
          _this.activeUser = activeUser;
          return _this.elUser.html((ref = _this.activeUser) != null ? ref.fullName() : void 0);
        };
      })(this));
    };

    AppointmentsCard.prototype.onBack = function() {
      var confirm;
      if (!this.isChanged) {
        return AppointmentsCard.__super__.onBack.apply(this, arguments);
      } else {
        confirm = new ConfirmationPopup({
          caption: Locale.value('card.ConfirmationPopup.SaveChanges.Caption')
        });
        confirm.bind('yesClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            return _this._onSaveTap();
          };
        })(this));
        confirm.bind('noClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            _this.isChanged = false;
            return AppointmentsCard.__super__.onBack.apply(_this, arguments);
          };
        })(this));
        return this.presentModalController(confirm);
      }
    };

    AppointmentsCard.prototype._initHeader = function() {
      var apptHeader;
      this.saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      this.saveBtn.bind('tap', this._onSaveTap);
      apptHeader = new Header(Locale.value('card.Appointment.HeaderTitle'));
      apptHeader.render();
      apptHeader.addRightControlElement(this.saveBtn.el);
      return this.setHeader(apptHeader);
    };

    AppointmentsCard.prototype._onSaveTap = function() {
      return this._saveAppointment().then(this._resetChangeFlags).then((function(_this) {
        return function() {
          return _this.postNotification('appointmentChanged');
        };
      })(this)).then(this.onBack);
    };

    AppointmentsCard.prototype._bindEvents = function() {
      this.elDuration.on('tap', this._onDurationTap);
      this.elDateTime.on('tap', this._showDateTimePicker);
      return this.elJointVisitUser.on('tap', this._onJointVisitUserTap);
    };

    AppointmentsCard.prototype._onDurationTap = function() {
      return DurationFilter.resources().then((function(_this) {
        return function(resources) {
          var datasource, filterPopup;
          datasource = resources;
          filterPopup = new ListPopup(datasource, _this.durationFilter, Locale.value('card.DurationPopup.Title'));
          filterPopup.bind('onPopupItemSelected', function(selectedItem) {
            _this.durationFilter = selectedItem.model;
            _this.elDuration.html(_this.durationFilter.value);
            _this.dismissModalController();
            _this.duration = _this.durationFilter.value;
            return _this._appointmentChanged();
          });
          return _this.presentModalController(filterPopup);
        };
      })(this));
    };

    AppointmentsCard.prototype._setDateTime = function(result) {
      this.originDateTime = result;
      this.elDateTime.html(Utils.currentDateTime(result));
      return this._appointmentChanged();
    };

    AppointmentsCard.prototype._initJointVisitPickList = function() {
      var ref;
      this.jointVisitPickList = new PickList(this, this.elJointVisit, new JointVisitPickListDatasource, ((ref = this.appointment) != null ? ref.jointVisit : void 0) || null);
      return this.jointVisitPickList.bind('onPickListItemSelected', this._appointmentChanged);
    };

    AppointmentsCard.prototype._initDurationFilter = function() {
      return DurationFilter.resources().then((function(_this) {
        return function(resources) {
          _this.durationFilter = resources.defaultValue;
          _this.elDuration.html(_this.durationFilter.value);
          return _this.duration = _this.durationFilter.value;
        };
      })(this));
    };

    AppointmentsCard.prototype._showDateTimePicker = function() {
      var dateTimePicker;
      if (!this.originDateTime) {
        this.originDateTime = new Date();
      }
      dateTimePicker = new DateTimePicker(this.originDateTime, {
        beforeDays: 0,
        afterDays: 90
      });
      dateTimePicker.on('onDonePressed', (function(_this) {
        return function(dateTime) {
          _this.dismissModalController();
          return _this._setDateTime(dateTime);
        };
      })(this));
      return this.presentModalController(dateTimePicker);
    };

    AppointmentsCard.prototype._initDateTime = function() {
      return this.originDateTime = new Date;
    };

    AppointmentsCard.prototype.jointVisitValid = function() {
      return this._jointVisitValue() !== null;
    };

    AppointmentsCard.prototype._jointVisitValue = function() {
      return this.jointVisitPickList.selectedValue;
    };

    AppointmentsCard.prototype._jointVisitUserId = function() {
      var ref, ref1;
      return (ref = (ref1 = this.jointVisitUser) != null ? ref1.id : void 0) != null ? ref : null;
    };

    AppointmentsCard.prototype._defaultJointVisitFilterValue = function() {
      return this._defaultJointVisitFilter().description;
    };

    AppointmentsCard.prototype._validateDate = function() {
      var currentDate;
      currentDate = new Date;
      return this.originDateTime.getFullYear() > currentDate.getFullYear() || this.originDateTime.getMonth() > currentDate.getMonth() || (this.originDateTime.getMonth() === currentDate.getMonth() && this.originDateTime.getDate() >= currentDate.getDate());
    };

    AppointmentsCard.prototype._validData = function() {
      var isDataValid, toastMessage;
      isDataValid = true;
      if (!this.jointVisitUser && this.jointVisitValid()) {
        toastMessage = Locale.value('card.ToastMessage.RequiredFieldsHeader') + ":<br/> " + Locale.value('card.ToastMessage.RequiredJointVisitUser');
        isDataValid = false;
      }
      if (this.jointVisitUser && !this.jointVisitValid()) {
        toastMessage = Locale.value('card.ToastMessage.RequiredFieldsHeader') + ":<br/> " + Locale.value('card.ToastMessage.RequiredJointVisit');
        isDataValid = false;
      }
      if (!this._validateDate()) {
        toastMessage = Locale.value('card.Appointment.ToastMessage.DateLessThanNow');
        isDataValid = false;
      }
      if (!isDataValid) {
        $.fn.dpToast(toastMessage);
      }
      return isDataValid;
    };

    AppointmentsCard.prototype._checkExistingAppointments = function() {
      this.appointmentsCollection = new AppointmentsCollection;
      return this.appointmentsCollection.getAllAppointmentsFor(this.reference, this.originDateTime);
    };

    AppointmentsCard.prototype._saveAppointment = function() {
      var deferred;
      deferred = new $.Deferred();
      if (!this._validData()) {
        deferred.reject();
      } else {
        this._checkExistingAppointments().then((function(_this) {
          return function(existingAppointments) {
            if (!(existingAppointments.length > 0)) {
              return _this._save();
            } else {
              _this.appointment = _.first(existingAppointments);
              return _this._showMessageAboutExistingCallReport();
            }
          };
        })(this)).then((function(_this) {
          return function() {
            return deferred.resolve();
          };
        })(this));
      }
      return deferred.promise();
    };

    AppointmentsCard.prototype._showMessageAboutExistingCallReport = function() {
      var confirm, deferred;
      deferred = new $.Deferred();
      confirm = new ConfirmationPopup({
        caption: Locale.value('card.Appointment.ConfirmationPopup.ReplaceExistingAppointment.Caption'),
        message: Locale.value('card.Appointment.ConfirmationPopup.ReplaceExistingAppointment.Question', {
          postProcess: "sprintf"
        })
      });
      confirm.bind('yesClicked', (function(_this) {
        return function() {
          _this.dismissModalController();
          return _this._save().then(function() {
            return deferred.resolve();
          });
        };
      })(this));
      confirm.bind('noClicked', (function(_this) {
        return function() {
          _this.dismissModalController();
          _this.appointment = null;
          return _this._save().then(function() {
            return deferred.resolve();
          });
        };
      })(this));
      this.presentModalController(confirm);
      return deferred.promise();
    };

    AppointmentsCard.prototype._appointmentChanged = function() {
      return this.isChanged = true;
    };

    AppointmentsCard.prototype._save = function() {
      var shouldCreateNew;
      shouldCreateNew = false;
      if (!this.appointment) {
        shouldCreateNew = true;
        this.appointment = {};
      }
      this.appointment[CallReport.sfdc.createdOffline] = true;
      this.appointment[CallReport.sfdc.dateTimeOfVisit] = Utils.originalDateTime(this.originDateTime);
      this.appointment[CallReport.sfdc.dateOfVisit] = Utils.originalDate(this.originDateTime);
      this.appointment[CallReport.sfdc.organizationSfId] = this.reference.organizationSfId;
      this.appointment[CallReport.sfdc.remoteOrganizationName] = this.reference.organizationName;
      this.appointment.organizationName = this.reference.organizationName;
      this.appointment[CallReport.sfdc.organizationCity] = this.reference.organizationCity;
      this.appointment[CallReport.sfdc.organizationAddress] = this.reference.organizationAddress;
      this.appointment[CallReport.sfdc.contactSfid] = this.reference.contactSfId;
      this.appointment[CallReport.sfdc.remoteContactFirstName] = this.reference.contactFirstName;
      this.appointment[CallReport.sfdc.remoteContactLastName] = this.reference.contactLastName;
      this.appointment.contactFirstName = this.reference.contactFirstName;
      this.appointment.contactLastName = this.reference.contactLastName;
      this.appointment[CallReport.sfdc.contactRecordType] = this.reference.contactRecordType;
      this.appointment[CallReport.sfdc.userFirstName] = this.activeUser.firstName;
      this.appointment[CallReport.sfdc.userLastName] = this.activeUser.lastName;
      this.appointment[CallReport.sfdc.userSfid] = this.activeUser.id;
      this.appointment[CallReport.sfdc.duration] = this.duration;
      this.appointment[CallReport.sfdc.type] = CallReport.TYPE_APPOINTMENT;
      this.appointment[CallReport.sfdc.recordTypeId] = this.appointmentRecordTypeId;
      this.appointment[CallReport.sfdc.jointVisit] = this._jointVisitValue();
      this.appointment[CallReport.sfdc.jointVisitUserSfid] = this._jointVisitUserId();
      this.appointment[CallReport.sfdc.generalComments] = this.elComment[0].getValue();
      this.appointment['attributes'] = {
        type: CallReport.table
      };
      if (shouldCreateNew) {
        return this.appointmentsCollection.createEntity(this.appointment).then(function() {
          return AlarmManager.scheduleNextVisits();
        });
      } else {
        return this.appointmentsCollection.updateEntity(this.appointment).then(function() {
          return AlarmManager.scheduleNextVisits();
        });
      }
    };

    return AppointmentsCard;

  })(PanelScreen);

  module.exports = AppointmentsCard;

}).call(this);
}, "controllers/attendees/attendees-table-cell": function(exports, require, module) {(function() {
  var AttendeesTableCell, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  AttendeesTableCell = (function(superClass) {
    extend(AttendeesTableCell, superClass);

    AttendeesTableCell.prototype.className = "row";

    AttendeesTableCell.prototype.elements = {
      '.check-box': 'elCheckbox',
      '.specialty': 'elSpecialty',
      '.contact': 'elContact'
    };

    AttendeesTableCell.prototype.isChecked = false;

    function AttendeesTableCell(contact) {
      this.contact = contact;
      this._setSelectedCheckbox = bind(this._setSelectedCheckbox, this);
      this._onContactTap = bind(this._onContactTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      this._onCellTap = bind(this._onCellTap, this);
      AttendeesTableCell.__super__.constructor.call(this, {});
    }

    AttendeesTableCell.prototype.template = function() {
      return require('views/attendees/attendees-table-cell')();
    };

    AttendeesTableCell.prototype._onCellTap = function() {
      this.isChecked = !this.elCheckbox[0].checked;
      this._setSelectedCheckbox();
      return this.trigger('cellTap', this);
    };

    AttendeesTableCell.prototype.bindEvents = function() {
      this.el.on('tap', this._onCellTap);
      return this.elContact.on('tap', this._onContactTap);
    };

    AttendeesTableCell.prototype._onContactTap = function(event) {
      event.stopPropagation();
      return this.trigger('contactTap', this);
    };

    AttendeesTableCell.prototype.render = function() {
      var ref;
      this.html(this.template());
      this.elContact.html((this.contact.fullName()) + " <br/> " + ((ref = this.contact.recordType) != null ? ref : ''));
      this.elSpecialty.html(this.contact.abbottSpecialty);
      if (this.isChecked) {
        this._setSelectedCheckbox();
      }
      return this;
    };

    AttendeesTableCell.prototype._setSelectedCheckbox = function() {
      return this.elCheckbox[0].checked = this.isChecked;
    };

    return AttendeesTableCell;

  })(Spine.Controller);

  module.exports = AttendeesTableCell;

}).call(this);
}, "controllers/attendees/attendees-table": function(exports, require, module) {(function() {
  var AttendeesTableController, LazyTableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LazyTableController = require('controllers/lazy-table-controller');

  AttendeesTableController = (function(superClass) {
    extend(AttendeesTableController, superClass);

    function AttendeesTableController() {
      return AttendeesTableController.__super__.constructor.apply(this, arguments);
    }

    AttendeesTableController.prototype._fetchAll = function() {
      return this.collection.fetchAllSortedBy([this.collection.model.sfdc.lastName], true);
    };

    AttendeesTableController.prototype._filterBy = function(searchString) {
      var field, fieldsValues, i, len, ref;
      this.searchString = searchString;
      fieldsValues = {};
      ref = this.collection.model.searchFields;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        fieldsValues[field] = this.searchString;
      }
      return this.collection.fetchAllLikeAndSortBy(fieldsValues, [this.collection.model.sfdc.lastName], true);
    };

    return AttendeesTableController;

  })(LazyTableController);

  module.exports = AttendeesTableController;

}).call(this);
}, "controllers/attendees/attendees": function(exports, require, module) {(function() {
  var Attendees, AttendeesTableCell, AttendeesTableController, ContactCard, ContactsCollection, Header, HeaderBaseControl, PanelScreen, Search, TableDatasource, TableHeaderItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  AttendeesTableCell = require('controllers/attendees/attendees-table-cell');

  ContactsCollection = require('models/bll/contacts-collection');

  TableDatasource = require('controls/table/table-data-source');

  AttendeesTableController = require('controllers/attendees/attendees-table');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  Search = require('controls/search/search');

  ContactCard = require('controllers/contact-card/contact-card');

  Attendees = (function(superClass) {
    extend(Attendees, superClass);

    Attendees.prototype.className = 'table-view attendees';

    Attendees.prototype.elements = {
      'input': 'elInput'
    };

    Attendees.prototype.events = {
      'tap header': '_searchBlur',
      'tap .tables-holder': '_searchBlur'
    };

    Attendees.prototype.selectedContactIds = [];

    Attendees.prototype.cardTypeComeFrom = null;

    Attendees.prototype.deactivate = function() {
      Attendees.__super__.deactivate.apply(this, arguments);
      return this._searchBlur();
    };

    Attendees.prototype._searchBlur = function() {
      return this.elInput.blur();
    };

    function Attendees(selectedContactIds, cardTypeComeFrom) {
      this.selectedContactIds = selectedContactIds;
      this.cardTypeComeFrom = cardTypeComeFrom;
      this._onContactTap = bind(this._onContactTap, this);
      this._onCellTap = bind(this._onCellTap, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this.onBack = bind(this.onBack, this);
      this._resetSearchingFilter = bind(this._resetSearchingFilter, this);
      this._onSearchChanged = bind(this._onSearchChanged, this);
      this._searchBlur = bind(this._searchBlur, this);
      Attendees.__super__.constructor.apply(this, arguments);
      this.tableController = new AttendeesTableController({
        datasource: this
      });
    }

    Attendees.prototype.active = function() {
      Attendees.__super__.active.apply(this, arguments);
      Locale.localize(this.el);
      this._initHeader();
      return this._initContent();
    };

    Attendees.prototype._initHeader = function() {
      var attendeesHeader, search;
      search = new Search();
      search.bind('searchChanged', this._onSearchChanged);
      search.bind('searchClear', this._resetSearchingFilter);
      attendeesHeader = new Header(Locale.value('card.PharmaEvent.AttendeesHeaderTitle'));
      attendeesHeader.render();
      attendeesHeader.addRightControlElement(search.render().el);
      return this.setHeader(attendeesHeader);
    };

    Attendees.prototype._onSearchChanged = function(value) {
      return this.tableController.filterBy(value);
    };

    Attendees.prototype._resetSearchingFilter = function() {
      return this.tableController.resetAndActive();
    };

    Attendees.prototype.onBack = function() {
      Attendees.__super__.onBack.apply(this, arguments);
      return this.trigger('attendeesSelected', this.selectedContactIds);
    };

    Attendees.prototype._initContent = function() {
      return this.html(this.tableController.render().el);
    };

    Attendees.prototype.createCollection = function() {
      return new ContactsCollection;
    };

    Attendees.prototype.createTableHeaderItemsForModel = function(model) {
      return [new TableHeaderItem(''), new TableHeaderItem(Locale.value('common:names.Specialty')), new TableHeaderItem(Locale.value('common:names.Contact'))];
    };

    Attendees.prototype.cellForObjectOnTable = function(attendee, table) {
      var attendeesTableCell;
      attendeesTableCell = new AttendeesTableCell(attendee);
      attendeesTableCell.on('cellTap', this._onCellTap);
      attendeesTableCell.on('contactTap', this._onContactTap);
      this.selectedContactIds.forEach(function(contactId) {
        if (contactId === attendeesTableCell.contact.id) {
          return attendeesTableCell.isChecked = true;
        }
      });
      return attendeesTableCell;
    };

    Attendees.prototype._onCellTap = function(cell) {
      if (cell.isChecked) {
        return this.selectedContactIds.push(cell.contact.id);
      } else {
        return this.selectedContactIds = this.selectedContactIds.filter(function(contactId) {
          return contactId !== cell.contact.id;
        });
      }
    };

    Attendees.prototype._onContactTap = function(cell) {
      return this.stage.push(new ContactCard(cell.contact.id));
    };

    return Attendees;

  })(PanelScreen);

  module.exports = Attendees;

}).call(this);
}, "controllers/base/panel/fullscreen-panel": function(exports, require, module) {(function() {
  var FullscreenPanel, PanelScreen, Stage,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Stage = require('controllers/base/stage/stage');

  PanelScreen = require('controllers/base/panel/panel-screen');

  FullscreenPanel = (function(superClass) {
    extend(FullscreenPanel, superClass);

    function FullscreenPanel() {
      this.deactivate = bind(this.deactivate, this);
      this.activate = bind(this.activate, this);
      return FullscreenPanel.__super__.constructor.apply(this, arguments);
    }

    FullscreenPanel.prototype.activate = function(params) {
      if (params == null) {
        params = {};
      }
      FullscreenPanel.__super__.activate.call(this, params);
      return this.enableFullScreenMode();
    };

    FullscreenPanel.prototype.enableFullScreenMode = function() {
      return Stage.globalStage().el.addClass('fullscreen-panel-mode');
    };

    FullscreenPanel.prototype.deactivate = function(params) {
      if (params == null) {
        params = {};
      }
      FullscreenPanel.__super__.deactivate.call(this, params);
      return this.disableFullScreenMode();
    };

    FullscreenPanel.prototype.disableFullScreenMode = function() {
      return Stage.globalStage().el.removeClass('fullscreen-panel-mode');
    };

    return FullscreenPanel;

  })(PanelScreen);

  module.exports = FullscreenPanel;

}).call(this);
}, "controllers/base/panel/panel-screen": function(exports, require, module) {(function() {
  var NotificationsModule, Panel, PanelScreen, Stage, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Stage = require('controllers/base/stage/stage');

  Panel = require('controllers/base/panel/panel');

  NotificationsModule = require('common/notifications-module');

  Utils = require('common/utils');

  PanelScreen = (function(superClass) {
    extend(PanelScreen, superClass);

    PanelScreen.include(NotificationsModule);

    PanelScreen.prototype.modalController = null;

    function PanelScreen() {
      this.onBack = bind(this.onBack, this);
      this.onBackButton = bind(this.onBackButton, this);
      this.dismissModalController = bind(this.dismissModalController, this);
      this.presentModalController = bind(this.presentModalController, this);
      this.unsubscribeFromBackButton = bind(this.unsubscribeFromBackButton, this);
      this.subscribeOnBackButton = bind(this.subscribeOnBackButton, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      this.activate = bind(this.activate, this);
      PanelScreen.__super__.constructor.apply(this, arguments);
      this.subscribeOnBackButton();
      this.headerControl = null;
    }

    PanelScreen.prototype.activate = function(params) {
      if (params == null) {
        params = {};
      }
      PanelScreen.__super__.activate.call(this, params);
      return this.executeDeferredNotificationCallbacks();
    };

    PanelScreen.prototype.shouldDeferNotification = function(notification) {
      return !Stage.globalStage().isActive() || !this.stage.isActive() || !this.isActive();
    };

    PanelScreen.prototype.subscribeOnBackButton = function() {
      return document.addEventListener('backbutton', this.onBackButton, false);
    };

    PanelScreen.prototype.unsubscribeFromBackButton = function() {
      return document.removeEventListener('backbutton', this.onBackButton, false);
    };

    PanelScreen.prototype.presentModalController = function(controller) {
      if (!this.modalController) {
        this.modalController = controller;
        this.modalController.bind('didShow', this.unsubscribeFromBackButton);
        this.modalController.bind('willHide', (function(_this) {
          return function() {
            _this.modalController = null;
            return _this.subscribeOnBackButton();
          };
        })(this));
        return this.modalController.show();
      }
    };

    PanelScreen.prototype.dismissModalController = function() {
      var ref;
      return (ref = this.modalController) != null ? ref.hide() : void 0;
    };

    PanelScreen.prototype.onBackButton = function() {
      if (this.stage.isActive() && this.isActive()) {
        return this.onBack();
      }
    };

    PanelScreen.prototype.onBack = function() {
      this.unsubscribeFromBackButton();
      return this.stage.pop();
    };

    PanelScreen.prototype.setHeader = function(newHeader) {
      newHeader.on('backbutton', this.onBackButton);
      this.header.replaceWith(newHeader.el);
      this.header = newHeader.el;
      return this.headerControl = newHeader;
    };

    return PanelScreen;

  })(Panel);

  module.exports = PanelScreen;

}).call(this);
}, "controllers/base/panel/panel": function(exports, require, module) {(function() {
  var Panel, Stage,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Stage = require('controllers/base/stage/stage');

  Panel = (function(superClass) {
    extend(Panel, superClass);

    Panel.prototype.title = false;

    Panel.prototype.viewport = false;

    function Panel() {
      Panel.__super__.constructor.apply(this, arguments);
      this.el.removeClass('stage').addClass('panel');
      this.header.append($('<h2 />'));
      if (this.title) {
        this.setTitle(this.title);
      }
    }

    Panel.prototype.setTitle = function(title) {
      if (title == null) {
        title = '';
      }
      return this.header.find('h2:first').html(title);
    };

    Panel.prototype.addButton = function(text, callback) {
      var button;
      if (typeof callback === 'string') {
        callback = this[callback];
      }
      button = $('<button />').text(text);
      button.tap(this.proxy(callback));
      this.header.append(button);
      return button;
    };

    Panel.prototype.activate = function(params) {
      var effect;
      if (params == null) {
        params = {};
      }
      effect = params.transition || params.trans;
      if (effect) {
        return this.effects[effect].apply(this);
      } else {
        this.content.add(this.header).show();
        return this.el.addClass('active');
      }
    };

    Panel.prototype.deactivate = function(params) {
      var effect;
      if (params == null) {
        params = {};
      }
      if (!this.isActive()) {
        return;
      }
      effect = params.transition || params.trans;
      if (effect) {
        return this.reverseEffects[effect].apply(this);
      } else {
        return this.el.removeClass('active');
      }
    };

    Panel.prototype.effects = {
      left: function() {
        this.el.addClass('active');
        this.content.gfxSlideIn(this.effectOptions({
          direction: 'left'
        }));
        return this.header.gfxSlideIn(this.effectOptions({
          direction: 'left',
          fade: true,
          distance: 50
        }));
      },
      right: function() {
        this.el.addClass('active');
        this.content.gfxSlideIn(this.effectOptions({
          direction: 'right'
        }));
        return this.header.gfxSlideIn(this.effectOptions({
          direction: 'right',
          fade: true,
          distance: 50
        }));
      }
    };

    Panel.prototype.reverseEffects = {
      left: function() {
        this.content.gfxSlideOut(this.effectOptions({
          direction: 'right'
        }));
        this.header.gfxSlideOut(this.effectOptions({
          direction: 'right',
          fade: true,
          distance: 50
        }));
        return this.content.queueNext((function(_this) {
          return function() {
            return _this.el.removeClass('active');
          };
        })(this));
      },
      right: function() {
        this.content.gfxSlideOut(this.effectOptions({
          direction: 'left'
        }));
        this.header.gfxSlideOut(this.effectOptions({
          direction: 'left',
          fade: true,
          distance: 50
        }));
        return this.content.queueNext((function(_this) {
          return function() {
            return _this.el.removeClass('active');
          };
        })(this));
      }
    };

    return Panel;

  })(Stage);

  module.exports = Panel;

}).call(this);
}, "controllers/base/panel/root-panel-screen": function(exports, require, module) {(function() {
  var PanelScreen, RootPanelScreen,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  RootPanelScreen = (function(superClass) {
    extend(RootPanelScreen, superClass);

    function RootPanelScreen() {
      this.onBack = bind(this.onBack, this);
      return RootPanelScreen.__super__.constructor.apply(this, arguments);
    }

    RootPanelScreen.prototype.onBack = function() {
      return this.navigate('/home');
    };

    return RootPanelScreen;

  })(PanelScreen);

  module.exports = RootPanelScreen;

}).call(this);
}, "controllers/base/stage/fullscreen-stage": function(exports, require, module) {(function() {
  var FullscreenStage, Stage,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Stage = require('controllers/base/stage/stage');

  FullscreenStage = (function(superClass) {
    extend(FullscreenStage, superClass);

    function FullscreenStage() {
      this.pop = bind(this.pop, this);
      this.showInContext = bind(this.showInContext, this);
      this.setPanel = bind(this.setPanel, this);
      this.release = bind(this.release, this);
      this.activate = bind(this.activate, this);
      return FullscreenStage.__super__.constructor.apply(this, arguments);
    }

    FullscreenStage.prototype.className = 'fullscreen-stage-screen';

    FullscreenStage.prototype.activate = function(params) {
      if (params == null) {
        params = {};
      }
      FullscreenStage.__super__.activate.call(this, params);
      return Stage.globalStage().el.addClass('fullscreen-stage-mode');
    };

    FullscreenStage.prototype.release = function() {
      FullscreenStage.__super__.release.apply(this, arguments);
      return Stage.globalStage().el.removeClass('fullscreen-stage-mode fullscreen-panel-mode');
    };

    FullscreenStage.prototype.setPanel = function(_panel) {
      this._panel = _panel;
      this._panel.stage = this;
      return this.add(this._panel);
    };

    FullscreenStage.prototype.showInContext = function(context) {
      context.append(this);
      this.activate();
      return this._panel.active();
    };

    FullscreenStage.prototype.pop = function() {
      if (this.manager.controllers.length > 1) {
        return FullscreenStage.__super__.pop.apply(this, arguments);
      } else {
        return this.trigger('close', this);
      }
    };

    return FullscreenStage;

  })(Stage);

  module.exports = FullscreenStage;

}).call(this);
}, "controllers/base/stage/stage": function(exports, require, module) {(function() {
  var SpineMobileStage, Stage,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SpineMobileStage = require('spine.mobile/lib/stage');

  Stage = (function(superClass) {
    extend(Stage, superClass);

    function Stage() {
      return Stage.__super__.constructor.apply(this, arguments);
    }

    Stage.prototype.push = function(panel, animated) {
      if (animated == null) {
        animated = true;
      }
      panel.stage = this;
      this.add(panel);
      return panel.active(this._animation(animated, 'right'));
    };

    Stage.prototype.pop = function(animated) {
      var current, previous, ref;
      if (animated == null) {
        animated = true;
      }
      ref = _.last(this.manager.controllers, 2), previous = ref[0], current = ref[1];
      if (current) {
        current.deactivate(this._animation(animated, 'left'));
      }
      previous.activate(this._animation(animated, 'left'));
      if (current) {
        return this.delay(current.release, this.effectDefaults.duration);
      }
    };

    Stage.prototype.popAndPush = function(panel, animated) {
      var current;
      if (animated == null) {
        animated = true;
      }
      current = _.last(this.manager.controllers);
      if (current) {
        current.deactivate(this._animation(false, 'left'));
        current.release();
      }
      return this.push(panel, animated);
    };

    Stage.prototype.resetToRoot = function() {
      _.first(this.manager.controllers).deactivate();
      return _(this.manager.controllers).chain().rest().each(function(controller) {
        return controller.release();
      });
    };

    Stage.prototype.popToRoot = function() {
      _(this.manager.controllers).chain().rest().each(function(controller) {
        return controller.release();
      });
      return _.first(this.manager.controllers).activate();
    };

    Stage.prototype._animation = function(animated, direction) {
      if (animated === true) {
        return {
          trans: direction
        };
      } else {
        return {};
      }
    };

    return Stage;

  })(SpineMobileStage);

  Stage.Global = (function(superClass) {
    extend(Global, superClass);

    function Global() {
      return Global.__super__.constructor.apply(this, arguments);
    }

    Global.prototype.global = true;

    return Global;

  })(Stage);

  module.exports = Stage;

}).call(this);
}, "controllers/call-report-card/call-report-card-products-table-cell": function(exports, require, module) {(function() {
  var CallReportCardProductsTableCell, CommonInput, ListPopup, Locale, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  CommonInput = require('controls/common-input/common-input');

  ListPopup = require('controls/popups/list-popup');

  Locale = require('common/localization/locale');

  CallReportCardProductsTableCell = (function(superClass) {
    extend(CallReportCardProductsTableCell, superClass);

    CallReportCardProductsTableCell.prototype.tag = 'tbody';

    CallReportCardProductsTableCell.prototype.events = {
      'tap .call-report-card-expand-btn': '_onExpandTap',
      'tap .call-report-card-product-list-btn': '_onProductTap',
      'tap .call-report-card-message-list-btn.message-1': '_onMessage1Tap',
      'tap .call-report-card-message-list-btn.message-2': '_onMessage2Tap',
      'tap .call-report-card-message-list-btn.message-3': '_onMessage3Tap',
      'change .product-promotion-item input': '_onPromotionalChange'
    };

    CallReportCardProductsTableCell.prototype.elements = {
      '.call-report-card-product-list-btn': 'elProductListBtn',
      '.call-report-card-product-comment': 'elProductComment',
      '.call-report-card-message-list-btn.message-1': 'elProductMessage1',
      '.call-report-card-message-list-btn.message-2': 'elProductMessage2',
      '.call-report-card-message-list-btn.message-3': 'elProductMessage3',
      '.td-content-wrapper': 'elExpandBlock',
      '.product-expand-wrapper': 'elExpandWrapper',
      '.promotion-item': 'elPromotional',
      '.product-general-block': 'elGeneralBlock'
    };

    CallReportCardProductsTableCell.prototype.maxCommentStringLength = 255;

    function CallReportCardProductsTableCell(datasource) {
      this.datasource = datasource;
      this._refresh = bind(this._refresh, this);
      this._productsChanged = bind(this._productsChanged, this);
      this.setCommonInput = bind(this.setCommonInput, this);
      this._onPromotionalChange = bind(this._onPromotionalChange, this);
      this._setActiveProduct = bind(this._setActiveProduct, this);
      this._clearPromorionItem = bind(this._clearPromorionItem, this);
      this._clearMessages = bind(this._clearMessages, this);
      this._updateResources = bind(this._updateResources, this);
      this._onFilterTap = bind(this._onFilterTap, this);
      this._onMessage3Tap = bind(this._onMessage3Tap, this);
      this._onMessage2Tap = bind(this._onMessage2Tap, this);
      this._onMessage1Tap = bind(this._onMessage1Tap, this);
      this._onProductTap = bind(this._onProductTap, this);
      this._onExpandTap = bind(this._onExpandTap, this);
      this._prepareMessages = bind(this._prepareMessages, this);
      this._filterResource = bind(this._filterResource, this);
      this._prepareProducts = bind(this._prepareProducts, this);
      CallReportCardProductsTableCell.__super__.constructor.call(this, {});
      this.productId = null;
      this.productComment = null;
      this.productMessage1 = null;
      this.productMessage2 = null;
      this.productMessage3 = null;
      this._currentFilter = null;
      this.isPromotional = false;
    }

    CallReportCardProductsTableCell.prototype.render = function() {
      this.html(this.template());
      this._prepareProducts();
      this._prepareMessages();
      Locale.localize(this.el);
      return this;
    };

    CallReportCardProductsTableCell.prototype.template = function() {
      return require('views/call-report-card/call-report-card-products-table-cell')();
    };

    CallReportCardProductsTableCell.prototype._prepareProducts = function() {
      var noneValue;
      this._products = [];
      noneValue = this._filterResource(null, Locale.value('common:defaultSelectValue'));
      this.elProductListBtn.html(noneValue.description);
      this._prepareMessages();
      this._products.push(noneValue);
      return this.datasource.productsWithMessages.forEach((function(_this) {
        return function(productWithMessage) {
          return _this._products.push(_this._filterResource(productWithMessage.product.id, productWithMessage.product.name));
        };
      })(this));
    };

    CallReportCardProductsTableCell.prototype._filterResource = function(id, description) {
      return {
        id: id,
        description: description
      };
    };

    CallReportCardProductsTableCell.prototype._prepareMessages = function() {
      var messages, noneValue;
      this._messages = [];
      noneValue = this._filterResource(null, Locale.value('common:defaultSelectValue'));
      _(3).times((function(_this) {
        return function(index) {
          ++index;
          _this['message' + index + 'Model'] = noneValue;
          return _this['elProductMessage' + index].html(noneValue.description);
        };
      })(this));
      this._messages.push(noneValue);
      messages = this.datasource.productsWithMessages.filter((function(_this) {
        return function(productWithMessage) {
          return productWithMessage.product.id === _this.productId;
        };
      })(this));
      if (messages.length === 1) {
        return messages[0].messages.forEach((function(_this) {
          return function(message) {
            return _this._messages.push(_this._filterResource(message.id, message.name));
          };
        })(this));
      }
    };

    CallReportCardProductsTableCell.prototype._onExpandTap = function() {
      var height;
      this.el.toggleClass('expanded');
      height = 0;
      if (this.el.hasClass('expanded')) {
        height = this.elExpandWrapper.height();
      }
      return this.elExpandBlock.css('height', height + "px");
    };

    CallReportCardProductsTableCell.prototype._onProductTap = function() {
      return this._onFilterTap('productModel', 'productId', '_products', this.elProductListBtn);
    };

    CallReportCardProductsTableCell.prototype._onMessage1Tap = function() {
      return this._onFilterTap('message1Model', 'productMessage1', '_messages', this.elProductMessage1);
    };

    CallReportCardProductsTableCell.prototype._onMessage2Tap = function() {
      return this._onFilterTap('message2Model', 'productMessage2', '_messages', this.elProductMessage2);
    };

    CallReportCardProductsTableCell.prototype._onMessage3Tap = function() {
      return this._onFilterTap('message3Model', 'productMessage3', '_messages', this.elProductMessage3);
    };

    CallReportCardProductsTableCell.prototype._onFilterTap = function(modelName, variableName, resourceName, HTMLelement) {
      var filterPopup;
      if (resourceName === '_products') {
        this._updateResources();
      }
      if (!this[modelName]) {
        this[modelName] = this[resourceName][0];
      }
      filterPopup = new ListPopup(this[resourceName], this[modelName]);
      filterPopup.bind('onPopupItemSelected', (function(_this) {
        return function(selectedItem) {
          _this[modelName] = selectedItem.model;
          if (resourceName === '_products') {
            _this._clearMessages();
            _this._clearPromorionItem();
            _this._setActiveProduct();
            _this[variableName] = _this[modelName].id;
          } else {
            _this[variableName] = _this[modelName].id ? _this[modelName].description : null;
          }
          _this.isChanged = true;
          HTMLelement.html(_this[modelName].description);
          if (resourceName === '_products') {
            _this._prepareMessages();
          }
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', filterPopup);
    };

    CallReportCardProductsTableCell.prototype._updateResources = function() {
      this._products = [];
      this._products.push(this._filterResource(null, Locale.value('common:defaultSelectValue')));
      return this.datasource.productsWithMessages.forEach((function(_this) {
        return function(productWithMessage) {
          if ((!productWithMessage.isSelected) || (productWithMessage.isSelected && _this.productId === productWithMessage.product.id)) {
            return _this._products.push(_this._filterResource(productWithMessage.product.id, productWithMessage.product.name));
          }
        };
      })(this));
    };

    CallReportCardProductsTableCell.prototype._clearMessages = function() {
      this.productMessage1 = null;
      this.productMessage2 = null;
      return this.productMessage3 = null;
    };

    CallReportCardProductsTableCell.prototype._clearPromorionItem = function() {
      this.isPromotional = false;
      return this.elPromotional[0].checked = false;
    };

    CallReportCardProductsTableCell.prototype._setActiveProduct = function() {
      return this.datasource.productsWithMessages.forEach((function(_this) {
        return function(productWithMessage) {
          if (_this.productId && _this.productId === productWithMessage.product.id) {
            productWithMessage.isSelected = false;
          }
          if (_this.productModel && _this.productModel.id === productWithMessage.product.id) {
            return productWithMessage.isSelected = true;
          }
        };
      })(this));
    };

    CallReportCardProductsTableCell.prototype._onPromotionalChange = function() {
      return this.isPromotional = this.elPromotional[0].checked;
    };

    CallReportCardProductsTableCell.prototype.setCommonInput = function(value) {
      this.elProductComment.val(value);
      new CommonInput(this.elProductComment.parent(), this.elProductComment[0], this.maxCommentStringLength);
      this.elProductComment.on('change', this._productsChanged);
      return this.elProductComment.on('blur', this._refresh);
    };

    CallReportCardProductsTableCell.prototype._productsChanged = function() {
      this.productComment = this.elProductComment.val();
      return this.isChanged = true;
    };

    CallReportCardProductsTableCell.prototype._refresh = function() {
      this.elGeneralBlock.css('display', 'table-row');
      return setTimeout((function(_this) {
        return function() {
          return _this.elGeneralBlock.css('display', '');
        };
      })(this), 0);
    };

    return CallReportCardProductsTableCell;

  })(Spine.Controller);

  module.exports = CallReportCardProductsTableCell;

}).call(this);
}, "controllers/call-report-card/call-report-card-products-table": function(exports, require, module) {(function() {
  var CallReportCardProductsTable, CallReportCardProductsTableCell, CallReportCardViewProductsTableCell, Locale, MarketingMessagesCollection, ProductsCollection, SforceDataContext,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CallReportCardProductsTableCell = require('controllers/call-report-card/call-report-card-products-table-cell');

  CallReportCardViewProductsTableCell = require('controllers/call-report-card/call-report-card-view-products-table-cell');

  ProductsCollection = require('models/bll/products-collection');

  MarketingMessagesCollection = require('models/bll/marketing-messages-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  Locale = require('common/localization/locale');

  CallReportCardProductsTable = (function(superClass) {
    extend(CallReportCardProductsTable, superClass);

    CallReportCardProductsTable.prototype.className = 'products-table';

    CallReportCardProductsTable.prototype.tag = 'table';

    function CallReportCardProductsTable(_productCount) {
      this._productCount = _productCount;
      this._onDismissModalController = bind(this._onDismissModalController, this);
      this._onPresentModalController = bind(this._onPresentModalController, this);
      this._getActiveUser = bind(this._getActiveUser, this);
      this._prepareProductsWithMessages = bind(this._prepareProductsWithMessages, this);
      this._getProducts = bind(this._getProducts, this);
      this._getProductsWithMessages = bind(this._getProductsWithMessages, this);
      this._isViewMode = bind(this._isViewMode, this);
      CallReportCardProductsTable.__super__.constructor.apply(this, arguments);
      this._productsCells = [];
    }

    CallReportCardProductsTable.prototype.render = function(_callReport) {
      this._callReport = _callReport;
      this.html(this.template());
      Locale.localize(this.el);
      this.productsWithMessages = [];
      return this._initPickListsAndProducts().then((function(_this) {
        return function() {
          if (_this._isViewMode()) {
            return _this.renderWithData();
          } else {
            return _this.renderEmptyTable();
          }
        };
      })(this));
    };

    CallReportCardProductsTable.prototype._isViewMode = function() {
      return !!this._callReport;
    };

    CallReportCardProductsTable.prototype._initPickListsAndProducts = function() {
      return this._getProductsWithMessages();
    };

    CallReportCardProductsTable.prototype._getProductsWithMessages = function() {
      return this._getProducts().then((function(_this) {
        return function(products) {
          var marketingMessagesCollection;
          marketingMessagesCollection = new MarketingMessagesCollection;
          return marketingMessagesCollection.fetchAll().then(marketingMessagesCollection.getAllEntitiesFromResponse).then(function(messages) {
            return _this._prepareProductsWithMessages(products, messages);
          });
        };
      })(this));
    };

    CallReportCardProductsTable.prototype._getProducts = function() {
      var productsCollection;
      productsCollection = new ProductsCollection;
      if (this._isViewMode()) {
        return productsCollection.fetchAll().then(productsCollection.getAllEntitiesFromResponse);
      } else {
        return this._getActiveUser().then((function(_this) {
          return function(activeUser) {
            var atcClassArray;
            atcClassArray = activeUser.pinCode.split(' ');
            return productsCollection.fetchAllWhereIn(productsCollection.model.sfdc.atcClass, atcClassArray).then(productsCollection.getAllEntitiesFromResponse);
          };
        })(this));
      }
    };

    CallReportCardProductsTable.prototype._prepareProductsWithMessages = function(products, messages) {
      return products.forEach((function(_this) {
        return function(product) {
          var productWithMessages;
          if (product && product.id) {
            productWithMessages = {};
            productWithMessages.product = product;
            productWithMessages.isSelected = false;
            productWithMessages.messages = messages.filter(function(message) {
              return message.produtSfId === product.id;
            });
            return _this.productsWithMessages.push(productWithMessages);
          }
        };
      })(this));
    };

    CallReportCardProductsTable.prototype._getActiveUser = function() {
      return SforceDataContext.activeUser();
    };

    CallReportCardProductsTable.prototype.renderEmptyTable = function() {
      return _(this._productCount).times((function(_this) {
        return function() {
          var callReportCardProductsTableCell;
          callReportCardProductsTableCell = new CallReportCardProductsTableCell(_this);
          callReportCardProductsTableCell.on('presentModalController', _this._onPresentModalController);
          callReportCardProductsTableCell.on('dismissModalController', _this._onDismissModalController);
          _this._productsCells.push(callReportCardProductsTableCell);
          _this.append(callReportCardProductsTableCell.render().el);
          return callReportCardProductsTableCell.setCommonInput('');
        };
      })(this));
    };

    CallReportCardProductsTable.prototype.renderWithData = function() {
      var callReportCardViewProductsTableCell, i, j, messageNames, messageNumber, productComment, productId, productName, productNumber, productPromotional, productWithMessage, ref, results;
      results = [];
      for (productNumber = i = 1, ref = this._productCount; i <= ref; productNumber = i += 1) {
        productId = this._callReport['prio' + productNumber + 'ProductSfid'];
        if (productId) {
          productWithMessage = this.productsWithMessages.filter((function(_this) {
            return function(productWithMessage) {
              return productWithMessage['product'].id === productId;
            };
          })(this));
          if (productWithMessage.length === 1) {
            productName = productWithMessage[0]['product'].name;
            productComment = this._callReport['noteForPrio' + productNumber];
            productPromotional = this._callReport['promotionalItemsPrio' + productNumber];
            messageNames = [];
            for (messageNumber = j = 1; j <= 3; messageNumber = ++j) {
              messageNames[messageNumber] = this._callReport['prio' + productNumber + 'MarketingMessage' + messageNumber];
            }
            callReportCardViewProductsTableCell = new CallReportCardViewProductsTableCell(productName, productComment, messageNames[1], messageNames[2], messageNames[3], productPromotional);
            this.append(callReportCardViewProductsTableCell.render().el);
            results.push(callReportCardViewProductsTableCell.refreshComment());
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CallReportCardProductsTable.prototype._onPresentModalController = function(filterPopup) {
      return this.trigger('presentModalController', filterPopup);
    };

    CallReportCardProductsTable.prototype._onDismissModalController = function(filterPopup) {
      return this.trigger('dismissModalController');
    };

    CallReportCardProductsTable.prototype.template = function() {
      return require('views/call-report-card/call-report-card-products-table')();
    };

    CallReportCardProductsTable.prototype.getProducts = function() {
      var productsArray;
      productsArray = [];
      this._productsCells.forEach((function(_this) {
        return function(productCell, index) {
          var product;
          product = {};
          product.productId = productCell.productId;
          product.productComment = productCell.productComment;
          product.productMessage1 = productCell.productMessage1;
          product.productMessage2 = productCell.productMessage2;
          product.productMessage3 = productCell.productMessage3;
          product.isPromotional = productCell.isPromotional;
          return productsArray.push(product);
        };
      })(this));
      return productsArray;
    };

    CallReportCardProductsTable.prototype.isFirstProductSelected = function() {
      return this._productsCells[0].productId != null;
    };

    CallReportCardProductsTable.prototype.isAnyProductChanged = function() {
      return this._productsCells.filter((function(_this) {
        return function(productCell) {
          return productCell.isChanged;
        };
      })(this)).length;
    };

    CallReportCardProductsTable.prototype.resetChangeFlags = function() {
      return this._productsCells.forEach((function(_this) {
        return function(productCell) {
          return productCell.isChanged = false;
        };
      })(this));
    };

    return CallReportCardProductsTable;

  })(Spine.Controller);

  module.exports = CallReportCardProductsTable;

}).call(this);
}, "controllers/call-report-card/call-report-card-view-products-table-cell": function(exports, require, module) {(function() {
  var CallReportCardViewProductsTableCell, Locale, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Locale = require('common/localization/locale');

  CallReportCardViewProductsTableCell = (function(superClass) {
    extend(CallReportCardViewProductsTableCell, superClass);

    CallReportCardViewProductsTableCell.prototype.tag = 'tbody';

    CallReportCardViewProductsTableCell.prototype.events = {
      'tap .call-report-card-expand-btn': '_onExpandTap'
    };

    CallReportCardViewProductsTableCell.prototype.elements = {
      '.call-report-card-product-list-btn': 'elProductListBtn',
      '.call-report-card-product-comment': 'elProductComment',
      '.call-report-card-message-list-btn.message-1': 'elProductMessage1',
      '.call-report-card-message-list-btn.message-2': 'elProductMessage2',
      '.call-report-card-message-list-btn.message-3': 'elProductMessage3',
      '.td-content-wrapper': 'elExpandBlock',
      '.product-expand-wrapper': 'elExpandWrapper',
      '.promotion-item': 'elPromotional'
    };

    function CallReportCardViewProductsTableCell(productName, productComment, message1Name, message2Name, message3Name, isPromotional) {
      this.productName = productName;
      this.productComment = productComment;
      this.message1Name = message1Name;
      this.message2Name = message2Name;
      this.message3Name = message3Name;
      this.isPromotional = isPromotional;
      this.refreshComment = bind(this.refreshComment, this);
      this._onExpandTap = bind(this._onExpandTap, this);
      CallReportCardViewProductsTableCell.__super__.constructor.call(this, {});
    }

    CallReportCardViewProductsTableCell.prototype._onExpandTap = function() {
      var height;
      this.el.toggleClass('expanded');
      height = 0;
      if (this.el.hasClass('expanded')) {
        height = this.elExpandWrapper.height();
      }
      return this.elExpandBlock.css('height', height + 'px');
    };

    CallReportCardViewProductsTableCell.prototype._template = function() {
      return require('views/call-report-card/call-report-card-products-table-cell')();
    };

    CallReportCardViewProductsTableCell.prototype.refreshComment = function() {
      return this.elProductComment.elastic();
    };

    CallReportCardViewProductsTableCell.prototype.render = function() {
      this.html(this._template());
      this.elProductListBtn.html(this.productName);
      this.elProductComment.val(this.productComment);
      if (this.message1Name) {
        this.elProductMessage1.html(this.message1Name);
      }
      if (this.message2Name) {
        this.elProductMessage2.html(this.message2Name);
      }
      if (this.message3Name) {
        this.elProductMessage3.html(this.message3Name);
      }
      this.elPromotional[0].checked = this.isPromotional;
      Locale.localize(this.el);
      return this;
    };

    return CallReportCardViewProductsTableCell;

  })(Spine.Controller);

  module.exports = CallReportCardViewProductsTableCell;

}).call(this);
}, "controllers/call-report-card/call-report-card-view": function(exports, require, module) {(function() {
  var CallReport, CallReportCard, CallReportCardProductsTable, CallReportCardView, CallReportPickListManager, CallsCollection, Header, HeaderBaseControl, MarketingMessagesCollection, Portfolio, ProductsCollection, Query, SettingsManager, TradeModule, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CallReportCard = require('controllers/call-report-card/call-report-card');

  Utils = require('common/utils');

  CallsCollection = require('models/bll/call-reports-collection/calls-collection');

  CallReportCardProductsTable = require('controllers/call-report-card/call-report-card-products-table');

  ProductsCollection = require('models/bll/products-collection');

  MarketingMessagesCollection = require('models/bll/marketing-messages-collection');

  Query = require('common/query');

  CallReport = require('models/call-report');

  CallReportPickListManager = require('db/picklist-managers/callreport-picklist-manager');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  TradeModule = require('controllers/trade-module/trade-module');

  SettingsManager = require('db/settings-manager');

  Portfolio = require('controllers/call-report-card/portfolio/portfolio');

  CallReportCardView = (function(superClass) {
    extend(CallReportCardView, superClass);

    CallReportCardView.prototype.className = 'call-report card view-mode';

    CallReportCardView.prototype.ANY_COMMENTS = 'Any comments.';

    function CallReportCardView(callReportId) {
      this.callReportId = callReportId;
      this._showTradeModule = bind(this._showTradeModule, this);
      this._init = bind(this._init, this);
      this._onOrganizationTap = bind(this._onOrganizationTap, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      CallReportCardView.__super__.constructor.apply(this, arguments);
      this.callReportPickListManager = new CallReportPickListManager;
    }

    CallReportCardView.prototype.enableFullScreenMode = function() {};

    CallReportCardView.prototype.disableFullScreenMode = function() {};

    CallReportCardView.prototype._onCustomerTap = function() {
      var ContactCard;
      ContactCard = require('controllers/contact-card/contact-card');
      return this.stage.push(new ContactCard(this.callReport.contactSfid));
    };

    CallReportCardView.prototype._onOrganizationTap = function() {
      var OrganizationCard;
      OrganizationCard = require('controllers/organization-card/organization-card');
      return this.stage.push(new OrganizationCard(this.callReport.organizationSfId));
    };

    CallReportCardView.prototype._onSignatureTap = function() {};

    CallReportCardView.prototype._init = function() {
      var callsCollection, keyValue;
      callsCollection = new CallsCollection;
      keyValue = {};
      keyValue[CallReport.sfdc.id] = this.callReportId;
      return callsCollection.fetchAllWhere(keyValue).then((function(_this) {
        return function(response) {
          return _this.callReport = callsCollection.getEntityFromResponse(response);
        };
      })(this)).then((function(_this) {
        return function() {
          _this.render();
          return _this._applyConfig();
        };
      })(this));
    };

    CallReportCardView.prototype._headerTitle = function() {
      return Locale.value('card.CallReport.ViewHeaderTitle');
    };

    CallReportCardView.prototype._initHeader = function() {
      var callReportHeader;
      callReportHeader = new Header(this._headerTitle());
      callReportHeader.render();
      return SettingsManager.getValueByKey('isTradeModuleEnabled').then((function(_this) {
        return function(isTradeEnabled) {
          if (isTradeEnabled) {
            _this._addTradeBtnToHeader(callReportHeader);
          }
          return _this.setHeader(callReportHeader);
        };
      })(this));
    };

    CallReportCardView.prototype._showTradeModule = function() {
      return this.stage.push(new TradeModule(this._organizationIdForTradeModule(), this.callReport, this.callPromoAdjustmentsCollection, true));
    };

    CallReportCardView.prototype._organizationIdForTradeModule = function() {
      return this.callReport.organizationSfId;
    };

    CallReportCardView.prototype.template = function() {
      return require('views/call-report-card/call-report-card-view')();
    };

    CallReportCardView.prototype._addComment = function(comment, element) {
      if (comment && comment.replace(/\n/gim, '').length > 0) {
        return element[0].innerText = comment;
      } else {
        element.addClass('placeholder');
        return element.html(this.ANY_COMMENTS);
      }
    };

    CallReportCardView.prototype._fillJointVisit = function() {
      return this.callReportPickListManager.getLabelByValue(CallReport.sfdc.jointVisit, this.callReport.jointVisit).then((function(_this) {
        return function(label) {
          return _this.elJointVisit.html(label);
        };
      })(this));
    };

    CallReportCardView.prototype._fillTypeOfVisit = function() {
      return this.callReportPickListManager.getLabelByValue(CallReport.sfdc.typeOfVisit, this.callReport.typeOfVisit).then((function(_this) {
        return function(label) {
          return _this.elTypeOfVisit.html(label);
        };
      })(this));
    };

    CallReportCardView.prototype._fillGeneralInfo = function() {
      this.elDateTime.html(Utils.formatDateTime(this.callReport.dateTimeOfVisit));
      this.elOrganization.html(this.callReport.organizationNameAndAddress());
      this.elCustomer.html((this.callReport.contactFullName()) + " <br/> " + this.callReport.contactRecordType);
      this.callReport.getSpecialty().then((function(_this) {
        return function(specialty) {
          return _this.elSpecialty.html(specialty);
        };
      })(this));
      this.elType.html(this.callReport.type);
      this.elUser.html(this.callReport.userFullName());
      this.callReport.getIsTargetCustomer().then((function(_this) {
        return function(isTargetCustomer) {
          return _this.elTargetCustomer.html(isTargetCustomer);
        };
      })(this));
      this.callReport.getContact().then((function(_this) {
        return function(contact) {
          return _this.elTargetPriority.html(contact.priority);
        };
      })(this));
      this._fillJointVisit();
      this._fillTypeOfVisit();
      this.callReport.getJointVisitUser().then((function(_this) {
        return function() {
          var ref;
          return _this.elJointVisitUser.html((ref = _this.callReport.jointVisitUser) != null ? ref.fullName() : void 0);
        };
      })(this));
      if (this.callReport.signatureDate) {
        this.elSignatureDate.html(Utils.formatDateTime(this.callReport.signatureDate));
      }
      this._addComment(this.callReport.generalComments, this.elComment);
      return this._addComment(this.callReport.nextCallObjective, this.elObjective);
    };

    CallReportCardView.prototype._initProducts = function() {
      this.productsTable = new CallReportCardProductsTable(this._productCount, this.productsWithMessages);
      this.elScrollContent.append(this.productsTable.el);
      return this.productsTable.render(this.callReport);
    };

    CallReportCardView.prototype._initPortfolio = function() {
      this.el.addClass("portfolio-mode");
      this.portfolio = new Portfolio(this._productCount, this.callReport);
      this.portfolio.on('presentModalController', this._onPresentModalController);
      this.portfolio.on('dismissModalController', this.dismissModalController);
      this.portfolio.on('fullScreenTap', this._toggleFullScreen);
      this.elScrollContent.append(this.portfolio.el);
      return this.portfolio.render();
    };

    return CallReportCardView;

  })(CallReportCard);

  module.exports = CallReportCardView;

}).call(this);
}, "controllers/call-report-card/call-report-card": function(exports, require, module) {(function() {
  var AlertPopup, CallReport, CallReportCard, CallReportCardProductsTable, CallReportDataCollection, CallsCollection, CommentView, CommonInput, ConfigurationManager, ConfirmationPopup, ContactsCollection, DateTimePicker, DurationFilter, FullscreenPanel, Header, HeaderBaseControl, JSON2KPI, JointVisitPickListDatasource, KpiHandler, ListPopup, ListPopupWithBackBtn, Locale, PickList, Portfolio, PresentationScenarioViewer, PresentationViewer, PresentationsFileManager, ProductsCollection, PromoAdjustmentsCollection, PromotionAccountsCollection, Query, ReferencesCollection, Scenarios, ScenariosCollection, SettingsManager, SforceDataContext, SignatureView, Spine, TargetFrequency, TradeModule, TypeOfVisitPickListDatasource, Users, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  FullscreenPanel = require('controllers/base/panel/fullscreen-panel');

  ReferencesCollection = require('models/bll/references/references-collection');

  CommentView = require('controls/comment-view/comment-view');

  ListPopup = require('controls/popups/list-popup');

  ListPopupWithBackBtn = require('controls/popups/list-popup-with-back-btn');

  JointVisitPickListDatasource = require('controllers/call-report-card/joint-visit-picklist-datasource');

  TypeOfVisitPickListDatasource = require('controllers/call-report-card/type-of-visit-picklist-datasource');

  DurationFilter = require('controls/filters/duration-filters/duration-filter');

  CallReportCardProductsTable = require('controllers/call-report-card/call-report-card-products-table');

  DateTimePicker = require('controls/datepicker/date-time-picker');

  Utils = require('common/utils');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  Users = require('controllers/users/users');

  CallReport = require('models/call-report');

  CallsCollection = require('models/bll/call-reports-collection/calls-collection');

  Query = require('common/query');

  ConfigurationManager = require('db/configuration-manager');

  PickList = require('controls/pick-list/pick-list');

  ContactsCollection = require('models/bll/contacts-collection');

  TargetFrequency = require('models/target-frequency');

  CommonInput = require('controls/common-input/common-input');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  SignatureView = require('controllers/signature-view/signature-view');

  AlertPopup = require('controls/popups/alert-popup');

  PresentationsFileManager = require('common/presentation-managers/presentations-file-manager');

  CallReportDataCollection = require('models/bll/clm-call-report-data-collection');

  PresentationViewer = require('controllers/presentation-viewer/presentation-viewer');

  Scenarios = require('controllers/agenda/scenarios');

  TradeModule = require('controllers/trade-module/trade-module');

  JSON2KPI = require('common/json2kpi');

  KpiHandler = require('common/kpi-handler');

  ScenariosCollection = require('models/bll/scenarios-collection');

  PresentationScenarioViewer = require('controllers/presentation-viewer/presentation-scenario-viewer');

  PromotionAccountsCollection = require('models/bll/promotion-accounts-collection');

  SettingsManager = require('db/settings-manager');

  PromoAdjustmentsCollection = require('db/trade-module-managers/promo-adjustments-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  Portfolio = require('controllers/call-report-card/portfolio/portfolio');

  Locale = require('common/localization/locale');

  ProductsCollection = require('models/bll/products-collection');

  CallReportCard = (function(superClass) {
    extend(CallReportCard, superClass);

    CallReportCard.prototype.className = 'call-report card';

    CallReportCard.prototype.events = {
      'tap .call-report-card-customer': '_onCustomerTap',
      'tap .call-report-card-organization': '_onOrganizationTap',
      'tap .call-report-card-signature': '_onSignatureTap',
      'tap': '_blurInputs'
    };

    CallReportCard.prototype.elements = {
      '.call-report-card-customer': 'elCustomer',
      '.call-report-card-organization': 'elOrganization',
      '.call-report-card-speciality': 'elSpecialty',
      '.call-report-card-user': 'elUser',
      '.call-report-card-date-time': 'elDateTime',
      '.call-report-card-duration ': 'elDuration',
      '.call-comments': 'elComment',
      '.call-objectives': 'elObjective',
      '.call-report-card-joint-visit': 'elJointVisit',
      '.call-report-card-type-of-visit': 'elTypeOfVisit',
      '.call-report-card-joint-visit-user': 'elJointVisitUser',
      '.call-report-card-signature': 'elSignature',
      '.signature': 'elSignatureWrapper',
      '.signature-taken': 'elSignatureTakenWrapper',
      '.type-of-visit': 'elTypeOfVisitWrapper',
      '.call-report-card-type': 'elType',
      '.call-report-card-target-customer': 'elTargetCustomer',
      '.call-report-card-target-prority': 'elTargetPriority',
      '.call-report-card-signature-date': 'elSignatureDate',
      '.products-table': 'elProductsTable',
      '.wrapper': 'elWrapper',
      '.wrapper>.scroll-content': 'elScrollContent',
      '.comment-block.left': 'elCallCommentsSection',
      '.comment-block.right': 'elNextCallObjectiveSection',
      '.comments-group': 'elCommentsGroup'
    };

    CallReportCard.prototype._productCount = 6;

    CallReportCard.prototype._maxProductCount = 10;

    CallReportCard.prototype.maxCommentStringLength = 32000;

    function CallReportCard(referenceId) {
      this.referenceId = referenceId;
      this._navigateToView = bind(this._navigateToView, this);
      this._updateTargetFrequencyForReference = bind(this._updateTargetFrequencyForReference, this);
      this._updateTargetFrequency = bind(this._updateTargetFrequency, this);
      this._updateTargetFrequencies = bind(this._updateTargetFrequencies, this);
      this._assignPriority = bind(this._assignPriority, this);
      this._assignProducts = bind(this._assignProducts, this);
      this._assignPortfolioPrios = bind(this._assignPortfolioPrios, this);
      this._saveCallData = bind(this._saveCallData, this);
      this._save = bind(this._save, this);
      this._removeSandboxCallReport = bind(this._removeSandboxCallReport, this);
      this._getSandboxCallReport = bind(this._getSandboxCallReport, this);
      this._onSignatureSaveBtnTap = bind(this._onSignatureSaveBtnTap, this);
      this._validateProductsSection = bind(this._validateProductsSection, this);
      this._validatePortfolioSection = bind(this._validatePortfolioSection, this);
      this._saveCallReport = bind(this._saveCallReport, this);
      this._resetCallReport = bind(this._resetCallReport, this);
      this.onBack = bind(this.onBack, this);
      this._initTypeOfVisitPickList = bind(this._initTypeOfVisitPickList, this);
      this._initDurationFilter = bind(this._initDurationFilter, this);
      this._initJointVisitPickList = bind(this._initJointVisitPickList, this);
      this._onOrganizationTap = bind(this._onOrganizationTap, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      this._onJointVisitUserTap = bind(this._onJointVisitUserTap, this);
      this._setDateTime = bind(this._setDateTime, this);
      this._showDateTimePicker = bind(this._showDateTimePicker, this);
      this._onDurationTap = bind(this._onDurationTap, this);
      this._showOpenPresentationError = bind(this._showOpenPresentationError, this);
      this._mergeScenarioProducts = bind(this._mergeScenarioProducts, this);
      this._addProductKpi = bind(this._addProductKpi, this);
      this._collectKPI = bind(this._collectKPI, this);
      this._openPresentation = bind(this._openPresentation, this);
      this._showProductPresentation = bind(this._showProductPresentation, this);
      this._showProductsPopup = bind(this._showProductsPopup, this);
      this._showScenario = bind(this._showScenario, this);
      this._showScenariosPopup = bind(this._showScenariosPopup, this);
      this._getScenarios = bind(this._getScenarios, this);
      this._onPresentationPopupSelected = bind(this._onPresentationPopupSelected, this);
      this._showPresentationsPopup = bind(this._showPresentationsPopup, this);
      this._presentationsBtnTap = bind(this._presentationsBtnTap, this);
      this._setActiveUser = bind(this._setActiveUser, this);
      this._callReportChanged = bind(this._callReportChanged, this);
      this._onPresentModalController = bind(this._onPresentModalController, this);
      this._toggleFullScreen = bind(this._toggleFullScreen, this);
      this._openDynamicAgenda = bind(this._openDynamicAgenda, this);
      this._showTradeModule = bind(this._showTradeModule, this);
      this._openTradeModule = bind(this._openTradeModule, this);
      this._init = bind(this._init, this);
      this._resetChangeFlags = bind(this._resetChangeFlags, this);
      this._fetchAllProductsByAtc = bind(this._fetchAllProductsByAtc, this);
      this._getActiveUser = bind(this._getActiveUser, this);
      this._blurInputs = bind(this._blurInputs, this);
      CallReportCard.__super__.constructor.apply(this, arguments);
      this.productsCallData = {};
      this.activeUser = null;
      this.callReport = null;
      this.callPromoAdjustmentsCollection = new PromoAdjustmentsCollection;
    }

    CallReportCard.prototype.active = function() {
      CallReportCard.__super__.active.apply(this, arguments);
      this._resetChangeFlags();
      return ConfigurationManager.getConfig().then((function(_this) {
        return function(config) {
          _this.config = config;
          return _this._initProductsPickList();
        };
      })(this)).then(this._init);
    };

    CallReportCard.prototype._blurInputs = function() {
      return this.el.find(':focus').blur();
    };

    CallReportCard.prototype._initProductsPickList = function() {
      return this._getActiveUser().then(this._fetchAllProductsByAtc);
    };

    CallReportCard.prototype._getActiveUser = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(activeUser) {
          _this.activeUser = activeUser;
          return _this.activeUser;
        };
      })(this));
    };

    CallReportCard.prototype._fetchAllProductsByAtc = function() {
      var atcClassArray, productsCollection;
      this._productsDataSource = [];
      productsCollection = new ProductsCollection();
      atcClassArray = this.activeUser.pinCode.split(' ');
      return productsCollection.fetchAllWhereIn(productsCollection.model.sfdc.atcClass, atcClassArray).then((function(_this) {
        return function(response) {
          _this._products = response.records;
          return _this._products.forEach(function(product) {
            if (product && product.id) {
              return _this._productsDataSource.push({
                id: product.id,
                description: product.name,
                presentationId: product.presentationId
              });
            }
          });
        };
      })(this));
    };

    CallReportCard.prototype._resetChangeFlags = function() {
      var ref;
      if ((ref = this.productsTable) != null) {
        ref.resetChangeFlags();
      }
      return this.isChanged = false;
    };

    CallReportCard.prototype._init = function() {
      return this._getSandboxCallReport().then((function(_this) {
        return function(callReport1) {
          _this.callReport = callReport1;
          _this._startTime = new Date().getTime();
          _this.render();
          _this._bindEvents();
          _this._initJointVisitPickList();
          return _this._initDurationFilter().then(function() {
            _this._initTypeOfVisitPickList();
            _this.originDateTime = new Date;
            _this.jointVisitUser = null;
            _this.isFirstProduct = false;
            _this._clearSignature();
            return _this._applyConfig();
          });
        };
      })(this));
    };

    CallReportCard.prototype.render = function() {
      this.html(this.template());
      this._initHeader();
      if (!(this._isCallCommentShown() && this._isNextCallObjectiveShown())) {
        if (!this._isCallCommentShown()) {
          this.elCallCommentsSection.hide();
        }
        if (!this._isNextCallObjectiveShown()) {
          this.elNextCallObjectiveSection.hide();
        }
        this.elCommentsGroup.addClass('single');
      } else {
        this.elCommentsGroup.removeClass('single');
      }
      this._applyProductConfig();
      Locale.localize(this.el);
      SettingsManager.getValueByKey('isPortfolioSellingModuleEnabled').then((function(_this) {
        return function(isPortfolioSellingModuleEnabled) {
          _this.isPortfolioSellingModuleEnabled = isPortfolioSellingModuleEnabled;
          if (_this.isPortfolioSellingModuleEnabled) {
            _this._initPortfolio();
          } else {
            _this._initProducts();
          }
          return _this._fillGeneralInfo();
        };
      })(this));
      return this;
    };

    CallReportCard.prototype.template = function() {
      return require('views/call-report-card/call-report-card')();
    };

    CallReportCard.prototype._initHeader = function() {
      var callReportHeader;
      callReportHeader = new Header(this._headerTitle());
      callReportHeader.render();
      return SettingsManager.getValueByKey('isTradeModuleEnabled').then((function(_this) {
        return function(isTradeEnabled) {
          if (isTradeEnabled) {
            _this._addTradeBtnToHeader(callReportHeader);
          }
          return SettingsManager.getValueByKey('isDynamicAgendaEnabled');
        };
      })(this)).then((function(_this) {
        return function(isAgendaEnabled) {
          _this.isAgendaEnabled = isAgendaEnabled;
          if (_this.isAgendaEnabled) {
            _this._addDynamicAgendaBtnToHeader(callReportHeader);
          }
          return SettingsManager.getValueByKey('isEdetailingEnabled');
        };
      })(this)).then((function(_this) {
        return function(isEdetailingEnabled) {
          _this.isEdetailingEnabled = isEdetailingEnabled;
          if (_this.isEdetailingEnabled) {
            _this._addPresentationsBtnToHeader(callReportHeader);
          }
          _this._addSaveBtnToHeader(callReportHeader);
          return _this.setHeader(callReportHeader);
        };
      })(this));
    };

    CallReportCard.prototype._addDynamicAgendaBtnToHeader = function(callReportHeader) {
      var dynamicAgendaBtn;
      dynamicAgendaBtn = new HeaderBaseControl('', 'dynamic-agenda-btn');
      dynamicAgendaBtn.bind('tap', this._openDynamicAgenda);
      return callReportHeader.addRightControlElement(dynamicAgendaBtn.el);
    };

    CallReportCard.prototype._addPresentationsBtnToHeader = function(callReportHeader) {
      var presentationsBtn;
      presentationsBtn = new HeaderBaseControl(Locale.value('common:buttons.Presentations'), 'ctrl-btn');
      presentationsBtn.bind('tap', this._presentationsBtnTap);
      return callReportHeader.addRightControlElement(presentationsBtn.el);
    };

    CallReportCard.prototype._addTradeBtnToHeader = function(callReportHeader) {
      var tradeModuleBtn;
      tradeModuleBtn = new HeaderBaseControl(Locale.value('common:buttons.TradeModule'), 'ctrl-btn');
      tradeModuleBtn.bind('tap', this._openTradeModule);
      return callReportHeader.addRightControlElement(tradeModuleBtn.el);
    };

    CallReportCard.prototype._addSaveBtnToHeader = function(callReportHeader) {
      this.saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      this.saveBtn.bind('tap', this._saveCallReport);
      return callReportHeader.addRightControlElement(this.saveBtn.el);
    };

    CallReportCard.prototype._openTradeModule = function() {
      var promotionAccountsCollection;
      promotionAccountsCollection = new PromotionAccountsCollection({
        pageSize: 1
      });
      return promotionAccountsCollection.getActualPromotionsForAccount(this._organizationIdForTradeModule(), moment()).then((function(_this) {
        return function(promotionAccounts) {
          if (!promotionAccounts.length) {
            return _this._showNoPromotionsToast();
          } else {
            return _this._showTradeModule();
          }
        };
      })(this));
    };

    CallReportCard.prototype._showTradeModule = function() {
      var parsedCallReport, tradeModule;
      parsedCallReport = new CallsCollection().parseEntity(this.callReport);
      tradeModule = new TradeModule(this._organizationIdForTradeModule(), parsedCallReport, this.callPromoAdjustmentsCollection);
      tradeModule.on('dataChanged', this._callReportChanged);
      return this.stage.push(tradeModule);
    };

    CallReportCard.prototype._organizationIdForTradeModule = function() {
      return this.reference.organizationSfId;
    };

    CallReportCard.prototype._showNoPromotionsToast = function() {
      return $.fn.dpToast(Locale.value("card.CallReport.ToastMessage.NoPromosForOrganization"));
    };

    CallReportCard.prototype._openDynamicAgenda = function() {
      return this.stage.push(new Scenarios);
    };

    CallReportCard.prototype._headerTitle = function() {
      return Locale.value('card.CallReport.HeaderTitle');
    };

    CallReportCard.prototype._applyProductConfig = function() {
      var limit, productSettings;
      if (this.config.callReportProductsSettings) {
        productSettings = this.config.callReportProductsSettings;
        limit = productSettings.numberOfPromotedProducts ? productSettings.numberOfPromotedProducts : this._productCount;
        return this._productCount = Math.min(this._maxProductCount, limit);
      }
    };

    CallReportCard.prototype._initProducts = function() {
      this.productsTable = new CallReportCardProductsTable(this._productCount);
      this.productsTable.on('presentModalController', this._onPresentModalController);
      this.productsTable.on('dismissModalController', this.dismissModalController);
      this.elScrollContent.append(this.productsTable.el);
      return this.productsTable.render();
    };

    CallReportCard.prototype._initPortfolio = function() {
      this.el.addClass("portfolio-mode");
      this.portfolio = new Portfolio(this._productCount);
      this.portfolio.on('presentModalController', this._onPresentModalController);
      this.portfolio.on('dismissModalController', this.dismissModalController);
      this.portfolio.on('fullScreenTap', this._toggleFullScreen);
      this.elScrollContent.append(this.portfolio.el);
      return this.portfolio.render(Utils.currentDate(this.originDateTime));
    };

    CallReportCard.prototype._toggleFullScreen = function() {
      this._blurInputs();
      this.el.toggleClass('full-screen-mode');
      return this.portfolio.refresh();
    };

    CallReportCard.prototype._onPresentModalController = function(filterPopup) {
      return this.presentModalController(filterPopup);
    };

    CallReportCard.prototype._fillGeneralInfo = function() {
      var collection;
      this._initComment('');
      this._initObjective('');
      collection = new ReferencesCollection;
      return collection.fetchEntityById(this.referenceId).then((function(_this) {
        return function(reference1) {
          _this.reference = reference1;
          _this.elCustomer.html((_this.reference.contactFullName()) + " <br/> " + _this.reference.contactRecordType);
          _this.elOrganization.html(_this.reference.organizationNameAndAddress());
          _this.elDateTime.html(Utils.currentDateTime(_this.originDateTime));
          return _this.reference.getContact();
        };
      })(this)).then((function(_this) {
        return function(contact) {
          return _this.elSpecialty.html(contact.abbottSpecialty);
        };
      })(this)).then(this._setActiveUser);
    };

    CallReportCard.prototype._initComment = function(value) {
      this.elComment.val(value);
      new CommonInput(this.elWrapper[0], this.elComment[0]);
      return this.elComment.on('change', this._callReportChanged);
    };

    CallReportCard.prototype._initObjective = function(value) {
      this.elObjective.val(value);
      new CommonInput(this.elWrapper[0], this.elObjective[0]);
      return this.elObjective.on('change', this._callReportChanged);
    };

    CallReportCard.prototype._callReportChanged = function() {
      return this.isChanged = true;
    };

    CallReportCard.prototype._setActiveUser = function() {
      var ref;
      return this.elUser.html((ref = this.activeUser) != null ? ref.fullName() : void 0);
    };

    CallReportCard.prototype._presentationsBtnTap = function() {
      if (this.isAgendaEnabled) {
        return this._showPresentationsPopup();
      } else {
        return this._showProductsPopup();
      }
    };

    CallReportCard.prototype._showPresentationsPopup = function() {
      var presentationsPopup;
      this._mediaDataSource = [
        {
          id: "scenarios",
          description: Locale.value('common:names.Scenarios')
        }, {
          id: "products",
          description: Locale.value('common:names.Products')
        }
      ];
      presentationsPopup = new ListPopup(this._mediaDataSource, this._mediaDataSource[0], '');
      presentationsPopup.customStyleClass('no-checkbox call-report-presentations');
      presentationsPopup.bind('onPopupItemSelected', this._onPresentationPopupSelected);
      return this.presentModalController(presentationsPopup);
    };

    CallReportCard.prototype._onPresentationPopupSelected = function(item) {
      this.dismissModalController();
      switch (item.id) {
        case "scenarios":
          return this._getScenarios().then(this._showScenariosPopup);
        case "products":
          return this._showProductsPopup();
      }
    };

    CallReportCard.prototype._getScenarios = function() {
      var scenariosCollection;
      scenariosCollection = new ScenariosCollection();
      return scenariosCollection.fetchAll().then((function(_this) {
        return function(response) {
          return _this._scenariosDataSource = response.records.map(function(entity) {
            return {
              id: entity._soupEntryId,
              description: entity.name,
              entity: entity
            };
          });
        };
      })(this));
    };

    CallReportCard.prototype._showScenariosPopup = function() {
      var scenariosPopup;
      if (this._scenariosDataSource.length) {
        scenariosPopup = new ListPopupWithBackBtn(this._scenariosDataSource, this._scenariosDataSource[0], '');
        scenariosPopup.customStyleClass('no-checkbox call-report-presentations');
        scenariosPopup.bind('onPopupItemSelected', this._showScenario);
        scenariosPopup.bind('backbutton', (function(_this) {
          return function() {
            return setTimeout(_this._showPresentationsPopup, 0);
          };
        })(this));
        return this.presentModalController(scenariosPopup);
      }
    };

    CallReportCard.prototype._showScenario = function(item) {
      var presentationScenarioViewer;
      presentationScenarioViewer = new PresentationScenarioViewer(item.entity);
      presentationScenarioViewer.on('complete', (function(_this) {
        return function() {
          return _this._collectKPI(presentationScenarioViewer).then(function() {
            return presentationScenarioViewer.closePresentation();
          });
        };
      })(this));
      presentationScenarioViewer.openPresentation();
      return this.dismissModalController();
    };

    CallReportCard.prototype._showProductsPopup = function() {
      var presentationsPopup;
      presentationsPopup = new ListPopupWithBackBtn(this._productsDataSource, this._productsDataSource[0], '');
      presentationsPopup.customStyleClass('no-checkbox call-report-presentations');
      presentationsPopup.bind('onPopupItemSelected', this._showProductPresentation);
      presentationsPopup.bind('backbutton', (function(_this) {
        return function() {
          if (_this.isAgendaEnabled) {
            return setTimeout(_this._showPresentationsPopup, 0);
          } else {
            return _this.dismissModalController();
          }
        };
      })(this));
      return this.presentModalController(presentationsPopup);
    };

    CallReportCard.prototype._showProductPresentation = function(product) {
      if (!product.presentationId) {
        this._showOpenPresentationError('PresentationNotExist');
      }
      return PresentationsFileManager.presentationExist(product.presentationId).done((function(_this) {
        return function() {
          _this._callReportChanged();
          return _this._openPresentation(product);
        };
      })(this)).fail((function(_this) {
        return function() {
          _this.dismissModalController();
          return _this._showOpenPresentationError('PresentationNotLoaded');
        };
      })(this));
    };

    CallReportCard.prototype._openPresentation = function(displayProduct) {
      var presentationViewer;
      presentationViewer = new PresentationViewer(displayProduct.presentationId);
      presentationViewer.on('didLoad', this.dismissModalController);
      presentationViewer.on('complete', (function(_this) {
        return function() {
          return _this._collectKPI(presentationViewer, displayProduct).then(function() {
            return presentationViewer.closePresentation();
          });
        };
      })(this));
      return presentationViewer.openPresentation();
    };

    CallReportCard.prototype._collectKPI = function(presentationViewer, displayProduct) {
      return presentationViewer.getKPI().then((function(_this) {
        return function(kpiJsonString) {
          return _this._mergeScenarioProducts(kpiJsonString, displayProduct);
        };
      })(this));
    };

    CallReportCard.prototype._addProductKpi = function(product, callData) {
      _.extend(callData, {
        productId: product.id
      });
      return this.productsCallData[callData.productId] = callData;
    };

    CallReportCard.prototype._mergeScenarioProducts = function(kpiJsonString, displayProduct) {
      if (!kpiJsonString) {
        return;
      }
      return this._products.forEach((function(_this) {
        return function(product) {
          var callData, kpiJson, kpiSaved, productKpi;
          kpiJson = JSON.parse(kpiJsonString);
          callData = _this.productsCallData[product.id];
          if (callData) {
            kpiSaved = JSON.parse(callData.kpiSrcJson);
            productKpi = KpiHandler.getKPIByProduct(kpiJson, kpiSaved, product, displayProduct);
            if (productKpi.slides.length) {
              return _this._addProductKpi(product, JSON2KPI.parse(KpiHandler.mergeKPI(kpiSaved, productKpi)));
            }
          } else {
            productKpi = KpiHandler.getKPIByProduct(kpiJson, null, product, displayProduct);
            if (productKpi.slides.length) {
              return _this._addProductKpi(product, JSON2KPI.parse(JSON.stringify(productKpi)));
            }
          }
        };
      })(this));
    };

    CallReportCard.prototype._showOpenPresentationError = function(errorKey) {
      var alertPopup;
      alertPopup = new AlertPopup({
        caption: Locale.value("card.CallReport.Alerts." + errorKey + ".caption"),
        message: Locale.value("card.CallReport.Alerts." + errorKey + ".message")
      });
      alertPopup.on('yesClicked', this.dismissModalController);
      return this.presentModalController(alertPopup);
    };

    CallReportCard.prototype._bindEvents = function() {
      this.elDuration.on('tap', this._onDurationTap);
      this.elDateTime.on('tap', this._showDateTimePicker);
      return this.elJointVisitUser.on('tap', this._onJointVisitUserTap);
    };

    CallReportCard.prototype._onDurationTap = function() {
      return DurationFilter.resources().then((function(_this) {
        return function(resources) {
          var datasource, filterPopup;
          datasource = resources;
          filterPopup = new ListPopup(datasource, _this.durationFilter, Locale.value('card.DurationPopup.Title'));
          filterPopup.bind('onPopupItemSelected', function(selectedItem) {
            _this.durationFilter = selectedItem.model;
            _this.elDuration.html(_this.durationFilter.value);
            _this.dismissModalController();
            _this.duration = _this.durationFilter.value;
            return _this._callReportChanged();
          });
          return _this.presentModalController(filterPopup);
        };
      })(this));
    };

    CallReportCard.prototype._showDateTimePicker = function() {
      var dateTimePicker;
      if (!this.originDateTime) {
        this.originDateTime = new Date();
      }
      dateTimePicker = new DateTimePicker(this.originDateTime, {
        beforeKey: 'daysCallReport',
        afterDays: 0
      });
      dateTimePicker.on('onDonePressed', (function(_this) {
        return function(result) {
          _this.dismissModalController();
          if (_this.isPortfolioSellingModuleEnabled) {
            return _this._setDateTimeForPortfolioMode(result);
          } else {
            return _this._setDateTimeForProductMode(result);
          }
        };
      })(this));
      return this.presentModalController(dateTimePicker);
    };

    CallReportCard.prototype._setDateTimeForPortfolioMode = function(result) {
      if (this.portfolio.isProfilesChanged()) {
        return this._showApplyResultConfirmation(result);
      } else {
        this._setDateTime(result);
        return this.portfolio.resetProfiles(Utils.currentDate(this.originDateTime));
      }
    };

    CallReportCard.prototype._showApplyResultConfirmation = function(result) {
      var confirm;
      confirm = new ConfirmationPopup({
        message: Locale.value('card.CallReport.Portfolio.DateApplyConfirmation')
      });
      confirm.bind('yesClicked', (function(_this) {
        return function() {
          _this.dismissModalController();
          _this._setDateTime(result);
          return _this.portfolio.resetProfiles(Utils.currentDate(_this.originDateTime));
        };
      })(this));
      confirm.bind('noClicked', (function(_this) {
        return function() {
          return _this.dismissModalController();
        };
      })(this));
      return this.presentModalController(confirm);
    };

    CallReportCard.prototype._setDateTimeForProductMode = function(result) {
      return this._setDateTime(result);
    };

    CallReportCard.prototype._setDateTime = function(result) {
      this.originDateTime = result;
      this.elDateTime.html(Utils.currentDateTime(result));
      return this._callReportChanged();
    };

    CallReportCard.prototype._onJointVisitUserTap = function() {
      var users;
      users = new Users(this.jointVisitUser);
      users.on('onClose', (function(_this) {
        return function(user) {
          if (user) {
            _this.elJointVisitUser.html(user.fullName());
            _this.jointVisitUser = user;
            _this.elJointVisitUser.removeClass('placeholder');
          } else {
            _this.elJointVisitUser.html(Locale.value('card.GeneralInfoFields.JointVisitUserPlaceholder'));
            _this.jointVisitUser = null;
            _this.elJointVisitUser.addClass('placeholder');
          }
          return _this._callReportChanged();
        };
      })(this));
      return this.stage.push(users);
    };

    CallReportCard.prototype._onCustomerTap = function() {
      var ContactCard;
      ContactCard = require('controllers/contact-card/contact-card');
      return this.stage.push(new ContactCard(this.reference.contactSfId));
    };

    CallReportCard.prototype._onOrganizationTap = function() {
      var OrganizationCard;
      OrganizationCard = require('controllers/organization-card/organization-card');
      return this.stage.push(new OrganizationCard(this.reference.organizationSfId));
    };

    CallReportCard.prototype._initJointVisitPickList = function() {
      var ref;
      this.jointVisitPickList = new PickList(this, this.elJointVisit, new JointVisitPickListDatasource, ((ref = this.callReport) != null ? ref.jointVisit : void 0) || null);
      return this.jointVisitPickList.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this._callReportChanged();
        };
      })(this));
    };

    CallReportCard.prototype._initDurationFilter = function() {
      return DurationFilter.resources().then((function(_this) {
        return function(resources) {
          _this.durationFilter = resources.defaultValue;
          _this.elDuration.html(_this.durationFilter.value);
          return _this.duration = _this.durationFilter.value;
        };
      })(this));
    };

    CallReportCard.prototype._initTypeOfVisitPickList = function() {
      var ref;
      this.typeOfVisitPickList = new PickList(this, this.elTypeOfVisit, new TypeOfVisitPickListDatasource, ((ref = this.callReport) != null ? ref.typeOfVisit : void 0) || null);
      return this.typeOfVisitPickList.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this._callReportChanged();
        };
      })(this));
    };

    CallReportCard.prototype._clearSignature = function() {
      this.signatureBase64 = null;
      return this.signatureDate = null;
    };

    CallReportCard.prototype._applyConfig = function() {
      if (this.config.sampleManagementSettings) {
        this._isRequireSignature = this.config.sampleManagementSettings.signatureRequired;
        this._isFirstMessageRequired = this.config.sampleManagementSettings.firstMarketingMessageRequired;
        if (!(this.config.sampleManagementSettings.signature || this._isRequireSignature)) {
          this.elSignatureTakenWrapper.hide();
          this.elSignatureWrapper.hide();
        }
        if (!this.config.sampleManagementSettings.note) {
          this.elProductsTable.addClass('hide-comment');
        }
        if (!this.config.sampleManagementSettings.prioMarketingMessage) {
          this.elProductsTable.addClass('hide-messages');
        }
        if (!this.config.sampleManagementSettings.promotinalItems) {
          this.elProductsTable.addClass('hide-promotion');
        }
        if (!(this.config.sampleManagementSettings.promotinalItems || this.config.sampleManagementSettings.prioMarketingMessage)) {
          this.elProductsTable.addClass('hide-expand');
        }
        if (!this.config.sampleManagementSettings.callReportType) {
          return this.elTypeOfVisitWrapper.addClass('hide-record-type');
        }
      }
    };

    CallReportCard.prototype.onBack = function() {
      var anyChanges, confirm;
      anyChanges = this.isPortfolioSellingModuleEnabled ? this.portfolio.isChanged() : this.productsTable.isAnyProductChanged();
      this.isChanged || (this.isChanged = anyChanges);
      if (!this.isChanged) {
        return this._resetCallReport().then((function(_this) {
          return function() {
            return CallReportCard.__super__.onBack.apply(_this, arguments);
          };
        })(this));
      } else {
        confirm = new ConfirmationPopup({
          caption: Locale.value('card.ConfirmationPopup.SaveChanges.Caption')
        });
        confirm.bind('yesClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            return _this._saveCallReport();
          };
        })(this));
        confirm.bind('noClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            return _this._resetCallReport().then(function() {
              return CallReportCard.__super__.onBack.apply(_this, arguments);
            });
          };
        })(this));
        return this.presentModalController(confirm);
      }
    };

    CallReportCard.prototype._resetCallReport = function() {
      this._removeSandboxCallReport();
      return this.callPromoAdjustmentsCollection.resetCallReportData();
    };

    CallReportCard.prototype._saveCallReport = function() {
      if (this._validData()) {
        return this._save();
      }
    };

    CallReportCard.prototype._validData = function() {
      var isDataValid, toastBody, toastHeader, toastMessage;
      toastHeader = Locale.value('card.ToastMessage.RequiredFieldsHeader') + ":<br/>";
      toastBody = "";
      if (this._isCallCommentRequired() && this.elComment[0].getValue().length === 0) {
        toastBody += (Locale.value('card.CallReport.ToastMessage.RequiredCallComments')) + "<br/>";
      }
      if (this._isNextCallObjectiveRequired() && this.elObjective[0].getValue().length === 0) {
        toastBody += (Locale.value('card.CallReport.ToastMessage.RequiredNextCallObjectives')) + "<br/>";
      }
      toastBody += this.isPortfolioSellingModuleEnabled ? this._validatePortfolioSection() : this._validateProductsSection();
      if (!this.jointVisitUser && this._jointVisitSelected()) {
        toastBody += (Locale.value('card.ToastMessage.RequiredJointVisitUser')) + "<br/>";
      }
      if (this.jointVisitUser && !this._jointVisitSelected()) {
        toastBody += (Locale.value('card.ToastMessage.RequiredJointVisit')) + "<br/>";
      }
      if (this._isRequireSignature && !this.signatureBase64) {
        toastBody += (Locale.value('card.ToastMessage.RequiredSignature')) + "<br/>";
      }
      isDataValid = toastBody.length === 0;
      toastMessage = toastHeader + toastBody;
      if (!isDataValid) {
        $.fn.dpToast(toastMessage);
      }
      return isDataValid;
    };

    CallReportCard.prototype._validatePortfolioSection = function() {
      var toastBody;
      toastBody = "";
      if (!this.portfolio.isFirstPationProfileSelected()) {
        toastBody += (Locale.value('card.CallReport.Portfolio.ToastMessage.PatientProfileRequirement')) + "<br/>";
      }
      if (!this.portfolio.isProductsSelectedForEachChoosenProfiles()) {
        toastBody += (Locale.value('card.CallReport.Portfolio.ToastMessage.ProductForProfileRequirement')) + "<br/>";
      }
      if (!this.portfolio.isClassificationSelectedForEachChoosenProduct()) {
        toastBody += (Locale.value('card.CallReport.Portfolio.ToastMessage.ClassificationForProductRequirement')) + "<br/>";
      }
      if (this._isFirstMessageRequired && !this.portfolio.isFirstMessageSelected()) {
        toastBody += (Locale.value('card.CallReport.ToastMessage.RequiredFirstMessage')) + "<br/>";
      }
      return toastBody;
    };

    CallReportCard.prototype._validateProductsSection = function() {
      var products, toastBody;
      toastBody = "";
      if (!this.productsTable.isFirstProductSelected()) {
        toastBody += (Locale.value('card.CallReport.ToastMessage.RequiredFirstProduct')) + "<br/>";
      }
      products = this.productsTable.getProducts();
      if (this._isFirstMessageRequired && (products.some((function(_this) {
        return function(product) {
          if (product.productId) {
            return product.productMessage1 === null;
          } else {
            return false;
          }
        };
      })(this)))) {
        toastBody += (Locale.value('card.CallReport.ToastMessage.RequiredFirstMessage')) + "<br/>";
      }
      return toastBody;
    };

    CallReportCard.prototype._isCallCommentRequired = function() {
      var ref;
      return ((ref = this.config.sampleManagementSettings) != null ? ref.callCommentsMandatory : void 0) && this._isCallCommentShown();
    };

    CallReportCard.prototype._isNextCallObjectiveRequired = function() {
      var ref;
      return ((ref = this.config.sampleManagementSettings) != null ? ref.nextCallObjectiveRequired : void 0) && this._isNextCallObjectiveShown();
    };

    CallReportCard.prototype._isCallCommentShown = function() {
      return !this.config.sampleManagementSettings || this.config.sampleManagementSettings.showCallComments;
    };

    CallReportCard.prototype._isNextCallObjectiveShown = function() {
      return !this.config.sampleManagementSettings || this.config.sampleManagementSettings.showNextCallObjective;
    };

    CallReportCard.prototype._jointVisitSelected = function() {
      return this._jointVisitValue() !== null;
    };

    CallReportCard.prototype._jointVisitValue = function() {
      return this.jointVisitPickList.selectedValue;
    };

    CallReportCard.prototype._typeOfVisitValue = function() {
      return this.typeOfVisitPickList.selectedValue;
    };

    CallReportCard.prototype._jointVisitUserId = function() {
      var ref, ref1;
      return (ref = (ref1 = this.jointVisitUser) != null ? ref1.id : void 0) != null ? ref : null;
    };

    CallReportCard.prototype._onSignatureTap = function() {
      var signatureView;
      signatureView = new SignatureView;
      signatureView.on('saveTap', this._onSignatureSaveBtnTap);
      return this.stage.push(signatureView);
    };

    CallReportCard.prototype._onSignatureSaveBtnTap = function(signatureBase64) {
      this.signatureBase64 = signatureBase64;
      this.signatureDate = Utils.originalDateTime(new Date);
      this._callReportChanged();
      return this._initSignature();
    };

    CallReportCard.prototype._initSignature = function() {
      if (this.signatureBase64) {
        return this.elSignature.attr('src', 'data:image/jpeg;base64,' + this.signatureBase64);
      }
    };

    CallReportCard.prototype._getSandboxCallReport = function() {
      this.callReport = {};
      this.callReport.isSandbox = true;
      this.callReport['attributes'] = {
        type: CallReport.table
      };
      return new CallsCollection().createEntity(this.callReport);
    };

    CallReportCard.prototype._removeSandboxCallReport = function() {
      if (this.callReport.isSandbox) {
        return new CallsCollection().removeEntity(this.callReport);
      } else {
        return $.when();
      }
    };

    CallReportCard.prototype._save = function() {
      this.callReport.isSandbox = false;
      this.callReport[CallReport.sfdc.createdOffline] = true;
      this.callReport[CallReport.sfdc.createdFromMobile] = true;
      this.callReport[CallReport.sfdc.callWithIPad] = true;
      this.callReport[CallReport.sfdc.realCallDuration] = Utils.getDuration(this._startTime, (new Date).getTime());
      this.callReport[CallReport.sfdc.dateTimeOfVisit] = Utils.originalDateTime(this.originDateTime);
      this.callReport[CallReport.sfdc.dateOfVisit] = Utils.originalDate(this.originDateTime);
      this.callReport[CallReport.sfdc.organizationSfId] = this.reference.organizationSfId;
      this.callReport[CallReport.sfdc.remoteOrganizationName] = this.reference.organizationName;
      this.callReport.organizationName = this.reference.organizationName;
      this.callReport[CallReport.sfdc.organizationCity] = this.reference.organizationCity;
      this.callReport[CallReport.sfdc.organizationAddress] = this.reference.organizationAddress;
      this.callReport[CallReport.sfdc.contactSfid] = this.reference.contactSfId;
      this.callReport[CallReport.sfdc.remoteContactFirstName] = this.reference.contactFirstName;
      this.callReport[CallReport.sfdc.remoteContactLastName] = this.reference.contactLastName;
      this.callReport.contactFirstName = this.reference.contactFirstName;
      this.callReport.contactLastName = this.reference.contactLastName;
      this.callReport[CallReport.sfdc.contactRecordType] = this.reference.contactRecordType;
      this.callReport[CallReport.sfdc.userFirstName] = this.activeUser.firstName;
      this.callReport[CallReport.sfdc.userLastName] = this.activeUser.lastName;
      this.callReport[CallReport.sfdc.userSfid] = this.activeUser.id;
      this.callReport[CallReport.sfdc.duration] = this.duration;
      this.callReport[CallReport.sfdc.type] = CallReport.TYPE_ONE_TO_ONE;
      this.callReport[CallReport.sfdc.recordTypeId] = this.config.callReportRecordTypeId;
      this.callReport[CallReport.sfdc.jointVisit] = this._jointVisitValue();
      this.callReport[CallReport.sfdc.jointVisitUserSfid] = this._jointVisitUserId();
      this.callReport[CallReport.sfdc.generalComments] = this.elComment[0].getValue();
      this.callReport[CallReport.sfdc.nextCallObjective] = this.elObjective[0].getValue();
      this.callReport[CallReport.sfdc.signature] = this.signatureBase64;
      this.callReport[CallReport.sfdc.signatureDate] = this.signatureDate;
      this.callReport[CallReport.sfdc.typeOfVisit] = this._typeOfVisitValue();
      if (this.isPortfolioSellingModuleEnabled) {
        this._assignPortfolioPrios();
      } else {
        this._assignProducts();
      }
      return this._assignPriority().then((function(_this) {
        return function() {
          return new CallsCollection().updateEntity(_this.callReport);
        };
      })(this)).then(this._updateTargetFrequencies).then((function(_this) {
        return function(callReport) {
          var callReportId;
          callReportId = callReport.attributes._soupEntryId;
          return _this._saveCallData(callReportId).then(function() {
            return _this.callPromoAdjustmentsCollection.callReportSave();
          }).then(function() {
            return _this.reference.getContact();
          }).then(function(contact) {
            _this._navigateToView(callReport.id);
            return _this.postNotification('callReportCreated');
          });
        };
      })(this));
    };

    CallReportCard.prototype._saveCallData = function(callReportId) {
      var callDataKeys, callReportDataCollection;
      callReportDataCollection = new CallReportDataCollection;
      callDataKeys = Object.keys(this.productsCallData);
      return Utils.runSimultaneously(_.map(callDataKeys, (function(_this) {
        return function(callDataKey) {
          var callData;
          callData = _this.productsCallData[callDataKey];
          callData.callReportId = callReportId;
          return callReportDataCollection.createEntity(callData);
        };
      })(this)));
    };

    CallReportCard.prototype._assignPortfolioPrios = function() {
      var portfolioPrios, summaryEntity;
      portfolioPrios = this.portfolio.getPortfolioPrios();
      portfolioPrios.forEach((function(_this) {
        return function(prio, index) {
          var productNumber;
          if (!prio.patientProfileId) {
            return;
          }
          productNumber = index + 1;
          _this.callReport[CallReport.sfdc['patientProfile' + productNumber]] = prio.patientProfileId;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'ProductSfid']] = prio.productId;
          _this.callReport[CallReport.sfdc['noteForPrio' + productNumber]] = prio.noteForProduct;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'MarketingMessage1']] = prio.productMessage1;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'MarketingMessage2']] = prio.productMessage2;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'MarketingMessage3']] = prio.productMessage3;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'Classification']] = prio.classification;
          return _this.callReport[CallReport.sfdc['promotionalItemsPrio' + productNumber]] = prio.isPromotional;
        };
      })(this));
      summaryEntity = this.portfolio.getPortfolioSummary();
      this.callReport[CallReport.sfdc.patientSupportProgram] = summaryEntity.patientSupportProgram;
      this.callReport[CallReport.sfdc.patientSupportProgramComments] = summaryEntity.patientSupportProgramComments;
      this.callReport[CallReport.sfdc.portfolioFeedback] = summaryEntity.portfolioFeedback;
      return this.callReport[CallReport.sfdc.fullPortfolioPresentationReminder] = summaryEntity.fullPortfolioPresentationReminder;
    };

    CallReportCard.prototype._assignProducts = function() {
      var products;
      products = this.productsTable.getProducts();
      return products.forEach((function(_this) {
        return function(product, index) {
          var productNumber;
          if (!product.productId) {
            return;
          }
          productNumber = index + 1;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'ProductSfid']] = product.productId;
          _this.callReport[CallReport.sfdc['noteForPrio' + productNumber]] = product.productComment;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'MarketingMessage1']] = product.productMessage1;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'MarketingMessage2']] = product.productMessage2;
          _this.callReport[CallReport.sfdc['prio' + productNumber + 'MarketingMessage3']] = product.productMessage3;
          return _this.callReport[CallReport.sfdc['promotionalItemsPrio' + productNumber]] = product.isPromotional;
        };
      })(this));
    };

    CallReportCard.prototype._assignPriority = function() {
      return this.reference.getContact().then((function(_this) {
        return function(contact) {
          return _this.callReport[CallReport.sfdc.targetPriority] = contact.priority;
        };
      })(this));
    };

    CallReportCard.prototype._updateTargetFrequencies = function(callReport) {
      var callReportEntity, callReportsCollection;
      callReportsCollection = new CallsCollection;
      callReportEntity = callReportsCollection.parseEntity(callReport);
      return this.reference.getContact().then((function(_this) {
        return function(contact) {
          return _this._updateTargetFrequency(contact, callReportEntity);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._updateTargetFrequencyForReference(_this.reference, callReportEntity);
        };
      })(this)).then((function(_this) {
        return function() {
          return callReportEntity;
        };
      })(this));
    };

    CallReportCard.prototype._updateTargetFrequency = function(contact, callReport) {
      var atCalls, contactsCollection, ref;
      if (!contact.lastDateTargetFrequency) {
        return $.when(contact);
      } else {
        atCalls = (ref = contact.lastDateTargetFrequency.actualCallsCount) != null ? ref : 0;
        contact.lastDateTargetFrequency.actualCallsCount = ++atCalls;
        contact.lastDateTargetFrequency.lastCallReportDate = callReport.dateTimeOfVisit;
        contactsCollection = new ContactsCollection;
        return contactsCollection.updateEntity(contact).then(contactsCollection.parseEntity);
      }
    };

    CallReportCard.prototype._updateTargetFrequencyForReference = function(reference, callReport) {
      var actualCallsCount, atCalls, refsCollection, targetCycleFrequency;
      atCalls = reference.atCalls.split('/');
      actualCallsCount = 0;
      targetCycleFrequency = 0;
      if (atCalls.length > 1) {
        actualCallsCount = parseInt(atCalls[0]);
        targetCycleFrequency = parseInt(atCalls[1]);
      }
      actualCallsCount++;
      reference.atCalls = actualCallsCount + "/" + targetCycleFrequency;
      reference.lastCall = (Utils.dotFormatDate(callReport.dateTimeOfVisit)) + " <br/> " + (callReport.userFullName());
      refsCollection = new ReferencesCollection;
      return refsCollection.updateEntity(reference).then(refsCollection.parseEntity);
    };

    CallReportCard.prototype._navigateToView = function(callReportId) {
      var CallReportCardView;
      CallReportCardView = require('controllers/call-report-card/call-report-card-view');
      return this.stage.popAndPush(new CallReportCardView(callReportId));
    };

    return CallReportCard;

  })(FullscreenPanel);

  module.exports = CallReportCard;

}).call(this);
}, "controllers/call-report-card/convert-call-report": function(exports, require, module) {(function() {
  var AlarmManager, AppointmentsCollection, CallReport, CallReportCard, CallsCollection, ConvertCallReport, DurationFilter, MechanicAdjustmentsCollection, PhotoAdjustmentsCollection, ReferencesCollection, Spine, TaskAdjustmentsCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  CallReportCard = require('controllers/call-report-card/call-report-card');

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  Utils = require('common/utils');

  DurationFilter = require('controls/filters/duration-filters/duration-filter');

  CallReport = require('models/call-report');

  CallsCollection = require('models/bll/call-reports-collection/calls-collection');

  ReferencesCollection = require('models/bll/references/references-collection');

  AlarmManager = require('common/alarm/alarm-manager');

  TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  MechanicAdjustmentsCollection = require('models/bll/mechanic-adjustments-collection');

  ConvertCallReport = (function(superClass) {
    extend(ConvertCallReport, superClass);

    ConvertCallReport.prototype.className = 'call-report card convert-mode';

    ConvertCallReport.prototype.events = {
      'tap .call-report-card-customer': '_onCustomerTap',
      'tap .call-report-card-organization': '_onOrganizationTap'
    };

    function ConvertCallReport(callReportId1) {
      this.callReportId = callReportId1;
      this._fetchReferenceForContact = bind(this._fetchReferenceForContact, this);
      this._updateTargetFrequencies = bind(this._updateTargetFrequencies, this);
      this._assignProducts = bind(this._assignProducts, this);
      this._assignPortfolioPrios = bind(this._assignPortfolioPrios, this);
      this._save = bind(this._save, this);
      this._initGeneralInfoControls = bind(this._initGeneralInfoControls, this);
      this._onOrganizationTap = bind(this._onOrganizationTap, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      this._removeTrashPhotoAdjustments = bind(this._removeTrashPhotoAdjustments, this);
      this._removeTrashMechanicAdjustments = bind(this._removeTrashMechanicAdjustments, this);
      this._removeTrashTaskAdjustments = bind(this._removeTrashTaskAdjustments, this);
      this._removeTrashAdjustmentsForCollection = bind(this._removeTrashAdjustmentsForCollection, this);
      this._removeTrashDataIfExists = bind(this._removeTrashDataIfExists, this);
      this._init = bind(this._init, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      this._fetchCallReportById = bind(this._fetchCallReportById, this);
      this.reload = bind(this.reload, this);
      ConvertCallReport.__super__.constructor.apply(this, arguments);
      this.collection = new AppointmentsCollection;
      this.subscribeOnNotification('appointmentChanged', this.reload);
    }

    ConvertCallReport.prototype.reload = function() {
      return this._fetchCallReportById(this.callReportId).then((function(_this) {
        return function(callReport) {
          var delayTime;
          if (callReport) {
            return _this.active();
          } else {
            delayTime = Utils.isIOS() ? _this.effectDefaults.duration : _this.effectDefaults.duration + 100;
            return _.delay(_this.onBack, delayTime);
          }
        };
      })(this));
    };

    ConvertCallReport.prototype._fetchCallReportById = function(callReportId) {
      var keyValue;
      keyValue = {};
      keyValue[CallReport.sfdc.id] = callReportId;
      return this.collection.fetchAllWhere(keyValue).then((function(_this) {
        return function(response) {
          return _this.collection.getEntityFromResponse(response);
        };
      })(this));
    };

    ConvertCallReport.prototype.shouldDeferNotification = function(notification) {
      return true;
    };

    ConvertCallReport.prototype._init = function() {
      return this.collection.fetchEntityById(this.callReportId).then((function(_this) {
        return function(callReport1) {
          _this.callReport = callReport1;
          return _this._removeTrashDataIfExists();
        };
      })(this)).then((function(_this) {
        return function() {
          _this._startTime = (new Date).getTime();
          _this.render();
          _this._bindEvents();
          _this._initTypeOfVisitPickList();
          _this._clearSignature();
          _this._applyConfig();
          return _this._initSignature();
        };
      })(this));
    };

    ConvertCallReport.prototype._removeTrashDataIfExists = function() {
      return this._removeTrashTaskAdjustments().then(this._removeTrashMechanicAdjustments).then(this._removeTrashPhotoAdjustments);
    };

    ConvertCallReport.prototype._removeTrashAdjustmentsForCollection = function(adjustmentsCollection) {
      return adjustmentsCollection.getAdjustmentsByCallReport(this.callReport).then(adjustmentsCollection.removeEntities);
    };

    ConvertCallReport.prototype._removeTrashTaskAdjustments = function() {
      return this._removeTrashAdjustmentsForCollection(new TaskAdjustmentsCollection);
    };

    ConvertCallReport.prototype._removeTrashMechanicAdjustments = function() {
      return this._removeTrashAdjustmentsForCollection(new PhotoAdjustmentsCollection);
    };

    ConvertCallReport.prototype._removeTrashPhotoAdjustments = function() {
      return this._removeTrashAdjustmentsForCollection(new MechanicAdjustmentsCollection);
    };

    ConvertCallReport.prototype._headerTitle = function() {
      return Locale.value('card.CallReport.ConvertHeaderTitle');
    };

    ConvertCallReport.prototype._onCustomerTap = function() {
      var ContactCard;
      ContactCard = require('controllers/contact-card/contact-card');
      return this.stage.push(new ContactCard(this.callReport.contactSfid));
    };

    ConvertCallReport.prototype._onOrganizationTap = function() {
      var OrganizationCard;
      OrganizationCard = require('controllers/organization-card/organization-card');
      return this.stage.push(new OrganizationCard(this.callReport.organizationSfId));
    };

    ConvertCallReport.prototype._organizationIdForTradeModule = function() {
      return this.callReport.organizationSfId;
    };

    ConvertCallReport.prototype._fillGeneralInfo = function() {
      return this._initGeneralInfoControls().then(this._setActiveUser);
    };

    ConvertCallReport.prototype._initGeneralInfoControls = function() {
      if (!this.callReport) {
        return $.when();
      } else {
        this.elCustomer.html((this.callReport.contactFullName()) + " <br/> " + this.callReport.contactRecordType);
        this.elOrganization.html(this.callReport.organizationNameAndAddress());
        this._initDateTime();
        return this._initDurationFilter().then((function(_this) {
          return function() {
            var ref;
            _this._initJointVisitPickList();
            _this._jointVisitUser();
            _this._initComment((ref = _this.callReport.generalComments) != null ? ref : '');
            _this._initObjective('');
            return _this.callReport.getSpecialty().then(function(specialty) {
              return _this.elSpecialty.html(_this.callReport.specialty);
            });
          };
        })(this));
      }
    };

    ConvertCallReport.prototype._initDateTime = function() {
      this.originDateTime = Utils.originalDateTimeObject(this.callReport.dateTimeOfVisit);
      return this.elDateTime.html(Utils.formatDateTime(this.callReport.dateTimeOfVisit));
    };

    ConvertCallReport.prototype._initDurationFilter = function() {
      var ref;
      if (((ref = this.callReport.duration) != null ? ref.length : void 0) !== 0) {
        return DurationFilter.resources().then((function(_this) {
          return function(resources) {
            var ref1, ref2;
            _this.durationFilter = resources.filter(function(item) {
              return item.value === parseInt(_this.callReport.duration);
            })[0];
            _this.duration = (ref1 = (ref2 = _this.durationFilter) != null ? ref2.value : void 0) != null ? ref1 : resources.defaultValue;
            _this.elDuration.html(_this.duration);
            return $.when();
          };
        })(this));
      } else {
        return $.when();
      }
    };

    ConvertCallReport.prototype._jointVisitUser = function() {
      this.jointVisitUser = null;
      return this.callReport.getJointVisitUser().then((function(_this) {
        return function(jointVisitUser) {
          var ref;
          _this.jointVisitUser = jointVisitUser;
          return _this.elJointVisitUser.html((ref = _this.jointVisitUser) != null ? ref.fullName() : void 0);
        };
      })(this));
    };

    ConvertCallReport.prototype._save = function() {
      var callsCollection;
      this.callReport.isSandbox = false;
      this.callReport.createdOffline = true;
      this.callReport.createdFromMobile = true;
      this.callReport.callWithIPad = true;
      this.callReport.realCallDuration = Utils.getDuration(this._startTime, (new Date).getTime());
      this.callReport.dateTimeOfVisit = Utils.originalDateTime(this.originDateTime);
      this.callReport.dateOfVisit = Utils.originalDate(this.originDateTime);
      this.callReport.recordTypeId = this.config.callReportRecordTypeId;
      this.callReport.signatureDate = this.signatureDate;
      this.callReport.duration = this.duration;
      this.callReport.type = CallReport.TYPE_ONE_TO_ONE;
      this.callReport.jointVisit = this._jointVisitValue();
      this.callReport.jointVisitUserSfid = this._jointVisitUserId();
      this.callReport.generalComments = this.elComment[0].getValue();
      this.callReport.nextCallObjective = this.elObjective[0].getValue();
      this.callReport.signature = this.signatureBase64;
      this.callReport.typeOfVisit = this._typeOfVisitValue();
      if (this.isPortfolioSellingModuleEnabled) {
        this._assignPortfolioPrios();
      } else {
        this._assignProducts();
      }
      callsCollection = new CallsCollection;
      return callsCollection.updateEntity(this.callReport).then((function(_this) {
        return function(callReport) {
          var callReportEntity;
          callReportEntity = callsCollection.parseEntity(callReport);
          return callReportEntity.getContact().then(function(contact) {
            return _this._updateTargetFrequencies(callReportEntity, contact).then(function() {
              var callReportId;
              callReportId = callReportEntity.attributes._soupEntryId;
              _this._saveCallData(callReportId);
              _this.callPromoAdjustmentsCollection.callReportSave();
              AlarmManager.scheduleNextVisits();
              _this.postNotification('appointmentChanged');
              _this.postNotification('callReportCreated');
              return _this._navigateToView(callReportEntity.id);
            });
          });
        };
      })(this));
    };

    ConvertCallReport.prototype._assignPortfolioPrios = function() {
      var portfolioPrios, summaryEntity;
      portfolioPrios = this.portfolio.getPortfolioPrios();
      portfolioPrios.forEach((function(_this) {
        return function(prio, index) {
          var productNumber;
          if (!prio.patientProfileId) {
            return;
          }
          productNumber = index + 1;
          _this.callReport['patientProfile' + productNumber] = prio.patientProfileId;
          _this.callReport['prio' + productNumber + 'ProductSfid'] = prio.productId;
          _this.callReport['noteForPrio' + productNumber] = prio.noteForProduct;
          _this.callReport['prio' + productNumber + 'MarketingMessage1'] = prio.productMessage1;
          _this.callReport['prio' + productNumber + 'MarketingMessage2'] = prio.productMessage2;
          _this.callReport['prio' + productNumber + 'MarketingMessage3'] = prio.productMessage3;
          _this.callReport['prio' + productNumber + 'Classification'] = prio.classification;
          return _this.callReport['promotionalItemsPrio' + productNumber] = prio.isPromotional;
        };
      })(this));
      summaryEntity = this.portfolio.getPortfolioSummary();
      this.callReport.patientSupportProgram = summaryEntity.patientSupportProgram;
      this.callReport.patientSupportProgramComments = summaryEntity.patientSupportProgramComments;
      this.callReport.portfolioFeedback = summaryEntity.portfolioFeedback;
      return this.callReport.fullPortfolioPresentationReminder = summaryEntity.fullPortfolioPresentationReminder;
    };

    ConvertCallReport.prototype._assignProducts = function() {
      var products;
      products = this.productsTable.getProducts();
      return products.forEach((function(_this) {
        return function(product, index) {
          var productNumber;
          if (!product.productId) {
            return;
          }
          productNumber = index + 1;
          _this.callReport['prio' + productNumber + 'ProductSfid'] = product.productId;
          _this.callReport['noteForPrio' + productNumber] = product.productComment;
          _this.callReport['prio' + productNumber + 'MarketingMessage1'] = product.productMessage1;
          _this.callReport['prio' + productNumber + 'MarketingMessage2'] = product.productMessage2;
          _this.callReport['prio' + productNumber + 'MarketingMessage3'] = product.productMessage3;
          return _this.callReport['promotionalItemsPrio' + productNumber] = product.isPromotional;
        };
      })(this));
    };

    ConvertCallReport.prototype._updateTargetFrequencies = function(callReport, contact) {
      return this._updateTargetFrequency(contact, callReport).then(this._fetchReferenceForContact).then((function(_this) {
        return function(reference) {
          if (reference != null) {
            return _this._updateTargetFrequencyForReference(reference, callReport);
          } else {
            return $.when();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          return callReport;
        };
      })(this));
    };

    ConvertCallReport.prototype._fetchReferenceForContact = function(contact) {
      var fieldsValues, refsCollection;
      fieldsValues = {};
      refsCollection = new ReferencesCollection;
      fieldsValues[refsCollection.model.sfdc.contactSfId] = contact.id;
      return refsCollection.fetchAllWhere(fieldsValues).then((function(_this) {
        return function(response) {
          var filteredRefs, ref;
          filteredRefs = response.records.filter(function(reference) {
            return reference.organizationSfId === contact.organizationSfId;
          });
          return (ref = _.first(filteredRefs)) != null ? ref : refsCollection.getEntityFromResponse(response);
        };
      })(this));
    };

    return ConvertCallReport;

  })(CallReportCard);

  module.exports = ConvertCallReport;

}).call(this);
}, "controllers/call-report-card/joint-visit-picklist-datasource": function(exports, require, module) {(function() {
  var CallReport, CallReportPickListManager, JointVisitPickListDatasource, PickListDatasource,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PickListDatasource = require('controllers/call-report-card/picklist-datasource');

  CallReport = require('models/call-report');

  CallReportPickListManager = require('db/picklist-managers/callreport-picklist-manager');

  JointVisitPickListDatasource = (function(superClass) {
    extend(JointVisitPickListDatasource, superClass);

    function JointVisitPickListDatasource() {
      return JointVisitPickListDatasource.__super__.constructor.apply(this, arguments);
    }

    JointVisitPickListDatasource.prototype.pickListName = function() {
      return CallReport.sfdc.jointVisit;
    };

    JointVisitPickListDatasource.prototype.pickListManager = function() {
      return new CallReportPickListManager;
    };

    return JointVisitPickListDatasource;

  })(PickListDatasource);

  module.exports = JointVisitPickListDatasource;

}).call(this);
}, "controllers/call-report-card/picklist-datasource": function(exports, require, module) {(function() {
  var Locale, PickListDatasource,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Locale = require('common/localization/locale');

  PickListDatasource = (function() {
    function PickListDatasource() {
      this._preparePickListItems = bind(this._preparePickListItems, this);
      this.getItems = bind(this.getItems, this);
    }

    PickListDatasource.prototype.getItems = function() {
      if (this.items) {
        return $.when(this.items);
      } else {
        return this.pickListManager().getPickList(this.pickListName()).then(this._preparePickListItems).then((function(_this) {
          return function(items1) {
            _this.items = items1;
            return _this.items;
          };
        })(this));
      }
    };

    PickListDatasource.prototype._preparePickListItems = function(pickList) {
      var noneValue;
      noneValue = [
        {
          id: null,
          description: Locale.value('common:defaultSelectValue')
        }
      ];
      if (!_.isEmpty(pickList)) {
        return noneValue.concat(pickList.map(function(el) {
          return {
            id: el.value,
            description: el.label
          };
        }));
      } else {
        return noneValue;
      }
    };

    PickListDatasource.prototype.getItemForSelectedValue = function(value) {
      return this.getItems().then((function(_this) {
        return function(items) {
          return _(items).find(function(item) {
            return item.id === value;
          });
        };
      })(this)).then((function(_this) {
        return function(item) {
          if (item) {
            return item;
          } else if (value) {
            return {
              id: value,
              description: value
            };
          } else {
            return null;
          }
        };
      })(this));
    };

    PickListDatasource.prototype.pickListName = function() {
      throw new Error('This method should be overridden.');
    };

    PickListDatasource.prototype.pickListManager = function() {
      throw new Error('This method should be overridden.');
    };

    return PickListDatasource;

  })();

  module.exports = PickListDatasource;

}).call(this);
}, "controllers/call-report-card/portfolio/portfolio": function(exports, require, module) {(function() {
  var Locale, MarketingMessagesCollection, Portfolio, ProductsCollection, ProfileProductInPortfoliosCollection, Profiles, SforceDataContext, Summary, SummaryEntity, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Profiles = require('controllers/call-report-card/portfolio/profiles');

  Summary = require('controllers/call-report-card/portfolio/summary');

  ProductsCollection = require('models/bll/products-collection');

  MarketingMessagesCollection = require('models/bll/marketing-messages-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  ProfileProductInPortfoliosCollection = require('models/bll/profile-product-in-portfolios-collection');

  SummaryEntity = require('controllers/call-report-card/portfolio/summary-entity');

  Locale = require('common/localization/locale');

  Utils = require('common/utils');

  Portfolio = (function(superClass) {
    extend(Portfolio, superClass);

    Portfolio.prototype.className = 'portfolio';

    Portfolio.prototype.events = {
      'tap .full-screen-btn': '_onFullScreenTap'
    };

    Portfolio.prototype.elements = {
      '.scroll-content': 'elScrollContent'
    };

    function Portfolio(productCount, callReport) {
      this.productCount = productCount;
      this.callReport = callReport;
      this._onFullScreenTap = bind(this._onFullScreenTap, this);
      this._onDismissModalController = bind(this._onDismissModalController, this);
      this._onPresentModalController = bind(this._onPresentModalController, this);
      this._prepareProfileProductsWithMessages = bind(this._prepareProfileProductsWithMessages, this);
      this._isViewMode = bind(this._isViewMode, this);
      this._fetchProfileProductsByDate = bind(this._fetchProfileProductsByDate, this);
      this._getProfileProductsWithMessagesByDate = bind(this._getProfileProductsWithMessagesByDate, this);
      this._renderSummary = bind(this._renderSummary, this);
      this._renderProfilesByDate = bind(this._renderProfilesByDate, this);
      Portfolio.__super__.constructor.call(this, {});
      this.profiles = null;
    }

    Portfolio.prototype.refresh = function() {
      return this.profiles.refresh();
    };

    Portfolio.prototype.render = function(date) {
      this.html(this.template());
      Locale.localize(this.el);
      date || (date = Utils.currentDate());
      this._renderProfilesByDate(date).then(this._renderSummary);
      return this;
    };

    Portfolio.prototype.resetProfiles = function(date) {
      this.profiles.release();
      return this._renderProfilesByDate(date);
    };

    Portfolio.prototype.template = function() {
      return require('views/call-report-card/portfolio/portfolio')();
    };

    Portfolio.prototype._renderProfilesByDate = function(date) {
      return this._getProfileProductsWithMessagesByDate(date).then((function(_this) {
        return function(profileProductsWithMessages) {
          var profileProducts;
          profileProducts = profileProductsWithMessages.map(function(profileProductsWithMessage) {
            return profileProductsWithMessage.profileProduct;
          });
          _this.profiles = new Profiles(_this.productCount, profileProducts, profileProductsWithMessages, _this.callReport);
          _this.profiles.on('presentModalController', _this._onPresentModalController);
          _this.profiles.on('dismissModalController', _this._onDismissModalController);
          _this.elScrollContent.prepend(_this.profiles.el);
          _this.profiles.render();
          return $.when();
        };
      })(this));
    };

    Portfolio.prototype._renderSummary = function() {
      var summaryEntity;
      summaryEntity = this._isViewMode() ? this._getSummaryEntityFromCallReport() : new SummaryEntity;
      this.summary = new Summary(summaryEntity);
      this.summary.on('presentModalController', this._onPresentModalController);
      this.summary.on('dismissModalController', this._onDismissModalController);
      this.elScrollContent.append(this.summary.el);
      return this.summary.render();
    };

    Portfolio.prototype._getProfileProductsWithMessagesByDate = function(date) {
      var marketingMessagesCollection, profileProducts;
      profileProducts = [];
      marketingMessagesCollection = new MarketingMessagesCollection();
      return this._fetchProfileProductsByDate(date).then(function(portfolioProfileProducts) {
        profileProducts = portfolioProfileProducts;
        return marketingMessagesCollection.fetchAll();
      }).then(marketingMessagesCollection.getAllEntitiesFromResponse).then((function(_this) {
        return function(messages) {
          return _this._prepareProfileProductsWithMessages(profileProducts, messages);
        };
      })(this));
    };

    Portfolio.prototype._fetchProfileProductsByDate = function(date) {
      var profileProductInPortfoliosCollection;
      profileProductInPortfoliosCollection = new ProfileProductInPortfoliosCollection;
      if (this._isViewMode()) {
        return profileProductInPortfoliosCollection.fetchAll().then(profileProductInPortfoliosCollection.getAllEntitiesFromResponse);
      } else {
        return profileProductInPortfoliosCollection.fetchPortfolioProfilesByDate(date);
      }
    };

    Portfolio.prototype._isViewMode = function() {
      return !!this.callReport;
    };

    Portfolio.prototype._prepareProfileProductsWithMessages = function(profileProducts, messages) {
      var profileProductsWithMessages;
      profileProductsWithMessages = [];
      profileProducts.forEach((function(_this) {
        return function(profileProduct) {
          var profileProductWithMessages;
          if (profileProduct && profileProduct.id) {
            profileProductWithMessages = {};
            profileProductWithMessages.profileProduct = profileProduct;
            profileProductWithMessages.messages = messages.filter(function(message) {
              return message.produtSfId === profileProduct.productSfId;
            });
            return profileProductsWithMessages.push(profileProductWithMessages);
          }
        };
      })(this));
      return profileProductsWithMessages;
    };

    Portfolio.prototype._getSummaryEntityFromCallReport = function() {
      var summaryEntity;
      summaryEntity = new SummaryEntity;
      summaryEntity.patientSupportProgram = this.callReport.patientSupportProgram;
      summaryEntity.patientSupportProgramComments = this.callReport.patientSupportProgramComments;
      summaryEntity.portfolioFeedback = this.callReport.portfolioFeedback;
      summaryEntity.fullPortfolioPresentationReminder = this.callReport.fullPortfolioPresentationReminder;
      return summaryEntity;
    };

    Portfolio.prototype._onPresentModalController = function(popup) {
      return this.trigger('presentModalController', popup);
    };

    Portfolio.prototype._onDismissModalController = function() {
      return this.trigger('dismissModalController');
    };

    Portfolio.prototype._onFullScreenTap = function() {
      return this.trigger('fullScreenTap', this);
    };

    Portfolio.prototype.isFirstPationProfileSelected = function() {
      return this.profiles.isFirstPationProfileSelected();
    };

    Portfolio.prototype.isProductsSelectedForEachChoosenProfiles = function() {
      return this.profiles.isProductsSelectedForEachChoosenProfiles();
    };

    Portfolio.prototype.isClassificationSelectedForEachChoosenProduct = function() {
      return this.profiles.isClassificationSelectedForEachChoosenProduct();
    };

    Portfolio.prototype.isFirstMessageSelected = function() {
      return this.profiles.isFirstMessageSelected();
    };

    Portfolio.prototype.getPortfolioPrios = function() {
      return this.profiles.getPrios();
    };

    Portfolio.prototype.getPortfolioSummary = function() {
      return this.summary.summaryEntity;
    };

    Portfolio.prototype.isChanged = function() {
      return this.profiles.isChanged() || this.summary.isChanged;
    };

    Portfolio.prototype.isProfilesChanged = function() {
      return this.profiles.isChanged();
    };

    return Portfolio;

  })(Spine.Controller);

  module.exports = Portfolio;

}).call(this);
}, "controllers/call-report-card/portfolio/profile-item-entity": function(exports, require, module) {(function() {
  var ProfileItemEntity;

  ProfileItemEntity = (function() {
    function ProfileItemEntity() {}

    ProfileItemEntity.prototype.productId = null;

    ProfileItemEntity.prototype.productName = null;

    ProfileItemEntity.prototype.noteForProduct = null;

    ProfileItemEntity.prototype.patientProfileId = null;

    ProfileItemEntity.prototype.patientProfileName = null;

    ProfileItemEntity.prototype.productMessage1 = null;

    ProfileItemEntity.prototype.productMessage2 = null;

    ProfileItemEntity.prototype.productMessage3 = null;

    ProfileItemEntity.prototype.isPromotional = false;

    ProfileItemEntity.prototype.classification = null;

    return ProfileItemEntity;

  })();

  module.exports = ProfileItemEntity;

}).call(this);
}, "controllers/call-report-card/portfolio/profile-item": function(exports, require, module) {(function() {
  var CallReport, CommonInput, ConfirmationPopup, ListPopup, Locale, PatientDisease, PatientDiseasesCollection, PatientProfilesPopup, ProfileItem, ProfileProductInPortfoliosCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Locale = require('common/localization/locale');

  CommonInput = require('controls/common-input/common-input');

  ListPopup = require('controls/popups/list-popup');

  PatientProfilesPopup = require('controls/popups/patient-profiles-popup/patient-profiles-popup');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  ProfileProductInPortfoliosCollection = require('models/bll/profile-product-in-portfolios-collection');

  PatientDiseasesCollection = require('models/bll/patient-diseases-collection');

  PatientDisease = require('models/patient-disease');

  CallReport = require('models/call-report');

  ProfileItem = (function(superClass) {
    extend(ProfileItem, superClass);

    ProfileItem.prototype.className = 'profile-item';

    ProfileItem.prototype.elements = {
      '.call-report-card-product-comment': 'elProductComment',
      '.profile-table': 'elProductsTable',
      '.table-wrapper': 'elProductsTableWrapper',
      '.title .profile-title': 'elProfileTitle',
      '.title .product-title': 'elProductTitle',
      '.call-report-card-patient-profile-list-btn': 'elChoosePatientProfile',
      '.choose-product': 'elChooseProduct',
      '.select-btn.message-1': 'elChooseProductMessage1',
      '.select-btn.message-2': 'elChooseProductMessage2',
      '.select-btn.message-3': 'elChooseProductMessage3',
      '.call-report-card-classification': 'elChooseClassification',
      '.call-report-card-contact-info-wrapper': 'elInfoWrapper',
      '.call-report-card-contact-info-age': 'elAge',
      '.call-report-card-contact-info-gender': 'elGender',
      '.call-report-card-contact-info-general-health': 'elGeneralHealth',
      '.call-report-card-contact-info-occupation': 'elOccupation',
      '.call-report-card-contact-info-bmi': 'elBMI',
      '.call-report-card-contact-info-diseases': 'elDiseases',
      '.promotion-item': 'elPromotionItem'
    };

    ProfileItem.prototype.events = {
      'tap .expand-btn': '_onExpandTap',
      'tap .call-report-card-patient-profile-list-btn': '_onChoosePatientProfileTap',
      'tap .choose-product': '_onChooseProductTap',
      'tap .call-report-card-classification': '_onChooseClassificationTap',
      'tap .select-btn.message-1': '_onChoosenProductMessage1Tap',
      'tap .select-btn.message-2': '_onChoosenProductMessage2Tap',
      'tap .select-btn.message-3': '_onChoosenProductMessage3Tap',
      'change .promotion-item': '_onPromotiontemChange',
      'elasticUpdate .call-report-card-product-comment': '_refreshHeightWithoutAnimation'
    };

    function ProfileItem(profileTitle, productTitle, datasource, profileItemEntity) {
      this.profileTitle = profileTitle;
      this.productTitle = productTitle;
      this.datasource = datasource;
      this.profileItemEntity = profileItemEntity;
      this._refreshHeightWithoutAnimation = bind(this._refreshHeightWithoutAnimation, this);
      this._onPromotiontemChange = bind(this._onPromotiontemChange, this);
      this._popupModelDescription = bind(this._popupModelDescription, this);
      this._onChooseItemTap = bind(this._onChooseItemTap, this);
      this._setChosenMessageWithIndex = bind(this._setChosenMessageWithIndex, this);
      this._chosenMessageWithIndex = bind(this._chosenMessageWithIndex, this);
      this._onChoosenProductMessageWithIndexTap = bind(this._onChoosenProductMessageWithIndexTap, this);
      this._onChoosenProductMessage3Tap = bind(this._onChoosenProductMessage3Tap, this);
      this._onChoosenProductMessage2Tap = bind(this._onChoosenProductMessage2Tap, this);
      this._onChoosenProductMessage1Tap = bind(this._onChoosenProductMessage1Tap, this);
      this._onChooseClassificationTap = bind(this._onChooseClassificationTap, this);
      this._onChooseProductTap = bind(this._onChooseProductTap, this);
      this._updateGeneralInfo = bind(this._updateGeneralInfo, this);
      this._getMessagesForProductWithId = bind(this._getMessagesForProductWithId, this);
      this._onDidChoseNewPatientProfile = bind(this._onDidChoseNewPatientProfile, this);
      this._pairedDiseasesForProduct = bind(this._pairedDiseasesForProduct, this);
      this._onChoosePatientProfileTap = bind(this._onChoosePatientProfileTap, this);
      this._onExpandTap = bind(this._onExpandTap, this);
      this._initClassifications = bind(this._initClassifications, this);
      this._elChooseProductMessageWithIndex = bind(this._elChooseProductMessageWithIndex, this);
      this._setProfileItemEntityProductMessageWithIndex = bind(this._setProfileItemEntityProductMessageWithIndex, this);
      this._profileItemEntityProductMessageWithIndex = bind(this._profileItemEntityProductMessageWithIndex, this);
      this._initMessages = bind(this._initMessages, this);
      this._noteForProductChanged = bind(this._noteForProductChanged, this);
      this._filterResource = bind(this._filterResource, this);
      this._refreshHeight = bind(this._refreshHeight, this);
      this._resetChangeFlags = bind(this._resetChangeFlags, this);
      ProfileItem.__super__.constructor.call(this, {});
      this._resetChangeFlags();
      this._products = null;
      this._messages = null;
      this.selectedPatientProfile = null;
      this.diseasesCollection = new PatientDiseasesCollection;
      this.chosenProduct = null;
      this.chosenClassification = null;
      this.chosenMessage1 = null;
      this.chosenMessage2 = null;
      this.chosenMessage3 = null;
    }

    ProfileItem.prototype._resetChangeFlags = function() {
      return this._isChanged = false;
    };

    ProfileItem.prototype.isChanged = function() {
      return this._isChanged || this.selectedPatientProfile;
    };

    ProfileItem.prototype.render = function() {
      this.html(this.template());
      Locale.localize(this.el);
      this._initTitle();
      this._initGeneralInfo();
      this._initPatientProfile();
      this._initProducts();
      this._initMessages();
      this._initNoteForProduct();
      this._initClassifications();
      this._initPromotionItem();
      return this;
    };

    ProfileItem.prototype.template = function() {
      return require('views/call-report-card/portfolio/profile-item')();
    };

    ProfileItem.prototype._initTitle = function() {
      this.elProfileTitle.html(this.profileTitle);
      return this.elProductTitle.html(this.productTitle);
    };

    ProfileItem.prototype._initGeneralInfo = function() {
      var savedProfileProduct;
      savedProfileProduct = _.find(this.datasource.profileProducts, (function(_this) {
        return function(profileProduct) {
          return profileProduct.patientProfileSfId === _this.profileItemEntity.patientProfileId;
        };
      })(this));
      if (savedProfileProduct) {
        this.elAge.text(savedProfileProduct.age);
        this.elGender.text(savedProfileProduct.gender);
        this.elGeneralHealth.text(savedProfileProduct.generalHealth);
        this.elOccupation.text(savedProfileProduct.occupation);
        this.elBMI.text(savedProfileProduct.bmi);
        return this.diseasesCollection.fetchByPatientProfileId(savedProfileProduct.patientProfileSfId).then((function(_this) {
          return function(patientDiseases) {
            _this.elDiseases.text(_this._diseasesNames(patientDiseases));
            _this.elInfoWrapper.show();
            return _this._refreshHeight();
          };
        })(this));
      }
    };

    ProfileItem.prototype._diseasesNames = function(patientDiseases) {
      return patientDiseases != null ? patientDiseases.map(function(patientDisease) {
        return patientDisease.diseaseName;
      }).join(", ") : void 0;
    };

    ProfileItem.prototype._refreshHeight = function() {
      var height;
      height = 0;
      if (this.el.hasClass('expanded')) {
        height = this.elProductsTable.height();
      }
      return this.elProductsTableWrapper.css('height', height + "px");
    };

    ProfileItem.prototype._setDefaultElementFontStyle = function(element) {
      return element.addClass("call-report-empty-font-style");
    };

    ProfileItem.prototype._initPatientProfile = function() {
      var defaultName, patientProfileName;
      patientProfileName = this.profileItemEntity.patientProfileName;
      if (patientProfileName) {
        this.elChoosePatientProfile.text(patientProfileName);
      }
      defaultName = Locale.value('card.CallReport.Portfolio.PatientProfile');
      if (patientProfileName === defaultName) {
        return this._setDefaultElementFontStyle(this.elChoosePatientProfile);
      }
    };

    ProfileItem.prototype._initProducts = function() {
      var productName;
      productName = this.profileItemEntity.productName;
      if (productName) {
        this.elChooseProduct.text(productName);
      } else {
        this._setDefaultElementFontStyle(this.elChoosePatientProfile);
      }
      return this._products = [this._noneValue()];
    };

    ProfileItem.prototype._noneValue = function() {
      return this._filterResource(null, Locale.value('common:defaultSelectValue'));
    };

    ProfileItem.prototype._filterResource = function(id, description) {
      return {
        id: id,
        description: description
      };
    };

    ProfileItem.prototype._initNoteForProduct = function() {
      this.elProductComment.val(this.profileItemEntity.noteForProduct || '');
      if (!this.profileItemEntity.noteForProduct) {
        this._setDefaultElementFontStyle(this.elProductComment);
      }
      new CommonInput($('.call-report .wrapper'), this.elProductComment[0]);
      return this.elProductComment.on('change', this._noteForProductChanged);
    };

    ProfileItem.prototype._noteForProductChanged = function() {
      this.profileItemEntity.noteForProduct = this.elProductComment.val();
      return this._isChanged = true;
    };

    ProfileItem.prototype._initMessages = function() {
      var i, ref, results;
      this._messages = [this._noneValue()];
      return (function() {
        results = [];
        for (var i = 1, ref = CallReport.MESSAGES_IN_PRODUCT_NUMBER; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).forEach((function(_this) {
        return function(number) {
          var element, message;
          message = _this._profileItemEntityProductMessageWithIndex(number);
          element = _this._elChooseProductMessageWithIndex(number);
          if (!message) {
            _this._setDefaultElementFontStyle(element);
          }
          message = message || _this._defaultMessageWithIndexCaption(number);
          return element.text(message);
        };
      })(this));
    };

    ProfileItem.prototype._profileItemEntityProductMessageWithIndex = function(index) {
      return this.profileItemEntity["productMessage" + index];
    };

    ProfileItem.prototype._setProfileItemEntityProductMessageWithIndex = function(index, value) {
      return this.profileItemEntity["productMessage" + index] = value;
    };

    ProfileItem.prototype._elChooseProductMessageWithIndex = function(index) {
      return this["elChooseProductMessage" + index];
    };

    ProfileItem.prototype._initClassifications = function() {
      if (this.profileItemEntity.classification) {
        this.elChooseClassification.text(this.profileItemEntity.classification);
      } else {
        this._setDefaultElementFontStyle(this.elChooseClassification);
      }
      return this._classifcations = [this._noneValue()];
    };

    ProfileItem.prototype._initPromotionItem = function() {
      return this.elPromotionItem[0].checked = this.profileItemEntity.isPromotional;
    };

    ProfileItem.prototype._onExpandTap = function() {
      this.el.toggleClass('expanded');
      this._refreshElProductComment();
      return this._refreshHeight();
    };

    ProfileItem.prototype._refreshElProductComment = function() {
      return this.elProductComment[0].readOnly = !this.el.hasClass('expanded');
    };

    ProfileItem.prototype._onChoosePatientProfileTap = function() {
      if (this.datasource.profileProducts.length) {
        return this._showPatientProfilesPopup();
      } else {
        return this._showNoPatientProfileToast();
      }
    };

    ProfileItem.prototype._showPatientProfilesPopup = function() {
      var profileProducts;
      profileProducts = this._filterProfileProducts(this.datasource.profileProducts);
      return this._pairedDiseasesForProduct(profileProducts).then((function(_this) {
        return function(patientProfiles) {
          var popup;
          popup = new PatientProfilesPopup(patientProfiles, _this.selectedPatientProfile);
          popup.on('didChosePatientProfile', function(patientProfile) {
            popup.on('didHide', function() {
              if (_this._isNewPatientProfile(patientProfile)) {
                return _this._onDidChoseNewPatientProfile(patientProfile);
              }
            });
            return _this.trigger('dismissModalController');
          });
          return _this.trigger('presentModalController', popup);
        };
      })(this));
    };

    ProfileItem.prototype._isNewPatientProfile = function(patientProfile) {
      var selectedPatientProfileSfId;
      selectedPatientProfileSfId = this.selectedPatientProfile ? this.selectedPatientProfile.profileProduct.patientProfileSfId : null;
      return patientProfile.profileProduct.patientProfileSfId !== selectedPatientProfileSfId;
    };

    ProfileItem.prototype._filterProfileProducts = function(profileProducts) {
      return _.uniq(profileProducts, function(item) {
        return item.patientProfileSfId;
      });
    };

    ProfileItem.prototype._pairedDiseasesForProduct = function(entities) {
      var patientProfiles, recursion;
      patientProfiles = [];
      recursion = (function(_this) {
        return function(source, output) {
          var profileProduct;
          if (_.isEmpty(source)) {
            return $.when(output);
          } else {
            profileProduct = source.shift();
            return _this.diseasesCollection.fetchByPatientProfileId(profileProduct.patientProfileSfId).then(function(patientDiseases) {
              output.push({
                'profileProduct': profileProduct,
                'patientDiseases': patientDiseases
              });
              return recursion(source, output);
            });
          }
        };
      })(this);
      return recursion(entities, patientProfiles);
    };

    ProfileItem.prototype._onDidChoseNewPatientProfile = function(patientProfile) {
      if (this._isChanged) {
        return this._showClearConfirmation(patientProfile);
      } else {
        this._resetEnteredValues();
        return this._applyChosenProfile(patientProfile);
      }
    };

    ProfileItem.prototype._showClearConfirmation = function(patientProfile) {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value("card.CallReport.Portfolio.ClearDataConfirmation.Caption"),
        message: Locale.value("card.CallReport.Portfolio.ClearDataConfirmation.Message")
      });
      confirm.bind('yesClicked', (function(_this) {
        return function() {
          _this._resetChangeFlags();
          _this._resetEnteredValues();
          _this._applyChosenProfile(patientProfile);
          return _this.trigger('dismissModalController');
        };
      })(this));
      confirm.bind('noClicked', (function(_this) {
        return function() {
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', confirm);
    };

    ProfileItem.prototype._resetEnteredValues = function() {
      this._initTitle();
      this._resetEntity();
      this._resetGeneralInfo();
      this._resetProduct();
      this._resetPromotionItem();
      this._resetClassifications();
      return this._initNoteForProduct();
    };

    ProfileItem.prototype._resetEntity = function() {
      this.profileItemEntity.productId = null;
      this.profileItemEntity.productName = null;
      this.profileItemEntity.noteForProduct = null;
      this.profileItemEntity.patientProfileId = null;
      this.profileItemEntity.patientProfileName = null;
      this.profileItemEntity.isPromotional = false;
      this.profileItemEntity.classification = null;
      return this._resetMarketingMessageEntity();
    };

    ProfileItem.prototype._resetMarketingMessageEntity = function() {
      this.profileItemEntity.productMessage1 = null;
      this.profileItemEntity.productMessage2 = null;
      return this.profileItemEntity.productMessage3 = null;
    };

    ProfileItem.prototype._resetGeneralInfo = function() {
      this.elAge.text('');
      this.elGender.text('');
      this.elGeneralHealth.text('');
      this.elOccupation.text('');
      this.elBMI.text('');
      return this.elDiseases.text('');
    };

    ProfileItem.prototype._resetProduct = function() {
      this.elChooseProduct.text(this._defaultProductCaption());
      this.chosenProduct = null;
      return this._updateMessages();
    };

    ProfileItem.prototype._updateMessages = function() {
      this._resetMessages();
      return this._messages = [this._noneValue()].concat(this._getMessagesForProductWithId(this.profileItemEntity.productId).map((function(_this) {
        return function(message) {
          return _this._filterResource(message.id, message.name);
        };
      })(this)));
    };

    ProfileItem.prototype._resetMessages = function() {
      var i, ref, results;
      this._resetMarketingMessageEntity();
      return (function() {
        results = [];
        for (var i = 1, ref = CallReport.MESSAGES_IN_PRODUCT_NUMBER; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).forEach((function(_this) {
        return function(number) {
          _this._elChooseProductMessageWithIndex(number).text(_this._defaultMessageWithIndexCaption(number));
          return _this._setChosenMessageWithIndex(number);
        };
      })(this));
    };

    ProfileItem.prototype._getMessagesForProductWithId = function(productId) {
      var productWithMessage;
      productWithMessage = _.find(this.datasource.profileProductsWithMessages, (function(_this) {
        return function(profileProductWithMessage) {
          return profileProductWithMessage.profileProduct.productSfId === productId;
        };
      })(this));
      return (productWithMessage != null ? productWithMessage.messages : void 0) || [];
    };

    ProfileItem.prototype._resetPromotionItem = function() {
      return this.elPromotionItem[0].checked = false;
    };

    ProfileItem.prototype._resetClassifications = function() {
      this.elChooseClassification.text(this._defaultClassificationCaption());
      return this.chosenClassification = null;
    };

    ProfileItem.prototype._applyChosenProfile = function(selectedPatientProfile) {
      this.selectedPatientProfile = selectedPatientProfile;
      if (this.selectedPatientProfile.isNone) {
        return this._applyNoneChosenProfile();
      } else {
        return this._applyRealChosenProfile();
      }
    };

    ProfileItem.prototype._applyNoneChosenProfile = function() {
      this.profileItemEntity.patientProfileId = null;
      this.elInfoWrapper.hide();
      this.elChoosePatientProfile.text(Locale.value("card.CallReport.Portfolio.ChoosePatientProfile"));
      return this._initClassifications();
    };

    ProfileItem.prototype._applyRealChosenProfile = function() {
      this.profileItemEntity.patientProfileId = this.selectedPatientProfile.profileProduct.patientProfileSfId;
      this.profileItemEntity.patientProfileName = this.selectedPatientProfile.profileProduct.patientProfileName;
      this.elChoosePatientProfile.text(this.profileItemEntity.patientProfileName);
      this.elProfileTitle.html(this.profileItemEntity.patientProfileName);
      this._updateGeneralInfo();
      return this._updateClassifications();
    };

    ProfileItem.prototype._updateProducts = function() {
      this._initProducts();
      if (this.profileItemEntity.productId) {
        this._products.push(this.chosenProduct);
      }
      return this._products = _.union(this._products, this.datasource.getAvaibleProductsForProfileItem(this.profileItemEntity));
    };

    ProfileItem.prototype._updateGeneralInfo = function() {
      var profileProduct;
      profileProduct = this.selectedPatientProfile.profileProduct;
      this.elAge.text(profileProduct.age);
      this.elGender.text(profileProduct.gender);
      this.elGeneralHealth.text(profileProduct.generalHealth);
      this.elOccupation.text(profileProduct.occupation);
      this.elBMI.text(profileProduct.bmi);
      this.elDiseases.text(this._diseasesNames(this.selectedPatientProfile.patientDiseases));
      this.elInfoWrapper.show();
      return this._refreshHeight();
    };

    ProfileItem.prototype._updateClassifications = function() {
      this._classifcations = [this._noneValue()];
      this._classifcations.push(this._filterResource(1, Locale.value('card.CallReport.Portfolio.Classifications.Detailed')));
      return this._classifcations.push(this._filterResource(2, Locale.value('card.CallReport.Portfolio.Classifications.Reminder')));
    };

    ProfileItem.prototype._showNoPatientProfileToast = function() {
      return $.fn.dpToast(Locale.value("card.CallReport.Portfolio.ToastMessage.NoActiveProductPortfolio"));
    };

    ProfileItem.prototype._onChooseProductTap = function() {
      this._updateProducts();
      return this._onChooseItemTap(this._products, this.chosenProduct, (function(_this) {
        return function(chosenProduct) {
          _this.chosenProduct = chosenProduct;
          _this.profileItemEntity.productId = _this.chosenProduct.id;
          _this.elProductTitle.text(_this._popupModelDescription(_this.chosenProduct, _this.productTitle));
          _this.elChooseProduct.text(_this._popupModelDescription(_this.chosenProduct, _this._defaultProductCaption()));
          return _this._updateMessages();
        };
      })(this));
    };

    ProfileItem.prototype._onChooseClassificationTap = function() {
      return this._onChooseItemTap(this._classifcations, this.chosenClassification, (function(_this) {
        return function(chosenClassification) {
          _this.chosenClassification = chosenClassification;
          _this.profileItemEntity.classification = _this._popupModelDescription(_this.chosenClassification, null);
          return _this.elChooseClassification.text(_this._popupModelDescription(_this.chosenClassification, _this._defaultClassificationCaption()));
        };
      })(this));
    };

    ProfileItem.prototype._onChoosenProductMessage1Tap = function() {
      return this._onChoosenProductMessageWithIndexTap(1);
    };

    ProfileItem.prototype._onChoosenProductMessage2Tap = function() {
      return this._onChoosenProductMessageWithIndexTap(2);
    };

    ProfileItem.prototype._onChoosenProductMessage3Tap = function() {
      return this._onChoosenProductMessageWithIndexTap(3);
    };

    ProfileItem.prototype._onChoosenProductMessageWithIndexTap = function(index) {
      return this._onChooseItemTap(this._messages, this._chosenMessageWithIndex(index), (function(_this) {
        return function(selectedModel) {
          _this._setChosenMessageWithIndex(index, selectedModel);
          _this._setProfileItemEntityProductMessageWithIndex(index, _this._popupModelDescription(selectedModel, null));
          return _this._elChooseProductMessageWithIndex(index).text(_this._popupModelDescription(selectedModel, _this._defaultMessageWithIndexCaption(index)));
        };
      })(this));
    };

    ProfileItem.prototype._chosenMessageWithIndex = function(index) {
      return this["chosenMessage" + index];
    };

    ProfileItem.prototype._setChosenMessageWithIndex = function(index, value) {
      return this["chosenMessage" + index] = value;
    };

    ProfileItem.prototype._onChooseItemTap = function(itemsList, chosenItem, onSelectedItemHandler) {
      var filterPopup;
      if (onSelectedItemHandler == null) {
        onSelectedItemHandler = null;
      }
      filterPopup = new ListPopup(itemsList, chosenItem);
      filterPopup.bind('onPopupItemSelected', (function(_this) {
        return function(selectedItem) {
          _this._isChanged = true;
          if (typeof onSelectedItemHandler === "function") {
            onSelectedItemHandler(selectedItem.model);
          }
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', filterPopup);
    };

    ProfileItem.prototype._popupModelDescription = function(model, defaultDescription) {
      if (model.id) {
        return model.description;
      } else {
        return defaultDescription;
      }
    };

    ProfileItem.prototype._defaultProductCaption = function() {
      return Locale.value('card.CallReport.Portfolio.ChooseProduct');
    };

    ProfileItem.prototype._defaultClassificationCaption = function() {
      return Locale.value('card.CallReport.Portfolio.Classification');
    };

    ProfileItem.prototype._defaultMessageWithIndexCaption = function(index) {
      return (Locale.value('card.CallReport.Portfolio.DefaultSelectMessage')) + " " + index;
    };

    ProfileItem.prototype._onPromotiontemChange = function() {
      this.profileItemEntity.isPromotional = this.elPromotionItem[0].checked;
      return this._isChanged = true;
    };

    ProfileItem.prototype._refreshHeightWithoutAnimation = function() {
      this.elProductsTableWrapper.css('webkitTransition', 'none');
      setTimeout((function(_this) {
        return function() {
          return _this.elProductsTableWrapper.css('webkitTransition', '');
        };
      })(this), 0);
      return this._refreshHeight();
    };

    return ProfileItem;

  })(Spine.Controller);

  module.exports = ProfileItem;

}).call(this);
}, "controllers/call-report-card/portfolio/profiles": function(exports, require, module) {(function() {
  var ProductsCollection, ProfileItem, ProfileItemEntity, Profiles,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ProfileItem = require('controllers/call-report-card/portfolio/profile-item');

  ProfileItemEntity = require('controllers/call-report-card/portfolio/profile-item-entity');

  ProductsCollection = require('models/bll/products-collection');

  Profiles = (function(superClass) {
    extend(Profiles, superClass);

    Profiles.prototype.className = 'profiles';

    function Profiles(_productCount, profileProducts1, profileProductsWithMessages, callReport1) {
      this._productCount = _productCount;
      this.profileProducts = profileProducts1;
      this.profileProductsWithMessages = profileProductsWithMessages;
      this.callReport = callReport1;
      this.isProductsSelectedForEachChoosenProfiles = bind(this.isProductsSelectedForEachChoosenProfiles, this);
      this.isFirstPationProfileSelected = bind(this.isFirstPationProfileSelected, this);
      this._onDismissModalController = bind(this._onDismissModalController, this);
      this._onPresentModalController = bind(this._onPresentModalController, this);
      this._renderNewProfileItemForProfileItemEntity = bind(this._renderNewProfileItemForProfileItemEntity, this);
      this._createDefaultProfileItemEntityByPatientProfileNumber = bind(this._createDefaultProfileItemEntityByPatientProfileNumber, this);
      this._createProfileItemEntityByPatientProfileNumber = bind(this._createProfileItemEntityByPatientProfileNumber, this);
      this._isViewMode = bind(this._isViewMode, this);
      this.refresh = bind(this.refresh, this);
      Profiles.__super__.constructor.call(this, {});
      this._profileItems = [];
      this.productsCollection = new ProductsCollection;
    }

    Profiles.prototype.refresh = function() {
      var timeout;
      this.el.addClass("hide");
      return timeout = setTimeout((function(_this) {
        return function() {
          _this.el.removeClass("hide");
          return clearTimeout(timeout);
        };
      })(this), 0);
    };

    Profiles.prototype.render = function() {
      if (this._isViewMode()) {
        this._renderProfileItems();
      } else {
        this._initProfileItems();
      }
      return this;
    };

    Profiles.prototype._isViewMode = function() {
      return !!this.callReport;
    };

    Profiles.prototype._renderProfileItems = function() {
      var forEach, i, ref, results;
      forEach = (function(_this) {
        return function(xs, fn) {
          if (!_.isEmpty(xs)) {
            return $.when(fn(xs.shift())).then(function() {
              return forEach(xs, fn);
            });
          }
        };
      })(this);
      return forEach((function() {
        results = [];
        for (var i = 1, ref = this._productCount; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this), (function(_this) {
        return function(patientProfileNumber) {
          var profileItemEntity;
          if (_this._callReportPatientProfileIdWinthIndex(_this.callReport, patientProfileNumber)) {
            profileItemEntity = _this._createProfileItemEntityByPatientProfileNumber(patientProfileNumber);
            return _this._renderNewProfileItemForProfileItemEntity(profileItemEntity);
          } else if (_this._callReportProductId(_this.callReport, patientProfileNumber)) {
            return _this._createDefaultProfileItemEntityByPatientProfileNumber(patientProfileNumber).then(_this._renderNewProfileItemForProfileItemEntity);
          }
        };
      })(this));
    };

    Profiles.prototype._callReportPatientProfileIdWinthIndex = function(callReport, index) {
      return callReport['patientProfile' + index];
    };

    Profiles.prototype._callReportProductId = function(callReport, index) {
      return callReport['prio' + index + 'ProductSfid'];
    };

    Profiles.prototype._createProfileItemEntityByPatientProfileNumber = function(patientProfileNumber) {
      var profileItemEntity, profileProduct;
      profileItemEntity = new ProfileItemEntity;
      profileItemEntity.patientProfileId = this._callReportPatientProfileIdWinthIndex(this.callReport, patientProfileNumber);
      profileProduct = this._getProfileProductByPatientProfileId(profileItemEntity.patientProfileId);
      profileItemEntity.patientProfileName = profileProduct != null ? profileProduct.patientProfileName : void 0;
      profileItemEntity.productId = this._callReportProductId(this.callReport, patientProfileNumber);
      profileProduct = this._getProfileProductByProductId(profileItemEntity.productId);
      profileItemEntity.productName = profileProduct != null ? profileProduct.productName : void 0;
      profileItemEntity.noteForProduct = this.callReport['noteForPrio' + patientProfileNumber];
      profileItemEntity.productMessage1 = this.callReport['prio' + patientProfileNumber + 'MarketingMessage1'];
      profileItemEntity.productMessage2 = this.callReport['prio' + patientProfileNumber + 'MarketingMessage2'];
      profileItemEntity.productMessage3 = this.callReport['prio' + patientProfileNumber + 'MarketingMessage3'];
      profileItemEntity.isPromotional = this.callReport['promotionalItemsPrio' + patientProfileNumber];
      profileItemEntity.classification = this.callReport['prio' + patientProfileNumber + 'Classification'];
      return profileItemEntity;
    };

    Profiles.prototype._createDefaultProfileItemEntityByPatientProfileNumber = function(patientProfileNumber) {
      var profileItemEntity;
      profileItemEntity = new ProfileItemEntity;
      profileItemEntity.patientProfileId = null;
      profileItemEntity.patientProfileName = Locale.value('card.CallReport.Portfolio.PatientProfile');
      profileItemEntity.productId = this._callReportProductId(this.callReport, patientProfileNumber);
      profileItemEntity.noteForProduct = this.callReport['noteForPrio' + patientProfileNumber];
      profileItemEntity.productMessage1 = this.callReport['prio' + patientProfileNumber + 'MarketingMessage1'];
      profileItemEntity.productMessage2 = this.callReport['prio' + patientProfileNumber + 'MarketingMessage2'];
      profileItemEntity.productMessage3 = this.callReport['prio' + patientProfileNumber + 'MarketingMessage3'];
      profileItemEntity.isPromotional = this.callReport['promotionalItemsPrio' + patientProfileNumber];
      profileItemEntity.classification = null;
      return this.productsCollection.fetchEntityById(profileItemEntity.productId).then(function(product) {
        profileItemEntity.productName = product.name;
        return profileItemEntity;
      });
    };

    Profiles.prototype._getProfileProductByPatientProfileId = function(patientProfileId) {
      return _.find(this.profileProducts, function(profileProduct) {
        return profileProduct.patientProfileSfId === patientProfileId;
      });
    };

    Profiles.prototype._getProfileProductByProductId = function(productId) {
      return _.find(this.profileProducts, function(profileProduct) {
        return profileProduct.productSfId === productId;
      });
    };

    Profiles.prototype._renderNewProfileItemForProfileItemEntity = function(profileItemEntity) {
      var productTitle, profileItem, profileTitle;
      profileTitle = profileItemEntity.patientProfileName;
      productTitle = profileItemEntity.productName;
      profileItem = new ProfileItem(profileTitle, productTitle, this, profileItemEntity);
      this.append(profileItem);
      return profileItem.render();
    };

    Profiles.prototype._initProfileItems = function() {
      return _(this._productCount).times((function(_this) {
        return function(index) {
          var productTitle, profileItem, profileTitle;
          profileTitle = Locale.value('card.CallReport.Portfolio.PatientProfile');
          productTitle = (Locale.value('card.CallReport.Portfolio.PatientProduct')) + " " + (index + 1);
          profileItem = new ProfileItem(profileTitle, productTitle, _this, new ProfileItemEntity);
          profileItem.on('presentModalController', _this._onPresentModalController);
          profileItem.on('dismissModalController', _this._onDismissModalController);
          _this._profileItems.push(profileItem);
          _this.append(profileItem);
          return profileItem.render();
        };
      })(this));
    };

    Profiles.prototype._onPresentModalController = function(popup) {
      return this.trigger('presentModalController', popup);
    };

    Profiles.prototype._onDismissModalController = function() {
      return this.trigger('dismissModalController');
    };

    Profiles.prototype.isFirstPationProfileSelected = function() {
      return this._profileItems[0].profileItemEntity.patientProfileId != null;
    };

    Profiles.prototype.isProductsSelectedForEachChoosenProfiles = function() {
      var profileCellsWithOutSelectedProducts;
      profileCellsWithOutSelectedProducts = _.find(this._profileItems, function(profileItem) {
        return (profileItem.profileItemEntity.patientProfileId != null) && profileItem.profileItemEntity.productId === null;
      });
      return profileCellsWithOutSelectedProducts == null;
    };

    Profiles.prototype.isClassificationSelectedForEachChoosenProduct = function() {
      var profileCellsWithOutSelectedClassification;
      profileCellsWithOutSelectedClassification = _.find(this._profileItems, function(profileItem) {
        return (profileItem.profileItemEntity.productId != null) && profileItem.profileItemEntity.classification === null;
      });
      return profileCellsWithOutSelectedClassification == null;
    };

    Profiles.prototype.isFirstMessageSelected = function() {
      if (!this._profileItems[0].profileItemEntity.patientProfileId) {
        return false;
      }
      return this._profileItems[0].profileItemEntity.productMessage1 != null;
    };

    Profiles.prototype.getPrios = function() {
      return this._profileItems.map((function(_this) {
        return function(profileItem) {
          return {
            productId: profileItem.profileItemEntity.productId,
            noteForProduct: profileItem.profileItemEntity.noteForProduct,
            patientProfileId: profileItem.profileItemEntity.patientProfileId,
            productMessage1: profileItem.profileItemEntity.productMessage1,
            productMessage2: profileItem.profileItemEntity.productMessage2,
            productMessage3: profileItem.profileItemEntity.productMessage3,
            isPromotional: profileItem.profileItemEntity.isPromotional,
            classification: profileItem.profileItemEntity.classification
          };
        };
      })(this));
    };

    Profiles.prototype.getAvaibleProductsForProfileItem = function(profileItemEntity) {
      var avaibleProducts;
      avaibleProducts = [];
      this.profileProducts.forEach((function(_this) {
        return function(profileProduct) {
          if (profileProduct.patientProfileSfId === profileItemEntity.patientProfileId && !_this._isProfileProductAlreadySelected(profileProduct)) {
            return avaibleProducts.push(_this._createProductFromProfileProduct(profileProduct));
          }
        };
      })(this));
      return avaibleProducts;
    };

    Profiles.prototype._isProfileProductAlreadySelected = function(profileProduct) {
      var profileProducts;
      profileProducts = _.find(this._profileItems, (function(_this) {
        return function(profileItem) {
          var profileItemEntity;
          profileItemEntity = profileItem.profileItemEntity;
          return profileItemEntity.patientProfileId === profileProduct.patientProfileSfId && profileItemEntity.productId === profileProduct.productSfId;
        };
      })(this));
      return profileProducts != null;
    };

    Profiles.prototype._createProductFromProfileProduct = function(profileProduct) {
      return {
        id: profileProduct.productSfId,
        description: profileProduct.productName
      };
    };

    Profiles.prototype.isChanged = function() {
      var isChanged;
      isChanged = _.find(this._profileItems, (function(_this) {
        return function(profileItem) {
          return profileItem.isChanged();
        };
      })(this));
      return !!isChanged;
    };

    return Profiles;

  })(Spine.Controller);

  module.exports = Profiles;

}).call(this);
}, "controllers/call-report-card/portfolio/summary-entity": function(exports, require, module) {(function() {
  var SummaryEnity;

  SummaryEnity = (function() {
    function SummaryEnity() {}

    SummaryEnity.prototype.productComment = null;

    SummaryEnity.prototype.productMessage1 = null;

    SummaryEnity.prototype.productMessage2 = null;

    SummaryEnity.prototype.productMessage3 = null;

    SummaryEnity.prototype.isPromotional = null;

    return SummaryEnity;

  })();

  module.exports = SummaryEnity;

}).call(this);
}, "controllers/call-report-card/portfolio/summary": function(exports, require, module) {(function() {
  var CallReport, CommonInput, ListPopup, Locale, Summary, SummaryPopupListDatasource,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonInput = require('controls/common-input/common-input');

  ListPopup = require('controls/popups/list-popup');

  Locale = require('common/localization/locale');

  CallReport = require('models/call-report');

  SummaryPopupListDatasource = (function() {
    function SummaryPopupListDatasource() {}

    SummaryPopupListDatasource["default"] = function() {
      return {
        id: -1,
        description: Locale.value('common:defaultSelectValue'),
        value: null
      };
    };

    SummaryPopupListDatasource.yes = function() {
      return {
        id: 0,
        description: Locale.value('common:buttons.YesBtn'),
        value: CallReport.PORTFOLIO_PRESENTATION_REMINDER_YES
      };
    };

    SummaryPopupListDatasource.no = function() {
      return {
        id: 1,
        description: Locale.value('common:buttons.NoBtn'),
        value: CallReport.PORTFOLIO_PRESENTATION_REMINDER_NO
      };
    };

    SummaryPopupListDatasource.resources = function() {
      return [this["default"](), this.yes(), this.no()];
    };

    return SummaryPopupListDatasource;

  })();

  Summary = (function(superClass) {
    extend(Summary, superClass);

    Summary.prototype.className = 'summary';

    Summary.prototype.elements = {
      '.patient-support': 'elPatientSupport',
      '.portfolio-feedback': 'elFeedback',
      '.check-box': 'elPationSupport',
      '.full-portfolio-btn': 'elFullPortfolio'
    };

    Summary.prototype.events = {
      'tap .full-portfolio-btn': '_showListPopup'
    };

    Summary.prototype.summaryEntity = null;

    function Summary(summaryEntity) {
      this.summaryEntity = summaryEntity;
      this._initPatientSupportProgram = bind(this._initPatientSupportProgram, this);
      Summary.__super__.constructor.call(this, {});
      this.isChanged = false;
      if (this.summaryEntity.fullPortfolioPresentationReminder) {
        this.fullPortfolio = this.summaryEntity.fullPortfolioPresentationReminder === CallReport.PORTFOLIO_PRESENTATION_REMINDER_YES ? SummaryPopupListDatasource.yes() : SummaryPopupListDatasource.no();
      } else {
        this.fullPortfolio = SummaryPopupListDatasource["default"]();
      }
    }

    Summary.prototype.render = function() {
      this.html(this.template());
      Locale.localize(this.el);
      this.elFullPortfolio.html(this.fullPortfolio.description);
      this._initCommonInputs();
      this._initPatientSupportProgram();
      return this;
    };

    Summary.prototype.template = function() {
      return require('views/call-report-card/portfolio/summary')();
    };

    Summary.prototype._initCommonInputs = function() {
      this._initPatientSupport(this.summaryEntity.patientSupportProgramComments || '');
      return this._initFeedback(this.summaryEntity.portfolioFeedback || '');
    };

    Summary.prototype._initPatientSupport = function(value) {
      this._setElementFontStyleByValue(this.elPatientSupport, value);
      this.elPatientSupport.val(value);
      new CommonInput($('.call-report .wrapper'), this.elPatientSupport[0]);
      return this.elPatientSupport.on('change', (function(_this) {
        return function() {
          _this.isChanged = true;
          return _this.summaryEntity.patientSupportProgramComments = _this.elPatientSupport[0].getValue();
        };
      })(this));
    };

    Summary.prototype._initFeedback = function(value) {
      this._setElementFontStyleByValue(this.elFeedback, value);
      this.elFeedback.val(value);
      new CommonInput($('.call-report .wrapper'), this.elFeedback[0]);
      return this.elFeedback.on('change', (function(_this) {
        return function() {
          _this.isChanged = true;
          return _this.summaryEntity.portfolioFeedback = _this.elFeedback[0].getValue();
        };
      })(this));
    };

    Summary.prototype._setElementFontStyleByValue = function(element, value) {
      if (!value.length) {
        return element.addClass("call-report-empty-font-style");
      }
    };

    Summary.prototype._initPatientSupportProgram = function() {
      if (this.summaryEntity.patientSupportProgram) {
        this.elPationSupport.prop("checked", true);
      }
      return this.elPationSupport.on('change', (function(_this) {
        return function() {
          _this.isChanged = true;
          return _this.summaryEntity.patientSupportProgram = _this.elPationSupport.prop("checked");
        };
      })(this));
    };

    Summary.prototype._showListPopup = function() {
      var listPopup;
      listPopup = new ListPopup(SummaryPopupListDatasource.resources(), this.fullPortfolio);
      listPopup.bind('onPopupItemSelected', (function(_this) {
        return function(selectedItem) {
          _this.isChanged = true;
          _this.fullPortfolio = selectedItem.model;
          _this.elFullPortfolio.html(_this.fullPortfolio.description);
          _this.summaryEntity.fullPortfolioPresentationReminder = _this.fullPortfolio.value;
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', listPopup);
    };

    return Summary;

  })(Spine.Controller);

  module.exports = Summary;

}).call(this);
}, "controllers/call-report-card/type-of-visit-picklist-datasource": function(exports, require, module) {(function() {
  var CallReport, CallReportPickListManager, PickListDatasource, TypeOfVisitPickListDatasource,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PickListDatasource = require('controllers/call-report-card/picklist-datasource');

  CallReport = require('models/call-report');

  CallReportPickListManager = require('db/picklist-managers/callreport-picklist-manager');

  TypeOfVisitPickListDatasource = (function(superClass) {
    extend(TypeOfVisitPickListDatasource, superClass);

    function TypeOfVisitPickListDatasource() {
      return TypeOfVisitPickListDatasource.__super__.constructor.apply(this, arguments);
    }

    TypeOfVisitPickListDatasource.prototype.pickListName = function() {
      return CallReport.sfdc.typeOfVisit;
    };

    TypeOfVisitPickListDatasource.prototype.pickListManager = function() {
      return new CallReportPickListManager;
    };

    return TypeOfVisitPickListDatasource;

  })(PickListDatasource);

  module.exports = TypeOfVisitPickListDatasource;

}).call(this);
}, "controllers/contact-card/contact-card-activities-table-cell": function(exports, require, module) {(function() {
  var CallReport, CallReportPickListManager, ContactCardActivitiesTableCell, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  CallReport = require('models/call-report');

  CallReportPickListManager = require('db/picklist-managers/callreport-picklist-manager');

  ContactCardActivitiesTableCell = (function(superClass) {
    extend(ContactCardActivitiesTableCell, superClass);

    ContactCardActivitiesTableCell.prototype.tag = 'tr';

    ContactCardActivitiesTableCell.prototype.elements = {
      '.type': 'elType',
      '.date': 'elDate',
      '.time': 'elTime',
      '.user': 'elUser',
      '.next-call': 'elNextCall'
    };

    ContactCardActivitiesTableCell.prototype.events = {
      'tap': '_onTap'
    };

    function ContactCardActivitiesTableCell(activity) {
      this.activity = activity;
      this._fillGeneralInfo = bind(this._fillGeneralInfo, this);
      this._fillActivityType = bind(this._fillActivityType, this);
      this._onTap = bind(this._onTap, this);
      ContactCardActivitiesTableCell.__super__.constructor.call(this, {});
    }

    ContactCardActivitiesTableCell.prototype.template = function() {
      return require('views/contact-card/contact-card-activities-table-cell')();
    };

    ContactCardActivitiesTableCell.prototype._onTap = function() {
      return this.trigger('tap', this);
    };

    ContactCardActivitiesTableCell.prototype.render = function() {
      this.html(this.template());
      this._fillGeneralInfo();
      this._fillActivityType();
      return this;
    };

    ContactCardActivitiesTableCell.prototype._fillActivityType = function() {
      return new CallReportPickListManager().getLabelByValue(CallReport.sfdc.type, this.activity.type).then((function(_this) {
        return function(label) {
          return _this.elType.html(label);
        };
      })(this));
    };

    ContactCardActivitiesTableCell.prototype._fillGeneralInfo = function() {
      var timeParts;
      timeParts = Utils.formatDateTime(this.activity.dateTimeOfVisit).split(' ');
      this.elDate.html(timeParts[0]);
      this.elTime.html(timeParts[1]);
      this.elUser.html(this.activity.userFullName());
      return this.elNextCall.text(this.activity.nextCallObjective);
    };

    return ContactCardActivitiesTableCell;

  })(Spine.Controller);

  module.exports = ContactCardActivitiesTableCell;

}).call(this);
}, "controllers/contact-card/contact-card-activities-table": function(exports, require, module) {(function() {
  var ContactCardActivitiesTable, TableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  ContactCardActivitiesTable = (function(superClass) {
    extend(ContactCardActivitiesTable, superClass);

    function ContactCardActivitiesTable() {
      return ContactCardActivitiesTable.__super__.constructor.apply(this, arguments);
    }

    ContactCardActivitiesTable.prototype.elements = {
      'tbody': 'elTbody'
    };

    ContactCardActivitiesTable.prototype.template = function() {
      return require('views/contact-card/contact-card-activities-table')();
    };

    return ContactCardActivitiesTable;

  })(TableController);

  module.exports = ContactCardActivitiesTable;

}).call(this);
}, "controllers/contact-card/contact-card-references-table-cell": function(exports, require, module) {(function() {
  var ContactCardReferencesTableCell, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ContactCardReferencesTableCell = (function(superClass) {
    extend(ContactCardReferencesTableCell, superClass);

    ContactCardReferencesTableCell.prototype.tag = 'tr';

    ContactCardReferencesTableCell.prototype.elements = {
      '.status': 'elStatus',
      '.primary': 'elPrimary',
      '.appt': 'elAppt',
      '.call-report': 'elCallReport',
      '.organization': 'elOrganization'
    };

    function ContactCardReferencesTableCell(reference) {
      this.reference = reference;
      this.bindEvents = bind(this.bindEvents, this);
      this._onOrganizationTap = bind(this._onOrganizationTap, this);
      this._onCallReportTap = bind(this._onCallReportTap, this);
      this._onApptTap = bind(this._onApptTap, this);
      ContactCardReferencesTableCell.__super__.constructor.call(this, {});
    }

    ContactCardReferencesTableCell.prototype.template = function() {
      return require('views/contact-card/contact-card-references-table-cell')();
    };

    ContactCardReferencesTableCell.prototype._onApptTap = function() {
      return this.trigger('apptTap', this);
    };

    ContactCardReferencesTableCell.prototype._onCallReportTap = function() {
      return this.trigger('callReportTap', this);
    };

    ContactCardReferencesTableCell.prototype._onOrganizationTap = function() {
      return this.trigger('organizationTap', this);
    };

    ContactCardReferencesTableCell.prototype.bindEvents = function() {
      return this.elOrganization.on('tap', this._onOrganizationTap);
    };

    ContactCardReferencesTableCell.prototype.render = function() {
      this.html(this.template());
      this.reference.getStatus().then((function(_this) {
        return function(status) {
          return _this.elStatus.html(status);
        };
      })(this));
      if (this.reference.isPrimary) {
        this._showPrimaryCheckmark();
      }
      if (this.reference.isActive()) {
        this._showCreateVisitsButtons();
      }
      this.elOrganization.html(this.reference.organizationNameAndAddress());
      this.bindEvents();
      return this;
    };

    ContactCardReferencesTableCell.prototype._showPrimaryCheckmark = function() {
      return this.elPrimary.find('.check-box').addClass('checked');
    };

    ContactCardReferencesTableCell.prototype._showCreateVisitsButtons = function() {
      this._showCreateApptButton();
      return this._showCreateCallReportButton();
    };

    ContactCardReferencesTableCell.prototype._showCreateApptButton = function() {
      this.elAppt.addClass('visible');
      return this.elAppt.on('tap', this._onApptTap);
    };

    ContactCardReferencesTableCell.prototype._showCreateCallReportButton = function() {
      this.elCallReport.addClass('visible');
      return this.elCallReport.on('tap', this._onCallReportTap);
    };

    return ContactCardReferencesTableCell;

  })(Spine.Controller);

  module.exports = ContactCardReferencesTableCell;

}).call(this);
}, "controllers/contact-card/contact-card-references-table": function(exports, require, module) {(function() {
  var ContactCardReferencesTable, TableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  ContactCardReferencesTable = (function(superClass) {
    extend(ContactCardReferencesTable, superClass);

    function ContactCardReferencesTable() {
      return ContactCardReferencesTable.__super__.constructor.apply(this, arguments);
    }

    ContactCardReferencesTable.prototype.elements = {
      'tbody': 'elTbody'
    };

    ContactCardReferencesTable.prototype.template = function() {
      return require('views/contact-card/contact-card-references-table')();
    };

    return ContactCardReferencesTable;

  })(TableController);

  module.exports = ContactCardReferencesTable;

}).call(this);
}, "controllers/contact-card/contact-card": function(exports, require, module) {(function() {
  var AppointmentCard, AppointmentCardEdit, CallReport, CallReportCard, CallReportCardView, ConfigurationManager, ContactCard, ContactCardActivitiesTable, ContactCardActivitiesTableCell, ContactCardReferencesTable, ContactCardReferencesTableCell, ContactsCollection, Header, PanelScreen, SforceDataContext, TableDatasource,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  Header = require('controls/header/header');

  ContactsCollection = require('models/bll/contacts-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  TableDatasource = require('controls/table/table-data-source');

  ContactCardReferencesTable = require('controllers/contact-card/contact-card-references-table');

  ContactCardReferencesTableCell = require('controllers/contact-card/contact-card-references-table-cell');

  ContactCardActivitiesTable = require('controllers/contact-card/contact-card-activities-table');

  ContactCardActivitiesTableCell = require('controllers/contact-card/contact-card-activities-table-cell');

  CallReport = require('models/call-report');

  AppointmentCard = require('controllers/appointment-card/appointment-card');

  AppointmentCardEdit = require('controllers/appointment-card/appointment-card-edit');

  CallReportCard = require('controllers/call-report-card/call-report-card');

  CallReportCardView = require('controllers/call-report-card/call-report-card-view');

  ConfigurationManager = require('db/configuration-manager');

  ContactCard = (function(superClass) {
    extend(ContactCard, superClass);

    ContactCard.prototype.className = 'contact-card';

    ContactCard.prototype.elements = {
      '.contact-card-full-name': 'elFullname',
      '.contact-card-status': 'elStatus',
      '.contact-card-target-customer': 'elTargetCustomer',
      '.contact-card-record-type': 'elRecordType',
      '.contact-card-abbott-specialty': 'elAbbottSpecialty',
      '.contact-card-priority': 'elPriority',
      '.contact-card-specialty': 'elSpecialty',
      '.contact-card-mobile-phone': 'elMobilePhone',
      '.contact-card-email': 'elEmail',
      '.contact-card-kol': 'elKol',
      '.contact-card-description': 'elDescription',
      '.references-table-container': 'elReferencesTable',
      '.activities-table-container': 'elActivitiesTable',
      '.comment-block': 'elCommentBlock'
    };

    ContactCard.prototype.contact = null;

    ContactCard.prototype.contactId = null;

    ContactCard.prototype.referencesTable = null;

    ContactCard.prototype.references = null;

    ContactCard.prototype.activitiesTable = null;

    ContactCard.prototype.activities = null;

    ContactCard.prototype.template = function() {
      return require('views/contact-card/contact-card')();
    };

    function ContactCard(contactId) {
      this.contactId = contactId;
      this._onOrganizationTap = bind(this._onOrganizationTap, this);
      this._onCallReportTap = bind(this._onCallReportTap, this);
      this._onApptTap = bind(this._onApptTap, this);
      this._onApptEditTap = bind(this._onApptEditTap, this);
      this._getActivities = bind(this._getActivities, this);
      this._reloadActivities = bind(this._reloadActivities, this);
      ContactCard.__super__.constructor.apply(this, arguments);
      this.subscribeOnNotification('appointmentChanged', this._reloadActivities);
      this.subscribeOnNotification('callReportCreated', this._reloadActivities);
    }

    ContactCard.prototype.active = function() {
      var collection;
      ContactCard.__super__.active.apply(this, arguments);
      collection = new ContactsCollection;
      return collection.fetchEntityById(this.contactId).done((function(_this) {
        return function(contact) {
          _this.contact = contact;
          return _this.render();
        };
      })(this)).fail((function(_this) {
        return function(err) {
          return alert("Error fetching records:\n " + (JSON.stringify(err)));
        };
      })(this));
    };

    ContactCard.prototype.render = function() {
      this.html(this.template());
      this._initHeader();
      this._fillGeneralInfo();
      this._initTables().then((function(_this) {
        return function() {
          return ConfigurationManager.getConfig().then(function(config) {
            if (config.showContactDescription === false && !_this.contact.description) {
              _this.elCommentBlock.hide();
            }
            return Locale.localize(_this.el);
          });
        };
      })(this));
      return this;
    };

    ContactCard.prototype._reloadActivities = function() {
      return this._getActivities().then((function(_this) {
        return function() {
          return Locale.localize(_this.el);
        };
      })(this));
    };

    ContactCard.prototype._fillGeneralInfo = function() {
      this.elFullname.html(this.contact.fullName());
      this.elRecordType.html(this.contact.recordType);
      this.elTargetCustomer.html(this.contact.targetCustomer());
      this.elPriority.html(this.contact.priority);
      this.elAbbottSpecialty.html(this.contact.abbottSpecialty);
      this.elMobilePhone.html(this.contact.mobilePhone);
      this.elEmail.html(this.contact.email);
      this.elKol.html(this.contact.kol);
      this.elDescription.html(this.contact.description);
      this.elDescription.elastic();
      return this.contact.getOrganization().then((function(_this) {
        return function(organization) {
          _this.elStatus.html(organization.status);
          return _this.elSpecialty.html(organization.specialty1);
        };
      })(this));
    };

    ContactCard.prototype._createReferencesTable = function() {
      this.referencesTable = new ContactCardReferencesTable;
      this.referencesTable.datasource = this;
      return this.elReferencesTable.html(this.referencesTable.render().el);
    };

    ContactCard.prototype._createActivitiesTable = function() {
      this.activitiesTable = new ContactCardActivitiesTable;
      this.activitiesTable.datasource = this;
      return this.elActivitiesTable.html(this.activitiesTable.render().el);
    };

    ContactCard.prototype._getReferences = function() {
      return this.contact.getReferences().then((function(_this) {
        return function(references) {
          _this.references = references;
          return _this._createReferencesTable();
        };
      })(this));
    };

    ContactCard.prototype._getActivities = function() {
      return SforceDataContext.currentMarketingCycle().then(this.contact.getActivitiesInMarketingCycle).then((function(_this) {
        return function(activities) {
          _this.activities = activities;
          return _this._createActivitiesTable();
        };
      })(this));
    };

    ContactCard.prototype._initTables = function() {
      return $.when.apply($, [this._getReferences(), this._getActivities()]);
    };

    ContactCard.prototype._initHeader = function() {
      var contactHeader;
      contactHeader = new Header((Locale.value('card.Contact.HeaderTitle')) + " " + (this.contact.fullName()));
      contactHeader.render();
      return this.setHeader(contactHeader);
    };

    ContactCard.prototype.numberOfRowsForTable = function(table) {
      if (table === this.referencesTable) {
        return this.references.length;
      } else if (table === this.activitiesTable) {
        return this.activities.length;
      }
    };

    ContactCard.prototype.cellForRowAtIndexForTable = function(index, table) {
      if (table === this.referencesTable) {
        return this._createReferencesTableCellAtIndex(index);
      } else if (table === this.activitiesTable) {
        return this._createActivitiesTableCellAtIndex(index);
      }
    };

    ContactCard.prototype._createReferencesTableCellAtIndex = function(index) {
      var contactCardReferencesTableCell;
      contactCardReferencesTableCell = new ContactCardReferencesTableCell(this.references[index]);
      contactCardReferencesTableCell.on('apptTap', this._onApptTap);
      contactCardReferencesTableCell.on('callReportTap', this._onCallReportTap);
      contactCardReferencesTableCell.on('organizationTap', this._onOrganizationTap);
      return contactCardReferencesTableCell;
    };

    ContactCard.prototype._createActivitiesTableCellAtIndex = function(index) {
      var contactCardActivitiesTableCell;
      contactCardActivitiesTableCell = new ContactCardActivitiesTableCell(this.activities[index]);
      contactCardActivitiesTableCell.on('tap', this._onApptEditTap);
      return contactCardActivitiesTableCell;
    };

    ContactCard.prototype._onApptEditTap = function(cell) {
      if (cell.activity.type === CallReport.TYPE_APPOINTMENT) {
        return this.stage.push(new AppointmentCardEdit(cell.activity.id));
      } else if (cell.activity.type === CallReport.TYPE_ONE_TO_ONE) {
        return this.stage.push(new CallReportCardView(cell.activity.id));
      }
    };

    ContactCard.prototype._onApptTap = function(cell) {
      return this.stage.push(new AppointmentCard(cell.reference.id));
    };

    ContactCard.prototype._onCallReportTap = function(cell) {
      return this.stage.push(new CallReportCard(cell.reference.id));
    };

    ContactCard.prototype._onOrganizationTap = function(cell) {
      var OrganizationCard;
      OrganizationCard = require('controllers/organization-card/organization-card');
      return this.stage.push(new OrganizationCard(cell.reference.organizationSfId));
    };

    return ContactCard;

  })(PanelScreen);

  module.exports = ContactCard;

}).call(this);
}, "controllers/contacts/contacts-filter": function(exports, require, module) {(function() {
  var ContactsFilter;

  ContactsFilter = (function() {
    function ContactsFilter() {}

    ContactsFilter.targetContacts = function() {
      return {
        id: 0,
        description: Locale.value('contacts.FilterPopup.TargetContacts')
      };
    };

    ContactsFilter.nonTargetContacts = function() {
      return {
        id: 1,
        description: Locale.value('contacts.FilterPopup.NonTargetContacts')
      };
    };

    ContactsFilter.resources = function() {
      return [this.targetContacts(), this.nonTargetContacts()];
    };

    return ContactsFilter;

  })();

  module.exports = ContactsFilter;

}).call(this);
}, "controllers/contacts/contacts-table-cell": function(exports, require, module) {(function() {
  var AppointmentCard, CallReportCard, ContactsTableCell, Spine, TargetFrequenciesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');

  AppointmentCard = require('controllers/appointment-card/appointment-card');

  CallReportCard = require('controllers/call-report-card/call-report-card');

  ContactsTableCell = (function(superClass) {
    extend(ContactsTableCell, superClass);

    ContactsTableCell.prototype.className = 'row';

    ContactsTableCell.prototype.elements = {
      '.contact': 'elContact',
      '.priority': 'elPriority',
      '.specialty': 'elSpecialty',
      '.at-calls': 'elAtCalls',
      '.last-call': 'elLastCall',
      '.organization': 'elOrganization',
      '.contact-organization-cell': 'elContactOrganizationCell',
      '.appt': 'elAppt',
      '.call-report': 'elCallReport'
    };

    function ContactsTableCell(reference) {
      this.reference = reference;
      this._onCallReportTap = bind(this._onCallReportTap, this);
      this._onApptTap = bind(this._onApptTap, this);
      this._showCreateCallReportButton = bind(this._showCreateCallReportButton, this);
      this._showCreateApptButton = bind(this._showCreateApptButton, this);
      this._showCreateVisitsButtons = bind(this._showCreateVisitsButtons, this);
      this._onCellHold = bind(this._onCellHold, this);
      this._onCellTap = bind(this._onCellTap, this);
      this._onOrganizationCellTap = bind(this._onOrganizationCellTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      ContactsTableCell.__super__.constructor.call(this, {});
    }

    ContactsTableCell.prototype.template = function() {
      return require('views/contacts/contacts-table-cell')();
    };

    ContactsTableCell.prototype.bindEvents = function() {
      this._subscribeElementOnTapEvent(this.elContactOrganizationCell, this._onOrganizationCellTap);
      this.el.on('tap', this._onCellTap);
      if (this.reference.isActive()) {
        this.el.on('hold', this._onCellHold);
      }
      if (this.reference.isActive()) {
        return this._showCreateVisitsButtons();
      }
    };

    ContactsTableCell.prototype._subscribeElementOnTapEvent = function(element, callback) {
      element.on('tap', callback);
      return element.on('hold', function(event) {
        return event.stopPropagation();
      });
    };

    ContactsTableCell.prototype._onOrganizationCellTap = function(event) {
      event.stopPropagation();
      return this.trigger('organizationCellTap', this);
    };

    ContactsTableCell.prototype._onCellTap = function(event) {
      return this.trigger('cellTap', this);
    };

    ContactsTableCell.prototype._onCellHold = function(event) {
      return this.trigger('cellHold', this);
    };

    ContactsTableCell.prototype.render = function() {
      var ref;
      this.html(this.template());
      this.elContact.html((this.reference.contactFullName()) + " <br/> " + ((ref = this.reference.contactRecordType) != null ? ref : ''));
      this.elOrganization.html(this.reference.organizationNameAndAddress());
      this.reference.getContact().then((function(_this) {
        return function(contact) {
          var lastDateTargetFrequency;
          if (contact.lastDateTargetFrequency) {
            lastDateTargetFrequency = new TargetFrequenciesCollection().parseEntity(contact.lastDateTargetFrequency);
            _this.elAtCalls.html(lastDateTargetFrequency.atCalls());
            _this.elLastCall.html(lastDateTargetFrequency.lastCall());
          }
          _this.elPriority.html(contact.priority);
          return _this.elSpecialty.html(contact.abbottSpecialty);
        };
      })(this));
      return this;
    };

    ContactsTableCell.prototype._showCreateVisitsButtons = function() {
      this._showCreateApptButton();
      return this._showCreateCallReportButton();
    };

    ContactsTableCell.prototype._showCreateApptButton = function() {
      this.elAppt.addClass('visible');
      return this._subscribeElementOnTapEvent(this.elAppt, this._onApptTap);
    };

    ContactsTableCell.prototype._showCreateCallReportButton = function() {
      this.elCallReport.addClass('visible');
      return this._subscribeElementOnTapEvent(this.elCallReport, this._onCallReportTap);
    };

    ContactsTableCell.prototype._onApptTap = function(event) {
      event.stopPropagation();
      return this.trigger('apptTap', this);
    };

    ContactsTableCell.prototype._onCallReportTap = function(event) {
      event.stopPropagation();
      return this.trigger('callReportTap', this);
    };

    return ContactsTableCell;

  })(Spine.Controller);

  module.exports = ContactsTableCell;

}).call(this);
}, "controllers/contacts/contacts": function(exports, require, module) {(function() {
  var AppointmentCard, BaseHeader, CallReportCard, ContactCard, Contacts, ContactsFilter, ContactsTableCell, HeaderBaseControl, LazyTableController, ListPopup, NonTargetReferencesCollection, OrganizationCard, RootPanelScreen, Search, SortingTableHeaderItem, TableHeaderItem, TargetReferencesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RootPanelScreen = require('controllers/base/panel/root-panel-screen');

  LazyTableController = require('controllers/lazy-table-controller');

  TargetReferencesCollection = require('models/bll/references/target-references-collection');

  NonTargetReferencesCollection = require('models/bll/references/non-target-references-collection');

  ContactsTableCell = require('controllers/contacts/contacts-table-cell');

  ListPopup = require('controls/popups/list-popup');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  BaseHeader = require('controls/header/base-header');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  ContactsFilter = require('controllers/contacts/contacts-filter');

  Search = require('controls/search/search');

  ContactCard = require('controllers/contact-card/contact-card');

  OrganizationCard = require('controllers/organization-card/organization-card');

  AppointmentCard = require('controllers/appointment-card/appointment-card');

  CallReportCard = require('controllers/call-report-card/call-report-card');

  Contacts = (function(superClass) {
    extend(Contacts, superClass);

    Contacts.prototype.className = 'table-view contacts';

    Contacts.prototype.tableController = null;

    Contacts.prototype.popupDatasource = null;

    Contacts.prototype.TYPE_APPOINTMENT = 'appointment';

    Contacts.prototype.TYPE_CALL_REPORT = 'callReport';

    function Contacts() {
      this._onCallReportTap = bind(this._onCallReportTap, this);
      this._onApptTap = bind(this._onApptTap, this);
      this._onCellHold = bind(this._onCellHold, this);
      this._onCellTap = bind(this._onCellTap, this);
      this._onOrganizationCellTap = bind(this._onOrganizationCellTap, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this.createCollection = bind(this.createCollection, this);
      this._displayContactsCount = bind(this._displayContactsCount, this);
      this._resetSearch = bind(this._resetSearch, this);
      this._onSearchChanged = bind(this._onSearchChanged, this);
      this._resetTable = bind(this._resetTable, this);
      this.reload = bind(this.reload, this);
      this._onFilterTap = bind(this._onFilterTap, this);
      this._headerTitle = bind(this._headerTitle, this);
      Contacts.__super__.constructor.apply(this, arguments);
      this.popupDatasource = [
        {
          id: this.TYPE_APPOINTMENT,
          description: Locale.value('createActivityPopup.Appointment')
        }, {
          id: this.TYPE_CALL_REPORT,
          description: Locale.value('createActivityPopup.CallReport')
        }
      ];
      this.subscribeOnNotification('callReportCreated', this.reload);
    }

    Contacts.prototype.active = function() {
      Contacts.__super__.active.apply(this, arguments);
      this._initHeader();
      return this._initContent();
    };

    Contacts.prototype._initHeader = function() {
      var contactsHeader, headerFilterBtn;
      this.currentFilter = _.first(ContactsFilter.resources());
      headerFilterBtn = new HeaderBaseControl(this.currentFilter.description, 'select-btn');
      headerFilterBtn.bind('tap', this._onFilterTap);
      this.search = new Search();
      this.search.bind('searchChanged', this._onSearchChanged);
      this.search.bind('searchClear', this._resetSearch);
      contactsHeader = new BaseHeader(this._headerTitle());
      contactsHeader.render();
      contactsHeader.addRightControlElement(this.search.render().el);
      contactsHeader.addLeftControlElement(headerFilterBtn.el);
      return this.setHeader(contactsHeader);
    };

    Contacts.prototype._headerTitle = function() {
      return Locale.value('contacts.HeaderTitle');
    };

    Contacts.prototype._onFilterTap = function(headerFilterBtn) {
      var filterPopup;
      filterPopup = new ListPopup(ContactsFilter.resources(), this.currentFilter);
      filterPopup.bind('onPopupItemSelected', (function(_this) {
        return function(selectedItem) {
          _this.currentFilter = selectedItem.model;
          headerFilterBtn.updateTitle(_this.currentFilter.description);
          _this.dismissModalController();
          return _this._resetTable();
        };
      })(this));
      return this.presentModalController(filterPopup);
    };

    Contacts.prototype.reload = function() {
      var ref;
      return (ref = this.tableController) != null ? ref.reload() : void 0;
    };

    Contacts.prototype._resetTable = function() {
      return this.tableController.resetAndActive({
        search: this.search.getValue()
      });
    };

    Contacts.prototype._onSearchChanged = function(value) {
      return this.tableController.filterBy(value);
    };

    Contacts.prototype._resetSearch = function() {
      return this.tableController.resetAndActive();
    };

    Contacts.prototype._initContent = function() {
      this.tableController = new LazyTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    Contacts.prototype._displayContactsCount = function(collection) {
      if (!collection) {
        return;
      }
      return collection.count().then((function(_this) {
        return function(count) {
          return _this.headerControl.setTitle((_this._headerTitle()) + " (" + count + ")");
        };
      })(this));
    };

    Contacts.prototype.createCollection = function() {
      var collection;
      collection = (function() {
        var ref;
        switch ((ref = this.currentFilter) != null ? ref.id : void 0) {
          case ContactsFilter.targetContacts().id:
            return new TargetReferencesCollection;
          case ContactsFilter.nonTargetContacts().id:
            return new NonTargetReferencesCollection;
          default:
            return new TargetReferencesCollection;
        }
      }).call(this);
      this._displayContactsCount(collection);
      return collection;
    };

    Contacts.prototype.createTableHeaderItemsForModel = function(model) {
      return [new SortingTableHeaderItem(Locale.value('common:names.Contact'), model.sfdc.contactLastName, model.sfdc.contactFirstName), new SortingTableHeaderItem(Locale.value('common:names.Priority'), 'priority'), new SortingTableHeaderItem(Locale.value('common:names.Specialty'), 'abbottSpecialty'), new SortingTableHeaderItem(Locale.value('common:names.AtCalls'), 'atCalls'), new SortingTableHeaderItem(Locale.value('common:names.LastCall'), 'lastCall'), new SortingTableHeaderItem(Locale.value('common:names.Organization'), model.sfdc.organizationName, model.sfdc.id), new TableHeaderItem(Locale.value('common:names.Appt')), new TableHeaderItem(Locale.value('common:names.Call'))];
    };

    Contacts.prototype.cellForObjectOnTable = function(object, table) {
      var contactsTableCell;
      contactsTableCell = new ContactsTableCell(object);
      contactsTableCell.on('cellTap', this._onCellTap);
      contactsTableCell.on('cellHold', this._onCellHold);
      contactsTableCell.on('organizationCellTap', this._onOrganizationCellTap);
      contactsTableCell.on('apptTap', this._onApptTap);
      contactsTableCell.on('callReportTap', this._onCallReportTap);
      return contactsTableCell;
    };

    Contacts.prototype._onOrganizationCellTap = function(cell) {
      return this.stage.push(new OrganizationCard(cell.reference.organizationSfId));
    };

    Contacts.prototype._onCellTap = function(cell) {
      return this.stage.push(new ContactCard(cell.reference.contactSfId));
    };

    Contacts.prototype._onCellHold = function(cell) {
      var listPopup;
      listPopup = new ListPopup(this.popupDatasource, null, Locale.value('createActivityPopup.Caption'));
      listPopup.customStyleClass('no-checkbox');
      listPopup.on('onPopupItemSelected', (function(_this) {
        return function(selectedItem) {
          if (selectedItem.id === _this.TYPE_APPOINTMENT) {
            _this.stage.push(new AppointmentCard(cell.reference.id));
          } else {
            _this.stage.push(new CallReportCard(cell.reference.id));
          }
          return _this.dismissModalController();
        };
      })(this));
      return this.presentModalController(listPopup);
    };

    Contacts.prototype._onApptTap = function(cell) {
      return this.stage.push(new AppointmentCard(cell.reference.id));
    };

    Contacts.prototype._onCallReportTap = function(cell) {
      return this.stage.push(new CallReportCard(cell.reference.id));
    };

    return Contacts;

  })(RootPanelScreen);

  module.exports = Contacts;

}).call(this);
}, "controllers/helpdesk/helpdesk": function(exports, require, module) {(function() {
  var AlertPopup, ConfirmationPopup, DatabaseManager, DeviceManager, Header, Helpdesk, LogManager, PendingPopup, PresentationFileManager, Spine, ViewLog,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  DeviceManager = require('common/device-manager');

  DatabaseManager = require('db/database-manager');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  AlertPopup = require('controls/popups/alert-popup');

  PendingPopup = require('controls/popups/pending-popup');

  LogManager = require('common/log-manager');

  Header = require('controls/header/header');

  ViewLog = require('controllers/helpdesk/view-log');

  PresentationFileManager = require('common/presentation-managers/presentations-file-manager');

  Helpdesk = (function(superClass) {
    extend(Helpdesk, superClass);

    function Helpdesk() {
      this._sendLog = bind(this._sendLog, this);
      this._viewLog = bind(this._viewLog, this);
      this._dropDatabase = bind(this._dropDatabase, this);
      this._makeCall = bind(this._makeCall, this);
      this._onBackButton = bind(this._onBackButton, this);
      return Helpdesk.__super__.constructor.apply(this, arguments);
    }

    Helpdesk.prototype.className = 'helpdesk stack-page flex-box';

    Helpdesk.prototype.elements = {
      '.data-container': 'dataContainer',
      '.helpdesk-container': 'helpdeskContainer'
    };

    Helpdesk.prototype.events = {
      'tap .call': '_makeCall',
      'tap .clear-data': '_dropDatabase',
      'tap .action.view-log': '_viewLog',
      'tap .send-log': '_sendLog'
    };

    Helpdesk.prototype.template = function() {
      return require('views/helpdesk/helpdesk')();
    };

    Helpdesk.prototype.active = function() {
      Helpdesk.__super__.active.apply(this, arguments);
      document.addEventListener('backbutton', this._onBackButton, false);
      return this.render();
    };

    Helpdesk.prototype.deactivate = function() {
      Helpdesk.__super__.deactivate.apply(this, arguments);
      return document.removeEventListener('backbutton', this._onBackButton, false);
    };

    Helpdesk.prototype.render = function() {
      this.phoneNumber = Locale.value('helpdesk.PhoneNumber');
      this._renderHeader();
      this.append(this.template());
      this._renderDeviceInfo();
      this._initViewLog();
      Locale.localize(this.el);
      return this;
    };

    Helpdesk.prototype._renderHeader = function() {
      this.header = new Header(Locale.value('helpdesk.HeaderTitle'));
      this.header.on('backbutton', this._onBackButton);
      this.html(this.header);
      return this.header.render();
    };

    Helpdesk.prototype._onBackButton = function() {
      return this.navigate('/home');
    };

    Helpdesk.prototype._getDeviceData = function() {
      return {
        id: DeviceManager.deviceId(),
        appVersion: DeviceManager.appVersion(),
        osVersion: DeviceManager.osVersion(),
        model: DeviceManager.deviceModel()
      };
    };

    Helpdesk.prototype._renderInformationPanel = function() {
      var deviceInfo, informationTemplate;
      deviceInfo = this._getDeviceData();
      informationTemplate = require('views/helpdesk/information-panel')({
        device: deviceInfo
      });
      this.append(informationTemplate);
      return this;
    };

    Helpdesk.prototype._renderDeviceInfo = function() {
      var deviceInfo, deviceInfoTemplate;
      deviceInfo = this._getDeviceData();
      deviceInfoTemplate = require('views/helpdesk/device-info')({
        device: deviceInfo
      });
      return this.dataContainer.append(deviceInfoTemplate);
    };

    Helpdesk.prototype._initViewLog = function() {
      this.viewLog = new ViewLog();
      return this.dataContainer.append(this.viewLog.el);
    };

    Helpdesk.prototype._makeCall = function() {
      if (window.device) {
        if (window.device.platform.toLowerCase() === 'android') {
          return document.location.href = "tel:" + this.phoneNumber;
        } else {
          return window.plugins.phoneDialer.dial(this.phoneNumber, function(resultCode) {
            var alertPopup;
            alertPopup = new AlertPopup({
              caption: Locale.value("helpdesk.NotSupportedPopup.Caption"),
              message: Locale.value("helpdesk.NotSupportedPopup.Message")
            });
            alertPopup.bind('yesClicked', alertPopup.hide);
            return alertPopup.show();
          });
        }
      } else {
        return console.log("Make call to: " + this.phoneNumber);
      }
    };

    Helpdesk.prototype._dropDatabase = function() {
      var dropConfirm;
      dropConfirm = new ConfirmationPopup({
        caption: Locale.value('helpdesk.ConfirmationPopup.Caption'),
        message: Locale.value('helpdesk.ConfirmationPopup.Question')
      });
      dropConfirm.bind('noClicked', (function(_this) {
        return function(popup) {
          return popup.hide();
        };
      })(this));
      dropConfirm.bind('yesClicked', (function(_this) {
        return function(popup) {
          popup.hide();
          return _this._onDropDatabase();
        };
      })(this));
      return dropConfirm.show();
    };

    Helpdesk.prototype._onDropDatabase = function() {
      var pendingPopup;
      pendingPopup = new PendingPopup(Locale.value('helpdesk.ClearingDatabaseMessage'));
      pendingPopup.show();
      return setTimeout((function(_this) {
        return function() {
          var dbManager;
          dbManager = new DatabaseManager;
          return dbManager.clearDatabase().then(function() {
            pendingPopup.hide();
            return Spine.trigger('databaseCleared');
          });
        };
      })(this), 400);
    };

    Helpdesk.prototype._viewLog = function() {
      return this.helpdeskContainer.toggleClass('view-log-active');
    };

    Helpdesk.prototype._sendLog = function() {
      return LogManager.sendLogToSf();
    };

    return Helpdesk;

  })(Spine.Controller);

  module.exports = Helpdesk;

}).call(this);
}, "controllers/helpdesk/view-log": function(exports, require, module) {(function() {
  var Spine, SyncLogManager, ViewLog,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  SyncLogManager = require('common/log-manager');

  ViewLog = (function(superClass) {
    extend(ViewLog, superClass);

    ViewLog.prototype.className = 'view-log';

    function ViewLog() {
      this._renderLogData = bind(this._renderLogData, this);
      this._getLogData = bind(this._getLogData, this);
      this.render = bind(this.render, this);
      ViewLog.__super__.constructor.apply(this, arguments);
      this._getLogData(this.render);
    }

    ViewLog.prototype.render = function(logData) {
      this._renderLogData(logData);
      return this;
    };

    ViewLog.prototype._getLogData = function(successCallback) {
      return SyncLogManager.getLastDebugLog().then(this.render);
    };

    ViewLog.prototype._renderLogData = function(logData) {
      var logViewTemplate;
      logData = logData ? logData.split(SyncLogManager.lineSeparator).join('<br/>') : '';
      logViewTemplate = require('views/helpdesk/view-log')({
        logData: logData
      });
      return this.html(logViewTemplate);
    };

    return ViewLog;

  })(Spine.Controller);

  module.exports = ViewLog;

}).call(this);
}, "controllers/home": function(exports, require, module) {(function() {
  var Alarm, AlarmManager, AlertPopup, AppointmentCardEdit, AppointmentsCollection, BottomMenu, ConfirmationPopup, DeviceCollection, FullscreenStage, Home, LanguagesFilter, ListPopup, Locale, NotificationsModule, Scenarios, SettingsManager, Spine, SyncLogManager, SyncManager, SyncPopup, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  SyncManager = require('sfdc/synchronisation/sync-manager');

  SyncPopup = require('controls/popups/sync-popup');

  Alarm = require('common/alarm/alarm');

  BottomMenu = require('controls/bottom-menu/bottom-menu');

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  Utils = require('common/utils');

  AlarmManager = require('common/alarm/alarm-manager');

  AlertPopup = require('controls/popups/alert-popup');

  AppointmentCardEdit = require('controllers/appointment-card/appointment-card-edit');

  FullscreenStage = require('controllers/base/stage/fullscreen-stage');

  NotificationsModule = require('common/notifications-module');

  Scenarios = require('controllers/agenda/scenarios');

  Locale = require('common/localization/locale');

  LanguagesFilter = require('common/localization/languages-filter');

  ListPopup = require('controls/popups/list-popup');

  SettingsManager = require('db/settings-manager');

  DeviceCollection = require('models/bll/device-collection');

  SettingsManager = require('db/settings-manager');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  SyncLogManager = require('common/log-manager');

  Home = (function(superClass) {
    extend(Home, superClass);

    Home.include(NotificationsModule);

    Home.prototype.CLOSEST_VISITS_NUMBER = 2;

    Home.prototype.className = 'home stack-page';

    Home.prototype.events = {
      'tap .contacts': '_openContacts',
      'tap .organizations': '_openOrganizations',
      'tap .activities': '_openActivities',
      'tap .tour-planning': '_openTourPlanning',
      'tap .tots': '_openTots',
      'tap .media': '_openMedia',
      'tap .sync': '_startSynchronisation',
      'tap .logo': '_toggleBottomMenu'
    };

    Home.prototype.elements = {
      '.closest-calls li': 'openCallButtons',
      '.media': 'elMedia',
      '.last-sync-date': 'elLastSyncDate'
    };

    Home.prototype.tabbar = null;

    Home.prototype.shouldDeferNotification = function(notification) {
      return false;
    };

    function Home() {
      this.reload = bind(this.reload, this);
      this._changeLanguage = bind(this._changeLanguage, this);
      this._resetTabbar = bind(this._resetTabbar, this);
      this._onSynchronisationFailed = bind(this._onSynchronisationFailed, this);
      this._onSynchronisationSucceeded = bind(this._onSynchronisationSucceeded, this);
      this._startSynchronisation = bind(this._startSynchronisation, this);
      this._hideBottomMenu = bind(this._hideBottomMenu, this);
      this._toggleBottomMenu = bind(this._toggleBottomMenu, this);
      this._openMedia = bind(this._openMedia, this);
      this._openTots = bind(this._openTots, this);
      this._openTourPlanning = bind(this._openTourPlanning, this);
      this._openActivities = bind(this._openActivities, this);
      this._openOrganizations = bind(this._openOrganizations, this);
      this._openContacts = bind(this._openContacts, this);
      this._openPanelInFullScreenStage = bind(this._openPanelInFullScreenStage, this);
      this._openDynamicAgenda = bind(this._openDynamicAgenda, this);
      this._openCall = bind(this._openCall, this);
      this._renderClosestVisits = bind(this._renderClosestVisits, this);
      this._getClosestVisits = bind(this._getClosestVisits, this);
      this._loadAppointmentFromNotification = bind(this._loadAppointmentFromNotification, this);
      this._showMedia = bind(this._showMedia, this);
      this._hideMedia = bind(this._hideMedia, this);
      this._showAgenda = bind(this._showAgenda, this);
      this._hideAgenda = bind(this._hideAgenda, this);
      this._updateMediaAndAgendaDisplay = bind(this._updateMediaAndAgendaDisplay, this);
      this._refreshOnResume = bind(this._refreshOnResume, this);
      this.shouldDeferNotification = bind(this.shouldDeferNotification, this);
      Home.__super__.constructor.apply(this, arguments);
      AlarmManager.scheduleNextVisits();
      document.addEventListener('resume', this._refreshOnResume, false);
      this.subscribeOnNotification('appointmentChanged', this._getClosestVisits);
      this.subscribeOnNotification('databaseCleared', this._resetTabbar);
      this.bottomMenuPanel = new BottomMenu;
    }

    Home.prototype.deactivate = function() {
      Home.__super__.deactivate.apply(this, arguments);
      return document.removeEventListener('menubutton', this._toggleBottomMenu, false);
    };

    Home.prototype.activate = function() {
      Home.__super__.activate.apply(this, arguments);
      return document.addEventListener('menubutton', this._toggleBottomMenu, false);
    };

    Home.prototype.active = function() {
      Home.__super__.active.apply(this, arguments);
      this.render();
      if (Utils.isIOS()) {
        this._loadAppointmentFromNotification();
      }
      if (Utils.isDevice()) {
        return this._getClosestVisits();
      }
    };

    Home.prototype._refreshOnResume = function() {
      this._loadAppointmentFromNotification();
      return this._getClosestVisits();
    };

    Home.prototype.render = function() {
      this.html(this.template());
      this._setLastSyncDate();
      this._updateMediaAndAgendaDisplay();
      Locale.localize(this.el);
      this.el.bind('tap', this._hideBottomMenu);
      return this;
    };

    Home.prototype._setLastSyncDate = function() {
      return SettingsManager.getLastSucceededSyncDateTime().then((function(_this) {
        return function(date) {
          if (date) {
            return _this.elLastSyncDate.html((Locale.value('home.LastSyncDate')) + " " + (Utils.formatDateTime(date)));
          }
        };
      })(this));
    };

    Home.prototype._updateMediaAndAgendaDisplay = function() {
      SettingsManager.getValueByKey('isDynamicAgendaEnabled').then((function(_this) {
        return function(isAgendaEnabled) {
          if (isAgendaEnabled) {
            return _this._showAgenda();
          } else {
            return _this._hideAgenda();
          }
        };
      })(this));
      return SettingsManager.getValueByKey('isEdetailingEnabled').then((function(_this) {
        return function(isEdetailingEnabled) {
          if (isEdetailingEnabled) {
            return _this._showMedia();
          } else {
            return _this._hideMedia();
          }
        };
      })(this));
    };

    Home.prototype._hideAgenda = function() {
      return this.bottomMenuPanel.hideAgenda();
    };

    Home.prototype._showAgenda = function() {
      return this.bottomMenuPanel.showAgenda();
    };

    Home.prototype._hideMedia = function() {
      return this.elMedia.css('display', 'none');
    };

    Home.prototype._showMedia = function() {
      return this.elMedia.css('display', '');
    };

    Home.prototype.template = function() {
      return require('views/home')();
    };

    Home.prototype._loadAppointmentFromNotification = function() {
      return AlarmManager.loadCallReport();
    };

    Home.prototype._getClosestVisits = function() {
      var appointmentsCollection;
      appointmentsCollection = new AppointmentsCollection({
        pageSize: this.CLOSEST_VISITS_NUMBER
      });
      return appointmentsCollection.fetchClosest().then((function(_this) {
        return function(response) {
          var closestVisits;
          closestVisits = _this._prepareLastVisits(response.records);
          return _this._renderClosestVisits(closestVisits);
        };
      })(this));
    };

    Home.prototype._prepareLastVisits = function(entities) {
      return entities.map((function(_this) {
        return function(entity) {
          return {
            id: entity.id,
            contactFullName: entity.contactFullName(),
            dateOfVisit: Utils.dotFormatDate(entity.dateTimeOfVisit),
            timeOfVisit: Utils.formatTime(entity.dateTimeOfVisit)
          };
        };
      })(this));
    };

    Home.prototype._renderClosestVisits = function(visitsData) {
      return _(this.CLOSEST_VISITS_NUMBER).times((function(_this) {
        return function(index) {
          var button, visitData;
          button = $(_this.openCallButtons[index]);
          visitData = visitsData[index];
          if (visitData) {
            button.addClass('show');
            button.find('.name').text(visitData.contactFullName);
            button.find('.day').text(visitData.dateOfVisit);
            button.find('.time').text(visitData.timeOfVisit);
            return button.unbind('tap').bind('tap', function() {
              return _this._openCall(visitData);
            });
          } else {
            button.removeClass('show');
            return button.unbind('tap');
          }
        };
      })(this));
    };

    Home.prototype._openCall = function(callItem) {
      return this._openPanelInFullScreenStage(new AppointmentCardEdit(callItem.id));
    };

    Home.prototype._openDynamicAgenda = function() {
      return this._openPanelInFullScreenStage(new Scenarios);
    };

    Home.prototype._openPanelInFullScreenStage = function(panel) {
      var stageController;
      stageController = new FullscreenStage;
      stageController.on('close', function() {
        return stageController.release();
      });
      stageController.setPanel(panel);
      return stageController.showInContext(this);
    };

    Home.prototype._openContacts = function() {
      return this.navigate('/tabbar/contacts');
    };

    Home.prototype._openOrganizations = function() {
      return this.navigate('/tabbar/organizations');
    };

    Home.prototype._openActivities = function() {
      return this.navigate('/tabbar/activities');
    };

    Home.prototype._openTourPlanning = function() {
      return this.navigate('/tabbar/tour-planning');
    };

    Home.prototype._openTots = function() {
      return this.navigate('/tabbar/tots');
    };

    Home.prototype._openMedia = function() {
      return this.navigate('/tabbar/media');
    };

    Home.prototype._toggleBottomMenu = function(event) {
      event.stopPropagation();
      this.bottomMenuPanel.toggle();
      this.bottomMenuPanel.unbind('openDynamicAgenda').bind('openDynamicAgenda', this._openDynamicAgenda);
      return this.bottomMenuPanel.unbind('changeLanguage').bind('changeLanguage', this._changeLanguage);
    };

    Home.prototype._hideBottomMenu = function() {
      return this.bottomMenuPanel.hide();
    };

    Home.prototype._startSynchronisation = function() {
      if (Utils.deviceIsOnline()) {
        AlarmManager.cancelNotification();
        return this._synchronise();
      } else {
        return this._showOfflineAlert();
      }
    };

    Home.prototype._synchronise = function() {
      var syncManager;
      syncManager = new SyncManager;
      this._syncPopup = new SyncPopup;
      this._syncPopup.show();
      return syncManager.startLoading((function(_this) {
        return function(status, percentage) {
          return _this._syncPopup.updateMessage(status, percentage);
        };
      })(this)).then(this._onSynchronisationSucceeded, this._onSynchronisationFailed);
    };

    Home.prototype._onSynchronisationSucceeded = function() {
      this._getClosestVisits();
      this._syncPopup.hide();
      this._updateMediaAndAgendaDisplay();
      this._resetTabbar();
      this._setLastSyncDate();
      return this._showSynchronisationSucceededAlert();
    };

    Home.prototype._showSynchronisationSucceededAlert = function() {
      var alertPopup;
      alertPopup = new AlertPopup({
        caption: Locale.value('synchronizationPopup.SynchronizationStatus'),
        message: Locale.value('synchronizationPopup.SynchronizationCompleted')
      });
      alertPopup.bind('yesClicked', alertPopup.hide);
      return alertPopup.show();
    };

    Home.prototype._onSynchronisationFailed = function(error) {
      this._syncPopup.hide();
      this._updateMediaAndAgendaDisplay();
      this._resetTabbar();
      return this._showSynchronisationFailedMessage();
    };

    Home.prototype._showSynchronisationFailedMessage = function() {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('synchronizationPopup.SynchronizationStatus'),
        message: Locale.value('synchronizationPopup.LogMessage.SendErrorReport', {
          postProcess: 'sprintf'
        })
      });
      confirm.bind('yesClicked', (function(_this) {
        return function() {
          SyncLogManager.sendLogToSf();
          return confirm.hide();
        };
      })(this));
      confirm.bind('noClicked', (function(_this) {
        return function() {
          return confirm.hide();
        };
      })(this));
      return confirm.show();
    };

    Home.prototype._showOfflineAlert = function() {
      var alertPopup;
      alertPopup = new AlertPopup({
        caption: Locale.value('home.AlertPopup.Caption'),
        message: Locale.value('home.AlertPopup.Message')
      });
      alertPopup.bind('yesClicked', alertPopup.hide);
      return alertPopup.show();
    };

    Home.prototype._resetTabbar = function() {
      return this.tabbar.reset();
    };

    Home.prototype._changeLanguage = function() {
      return Locale.currentLanguage().then((function(_this) {
        return function(lang) {
          var filterPopup, selectedItem;
          selectedItem = _(LanguagesFilter.resources()).findWhere({
            value: lang
          });
          filterPopup = new ListPopup(LanguagesFilter.resources(), selectedItem, Locale.value('homeMenu.Language'));
          filterPopup.bind('onPopupItemSelected', function(selectedItem) {
            filterPopup.hide();
            return Locale.setCurrentLanguage(selectedItem.value).then(_this.reload);
          });
          return filterPopup.show();
        };
      })(this));
    };

    Home.prototype.reload = function() {
      this.render();
      this._resetTabbar();
      return this._getClosestVisits();
    };

    return Home;

  })(Spine.Controller);

  module.exports = Home;

}).call(this);
}, "controllers/lazy-table-controller": function(exports, require, module) {(function() {
  var ActivityIndicator, LazyTableController, Spine, TableController, TableHeadersList, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ActivityIndicator = require('common/activity-indicator');

  TableHeadersList = require('controls/table/table-header/table-headers-list');

  TableController = require('controls/table/table-controller');

  Utils = require('common/utils');

  LazyTableController = (function(superClass) {
    extend(LazyTableController, superClass);

    LazyTableController.prototype.didRender = false;

    LazyTableController.prototype.spinner = null;

    LazyTableController.prototype.tableView = null;

    LazyTableController.prototype.collection = null;

    LazyTableController.prototype.tableHeader = null;

    LazyTableController.prototype.fetchResponse = null;

    LazyTableController.prototype.searchString = null;

    LazyTableController.prototype.cellsBatchSize = 100;

    LazyTableController.prototype.currentNumberOfRows = 100;

    LazyTableController.prototype.defaultBatchSize = 500;

    LazyTableController.prototype.defaultSortingHeader = null;

    LazyTableController.prototype._createTable = function() {
      return new TableController;
    };

    function LazyTableController() {
      this.cellForRowAtIndexForTable = bind(this.cellForRowAtIndexForTable, this);
      this._hasVerticalScrollBar = bind(this._hasVerticalScrollBar, this);
      this._updateTableHeaderClass = bind(this._updateTableHeaderClass, this);
      this._renderTableAfterFetching = bind(this._renderTableAfterFetching, this);
      this._sortBy = bind(this._sortBy, this);
      this._fetchAll = bind(this._fetchAll, this);
      this._filterAndSortBy = bind(this._filterAndSortBy, this);
      this._filterBy = bind(this._filterBy, this);
      this._androidRefresh = bind(this._androidRefresh, this);
      this._fetchMoreRecords = bind(this._fetchMoreRecords, this);
      this._onScroll = bind(this._onScroll, this);
      this._subscribeOnScroll = bind(this._subscribeOnScroll, this);
      this.getAllEntities = bind(this.getAllEntities, this);
      this.saveSortingHeader = bind(this.saveSortingHeader, this);
      LazyTableController.__super__.constructor.apply(this, arguments);
      this.spinner = new ActivityIndicator(this.el[0]);
      this._initCollection();
    }

    LazyTableController.prototype.active = function(params) {
      var ref, searchFilter;
      LazyTableController.__super__.active.apply(this, arguments);
      this._initCollection();
      searchFilter = (ref = params != null ? params.search : void 0) != null ? ref : null;
      if (!this.didRender) {
        this.searchString = searchFilter;
        return this.render();
      } else if (this._shouldSearchWithFilter(searchFilter)) {
        this.searchString = searchFilter;
        return this.reload();
      }
    };

    LazyTableController.prototype._initCollection = function() {
      var base, ref;
      this.collection = this.datasource.createCollection();
      return this.collection.pageSize = (ref = typeof (base = this.datasource).batchSize === "function" ? base.batchSize() : void 0) != null ? ref : this.defaultBatchSize;
    };

    LazyTableController.prototype.saveSortingHeader = function() {
      var ref;
      return this.defaultSortingHeader = (ref = this.tableHeader) != null ? ref.activeController : void 0;
    };

    LazyTableController.prototype._shouldSearchWithFilter = function(searchFilter) {
      return searchFilter && ((this.searchString && searchFilter.toLowerCase() !== this.searchString.toLowerCase()) || !this.searchString);
    };

    LazyTableController.prototype.getAllEntities = function() {
      return this.collection.getAllEntitiesFromResponse(this.fetchResponse);
    };

    LazyTableController.prototype.render = function() {
      this._initTableHeader();
      this._initTable();
      this.reload();
      this.didRender = true;
      return this;
    };

    LazyTableController.prototype._initTableHeader = function() {
      var tableHeaderItems;
      tableHeaderItems = this.datasource.createTableHeaderItemsForModel(this.collection.model);
      if ((tableHeaderItems != null ? tableHeaderItems.length : void 0) > 0) {
        this.tableHeader = new TableHeadersList(tableHeaderItems, this.defaultSortingHeader);
        this.tableHeader.on('headerItemTap', (function(_this) {
          return function(headerItem) {
            return _this.reload();
          };
        })(this));
        return this.append(this.tableHeader.el);
      }
    };

    LazyTableController.prototype._initTable = function() {
      this.tableView = this._createTable();
      this.tableView.datasource = this;
      this.append(this.tableView.render().el);
      return this._subscribeOnScroll();
    };

    LazyTableController.prototype._subscribeOnScroll = function() {
      var scroll;
      scroll = this.tableView.el[0];
      return jQuery(scroll).on('scroll', (function(_this) {
        return function(e) {
          return _this._onScroll(scroll);
        };
      })(this));
    };

    LazyTableController.prototype._onScroll = function(scroll) {
      if (this._isScrollNearBottom(scroll)) {
        if (this._isHavingMoreFetchedRecords()) {
          return this._renderMoreCells();
        } else {
          return this._fetchMoreRecords();
        }
      }
    };

    LazyTableController.prototype._isScrollNearBottom = function(scroll) {
      return scroll.scrollHeight - scroll.scrollTop < 3000;
    };

    LazyTableController.prototype._isHavingMoreFetchedRecords = function() {
      return this.currentNumberOfRows <= this.fetchResponse.records.length;
    };

    LazyTableController.prototype._renderMoreCells = function() {
      this.spinner.show();
      return setTimeout((function(_this) {
        return function() {
          _this.currentNumberOfRows += _this.cellsBatchSize;
          _this.tableView.refresh();
          _this.spinner.hide();
          if (!Utils.isIOS()) {
            return _this._androidRefresh();
          }
        };
      })(this), 50);
    };

    LazyTableController.prototype._fetchMoreRecords = function() {
      if (this.fetchResponse.hasMore()) {
        this.spinner.show();
        return setTimeout((function(_this) {
          return function() {
            return _this.collection.getMoreEntitiesFromResponse(_this.fetchResponse).then(function(fetchResponse) {
              _this.fetchResponse = fetchResponse;
              _this.tableView.refresh();
              _this.spinner.hide();
              if (!Utils.isIOS()) {
                return _this._androidRefresh();
              }
            });
          };
        })(this), 100);
      }
    };

    LazyTableController.prototype._androidRefresh = function() {
      $('#abbottMobile').height($(window).height());
      return setTimeout(((function(_this) {
        return function() {
          return $('#abbottMobile')[0].style.height = '';
        };
      })(this)), 0);
    };

    LazyTableController.prototype.reset = function() {
      var ref;
      this.saveSortingHeader();
      this.currentNumberOfRows = 100;
      this.didRender = false;
      this.fetchResponse = null;
      if ((ref = this.tableView) != null) {
        ref.listView.remove();
      }
      return this._clearView();
    };

    LazyTableController.prototype.resetAndActive = function(params) {
      this.reset();
      return this.active(params);
    };

    LazyTableController.prototype._clearView = function() {
      return this.html('');
    };

    LazyTableController.prototype.filterBy = function(searchString) {
      this.searchString = searchString;
      return this.reload();
    };

    LazyTableController.prototype.reload = function() {
      return this._renderTableAfterFetching((function(_this) {
        return function() {
          var ref, ref1, ref2;
          if (((ref = _this.tableHeader) != null ? ref.activeController : void 0) && !_this.searchString) {
            return _this._sortBy(_this.tableHeader.activeController.fields, _this.tableHeader.activeController.isAsc);
          } else if (((ref1 = _this.tableHeader) != null ? ref1.activeController : void 0) && _this.searchString) {
            return _this._filterAndSortBy(_this.searchString, _this.tableHeader.activeController.fields, _this.tableHeader.activeController.isAsc);
          } else if (!((ref2 = _this.tableHeader) != null ? ref2.activeController : void 0) && _this.searchString) {
            return _this._filterBy(_this.searchString);
          } else {
            return _this._fetchAll();
          }
        };
      })(this));
    };

    LazyTableController.prototype._filterBy = function(searchString) {
      var field, fieldsValues, i, len, ref;
      this.searchString = searchString;
      fieldsValues = {};
      ref = this.collection.model.searchFields;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        fieldsValues[field] = this.searchString;
      }
      return this.collection.fetchAllLike(fieldsValues);
    };

    LazyTableController.prototype._filterAndSortBy = function(searchString, fields, isAsc) {
      var field, fieldsValues, i, len, ref;
      this.searchString = searchString;
      fieldsValues = {};
      ref = this.collection.model.searchFields;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        fieldsValues[field] = this.searchString;
      }
      return this.collection.fetchAllLikeAndSortBy(fieldsValues, fields, isAsc);
    };

    LazyTableController.prototype._fetchAll = function() {
      return this.collection.fetchAll();
    };

    LazyTableController.prototype._sortBy = function(fields, isAsc) {
      return this.collection.fetchAllSortedBy(fields, isAsc);
    };

    LazyTableController.prototype._renderTableAfterFetching = function(fetchingFn) {
      this.spinner.show();
      return setTimeout((function(_this) {
        return function() {
          return fetchingFn().done(function(fetchResponse) {
            _this.fetchResponse = fetchResponse;
            _this.tableView.render();
            _this._updateTableHeaderClass();
            _this.spinner.hide();
            if (!Utils.isIOS()) {
              return _this._androidRefresh();
            }
          }).fail(function(err) {
            _this.spinner.hide();
            if (!Utils.isIOS()) {
              _this._androidRefresh();
            }
            return alert("Error fetching records:\n " + (JSON.stringify(err)));
          });
        };
      })(this), 100);
    };

    LazyTableController.prototype._updateTableHeaderClass = function() {
      var ref;
      return (ref = this.tableHeader) != null ? ref.el[this._hasVerticalScrollBar() ? 'addClass' : 'removeClass']('content-has-scroll') : void 0;
    };

    LazyTableController.prototype._hasVerticalScrollBar = function() {
      if (this.tableView.el.get(0)) {
        return this.tableView.el.get(0).scrollHeight > this.tableView.el.innerHeight();
      } else {
        return false;
      }
    };

    LazyTableController.prototype.cellForRowAtIndexForTable = function(index, table) {
      return this.datasource.cellForObjectOnTable(this.fetchResponse.records[index], table);
    };

    LazyTableController.prototype.numberOfRowsForTable = function(table) {
      if (this.datasource.numberOfRowsForTable != null) {
        return this.datasource.numberOfRowsForTable(table);
      } else {
        if (this.fetchResponse && this.fetchResponse.records.length > 0) {
          return Math.min(this.currentNumberOfRows, this.fetchResponse.records.length);
        }
      }
    };

    return LazyTableController;

  })(Spine.Controller);

  module.exports = LazyTableController;

}).call(this);
}, "controllers/main": function(exports, require, module) {(function() {
  var Helpdesk, Home, Main, Spine, TabbarController, Touchy,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Touchy = require('common/touchy');

  Home = require('controllers/home');

  Helpdesk = require('controllers/helpdesk/helpdesk');

  TabbarController = require('controllers/tabbar/tabbar-controller');

  Main = (function(superClass) {
    extend(Main, superClass);

    Main.prototype.className = 'main-stack stack-page';

    Main.prototype.controllers = {
      home: Home,
      helpdesk: Helpdesk,
      tabbar: TabbarController
    };

    Main.prototype["default"] = 'home';

    Main.prototype.routes = {
      '/home': 'home',
      '/helpdesk': 'helpdesk',
      '/tabbar/:tabName': 'tabbar'
    };

    function Main() {
      Main.__super__.constructor.apply(this, arguments);
      this.home.tabbar = this.tabbar;
      Spine.Route.setup();
    }

    return Main;

  })(Spine.Stack);

  module.exports = Main;

}).call(this);
}, "controllers/media/media-buttons-stack": function(exports, require, module) {(function() {
  var Button, DoneIcon, MediaButtonsStack, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Spine = require('spine');

  Button = require('controls/button/button');

  DoneIcon = (function(superClass) {
    extend(DoneIcon, superClass);

    function DoneIcon() {
      return DoneIcon.__super__.constructor.apply(this, arguments);
    }

    DoneIcon.prototype.className = 'done-icon';

    return DoneIcon;

  })(Spine.Controller);

  MediaButtonsStack = (function(superClass) {
    extend(MediaButtonsStack, superClass);

    function MediaButtonsStack() {
      this.cancelTap = bind(this.cancelTap, this);
      this.updateTap = bind(this.updateTap, this);
      this.downloadTap = bind(this.downloadTap, this);
      return MediaButtonsStack.__super__.constructor.apply(this, arguments);
    }

    MediaButtonsStack.prototype.className = 'media-buttons-stack';

    MediaButtonsStack.prototype.controllers = {
      download: Button,
      update: Button,
      cancel: Button,
      doneIcon: DoneIcon
    };

    MediaButtonsStack.prototype["default"] = 'download';

    MediaButtonsStack.prototype.render = function() {
      this.download.setTitle(Locale.value('common:buttons.Download'));
      this.update.setTitle(Locale.value('common:buttons.Update'));
      return this.cancel.setTitle(Locale.value('common:buttons.Cancel'));
    };

    MediaButtonsStack.prototype.bindStackControllersEvents = function() {
      this.download.el.on('tap', this.downloadTap);
      this.update.el.on('tap', this.updateTap);
      return this.cancel.el.on('tap', this.cancelTap);
    };

    MediaButtonsStack.prototype.downloadTap = function(event) {
      this._stopEvent(event);
      return this.trigger('download');
    };

    MediaButtonsStack.prototype.updateTap = function(event) {
      this._stopEvent(event);
      return this.trigger('update');
    };

    MediaButtonsStack.prototype.cancelTap = function(event) {
      this._stopEvent(event);
      return this.trigger('cancel');
    };

    MediaButtonsStack.prototype._stopEvent = function(event) {
      event.stopPropagation();
      return event.preventDefault();
    };

    MediaButtonsStack.prototype.activateCancelBtn = function() {
      return this.cancel.active();
    };

    MediaButtonsStack.prototype.activateDownloadBtn = function() {
      return this.download.active();
    };

    MediaButtonsStack.prototype.activateUpdateBtn = function() {
      return this.update.active();
    };

    MediaButtonsStack.prototype.activateDoneIcon = function() {
      return this.doneIcon.active();
    };

    return MediaButtonsStack;

  })(Spine.Stack);

  module.exports = MediaButtonsStack;

}).call(this);
}, "controllers/media/media-table-cell": function(exports, require, module) {(function() {
  var MediaButtonsStack, MediaTableCell, PresentationLoader, PresentationsCollection, PresentationsFileManager, PresentationsLoadManager, ProgressBar, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  MediaButtonsStack = require('controllers/media/media-buttons-stack');

  PresentationsLoadManager = require('common/presentation-managers/presentations-load-manager');

  ProgressBar = require('controls/progress-bar/progress-bar');

  PresentationLoader = require('common/presentation-managers/presentation-loader');

  PresentationsCollection = require('models/bll/presentations-collection');

  PresentationsFileManager = require('common/presentation-managers/presentations-file-manager');

  Utils = require('common/utils');

  MediaTableCell = (function(superClass) {
    extend(MediaTableCell, superClass);

    MediaTableCell.prototype.className = 'row';

    MediaTableCell.prototype.elements = {
      '.buttons-panel': 'elButtons',
      '.progress-bar': 'elProgress',
      '.current-size': 'elCurrentSize',
      '.total-size': 'elTotalSize',
      '.icon': 'elIcon',
      '.currentVersion': 'elCurrentVersion'
    };

    MediaTableCell.prototype.states = {
      INITED: 0,
      DOWNLOADING: 1,
      DOWNLOADED: 2
    };

    function MediaTableCell(presentation) {
      this.presentation = presentation;
      this._onStateChange = bind(this._onStateChange, this);
      this._onFail = bind(this._onFail, this);
      this._updatePresentationState = bind(this._updatePresentationState, this);
      this._onSuccess = bind(this._onSuccess, this);
      this._cancel = bind(this._cancel, this);
      this._resetProgressValues = bind(this._resetProgressValues, this);
      this._download = bind(this._download, this);
      this._rowTap = bind(this._rowTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      MediaTableCell.__super__.constructor.call(this, {});
      this.collection = new PresentationsCollection;
    }

    MediaTableCell.prototype.render = function() {
      this.html(this.template());
      this._initButtons();
      return this._fillData();
    };

    MediaTableCell.prototype.template = function() {
      return require('views/media/media-table-cell')({
        presentation: this.presentation
      });
    };

    MediaTableCell.prototype._initButtons = function() {
      this.mediaButtonsStack = new MediaButtonsStack;
      this.elButtons.append(this.mediaButtonsStack.el);
      return this.mediaButtonsStack.render();
    };

    MediaTableCell.prototype._fillData = function() {
      this.loader = PresentationsLoadManager.getLoaderForId(this.presentation.id);
      if (this.loader) {
        return this._showLoaderProgress();
      } else {
        return this._showState();
      }
    };

    MediaTableCell.prototype.bindEvents = function() {
      this.el.on('tap', this._rowTap);
      this.mediaButtonsStack.on('download', this._download);
      this.mediaButtonsStack.on('update', this._download);
      this.mediaButtonsStack.on('cancel', this._cancel);
      return this.mediaButtonsStack.bindStackControllersEvents();
    };

    MediaTableCell.prototype._rowTap = function() {
      return this.trigger('willOpenPresentation', this.presentation.id);
    };

    MediaTableCell.prototype._setState = function(state) {
      this.state = state;
      this.el.attr('class', this.className);
      switch (this.state) {
        case this.states.INITED:
          this.el.addClass('inited');
          this._resetProgressValues();
          return this.mediaButtonsStack.activateDownloadBtn();
        case this.states.DOWNLOADING:
          return this.el.addClass('downloading');
        case this.states.DOWNLOADED:
          this.el.addClass('downloaded');
          return this.mediaButtonsStack.activateDoneIcon();
      }
    };

    MediaTableCell.prototype._showProgressBar = function() {
      this.progressBar = new ProgressBar;
      this.elProgress.html(this.progressBar.el);
      return this.mediaButtonsStack.activateCancelBtn();
    };

    MediaTableCell.prototype._showDownloadingProgress = function() {
      this._showProgressBar();
      return this._setState(this.states.DOWNLOADING);
    };

    MediaTableCell.prototype._showState = function() {
      if (this.presentation.wasDownloaded()) {
        this._setState(this.states.DOWNLOADED);
        if (this.presentation.hasUpdate()) {
          return this.mediaButtonsStack.activateUpdateBtn();
        }
      } else {
        return this._setState(this.states.INITED);
      }
    };

    MediaTableCell.prototype._showLoaderProgress = function() {
      switch (this.loader.state) {
        case PresentationLoader.states.DOWNLOAD:
          return this._continueDownload();
        case PresentationLoader.states.UNZIP:
          return this._unzip();
        case PresentationLoader.states.FINISHED:
          return this._setState(this.states.DOWNLOADED);
      }
    };

    MediaTableCell.prototype._unzip = function() {
      this._showDownloadingProgress();
      this.progressBar.setValue(100);
      this.elCurrentSize.html((Math.round(this.loader.fileSize / 1024 / 1024 * 10) / 10).toFixed(1));
      this.elTotalSize.html((Math.round(this.loader.fileSize / 1024 / 1024 * 10) / 10).toFixed(1));
      this.loader.onSuccess = this._onSuccess;
      return this.loader.onFail = this._onFail;
    };

    MediaTableCell.prototype._continueDownload = function() {
      this._showDownloadingProgress();
      this.progressBar.setValue(Math.round(this.loader.loadedSize / this.loader.fileSize * 100), true);
      this.loader.onStateChange = this._onStateChange;
      this.loader.onSuccess = this._onSuccess;
      return this.loader.onFail = this._onFail;
    };

    MediaTableCell.prototype._download = function() {
      if (Utils.deviceIsOnline()) {
        this._resetProgressValues();
        PresentationsLoadManager.queueInvoke(this.presentation.id, this.presentation.url, {
          onStateChange: this._onStateChange,
          onSuccess: this._onSuccess,
          onFail: this._onFail
        });
        return this._showDownloadingProgress();
      } else {
        return this._throwError(Locale.value('home.AlertPopup.Caption'), Locale.value('home.AlertPopup.Message'));
      }
    };

    MediaTableCell.prototype._resetProgressValues = function() {
      this.elCurrentSize.html('0.0');
      return this.elTotalSize.html('');
    };

    MediaTableCell.prototype._cancel = function() {
      if (PresentationsLoadManager.dequeueInvoke(this.presentation.id)) {
        return this._fillData();
      }
    };

    MediaTableCell.prototype._onSuccess = function() {
      var iconPath;
      this.presentation.currentVersion = this.presentation.availableVersion;
      iconPath = PresentationsFileManager.getPathToPresentation(this.presentation.id) + "/" + this.presentation.iconName;
      return PresentationsFileManager.pathExist(this.presentation.id + "/" + this.presentation.iconName).done((function(_this) {
        return function() {
          _this.presentation.iconPath = iconPath;
          return _this._updatePresentationState();
        };
      })(this)).fail(this._updatePresentationState);
    };

    MediaTableCell.prototype._updatePresentationState = function() {
      this.elIcon.attr('src', this.presentation.iconPath);
      this.collection.updateEntity(this.presentation);
      this.elCurrentVersion.html(this.presentation.currentVersion);
      return this._setState(this.states.DOWNLOADED);
    };

    MediaTableCell.prototype._onFail = function(error) {
      switch (error.code) {
        case FileTransferError.CONNECTION_ERR:
          console.log('Error whle downloading presentation');
          this._throwError(Locale.value('Media.DownloadPresentationErrorCaption'), Locale.value('Media.DownloadPresentationErrorMessage'));
          break;
        case FileTransferError.ABORT_ERR:
          console.log('abort');
      }
      return this._fillData();
    };

    MediaTableCell.prototype._throwError = function(caption, message) {
      var error;
      error = {
        caption: caption,
        message: message
      };
      return this.trigger('сellError', error);
    };

    MediaTableCell.prototype._onStateChange = function(state, progress) {
      if (state === PresentationLoader.states.DOWNLOAD) {
        this.progressBar.setValue(Math.round(progress.current / progress.total * 100));
        this.elCurrentSize.html((Math.round(progress.current / 1024 / 1024 * 10) / 10).toFixed(1));
        return this.elTotalSize.html((Math.round(progress.total / 1024 / 1024 * 10) / 10).toFixed(1));
      }
    };

    return MediaTableCell;

  })(Spine.Controller);

  module.exports = MediaTableCell;

}).call(this);
}, "controllers/media/media": function(exports, require, module) {(function() {
  var AlertPopup, BaseHeader, HeaderBaseControl, LazyTableController, Media, MediaTableCell, PresentationViewer, PresentationsCollection, PresentationsFileManager, PresentationsLoadManager, RootPanelScreen, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RootPanelScreen = require('controllers/base/panel/root-panel-screen');

  PresentationsCollection = require('models/bll/presentations-collection');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  BaseHeader = require('controls/header/base-header');

  AlertPopup = require('controls/popups/alert-popup');

  LazyTableController = require('controllers/lazy-table-controller');

  MediaTableCell = require('controllers/media/media-table-cell');

  PresentationsLoadManager = require('common/presentation-managers/presentations-load-manager');

  PresentationsFileManager = require('common/presentation-managers/presentations-file-manager');

  PresentationViewer = require('controllers/presentation-viewer/presentation-viewer');

  Utils = require('common/utils');

  Media = (function(superClass) {
    extend(Media, superClass);

    function Media() {
      this._openPresentation = bind(this._openPresentation, this);
      this._showErrorPopup = bind(this._showErrorPopup, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this._downloadAll = bind(this._downloadAll, this);
      return Media.__super__.constructor.apply(this, arguments);
    }

    Media.prototype.className = 'media table-view';

    Media.prototype.active = function() {
      Media.__super__.active.apply(this, arguments);
      this._initHeader();
      return this._initContent();
    };

    Media.prototype._initHeader = function() {
      var downloadAllBtn, mediaHeader;
      downloadAllBtn = new HeaderBaseControl(Locale.value('common:buttons.DownloadAll'), 'ctrl-btn');
      downloadAllBtn.bind('tap', this._downloadAll);
      mediaHeader = new BaseHeader(Locale.value('Media.HeaderTitle'));
      mediaHeader.render();
      mediaHeader.addRightControlElement(downloadAllBtn.el);
      return this.setHeader(mediaHeader);
    };

    Media.prototype._downloadAll = function() {
      if (!Utils.deviceIsOnline()) {
        return this._showErrorPopup({
          caption: Locale.value('home.AlertPopup.Caption'),
          message: Locale.value('home.AlertPopup.Message')
        });
      } else {
        return this.tableController.getAllEntities().then((function(_this) {
          return function(presentations) {
            var i, len, presentation;
            for (i = 0, len = presentations.length; i < len; i++) {
              presentation = presentations[i];
              if (presentation.hasUpdate() || !presentation.wasDownloaded()) {
                PresentationsLoadManager.queueInvoke(presentation.id, presentation.url);
              }
            }
            return _this.tableController.reload();
          };
        })(this));
      }
    };

    Media.prototype._initContent = function() {
      this.tableController = new LazyTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    Media.prototype.createCollection = function() {
      return new PresentationsCollection;
    };

    Media.prototype.createTableHeaderItemsForModel = function(model) {
      return null;
    };

    Media.prototype.cellForObjectOnTable = function(presentation, table) {
      var presentationTableCell;
      presentationTableCell = new MediaTableCell(presentation);
      presentationTableCell.on('сellError', this._showErrorPopup);
      presentationTableCell.on('willOpenPresentation', this._openPresentation);
      return presentationTableCell;
    };

    Media.prototype._showErrorPopup = function(error) {
      var alertPopup;
      alertPopup = new AlertPopup({
        caption: error.caption,
        message: error.message
      });
      alertPopup.bind('yesClicked', this.dismissModalController);
      alertPopup.bind('hide', this.dismissModalController);
      return this.presentModalController(alertPopup);
    };

    Media.prototype._openPresentation = function(presentationId) {
      return PresentationsFileManager.presentationExist(presentationId).then(function() {
        var presentationViewer;
        presentationViewer = new PresentationViewer(presentationId);
        presentationViewer.on('complete', function() {
          return presentationViewer.closePresentation();
        });
        return presentationViewer.openPresentation();
      });
    };

    return Media;

  })(RootPanelScreen);

  module.exports = Media;

}).call(this);
}, "controllers/organization-card/organization-card-activities-table-cell": function(exports, require, module) {(function() {
  var CallReport, CallReportPickListManager, OrganizationCardActivitiesTableCell, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  CallReport = require('models/call-report');

  CallReportPickListManager = require('db/picklist-managers/callreport-picklist-manager');

  OrganizationCardActivitiesTableCell = (function(superClass) {
    extend(OrganizationCardActivitiesTableCell, superClass);

    OrganizationCardActivitiesTableCell.prototype.tag = 'tr';

    OrganizationCardActivitiesTableCell.prototype.events = {
      'tap .customer': '_onCustomerTap',
      'tap': '_onActivityTap'
    };

    OrganizationCardActivitiesTableCell.prototype.elements = {
      '.date': 'elDate',
      '.time': 'elTime',
      '.customer': 'elCustomer',
      '.type': 'elType',
      '.user': 'elUser',
      '.next-call': 'elNextCall'
    };

    function OrganizationCardActivitiesTableCell(activity) {
      this.activity = activity;
      this._fillActivityType = bind(this._fillActivityType, this);
      this._fillGeneralInfo = bind(this._fillGeneralInfo, this);
      this._onActivityTap = bind(this._onActivityTap, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      OrganizationCardActivitiesTableCell.__super__.constructor.call(this, {});
    }

    OrganizationCardActivitiesTableCell.prototype.template = function() {
      return require('views/organization-card/organization-card-activities-table-cell')();
    };

    OrganizationCardActivitiesTableCell.prototype._onCustomerTap = function(event) {
      event.stopPropagation();
      return this.trigger('customerTap', this);
    };

    OrganizationCardActivitiesTableCell.prototype._onActivityTap = function() {
      return this.trigger('activityTap', this);
    };

    OrganizationCardActivitiesTableCell.prototype.render = function() {
      this.html(this.template());
      this._fillGeneralInfo();
      this._fillActivityType();
      return this;
    };

    OrganizationCardActivitiesTableCell.prototype._fillGeneralInfo = function() {
      var dateParts;
      dateParts = Utils.formatDateTime(this.activity.dateTimeOfVisit).split(' ');
      this.elDate.html(dateParts[0]);
      this.elTime.html(dateParts[1]);
      this.elCustomer.html((this.activity.contactFullName()) + " <br/> " + this.activity.contactRecordType);
      this.elUser.html(this.activity.userFullName());
      return this.elNextCall.text(this.activity.nextCallObjective);
    };

    OrganizationCardActivitiesTableCell.prototype._fillActivityType = function() {
      return new CallReportPickListManager().getLabelByValue(CallReport.sfdc.type, this.activity.type).then((function(_this) {
        return function(label) {
          return _this.elType.html(label);
        };
      })(this));
    };

    return OrganizationCardActivitiesTableCell;

  })(Spine.Controller);

  module.exports = OrganizationCardActivitiesTableCell;

}).call(this);
}, "controllers/organization-card/organization-card-activities-table": function(exports, require, module) {(function() {
  var OrganizationCardActivitiesTable, TableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  OrganizationCardActivitiesTable = (function(superClass) {
    extend(OrganizationCardActivitiesTable, superClass);

    function OrganizationCardActivitiesTable() {
      return OrganizationCardActivitiesTable.__super__.constructor.apply(this, arguments);
    }

    OrganizationCardActivitiesTable.prototype.elements = {
      'tbody': 'elTbody'
    };

    OrganizationCardActivitiesTable.prototype.template = function() {
      return require('views/organization-card/organization-card-activities-table')();
    };

    return OrganizationCardActivitiesTable;

  })(TableController);

  module.exports = OrganizationCardActivitiesTable;

}).call(this);
}, "controllers/organization-card/organization-card-references-table-cell": function(exports, require, module) {(function() {
  var OrganizationCardReferencesTableCell, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  OrganizationCardReferencesTableCell = (function(superClass) {
    extend(OrganizationCardReferencesTableCell, superClass);

    OrganizationCardReferencesTableCell.prototype.tag = 'tr';

    OrganizationCardReferencesTableCell.prototype.elements = {
      '.primary': 'elPrimary',
      '.appt': 'elAppt',
      '.call-report': 'elCallReport',
      '.customer': 'elCustomer'
    };

    function OrganizationCardReferencesTableCell(reference) {
      this.reference = reference;
      this.bindEvents = bind(this.bindEvents, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      this._onCallReportTap = bind(this._onCallReportTap, this);
      this._onApptTap = bind(this._onApptTap, this);
      OrganizationCardReferencesTableCell.__super__.constructor.call(this, {});
    }

    OrganizationCardReferencesTableCell.prototype.template = function() {
      return require('views/organization-card/organization-card-references-table-cell')();
    };

    OrganizationCardReferencesTableCell.prototype._onApptTap = function() {
      return this.trigger('apptTap', this);
    };

    OrganizationCardReferencesTableCell.prototype._onCallReportTap = function() {
      return this.trigger('callReportTap', this);
    };

    OrganizationCardReferencesTableCell.prototype._onCustomerTap = function() {
      return this.trigger('customerTap', this);
    };

    OrganizationCardReferencesTableCell.prototype.bindEvents = function() {
      return this.elCustomer.on('tap', this._onCustomerTap);
    };

    OrganizationCardReferencesTableCell.prototype.render = function() {
      this.html(this.template());
      if (this.reference.isPrimary) {
        this._showPrimaryCheckmark();
      }
      if (this.reference.isActive()) {
        this._showCreateVisitsButtons();
      }
      this.elCustomer.html((this.reference.contactFullName()) + " <br/> " + this.reference.contactRecordType);
      this.bindEvents();
      return this;
    };

    OrganizationCardReferencesTableCell.prototype._showPrimaryCheckmark = function() {
      return this.elPrimary.find('.check-box').addClass('checked');
    };

    OrganizationCardReferencesTableCell.prototype._showCreateVisitsButtons = function() {
      this._showCreateApptButton();
      return this._showCreateCallReportButton();
    };

    OrganizationCardReferencesTableCell.prototype._showCreateApptButton = function() {
      this.elAppt.addClass('visible');
      return this.elAppt.on('tap', this._onApptTap);
    };

    OrganizationCardReferencesTableCell.prototype._showCreateCallReportButton = function() {
      this.elCallReport.addClass('visible');
      return this.elCallReport.on('tap', this._onCallReportTap);
    };

    return OrganizationCardReferencesTableCell;

  })(Spine.Controller);

  module.exports = OrganizationCardReferencesTableCell;

}).call(this);
}, "controllers/organization-card/organization-card-references-table": function(exports, require, module) {(function() {
  var OrganizationCardReferencesTable, TableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  OrganizationCardReferencesTable = (function(superClass) {
    extend(OrganizationCardReferencesTable, superClass);

    function OrganizationCardReferencesTable() {
      return OrganizationCardReferencesTable.__super__.constructor.apply(this, arguments);
    }

    OrganizationCardReferencesTable.prototype.elements = {
      'tbody': 'elTbody'
    };

    OrganizationCardReferencesTable.prototype.template = function() {
      return require('views/organization-card/organization-card-references-table')();
    };

    return OrganizationCardReferencesTable;

  })(TableController);

  module.exports = OrganizationCardReferencesTable;

}).call(this);
}, "controllers/organization-card/organization-card": function(exports, require, module) {(function() {
  var AppointmentCard, AppointmentCardEdit, CallReport, CallReportCard, CallReportCardView, ContactCard, Header, HeaderBaseControl, OrganizationCard, OrganizationCardActivitiesTable, OrganizationCardActivitiesTableCell, OrganizationCardReferencesTable, OrganizationCardReferencesTableCell, OrganizationsCollection, PanelScreen, SforceDataContext,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  OrganizationsCollection = require('models/bll/organizations-collection');

  OrganizationCardReferencesTable = require('controllers/organization-card/organization-card-references-table');

  OrganizationCardReferencesTableCell = require('controllers/organization-card/organization-card-references-table-cell');

  OrganizationCardActivitiesTable = require('controllers/organization-card/organization-card-activities-table');

  OrganizationCardActivitiesTableCell = require('controllers/organization-card/organization-card-activities-table-cell');

  CallReport = require('models/call-report');

  SforceDataContext = require('models/bll/sforce-data-context');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  ContactCard = require('controllers/contact-card/contact-card');

  AppointmentCard = require('controllers/appointment-card/appointment-card');

  AppointmentCardEdit = require('controllers/appointment-card/appointment-card-edit');

  CallReportCard = require('controllers/call-report-card/call-report-card');

  CallReportCardView = require('controllers/call-report-card/call-report-card-view');

  OrganizationCard = (function(superClass) {
    extend(OrganizationCard, superClass);

    OrganizationCard.prototype.className = 'organization-card';

    OrganizationCard.prototype.elements = {
      '.organization-card-name': 'elName',
      '.organization-card-record-type': 'elRecordType',
      '.organization-card-address': 'elAddress',
      '.speciality': 'elSpeciality',
      '.organization-card-juridic-group': 'elJuridicGroup',
      '.organization-card-status': 'elStatus',
      '.organization-card-speciality': 'elSpeciality',
      '.references-table-container': 'elReferencesTable',
      '.activities-table-container': 'elActivitiesTable'
    };

    OrganizationCard.prototype.organization = null;

    OrganizationCard.prototype.organizationId = null;

    OrganizationCard.prototype.references = null;

    OrganizationCard.prototype.referencesTable = null;

    OrganizationCard.prototype.activities = null;

    OrganizationCard.prototype.activitiesTable = null;

    OrganizationCard.prototype.template = function() {
      return require('views/organization-card/organization-card')({
        organization: this.organization
      });
    };

    function OrganizationCard(organizationId) {
      this.organizationId = organizationId;
      this._onActivityEditTap = bind(this._onActivityEditTap, this);
      this._onCustomerTap = bind(this._onCustomerTap, this);
      this._onCallReportTap = bind(this._onCallReportTap, this);
      this._onApptTap = bind(this._onApptTap, this);
      this._onActivityCustomerTap = bind(this._onActivityCustomerTap, this);
      this._onTourPlanningTap = bind(this._onTourPlanningTap, this);
      this._initHeader = bind(this._initHeader, this);
      this._getActivities = bind(this._getActivities, this);
      this._reloadActivities = bind(this._reloadActivities, this);
      this.template = bind(this.template, this);
      OrganizationCard.__super__.constructor.apply(this, arguments);
      this.subscribeOnNotification('appointmentChanged', this._reloadActivities);
      this.subscribeOnNotification('callReportCreated', this._reloadActivities);
    }

    OrganizationCard.prototype.active = function(params) {
      var collection;
      OrganizationCard.__super__.active.apply(this, arguments);
      collection = new OrganizationsCollection;
      return collection.fetchEntityById(this.organizationId).done((function(_this) {
        return function(organization) {
          _this.organization = organization;
          return _this.render();
        };
      })(this)).fail((function(_this) {
        return function(err) {
          return alert("Error fetching records:\n " + (JSON.stringify(err)));
        };
      })(this));
    };

    OrganizationCard.prototype.render = function() {
      this.html(this.template());
      this._initHeader();
      this._fillgeneralInfo();
      this._initTables().then((function(_this) {
        return function() {
          return Locale.localize(_this.el);
        };
      })(this));
      return this;
    };

    OrganizationCard.prototype._reloadActivities = function() {
      return this._getActivities().then((function(_this) {
        return function() {
          return Locale.localize(_this.el);
        };
      })(this));
    };

    OrganizationCard.prototype._fillgeneralInfo = function() {
      this.elName.html(this.organization.name);
      this.elRecordType.html(this.organization.recordType);
      this.elAddress.html(this.organization.fullAddress());
      this.elJuridicGroup.html(this.organization.juridicGroup);
      this.elStatus.html(this.organization.status);
      return this.elSpeciality.html(this.organization.specialty1);
    };

    OrganizationCard.prototype._createReferencesTable = function() {
      this.referencesTable = new OrganizationCardReferencesTable;
      this.referencesTable.datasource = this;
      return this.elReferencesTable.html(this.referencesTable.render().el);
    };

    OrganizationCard.prototype._createActivitiesTable = function() {
      this.activitiesTable = new OrganizationCardActivitiesTable;
      this.activitiesTable.datasource = this;
      return this.elActivitiesTable.html(this.activitiesTable.render().el);
    };

    OrganizationCard.prototype._getReferences = function() {
      return this.organization.getReferences().then((function(_this) {
        return function(references) {
          _this.references = references;
          return _this._createReferencesTable();
        };
      })(this));
    };

    OrganizationCard.prototype._getActivities = function() {
      return SforceDataContext.currentMarketingCycle().then(this.organization.getActivitiesInMarketingCycle).then((function(_this) {
        return function(activities) {
          _this.activities = activities;
          return _this._createActivitiesTable();
        };
      })(this));
    };

    OrganizationCard.prototype._initTables = function() {
      return $.when.apply($, [this._getReferences(), this._getActivities()]);
    };

    OrganizationCard.prototype._initHeader = function() {
      var organizationHeader;
      this.tourPlanningBtn = new HeaderBaseControl(Locale.value('card.Organization.TourPlanningBtn'), 'ctrl-btn');
      this.tourPlanningBtn.bind('tap', this._onTourPlanningTap);
      organizationHeader = new Header((Locale.value('card.Organization.HeaderTitle')) + " " + this.organization.name);
      organizationHeader.render();
      organizationHeader.addRightControlElement(this.tourPlanningBtn.el);
      return this.setHeader(organizationHeader);
    };

    OrganizationCard.prototype._onTourPlanningTap = function() {
      return this.organization.hasAnyTargetReferences().then((function(_this) {
        return function(hasAnyReferences) {
          var TourPlanningOrganization;
          if (!hasAnyReferences) {
            return $.fn.dpToast(Locale.value('card.Organization.ToastMessage.HasNoTargetReferences'));
          } else {
            TourPlanningOrganization = require('controllers/tour-planning-organization/tour-planning-organization');
            return _this.stage.push(new TourPlanningOrganization(_this.organization.id));
          }
        };
      })(this));
    };

    OrganizationCard.prototype.numberOfRowsForTable = function(table) {
      if (table === this.referencesTable) {
        return this.references.length;
      } else if (table === this.activitiesTable) {
        return this.activities.length;
      }
    };

    OrganizationCard.prototype.cellForRowAtIndexForTable = function(index, table) {
      if (table === this.referencesTable) {
        return this._createReferencesTableCellAtIndex(index);
      } else if (table === this.activitiesTable) {
        return this._createActivitiesTableCellAtIndex(index);
      }
    };

    OrganizationCard.prototype._createReferencesTableCellAtIndex = function(index) {
      var contactCardReferencesTableCell;
      contactCardReferencesTableCell = new OrganizationCardReferencesTableCell(this.references[index]);
      contactCardReferencesTableCell.on('apptTap', this._onApptTap);
      contactCardReferencesTableCell.on('callReportTap', this._onCallReportTap);
      contactCardReferencesTableCell.on('customerTap', this._onCustomerTap);
      return contactCardReferencesTableCell;
    };

    OrganizationCard.prototype._createActivitiesTableCellAtIndex = function(index) {
      var organizationCardActivitiesTableCell;
      organizationCardActivitiesTableCell = new OrganizationCardActivitiesTableCell(this.activities[index]);
      organizationCardActivitiesTableCell.on('customerTap', this._onActivityCustomerTap);
      return organizationCardActivitiesTableCell.on('activityTap', this._onActivityEditTap);
    };

    OrganizationCard.prototype._onActivityCustomerTap = function(cell) {
      return this.stage.push(new ContactCard(cell.activity.contactSfid));
    };

    OrganizationCard.prototype._onApptTap = function(cell) {
      return this.stage.push(new AppointmentCard(cell.reference.id));
    };

    OrganizationCard.prototype._onCallReportTap = function(cell) {
      return this.stage.push(new CallReportCard(cell.reference.id));
    };

    OrganizationCard.prototype._onCustomerTap = function(cell) {
      return this.stage.push(new ContactCard(cell.reference.contactSfId));
    };

    OrganizationCard.prototype._onActivityEditTap = function(cell) {
      if (cell.activity.type === CallReport.TYPE_APPOINTMENT) {
        return this.stage.push(new AppointmentCardEdit(cell.activity.id));
      } else if (cell.activity.type === CallReport.TYPE_ONE_TO_ONE) {
        return this.stage.push(new CallReportCardView(cell.activity.id));
      }
    };

    return OrganizationCard;

  })(PanelScreen);

  module.exports = OrganizationCard;

}).call(this);
}, "controllers/organizations/organizations-table-cell": function(exports, require, module) {(function() {
  var OrganizationsTableCell, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  OrganizationsTableCell = (function(superClass) {
    extend(OrganizationsTableCell, superClass);

    OrganizationsTableCell.prototype.className = "row";

    OrganizationsTableCell.prototype.elements = {
      ".account-name": "elAccountName",
      ".account-record-type": "elAccountRecordType",
      ".specialty": "elSpecialty",
      ".billing-address": "elBillingAddress",
      ".global-priority": "elGlobalPriority",
      ".city": "elCity",
      ".phone": "elPhone"
    };

    function OrganizationsTableCell(organization) {
      this.organization = organization;
      this.bindEvents = bind(this.bindEvents, this);
      this._onCellTap = bind(this._onCellTap, this);
      OrganizationsTableCell.__super__.constructor.call(this, {});
    }

    OrganizationsTableCell.prototype.template = function() {
      return require('views/organizations/organizations-table-cell')();
    };

    OrganizationsTableCell.prototype._onCellTap = function() {
      return this.trigger('cellTap', this);
    };

    OrganizationsTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    OrganizationsTableCell.prototype.render = function() {
      var ref, ref1, ref2;
      this.html(this.template());
      this.elAccountName.html(this.organization.name);
      this.elAccountRecordType.html(this.organization.recordType);
      this.elSpecialty.html(this.organization.specialty1);
      this.elGlobalPriority.html(this.organization.globalPriority);
      this.elCity.html(this.organization.city);
      this.elBillingAddress.html(((ref = this.organization.address) != null ? ref : '') + " " + ((ref1 = this.organization.city) != null ? ref1 : ''));
      this.elPhone.html((ref2 = this.organization.phone) != null ? ref2 : '');
      return this;
    };

    return OrganizationsTableCell;

  })(Spine.Controller);

  module.exports = OrganizationsTableCell;

}).call(this);
}, "controllers/organizations/organizations": function(exports, require, module) {(function() {
  var BaseHeader, LazyTableController, OrganizationCard, Organizations, OrganizationsCollection, OrganizationsTableCell, RootPanelScreen, Search, SortingTableHeaderItem, TableHeaderItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RootPanelScreen = require('controllers/base/panel/root-panel-screen');

  LazyTableController = require('controllers/lazy-table-controller');

  OrganizationsCollection = require('models/bll/organizations-collection');

  OrganizationsTableCell = require('controllers/organizations/organizations-table-cell');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  BaseHeader = require('controls/header/base-header');

  Search = require('controls/search/search');

  OrganizationCard = require('controllers/organization-card/organization-card');

  Organizations = (function(superClass) {
    extend(Organizations, superClass);

    function Organizations() {
      this._onCellTap = bind(this._onCellTap, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this._resetSearchingFilter = bind(this._resetSearchingFilter, this);
      this._onSearchChanged = bind(this._onSearchChanged, this);
      return Organizations.__super__.constructor.apply(this, arguments);
    }

    Organizations.prototype.className = 'table-view organizations';

    Organizations.prototype.tableController = null;

    Organizations.prototype.active = function() {
      Organizations.__super__.active.apply(this, arguments);
      this._initHeader();
      return this._initContent();
    };

    Organizations.prototype._initHeader = function() {
      var orgsHeader, search;
      search = new Search();
      search.bind('searchChanged', this._onSearchChanged);
      search.bind('searchClear', this._resetSearchingFilter);
      orgsHeader = new BaseHeader(Locale.value('organizations.HeaderTitle'));
      orgsHeader.render();
      orgsHeader.addRightControlElement(search.render().el);
      return this.setHeader(orgsHeader);
    };

    Organizations.prototype._onSearchChanged = function(value) {
      return this.tableController.filterBy(value);
    };

    Organizations.prototype._resetSearchingFilter = function() {
      return this.tableController.resetAndActive();
    };

    Organizations.prototype._initContent = function() {
      this.tableController = new LazyTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    Organizations.prototype.createCollection = function() {
      return new OrganizationsCollection;
    };

    Organizations.prototype.createTableHeaderItemsForModel = function(model) {
      return [new SortingTableHeaderItem(Locale.value('common:names.AccountName'), model.sfdc.name), new SortingTableHeaderItem(Locale.value('common:names.AccountRecordType'), model.sfdc.recordType), new SortingTableHeaderItem(Locale.value('common:names.Specialty'), model.sfdc.specialty1), new SortingTableHeaderItem(Locale.value('common:names.GlobalPriority'), model.sfdc.globalPriority), new SortingTableHeaderItem(Locale.value('common:names.City'), model.sfdc.city), new SortingTableHeaderItem(Locale.value('common:names.BillingAddress'), model.sfdc.address), new TableHeaderItem(Locale.value('common:names.Phone'))];
    };

    Organizations.prototype.cellForObjectOnTable = function(object, table) {
      var organizationsTableCell;
      organizationsTableCell = new OrganizationsTableCell(object);
      organizationsTableCell.on('cellTap', this._onCellTap);
      return organizationsTableCell;
    };

    Organizations.prototype._onCellTap = function(cell) {
      return this.stage.push(new OrganizationCard(cell.organization.id));
    };

    return Organizations;

  })(RootPanelScreen);

  module.exports = Organizations;

}).call(this);
}, "controllers/pe-card/event-type-picklist-datasource": function(exports, require, module) {(function() {
  var EventTypePicklistDatasource, PePicklistManager, PharmaEvent, PickListDatasource,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PickListDatasource = require('controllers/call-report-card/picklist-datasource');

  PharmaEvent = require('models/pharma-event');

  PePicklistManager = require('db/picklist-managers/pe-picklist-manager');

  EventTypePicklistDatasource = (function(superClass) {
    extend(EventTypePicklistDatasource, superClass);

    function EventTypePicklistDatasource() {
      return EventTypePicklistDatasource.__super__.constructor.apply(this, arguments);
    }

    EventTypePicklistDatasource.prototype.pickListName = function() {
      return PharmaEvent.sfdc.eventType;
    };

    EventTypePicklistDatasource.prototype.pickListManager = function() {
      return new PePicklistManager;
    };

    return EventTypePicklistDatasource;

  })(PickListDatasource);

  module.exports = EventTypePicklistDatasource;

}).call(this);
}, "controllers/pe-card/pe-card-create": function(exports, require, module) {(function() {
  var Attendees, CommentInput, ConfigurationManager, ConfirmationPopup, DateTimePicker, DateTimePickerExtended, EventTypePickListDatasource, Header, HeaderBaseControl, MultiselectPopup, PEAttendee, PeCardCreate, PeCardView, PharmaEvent, PickList, SforceDataContext, Spine, StagePickListDatasource, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  SforceDataContext = require('models/bll/sforce-data-context');

  Utils = require('common/utils');

  ConfigurationManager = require('db/configuration-manager');

  PeCardView = require('controllers/pe-card/pe-card-view');

  CommentInput = require('controls/comment-view/comment-input');

  MultiselectPopup = require('controls/popups/multiselect-popup');

  PEAttendee = require('models/pe-attendee');

  PharmaEvent = require('models/pharma-event');

  DateTimePicker = require('controls/datepicker/date-time-picker');

  DateTimePickerExtended = require('controls/datepicker/date-time-picker-extended');

  EventTypePickListDatasource = require('controllers/pe-card/event-type-picklist-datasource');

  StagePickListDatasource = require('controllers/pe-card/stage-picklist-datasource');

  PickList = require('controls/pick-list/pick-list');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  Attendees = require('controllers/attendees/attendees');

  PeCardCreate = (function(superClass) {
    extend(PeCardCreate, superClass);

    function PeCardCreate() {
      this._getInputValue = bind(this._getInputValue, this);
      this._onAttendeesTap = bind(this._onAttendeesTap, this);
      this._handleEndDateEntered = bind(this._handleEndDateEntered, this);
      this._showEndDateTimePicker = bind(this._showEndDateTimePicker, this);
      this._showStartDateTimePicker = bind(this._showStartDateTimePicker, this);
      this._setEndDate = bind(this._setEndDate, this);
      this._setStartDate = bind(this._setStartDate, this);
      this._onEndDate = bind(this._onEndDate, this);
      this._onStartDate = bind(this._onStartDate, this);
      this._onAttendeesSelected = bind(this._onAttendeesSelected, this);
      this._renderSelectedProducts = bind(this._renderSelectedProducts, this);
      this._openProductsPopup = bind(this._openProductsPopup, this);
      this._renderProducts = bind(this._renderProducts, this);
      this._initProductsDatasource = bind(this._initProductsDatasource, this);
      this._initProducts = bind(this._initProducts, this);
      this._initDefaultEndDate = bind(this._initDefaultEndDate, this);
      this._initStage = bind(this._initStage, this);
      this._initDefaultStartDate = bind(this._initDefaultStartDate, this);
      this._initEventType = bind(this._initEventType, this);
      this._initDefaultBusinessUnit = bind(this._initDefaultBusinessUnit, this);
      this._initDefaultOwner = bind(this._initDefaultOwner, this);
      this._initUser = bind(this._initUser, this);
      this._fillDefaultInfo = bind(this._fillDefaultInfo, this);
      this.onBack = bind(this.onBack, this);
      this._createNewAttendee = bind(this._createNewAttendee, this);
      this._removeAllAttendees = bind(this._removeAllAttendees, this);
      this._updateAttendeesCollectionForPE = bind(this._updateAttendeesCollectionForPE, this);
      this._setProducts = bind(this._setProducts, this);
      this._onSaveTap = bind(this._onSaveTap, this);
      this._resetChangeFlags = bind(this._resetChangeFlags, this);
      return PeCardCreate.__super__.constructor.apply(this, arguments);
    }

    PeCardCreate.prototype.className = 'pe-card pe-cart-create';

    PeCardCreate.prototype.speakersMaxLength = 1000;

    PeCardCreate.prototype.agendaMaxLength = 32000;

    PeCardCreate.prototype.objectivesMaxLength = 32000;

    PeCardCreate.prototype.evaluationMaxLength = 32000;

    PeCardCreate.prototype.eventNameMaxLength = 80;

    PeCardCreate.prototype.locationMaxLength = 255;

    PeCardCreate.prototype.daysMax = 13;

    PeCardCreate.prototype.daysAfter = 90;

    PeCardCreate.prototype.events = {
      'tap .start-date': '_onStartDate',
      'tap .end-date': '_onEndDate',
      'tap .attendees': '_onAttendeesTap'
    };

    PeCardCreate.prototype.INPUT_DEFAULT_VALUE = '';

    PeCardCreate.prototype.active = function() {
      this._resetChangeFlags();
      return PeCardCreate.__super__.active.apply(this, arguments);
    };

    PeCardCreate.prototype._resetChangeFlags = function() {
      this.isChanged = false;
      return this.isAttendeesWereChanged = false;
    };

    PeCardCreate.prototype._initHeader = function() {
      var peHeader, saveBtn;
      saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      saveBtn.bind('tap', this._onSaveTap);
      peHeader = new Header(Locale.value('card.PharmaEvent.CreateCardHeaderTitle'));
      peHeader.render();
      peHeader.addRightControlElement(saveBtn.el);
      return this.setHeader(peHeader);
    };

    PeCardCreate.prototype._onSaveTap = function() {
      if (this._isDataValid()) {
        return this._savePe().then(this._resetChangeFlags).then((function(_this) {
          return function() {
            return _this.trigger('pharmaEventChanged');
          };
        })(this)).then(this.onBack);
      } else {
        return this._showToast(this._fillToastBody());
      }
    };

    PeCardCreate.prototype._isDataValid = function() {
      var equivalents;
      equivalents = this._getEquivalents();
      return !Object.keys(equivalents).some(function(key) {
        return !equivalents[key];
      });
    };

    PeCardCreate.prototype._getEquivalents = function() {
      return {
        'TypeOfEvent': this.eventType.selectedValue,
        'EventName': this._getInputValue(this.elEventName),
        'Location': this._getInputValue(this.elLocation),
        'Products': !_.isEmpty(this.selectedProducts),
        'Speakers': this._getInputValue(this.elSpeakers),
        'Agenda': this._getInputValue(this.elAgenda),
        'Objectives': this._getInputValue(this.elObjectives)
      };
    };

    PeCardCreate.prototype._savePe = function() {
      return this.pePicklistManager.getPickList(PharmaEvent.sfdc.status).then((function(_this) {
        return function(picklist) {
          var peNewEntity, status;
          status = picklist.shift().value;
          peNewEntity = {};
          peNewEntity[PharmaEvent.sfdc.createdOffline] = true;
          peNewEntity[PharmaEvent.sfdc.ownerSfid] = _this.user.id;
          peNewEntity[PharmaEvent.sfdc.remoteOwnerFirstName] = _this.user.firstName;
          peNewEntity[PharmaEvent.sfdc.remoteOwnerLastName] = _this.user.lastName;
          peNewEntity.ownerFirstName = _this.user.firstName;
          peNewEntity.ownerLastName = _this.user.lastName;
          peNewEntity[PharmaEvent.sfdc.eventName] = _this._getInputValue(_this.elEventName);
          peNewEntity[PharmaEvent.sfdc.eventType] = _this.eventType.selectedValue;
          peNewEntity[PharmaEvent.sfdc.location] = _this._getInputValue(_this.elLocation);
          peNewEntity[PharmaEvent.sfdc.startDate] = Utils.originalDateTime(_this.startDate);
          peNewEntity[PharmaEvent.sfdc.endDate] = Utils.originalDateTime(_this.endDate);
          peNewEntity[PharmaEvent.sfdc.stage] = _this.stagePicklist.selectedValue;
          peNewEntity[PharmaEvent.sfdc.status] = status;
          peNewEntity[PharmaEvent.sfdc.businessUnit] = _this.businessUnit;
          peNewEntity[PharmaEvent.sfdc.objectives] = _this._getInputValue(_this.elObjectives);
          peNewEntity[PharmaEvent.sfdc.agenda] = _this._getInputValue(_this.elAgenda);
          peNewEntity[PharmaEvent.sfdc.speakers] = _this._getInputValue(_this.elSpeakers);
          peNewEntity[PharmaEvent.sfdc.evaluation] = _this._getInputValue(_this.elEvaluation);
          _this._setProducts(peNewEntity, true);
          return _this.peCollection.createEntity(peNewEntity).then(function(peNewEntity) {
            return _this._setAttendees(peNewEntity);
          });
        };
      })(this));
    };

    PeCardCreate.prototype._setProducts = function(entity, isCreate) {
      return _(this.MAX_PRODUCTS_NUMBER).times((function(_this) {
        return function(productNumber) {
          var productField;
          productField = "productPrio" + (productNumber + 1) + "SfId";
          if (isCreate) {
            productField = PharmaEvent.sfdc["productPrio" + (productNumber + 1) + "SfId"];
          }
          if (_this.selectedProducts[productNumber]) {
            return entity[productField] = _this.selectedProducts[productNumber].id;
          } else {
            return entity[productField] = null;
          }
        };
      })(this));
    };

    PeCardCreate.prototype._setAttendees = function(pharmaEvent) {
      var pharmaEventEntity;
      if (this.isAttendeesWereChanged) {
        pharmaEventEntity = this.peCollection.parseEntity(pharmaEvent);
        return this._updateAttendeesCollectionForPE(pharmaEventEntity);
      }
    };

    PeCardCreate.prototype._updateAttendeesCollectionForPE = function(pharmaEvent) {
      return this._removeAllAttendees(this.attendees).then((function(_this) {
        return function() {
          return Utils.runSimultaneously(_(_this.attendeesIds).map(function(attendeeId) {
            return _this._createNewAttendee(attendeeId, pharmaEvent);
          }));
        };
      })(this));
    };

    PeCardCreate.prototype._removeAllAttendees = function(attendees) {
      return Utils.runSimultaneously(_(attendees).map((function(_this) {
        return function(attendee) {
          return _this.peAttendeesCollection.removeEntity(attendee);
        };
      })(this)));
    };

    PeCardCreate.prototype._createNewAttendee = function(attendeeId, pharmaEvent) {
      var newAttendee;
      newAttendee = {};
      newAttendee[PEAttendee.sfdc.attendeeSfId] = attendeeId;
      newAttendee[PEAttendee.sfdc.pharmaEventSfId] = pharmaEvent.attributes._soupEntryId;
      return this.peAttendeesCollection.createEntity(newAttendee);
    };

    PeCardCreate.prototype._showToast = function(toastBody) {
      var toastHeader, toastMessage;
      toastHeader = Locale.value('card.ToastMessage.RequiredFieldsHeader') + ": <br/>";
      toastMessage = toastHeader + toastBody;
      if (toastBody) {
        return $.fn.dpToast(toastMessage);
      }
    };

    PeCardCreate.prototype._fillToastBody = function() {
      var equivalents;
      equivalents = this._getEquivalents();
      return Object.keys(equivalents).filter(function(key) {
        return !equivalents[key];
      }).map(function(key) {
        return Locale.value('card.PharmaEvent.ToastMessage.Required' + key);
      }).join('<br/>');
    };

    PeCardCreate.prototype.onBack = function() {
      var confirm;
      if (!this.isChanged) {
        return PeCardCreate.__super__.onBack.apply(this, arguments);
      } else {
        confirm = new ConfirmationPopup({
          caption: Locale.value('card.ConfirmationPopup.SaveChanges.Caption')
        });
        confirm.bind('yesClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            return _this._onSaveTap();
          };
        })(this));
        confirm.bind('noClicked', (function(_this) {
          return function() {
            _this.isChanged = false;
            _this.dismissModalController();
            return PeCardCreate.__super__.onBack.apply(_this, arguments);
          };
        })(this));
        return this.presentModalController(confirm);
      }
    };

    PeCardCreate.prototype._fillDefaultInfo = function() {
      this._initUser();
      this._initEventType();
      this._initDefaultStartDate();
      this._initStage();
      this._initDefaultEndDate();
      this._initEventName();
      this._initLocation();
      this._initProducts();
      this._initSpeakers();
      this._initAgenda();
      this._initObjectives();
      this._initEvaluation();
      return this._initDefaultAttendees();
    };

    PeCardCreate.prototype._initUser = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(user) {
          _this.user = user;
          _this._initDefaultOwner();
          return _this._initDefaultBusinessUnit();
        };
      })(this));
    };

    PeCardCreate.prototype._initDefaultOwner = function() {
      var ref;
      return this.elOwner.html((ref = this.user) != null ? ref.fullName() : void 0);
    };

    PeCardCreate.prototype._initDefaultBusinessUnit = function() {
      var ref;
      this.businessUnit = (ref = this.user) != null ? ref.businessUnit : void 0;
      return this.elBusinessUnit.html(this.businessUnit);
    };

    PeCardCreate.prototype._initEventType = function() {
      var ref;
      this.eventType = new PickList(this, this.elEventType, new EventTypePickListDatasource, ((ref = this.pe) != null ? ref.eventType : void 0) || null);
      return this.eventType.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this.isChanged = true;
        };
      })(this));
    };

    PeCardCreate.prototype._initDefaultStartDate = function() {
      this.startDate = new Date;
      return this.elStartDate.html(Utils.formatDateTime(this.startDate));
    };

    PeCardCreate.prototype._initStage = function() {
      var ref;
      this.stagePicklist = new PickList(this, this.elStage, new StagePickListDatasource, ((ref = this.pe) != null ? ref.stage : void 0) || null);
      return this.stagePicklist.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this.isChanged = true;
        };
      })(this));
    };

    PeCardCreate.prototype._initDefaultEndDate = function() {
      this.endDate = new Date;
      return this.elEndDate.html(Utils.formatDateTime(this.endDate));
    };

    PeCardCreate.prototype._initProducts = function() {
      this._initProductsDatasource().then(this._renderProducts);
      return this.elProducts.on('tap', this._openProductsPopup);
    };

    PeCardCreate.prototype._initProductsDatasource = function() {
      return this.productsCollection.getPromotedProducts().then((function(_this) {
        return function(products) {
          _this.productsDatasource = products.map(function(product) {
            return {
              id: product.id,
              description: product.name
            };
          });
          return _this.selectedProducts = [];
        };
      })(this));
    };

    PeCardCreate.prototype._renderProducts = function() {
      var products;
      products = (this.selectedProducts.map((function(_this) {
        return function(product) {
          return product.description;
        };
      })(this))).join(', ');
      if (products) {
        this.elProducts.removeClass('placeholder');
        return this.elProducts.html(products);
      } else {
        this.elProducts.addClass('placeholder');
        return this.elProducts.html(Locale.value('card.PharmaEvent.Placeholders.AddProducts'));
      }
    };

    PeCardCreate.prototype._openProductsPopup = function() {
      var multiselectPopup;
      if (!_.isEmpty(this.productsDatasource)) {
        multiselectPopup = new MultiselectPopup(this.productsDatasource, this.selectedProducts, Locale.value('card.PharmaEvent.ProductsPopupCaption'));
        multiselectPopup.bind('onPopupItemsUpdated', this._renderSelectedProducts);
        multiselectPopup.on('doneTap', this.dismissModalController);
        return this.presentModalController(multiselectPopup);
      }
    };

    PeCardCreate.prototype._renderSelectedProducts = function(selectedProducts) {
      this.selectedProducts = selectedProducts;
      this.isChanged = true;
      return this._renderProducts();
    };

    PeCardCreate.prototype._initDefaultAttendees = function() {
      this.attendees = [];
      this.attendeesIds = [];
      this.elAttendees.html(this._attendeesPlaceholder());
      return this.elAttendees.addClass('placeholder');
    };

    PeCardCreate.prototype._onAttendeesSelected = function(attendeesIds) {
      this.attendeesIds = attendeesIds;
      this.isChanged = true;
      this.isAttendeesWereChanged = true;
      if (this.attendeesIds.length) {
        this.elAttendees.removeClass('placeholder');
        return this._showAttendees();
      } else {
        this.elAttendees.addClass('placeholder');
        return this.elAttendees.html(this._attendeesPlaceholder());
      }
    };

    PeCardCreate.prototype._attendeesPlaceholder = function() {
      return Locale.value('card.PharmaEvent.Placeholders.AddAttendees');
    };

    PeCardCreate.prototype._onStartDate = function() {
      return this._showStartDateTimePicker(this.startDate, this._setStartDate);
    };

    PeCardCreate.prototype._onEndDate = function() {
      return this._showEndDateTimePicker(this.endDate, this._setEndDate);
    };

    PeCardCreate.prototype._setStartDate = function(value) {
      var daysBetween, latestDate;
      this.startDate = value;
      this.elStartDate.html(Utils.formatDateTime(value));
      if (value) {
        this.isChanged = true;
      }
      daysBetween = Utils.getDaysBetween(this.startDate, this.endDate);
      if (daysBetween < 0) {
        this._setEndDate(value);
      }
      if (daysBetween > this.daysMax) {
        latestDate = new Date(value);
        latestDate.setDate(latestDate.getDate() + this.daysMax);
        return this._setEndDate(latestDate);
      }
    };

    PeCardCreate.prototype._setEndDate = function(value) {
      this.endDate = value;
      this.elEndDate.html(Utils.formatDateTime(value));
      if (value) {
        return this.isChanged = true;
      }
    };

    PeCardCreate.prototype._showStartDateTimePicker = function(date, handler) {
      var dateTimePicker;
      dateTimePicker = new DateTimePicker(date, {
        beforeDays: 14,
        afterDays: 90
      });
      dateTimePicker.on('onDonePressed', (function(_this) {
        return function(selectedDate) {
          _this.dismissModalController();
          return handler(selectedDate);
        };
      })(this));
      return this.presentModalController(dateTimePicker);
    };

    PeCardCreate.prototype._showEndDateTimePicker = function(date, handler) {
      var dateTimePicker, daysBetween, startDate;
      startDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), this.startDate.getDate());
      daysBetween = Utils.getDaysBetween(startDate, this.endDate);
      dateTimePicker = new DateTimePickerExtended(this.endDate, {
        beforeDays: daysBetween,
        afterDays: this.daysMax
      });
      dateTimePicker.on('onDonePressed', (function(_this) {
        return function(selectedDate) {
          return _this._handleEndDateEntered(selectedDate, handler);
        };
      })(this));
      return this.presentModalController(dateTimePicker);
    };

    PeCardCreate.prototype._handleEndDateEntered = function(date, handler) {
      var endDate, startDate;
      endDate = Utils.dateTimeWithoutSeconds(date);
      startDate = Utils.dateTimeWithoutSeconds(this.startDate);
      if (endDate < startDate) {
        return $.fn.dpToast(Locale.value('card.PharmaEvent.EndDateLessStartError'));
      } else {
        this.dismissModalController();
        return handler(date);
      }
    };

    PeCardCreate.prototype._onAttendeesTap = function() {
      var attendees;
      attendees = new Attendees(this.attendeesIds);
      attendees.on('attendeesSelected', this._onAttendeesSelected);
      return this.stage.push(attendees);
    };

    PeCardCreate.prototype._getInputValue = function(input) {
      if (input.hasClass('placeholder-mode')) {
        return null;
      } else {
        return input.val();
      }
    };

    return PeCardCreate;

  })(PeCardView);

  module.exports = PeCardCreate;

}).call(this);
}, "controllers/pe-card/pe-card-edit": function(exports, require, module) {(function() {
  var ConfigurationManager, PeCardCreate, PeCardEdit, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  ConfigurationManager = require('db/configuration-manager');

  PeCardCreate = require('controllers/pe-card/pe-card-create');

  PeCardEdit = (function(superClass) {
    extend(PeCardEdit, superClass);

    function PeCardEdit() {
      this._initProducts = bind(this._initProducts, this);
      this._initHeader = bind(this._initHeader, this);
      return PeCardEdit.__super__.constructor.apply(this, arguments);
    }

    PeCardEdit.prototype.className = 'pe-card pe-cart-edit';

    PeCardEdit.prototype._initHeader = function() {
      PeCardEdit.__super__._initHeader.apply(this, arguments);
      return this.header.find('.title').html(Locale.value('card.PharmaEvent.HeaderTitle'));
    };

    PeCardEdit.prototype._initProducts = function() {
      this._initProductsDatasource().then((function(_this) {
        return function() {
          _(_this.MAX_PRODUCTS_NUMBER).times(function(productNumber) {
            var product;
            product = _this.productsDatasource.filter(function(productModel) {
              return productModel.id === _this.pe["productPrio" + (productNumber + 1) + "SfId"];
            });
            if (product.length === 1) {
              return _this.selectedProducts.push(_.first(product));
            }
          });
          return _this._renderProducts();
        };
      })(this));
      return this.elProducts.on('tap', this._openProductsPopup);
    };

    PeCardEdit.prototype._showAttendees = function() {
      PeCardEdit.__super__._showAttendees.apply(this, arguments);
      if (this.attendeesIds.length) {
        return this.elAttendees.removeClass('placeholder');
      } else {
        this.elAttendees.addClass('placeholder');
        return this.elAttendees.html(this._attendeesPlaceholder());
      }
    };

    PeCardEdit.prototype._savePe = function() {
      this.pe.eventName = this._getInputValue(this.elEventName);
      this.pe.createdOffline = true;
      this.pe.eventType = this.eventType.selectedValue;
      this.pe.location = this._getInputValue(this.elLocation);
      this.pe.startDate = Utils.originalDateTime(this.startDate);
      this.pe.endDate = Utils.originalDateTime(this.endDate);
      this.pe.stage = this.stagePicklist.selectedValue;
      this.pe.objectives = this._getInputValue(this.elObjectives);
      this.pe.agenda = this._getInputValue(this.elAgenda);
      this.pe.speakers = this._getInputValue(this.elSpeakers);
      this.pe.evaluation = this._getInputValue(this.elEvaluation);
      this._setProducts(this.pe);
      return this.peCollection.updateEntity(this.pe).then((function(_this) {
        return function(entity) {
          return _this._setAttendees(entity);
        };
      })(this));
    };

    return PeCardEdit;

  })(PeCardCreate);

  module.exports = PeCardEdit;

}).call(this);
}, "controllers/pe-card/pe-card-view": function(exports, require, module) {(function() {
  var CommonInput, ConfigurationManager, ContactsCollection, Header, PEAttendeesCollection, PanelScreen, PeCardView, PePickListManager, PharmaEvent, PharmaEventsCollection, ProductsCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  Header = require('controls/header/header');

  Utils = require('common/utils');

  ConfigurationManager = require('db/configuration-manager');

  PharmaEventsCollection = require('models/bll/pharma-events-collection');

  ProductsCollection = require('models/bll/products-collection');

  PePickListManager = require('db/picklist-managers/pe-picklist-manager');

  PharmaEvent = require('models/pharma-event');

  PEAttendeesCollection = require('models/bll/pe-attendees-collection');

  ContactsCollection = require('models/bll/contacts-collection');

  CommonInput = require('controls/common-input/common-input');

  PeCardView = (function(superClass) {
    extend(PeCardView, superClass);

    PeCardView.prototype.className = 'pe-card pe-card-view';

    PeCardView.prototype.elements = {
      '.owner': 'elOwner',
      '.event-type': 'elEventType',
      '.start-date': 'elStartDate',
      '.business-unit': 'elBusinessUnit',
      '.stage': 'elStage',
      '.end-date': 'elEndDate',
      '.event-name': 'elEventName',
      '.location': 'elLocation',
      '.products': 'elProducts',
      '.speakers': 'elSpeakers',
      '.agenda': 'elAgenda',
      '.objectives': 'elObjectives',
      '.evaluation': 'elEvaluation',
      '.attendees': 'elAttendees',
      '.scroll-content': 'elScrollContent'
    };

    PeCardView.prototype.INPUT_DEFAULT_VALUE = ' ';

    PeCardView.prototype.VIEW_COMMENT_LENGTH = 32000;

    PeCardView.prototype.MAX_PRODUCTS_NUMBER = 4;

    function PeCardView(pharmaEventId) {
      this.pharmaEventId = pharmaEventId;
      this._showAttendees = bind(this._showAttendees, this);
      this._loadAttendees = bind(this._loadAttendees, this);
      this._initCommonInput = bind(this._initCommonInput, this);
      this._fillGeneralInfo = bind(this._fillGeneralInfo, this);
      this._fillDefaultInfo = bind(this._fillDefaultInfo, this);
      PeCardView.__super__.constructor.apply(this, arguments);
      this.peCollection = new PharmaEventsCollection;
      this.productsCollection = new ProductsCollection;
      this.pePicklistManager = new PePickListManager;
      this.peAttendeesCollection = new PEAttendeesCollection;
      this.contactsCollection = new ContactsCollection;
    }

    PeCardView.prototype.active = function() {
      PeCardView.__super__.active.apply(this, arguments);
      return this.render();
    };

    PeCardView.prototype.render = function() {
      this.html(this.template());
      Locale.localize(this.el);
      this._initHeader();
      this._fillInfo();
      return this;
    };

    PeCardView.prototype.template = function() {
      return require('views/pe-card/pe-card')();
    };

    PeCardView.prototype._initHeader = function() {
      var peHeader;
      peHeader = new Header(Locale.value('card.PharmaEvent.HeaderTitle'));
      peHeader.render();
      return this.setHeader(peHeader);
    };

    PeCardView.prototype._fillInfo = function() {
      if (!this.pharmaEventId) {
        return this._fillDefaultInfo();
      } else {
        return this.peCollection.fetchEntityById(this.pharmaEventId).then((function(_this) {
          return function(pe) {
            _this.pe = pe;
            return _this._fillGeneralInfo();
          };
        })(this));
      }
    };

    PeCardView.prototype._fillDefaultInfo = function() {
      throw new Error("should be overridden");
    };

    PeCardView.prototype._fillGeneralInfo = function() {
      this._initOwner();
      this._initEventType();
      this._initStartDate();
      this._initBusinessUnit();
      this._initStage();
      this._initEndDate();
      this._initEventName();
      this._initLocation();
      this._initProducts();
      this._initSpeakers();
      this._initAgenda();
      this._initObjectives();
      this._initEvaluation();
      return this._initAttendees();
    };

    PeCardView.prototype._initOwner = function() {
      return this.elOwner.html(this.pe.ownerFullName());
    };

    PeCardView.prototype._initEventType = function() {
      return this.pePicklistManager.getLabelByValue(PharmaEvent.sfdc.eventType, this.pe.eventType).then((function(_this) {
        return function(label) {
          return _this.elEventType.html(label);
        };
      })(this));
    };

    PeCardView.prototype._initStartDate = function() {
      this.startDate = Utils.originalDateTimeObject(this.pe.startDate);
      return this.elStartDate.html(Utils.formatDateTime(this.startDate));
    };

    PeCardView.prototype._initBusinessUnit = function() {
      this.businessUnit = this.pe.businessUnit;
      return this.elBusinessUnit.html(this.businessUnit);
    };

    PeCardView.prototype._initStage = function() {
      return this.pePicklistManager.getLabelByValue(PharmaEvent.sfdc.stage, this.pe.stage).then((function(_this) {
        return function(label) {
          return _this.elStage.html(label);
        };
      })(this));
    };

    PeCardView.prototype._initEndDate = function() {
      this.endDate = Utils.originalDateTimeObject(this.pe.endDate);
      return this.elEndDate.html(Utils.formatDateTime(this.endDate));
    };

    PeCardView.prototype._initEventName = function() {
      var ref;
      return this._initCommonInput(this.elEventName, ((ref = this.pe) != null ? ref.eventName : void 0) || this.INPUT_DEFAULT_VALUE, this.eventNameMaxLength);
    };

    PeCardView.prototype._initCommonInput = function(element, value, maxLength) {
      element.val(value || '');
      new CommonInput(this.elScrollContent[0], element[0], (this.cardType === 'view' ? this.VIEW_COMMENT_LENGTH : maxLength));
      return element.on('input', (function(_this) {
        return function() {
          return _this.isChanged = true;
        };
      })(this));
    };

    PeCardView.prototype._initLocation = function(defValue) {
      var ref;
      return this._initCommonInput(this.elLocation, ((ref = this.pe) != null ? ref.location : void 0) || this.INPUT_DEFAULT_VALUE, this.locationMaxLength);
    };

    PeCardView.prototype._initProducts = function() {
      var productsIds;
      productsIds = [];
      _(this.MAX_PRODUCTS_NUMBER).times((function(_this) {
        return function(productNumber) {
          return productsIds.push(_this.pe["productPrio" + (productNumber + 1) + "SfId"]);
        };
      })(this));
      return this.productsCollection.getProductsByIds(productsIds).then((function(_this) {
        return function(products) {
          var productsNames;
          productsNames = products.map(function(product) {
            return product.name;
          });
          return _this.elProducts.html(productsNames.join(', '));
        };
      })(this));
    };

    PeCardView.prototype._initSpeakers = function() {
      var ref;
      return this._initCommonInput(this.elSpeakers, ((ref = this.pe) != null ? ref.speakers : void 0) || this.INPUT_DEFAULT_VALUE, this.speakersMaxLength);
    };

    PeCardView.prototype._initAgenda = function() {
      var ref;
      return this._initCommonInput(this.elAgenda, ((ref = this.pe) != null ? ref.agenda : void 0) || this.INPUT_DEFAULT_VALUE, this.agendaMaxLength);
    };

    PeCardView.prototype._initObjectives = function() {
      var ref;
      return this._initCommonInput(this.elObjectives, ((ref = this.pe) != null ? ref.objectives : void 0) || this.INPUT_DEFAULT_VALUE, this.objectivesMaxLength);
    };

    PeCardView.prototype._initEvaluation = function() {
      var ref;
      return this._initCommonInput(this.elEvaluation, ((ref = this.pe) != null ? ref.evaluation : void 0) || this.INPUT_DEFAULT_VALUE, this.evaluationMaxLength);
    };

    PeCardView.prototype._initAttendees = function() {
      this.attendees = [];
      this.attendeesIds = [];
      if (this.pe) {
        return this._loadAttendees().then((function(_this) {
          return function() {
            return _this._showAttendees();
          };
        })(this));
      } else {
        return this.elAttendees.html('');
      }
    };

    PeCardView.prototype._loadAttendees = function() {
      return this.pe.fetchNotDeletedPEAttendees().then(this.peAttendeesCollection.getAllEntitiesFromResponse).then((function(_this) {
        return function(attendees) {
          _this.attendees = attendees;
          return _this.attendeesIds = _this.attendees.map(function(attendee) {
            return attendee.attendeeSfId;
          });
        };
      })(this));
    };

    PeCardView.prototype._showAttendees = function() {
      var contactsNames;
      contactsNames = [];
      return this.attendeesIds.map((function(_this) {
        return function(attendeeId) {
          return _this.contactsCollection.fetchEntityById(attendeeId).then(function(contact) {
            if (contact != null) {
              contactsNames.push(contact.fullName());
              return _this.elAttendees.html(contactsNames.join(', '));
            }
          });
        };
      })(this));
    };

    return PeCardView;

  })(PanelScreen);

  module.exports = PeCardView;

}).call(this);
}, "controllers/pe-card/stage-picklist-datasource": function(exports, require, module) {(function() {
  var PePicklistManager, PharmaEvent, PickListDatasource, StagePicklistDatasource,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PickListDatasource = require('controllers/call-report-card/picklist-datasource');

  PharmaEvent = require('models/pharma-event');

  PePicklistManager = require('db/picklist-managers/pe-picklist-manager');

  StagePicklistDatasource = (function(superClass) {
    extend(StagePicklistDatasource, superClass);

    function StagePicklistDatasource() {
      return StagePicklistDatasource.__super__.constructor.apply(this, arguments);
    }

    StagePicklistDatasource.prototype.pickListName = function() {
      return PharmaEvent.sfdc.stage;
    };

    StagePicklistDatasource.prototype.pickListManager = function() {
      return new PePicklistManager;
    };

    return StagePicklistDatasource;

  })(PickListDatasource);

  module.exports = StagePicklistDatasource;

}).call(this);
}, "controllers/pin/pin": function(exports, require, module) {(function() {
  var AlertPopup, AndroidViewResizer, LockManager, Pin, PinManager, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  AlertPopup = require('controls/popups/alert-popup');

  PinManager = require('common/pin-manager');

  LockManager = require('common/lock-manager');

  Utils = require('common/utils');

  AndroidViewResizer = require('common/android-view-resizer');

  Pin = (function(superClass) {
    extend(Pin, superClass);

    Pin.prototype.className = 'pin-page stack-page';

    Pin.prototype.allAttempts = 3;

    Pin.prototype.elements = {
      '.pin': 'elPin'
    };

    function Pin() {
      this._onConfirmTab = bind(this._onConfirmTab, this);
      this._checkPin = bind(this._checkPin, this);
      Pin.__super__.constructor.apply(this, arguments);
      PinManager.getPinAttempts((function(_this) {
        return function(remainingAttempts) {
          _this.remainingAttempts = remainingAttempts;
          if (!_this.remainingAttempts) {
            return _this._resetPinAttempts();
          }
        };
      })(this));
    }

    Pin.prototype.active = function() {
      Pin.__super__.active.apply(this, arguments);
      this.caption = Locale.value('pin.AlertCaption');
      this.render();
      return PinManager.getPinAttempts((function(_this) {
        return function(remainingAttempts) {
          _this.remainingAttempts = remainingAttempts;
          console.log("pin attempts ", _this.remainingAttempts);
          _this.elPin.focus();
          _this.elPin.blur();
          return _this._cleanInput(_this.elPin);
        };
      })(this));
    };

    Pin.prototype.events = {
      'tap .confirm': '_onConfirmTab',
      'input .pin': '_checkPin',
      'keyup .pin': '_checkPin'
    };

    Pin.prototype._checkPin = function(event) {
      var input;
      input = event.target;
      input.value = this._validatePin(input.value);
      this._checkData(event);
      if (event && event.keyCode === 13) {
        return this._onConfirmTab();
      }
    };

    Pin.prototype._validatePin = function(value) {
      return value.replace(/\D/g, '');
    };

    Pin.prototype._cleanInput = function(el) {
      el.val('');
      return el.parent().addClass('placeholder');
    };

    Pin.prototype.render = function() {
      this.html(require('views/pin/pin')());
      Locale.localize(this.el);
      if (!Utils.isIOS()) {
        new AndroidViewResizer(this.el[0], this.elPin[0]);
      }
      return this;
    };

    Pin.prototype._onConfirmTab = function() {
      this.elPin.blur();
      return PinManager.isPinMatch(this.elPin.val(), (function(_this) {
        return function(isMatch) {
          var alertPopup;
          _this._cleanInput(_this.elPin);
          if (isMatch) {
            _this._resetPinAttempts();
            return LockManager.unlock();
          } else {
            _this.remainingAttempts--;
            PinManager.setPinAttempts(_this.remainingAttempts);
            if (_this.remainingAttempts) {
              alertPopup = new AlertPopup({
                caption: _this.caption,
                message: _this._pinMismatchError()
              });
              alertPopup.customStyleClass('pin-alert');
              alertPopup.show();
              return alertPopup.bind("yesClicked", function() {
                return alertPopup.hide();
              });
            } else {
              alertPopup = new AlertPopup({
                caption: _this.caption,
                message: _this._msgPinWillBeReset()
              });
              alertPopup.customStyleClass('pin-alert');
              alertPopup.show();
              return alertPopup.bind("yesClicked", function() {
                alertPopup.hide();
                return PinManager.removePin(function() {
                  return _this._logout();
                });
              });
            }
          }
        };
      })(this));
    };

    Pin.prototype._resetPinAttempts = function() {
      return PinManager.setPinAttempts(this.allAttempts);
    };

    Pin.prototype._logout = function() {
      var sfOAuthPlugin;
      sfOAuthPlugin = cordova.require("salesforce/plugin/oauth");
      return sfOAuthPlugin.logout();
    };

    Pin.prototype._pinMismatchError = function() {
      return Locale.value('pin.ErrorMessage.IncorrectPin', {
        count: this.remainingAttempts
      });
    };

    Pin.prototype._msgPinWillBeReset = function() {
      return Locale.value('pin.ErrorMessage.PinWillBeReset');
    };

    Pin.prototype._checkData = function(event) {
      var input, parent;
      input = event.target;
      parent = input.parentElement;
      if (input.value) {
        return parent.classList.remove('placeholder');
      } else {
        return parent.classList.add('placeholder');
      }
    };

    return Pin;

  })(Spine.Controller);

  module.exports = Pin;

}).call(this);
}, "controllers/pin/provide-pin": function(exports, require, module) {(function() {
  var AlertPopup, AndroidViewResizer, LockManager, PinManager, ProvidePin, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PinManager = require('common/pin-manager');

  AlertPopup = require('controls/popups/alert-popup');

  LockManager = require('common/lock-manager');

  Utils = require('common/utils');

  AndroidViewResizer = require('common/android-view-resizer');

  ProvidePin = (function(superClass) {
    extend(ProvidePin, superClass);

    function ProvidePin() {
      this._onConfirmTab = bind(this._onConfirmTab, this);
      return ProvidePin.__super__.constructor.apply(this, arguments);
    }

    ProvidePin.prototype.className = 'pin-page provide-pin stack-page active';

    ProvidePin.prototype.passwordLength = 4;

    ProvidePin.prototype.elements = {
      '.new-pin': 'elNewPin',
      '.confirm-pin': 'elConfirmPin'
    };

    ProvidePin.prototype.events = {
      'tap .confirm': '_onConfirmTab',
      'keyup .pin': '_checkPin',
      'input .pin': '_checkPin'
    };

    ProvidePin.prototype.active = function() {
      ProvidePin.__super__.active.apply(this, arguments);
      this.caption = Locale.value('pin.AlertCaption');
      this.render();
      this.elNewPin.val('');
      return this.elConfirmPin.val('');
    };

    ProvidePin.prototype.render = function() {
      this.html(require('views/pin/provide-pin')());
      Locale.localize(this.el);
      if (!Utils.isIOS()) {
        new AndroidViewResizer(this.el[0], this.elNewPin[0]);
      }
      if (!Utils.isIOS()) {
        new AndroidViewResizer(this.el[0], this.elConfirmPin[0]);
      }
      return this;
    };

    ProvidePin.prototype._checkPin = function(event) {
      var input;
      input = event.target;
      input.value = this._validatePin(input.value);
      this._checkData(event);
      if (event && event.keyCode === 13) {
        return this._onConfirmTab();
      }
    };

    ProvidePin.prototype._validatePin = function(value) {
      return value.replace(/\D/g, '');
    };

    ProvidePin.prototype._onConfirmTab = function() {
      var alertPopup;
      this.elNewPin.blur();
      this.elConfirmPin.blur();
      if (this.elNewPin.val().length < this.passwordLength) {
        alertPopup = new AlertPopup({
          caption: this.caption,
          message: this._pinLengthError()
        });
        alertPopup.customStyleClass('pin-alert');
        alertPopup.show();
        return alertPopup.bind("yesClicked", (function(_this) {
          return function() {
            return alertPopup.hide();
          };
        })(this));
      } else if (this.elNewPin.val() === this.elConfirmPin.val()) {
        PinManager.setPin(this.elNewPin.val());
        return LockManager.unlock();
      } else {
        alertPopup = new AlertPopup({
          caption: this.caption,
          message: this._pinConfirmError()
        });
        alertPopup.customStyleClass('pin-alert');
        alertPopup.show();
        return alertPopup.bind("yesClicked", (function(_this) {
          return function() {
            return alertPopup.hide();
          };
        })(this));
      }
    };

    ProvidePin.prototype._pinLengthError = function() {
      return Locale.value('pin.ErrorMessage.PinLength', {
        count: this.passwordLength
      });
    };

    ProvidePin.prototype._pinConfirmError = function() {
      return Locale.value('pin.ErrorMessage.PinsAreNotEqual');
    };

    ProvidePin.prototype._checkData = function(event) {
      var input, parent;
      input = event.target;
      parent = input.parentElement;
      if (input.value) {
        return parent.classList.remove('placeholder');
      } else {
        return parent.classList.add('placeholder');
      }
    };

    return ProvidePin;

  })(Spine.Controller);

  module.exports = ProvidePin;

}).call(this);
}, "controllers/presentation-viewer/presentation-scenario-viewer": function(exports, require, module) {(function() {
  var FileProcessor, PresentationScenarioViewer, PresentationStructureGenerator, PresentationViewer, PresentationsCollection, PresentationsFileManager, Query, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PresentationsFileManager = require('common/presentation-managers/presentations-file-manager');

  Spine = require('spine');

  PresentationStructureGenerator = require('controllers/agenda/presentation-structure-generator');

  PresentationsCollection = require('models/bll/presentations-collection');

  Query = require('common/query');

  PresentationViewer = require('controllers/presentation-viewer/presentation-viewer');

  Utils = require('common/utils');

  FileProcessor = require('common/file-processor/file-processor');

  PresentationScenarioViewer = (function(superClass) {
    extend(PresentationScenarioViewer, superClass);

    PresentationScenarioViewer.include(Spine.Events);

    PresentationScenarioViewer.prototype.PLUGIN_NAME = 'PresentationViewer';

    PresentationScenarioViewer.prototype.ENTRY_FILENAME = 'index.html';

    PresentationScenarioViewer.prototype.ANDROID_ENTRY_FILENAME = 'file:///android_asset/www/engine/index.html';

    PresentationScenarioViewer.prototype.IOS_ENTRY_FILENAME = 'engine/index.html';

    PresentationScenarioViewer.prototype.EVENT_DID_LOAD = 'DID_LOAD';

    PresentationScenarioViewer.prototype.EVENT_ON_COMPLETE = 'ON_COMPLETE';

    function PresentationScenarioViewer(scenario) {
      this.scenario = scenario;
      this.getKPI = bind(this.getKPI, this);
      this.closePresentation = bind(this.closePresentation, this);
      this._presentationViewingErrorHandler = bind(this._presentationViewingErrorHandler, this);
      this._presentationViewingHandler = bind(this._presentationViewingHandler, this);
      this.openPresentation = bind(this.openPresentation, this);
    }

    PresentationScenarioViewer.prototype.openPresentation = function() {
      return PresentationStructureGenerator.generate(this.scenario).then((function(_this) {
        return function(structurePath) {
          var indexWithStructure, presentationIndexPath;
          indexWithStructure = "" + _this.ENTRY_FILENAME;
          if (Utils.isIOS()) {
            presentationIndexPath = _this.IOS_ENTRY_FILENAME;
          } else {
            presentationIndexPath = _this.ANDROID_ENTRY_FILENAME;
            structurePath = structurePath.replace('file://', '');
          }
          return cordova.exec(_this._presentationViewingHandler, _this._presentationViewingErrorHandler, _this.PLUGIN_NAME, 'openPresentation', [presentationIndexPath, structurePath]);
        };
      })(this));
    };

    PresentationScenarioViewer.prototype._pathWithPathComponent = function(path, pathComponent) {
      return path + "/" + pathComponent;
    };

    PresentationScenarioViewer.prototype._presentationViewingHandler = function(message) {
      switch (message) {
        case this.EVENT_DID_LOAD:
          return this.trigger('didLoad', this);
        case this.EVENT_ON_COMPLETE:
          return this.trigger('complete', this);
        default:
          return this.trigger('didLoad', this);
      }
    };

    PresentationScenarioViewer.prototype._presentationViewingErrorHandler = function(message) {
      return this.trigger('error', this);
    };

    PresentationScenarioViewer.prototype.closePresentation = function() {
      var deferred;
      deferred = new $.Deferred();
      cordova.exec((function() {
        return deferred.resolve();
      }), (function(error) {
        return deferred.reject(error);
      }), this.PLUGIN_NAME, 'closePresentation', []);
      return deferred.promise();
    };

    PresentationScenarioViewer.prototype.getKPI = function() {
      var deferred;
      deferred = new $.Deferred();
      cordova.exec((function(kpi) {
        return deferred.resolve(kpi);
      }), (function(error) {
        return deferred.reject(error);
      }), this.PLUGIN_NAME, 'getKPI', []);
      return deferred.promise();
    };

    return PresentationScenarioViewer;

  })(Spine.Module);

  module.exports = PresentationScenarioViewer;

}).call(this);
}, "controllers/presentation-viewer/presentation-viewer": function(exports, require, module) {(function() {
  var PresentationViewer, PresentationsFileManager, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PresentationsFileManager = require('common/presentation-managers/presentations-file-manager');

  Spine = require('spine');

  PresentationViewer = (function(superClass) {
    extend(PresentationViewer, superClass);

    PresentationViewer.include(Spine.Events);

    PresentationViewer.prototype.PLUGIN_NAME = 'PresentationViewer';

    PresentationViewer.prototype.ENTRY_FILENAME = 'index.html';

    PresentationViewer.prototype.EVENT_DID_LOAD = 'DID_LOAD';

    PresentationViewer.prototype.EVENT_ON_COMPLETE = 'ON_COMPLETE';

    function PresentationViewer(presentationId) {
      this.presentationId = presentationId;
      this.getKPI = bind(this.getKPI, this);
      this.closePresentation = bind(this.closePresentation, this);
      this._presentationViewingErrorHandler = bind(this._presentationViewingErrorHandler, this);
      this._presentationViewingHandler = bind(this._presentationViewingHandler, this);
      this.openPresentation = bind(this.openPresentation, this);
    }

    PresentationViewer.prototype.openPresentation = function() {
      var presentationIndexPath;
      presentationIndexPath = this._pathWithPathComponent(PresentationsFileManager.getPathToPresentation(this.presentationId), this.ENTRY_FILENAME);
      return cordova.exec(this._presentationViewingHandler, this._presentationViewingErrorHandler, this.PLUGIN_NAME, 'openPresentation', [presentationIndexPath]);
    };

    PresentationViewer.prototype._pathWithPathComponent = function(path, pathComponent) {
      return path + "/" + pathComponent;
    };

    PresentationViewer.prototype._presentationViewingHandler = function(message) {
      switch (message) {
        case this.EVENT_DID_LOAD:
          return this.trigger('didLoad', this);
        case this.EVENT_ON_COMPLETE:
          return this.trigger('complete', this);
        default:
          return this.trigger('didLoad', this);
      }
    };

    PresentationViewer.prototype._presentationViewingErrorHandler = function(message) {
      return this.trigger('error', this);
    };

    PresentationViewer.prototype.closePresentation = function() {
      var deferred;
      deferred = new $.Deferred();
      cordova.exec((function() {
        return deferred.resolve();
      }), (function(error) {
        return deferred.reject(error);
      }), this.PLUGIN_NAME, 'closePresentation', []);
      return deferred.promise();
    };

    PresentationViewer.prototype.getKPI = function() {
      var deferred;
      deferred = new $.Deferred();
      cordova.exec((function(kpi) {
        return deferred.resolve(kpi);
      }), (function(error) {
        return deferred.reject(error);
      }), this.PLUGIN_NAME, 'getKPI', []);
      return deferred.promise();
    };

    return PresentationViewer;

  })(Spine.Module);

  module.exports = PresentationViewer;

}).call(this);
}, "controllers/signature-view/signature-view": function(exports, require, module) {(function() {
  var ActivityIndicator, FullscreenPanel, Header, HeaderBaseControl, SignatureView,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FullscreenPanel = require('controllers/base/panel/fullscreen-panel');

  ActivityIndicator = require('common/activity-indicator');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  SignatureView = (function(superClass) {
    extend(SignatureView, superClass);

    function SignatureView() {
      this._onClearTap = bind(this._onClearTap, this);
      this._onSaveTap = bind(this._onSaveTap, this);
      this._resizeSignature = bind(this._resizeSignature, this);
      this.disableSaveBtn = bind(this.disableSaveBtn, this);
      this.enableSaveBtn = bind(this.enableSaveBtn, this);
      return SignatureView.__super__.constructor.apply(this, arguments);
    }

    SignatureView.prototype.className = 'signature-view full-screen';

    SignatureView.prototype.elements = {
      '.signature': 'elSignature'
    };

    SignatureView.prototype.active = function() {
      SignatureView.__super__.active.apply(this, arguments);
      return this.render();
    };

    SignatureView.prototype.render = function() {
      this._initHeader();
      this.html(this.template(this.content.width(), this.content.height()));
      Locale.localize(this.el);
      this.drawController = new DrawController(this.elSignature[0], '', null);
      return this.elSignature.bind(touchy.events.start, this.enableSaveBtn);
    };

    SignatureView.prototype._initHeader = function() {
      var clearBtn, signatureHeader;
      this.saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      this.saveBtn.bind('tap', this._onSaveTap);
      clearBtn = new HeaderBaseControl(Locale.value('common:buttons.ClearBtn'), 'ctrl-btn');
      clearBtn.bind('tap', this._onClearTap);
      signatureHeader = new Header(Locale.value('signature.HeaderTitle'));
      signatureHeader.render();
      signatureHeader.addRightControlElement(clearBtn.el);
      signatureHeader.addRightControlElement(this.saveBtn.el);
      this.setHeader(signatureHeader);
      return this.disableSaveBtn();
    };

    SignatureView.prototype.enableSaveBtn = function() {
      return this.saveBtn.el.removeClass('disabled');
    };

    SignatureView.prototype.disableSaveBtn = function() {
      return this.saveBtn.el.addClass('disabled');
    };

    SignatureView.prototype.template = function(width, height) {
      return require('views/signature-view/signature-view')({
        width: width,
        height: height
      });
    };

    SignatureView.prototype._resizeSignature = function(signatureBase64) {
      var canvas, context, deferred, image, scaledHeight, scaledWidth;
      deferred = new $.Deferred;
      scaledWidth = 400;
      scaledHeight = 200;
      canvas = document.createElement('canvas');
      canvas.width = scaledWidth;
      canvas.height = scaledHeight;
      context = canvas.getContext('2d');
      image = new Image;
      image.onload = (function(_this) {
        return function() {
          var encoder, imageData;
          context.fillStyle = 'white';
          context.fillRect(0, 0, scaledWidth, scaledHeight);
          context.drawImage(image, 0, 0, _this.content.width(), _this.content.height(), 0, 0, scaledWidth, scaledHeight);
          encoder = new JPEGEncoder();
          imageData = encoder.encode(context.getImageData(0, 0, canvas.width, canvas.height), 1);
          imageData = imageData.replace('data:image/jpeg;base64,', '');
          return deferred.resolve(imageData);
        };
      })(this);
      image.src = signatureBase64;
      return deferred.promise();
    };

    SignatureView.prototype._onSaveTap = function() {
      var originSignature, spinner;
      originSignature = this.drawController.save();
      spinner = new ActivityIndicator(this.el[0]);
      spinner.show();
      return this._resizeSignature(originSignature).then((function(_this) {
        return function(signatureImgBase64) {
          spinner.hide();
          _this.trigger('saveTap', signatureImgBase64);
          return _this.onBack();
        };
      })(this));
    };

    SignatureView.prototype._onClearTap = function() {
      this.disableSaveBtn();
      return this.drawController.clear();
    };

    return SignatureView;

  })(FullscreenPanel);

  module.exports = SignatureView;

}).call(this);
}, "controllers/tabbar/stage-tabbar-item": function(exports, require, module) {(function() {
  var Stage, StageTabbarItem,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Stage = require('controllers/base/stage/stage');

  StageTabbarItem = (function(superClass) {
    extend(StageTabbarItem, superClass);

    function StageTabbarItem() {
      StageTabbarItem.__super__.constructor.apply(this, arguments);
      this.el.addClass('stage-tabbar-item');
    }

    return StageTabbarItem;

  })(Stage);

  module.exports = StageTabbarItem;

}).call(this);
}, "controllers/tabbar/tabbar-controller": function(exports, require, module) {(function() {
  var Activities, Contacts, Media, Organizations, SettingsManager, Stage, TabbarController, TabbarItem, TabbarView, Tots, TourPlanning,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TabbarView = require('controllers/tabbar/tabbar-view');

  TabbarItem = require('controllers/tabbar/tabbar-item');

  Stage = require('controllers/base/stage/stage');

  Contacts = require('controllers/contacts/contacts');

  Activities = require('controllers/activities/activities');

  TourPlanning = require('controllers/tour-planning/tour-planning');

  Tots = require('controllers/tots/tots');

  Organizations = require('controllers/organizations/organizations');

  Media = require('controllers/media/media');

  SettingsManager = require('db/settings-manager');

  TabbarController = (function(superClass) {
    extend(TabbarController, superClass);

    TabbarController.prototype.className = 'tabbar stack-page';

    function TabbarController() {
      this.reset = bind(this.reset, this);
      this._goHome = bind(this._goHome, this);
      TabbarController.__super__.constructor.apply(this, arguments);
      this.tabbarView = new TabbarView([
        new TabbarItem({
          action: this._goHome,
          title: this._tabbarItemTitle('tabbar.Home'),
          pathToIcon: 'img/tabbar/home.png'
        }), new TabbarItem({
          controller: new Activities,
          name: 'activities',
          title: this._tabbarItemTitle('tabbar.Activities'),
          pathToIcon: 'img/tabbar/activities.png'
        }), new TabbarItem({
          controller: new Contacts,
          name: 'contacts',
          title: this._tabbarItemTitle('tabbar.Contacts'),
          pathToIcon: 'img/tabbar/contacts.png'
        }), new TabbarItem({
          controller: new Organizations,
          name: 'organizations',
          title: this._tabbarItemTitle('tabbar.Organizations'),
          pathToIcon: 'img/tabbar/organizations.png'
        }), new TabbarItem({
          controller: new TourPlanning,
          name: 'tour-planning',
          title: this._tabbarItemTitle('tabbar.TourPlanning'),
          pathToIcon: 'img/tabbar/tour-planning.png'
        }), new TabbarItem({
          controller: new Tots,
          name: 'tots',
          title: this._tabbarItemTitle('tabbar.TimeOffTerritory'),
          pathToIcon: 'img/tabbar/tots.png'
        }), new TabbarItem({
          controller: new Media,
          name: 'media',
          title: this._tabbarItemTitle('tabbar.Media'),
          pathToIcon: 'img/tabbar/media.png'
        })
      ]);
      this.footer.replaceWith(this.tabbarView.el);
      this.footer = this.tabbarView.el;
    }

    TabbarController.prototype._tabbarItemTitle = function(titleLocale) {
      return function() {
        return Locale.value(titleLocale);
      };
    };

    TabbarController.prototype.activate = function() {
      var ref;
      TabbarController.__super__.activate.apply(this, arguments);
      return (ref = this.tabbarView) != null ? ref.activate() : void 0;
    };

    TabbarController.prototype.active = function(params) {
      if (params == null) {
        params = {};
      }
      return SettingsManager.getValueByKey('isEdetailingEnabled').then((function(_this) {
        return function(isEdetailingEnabled) {
          _this.isEdetailingEnabled = isEdetailingEnabled;
          if (_this.isEdetailingEnabled) {
            _this._showMedia();
          } else {
            _this._hideMedia();
          }
          TabbarController.__super__.active.call(_this, params);
          return _this._activateTabControllerByName(params.tabName);
        };
      })(this));
    };

    TabbarController.prototype._hideMedia = function() {
      var tabMedia;
      tabMedia = this.tabbarView[this.tabbarView.options.length - 1];
      return tabMedia.el.addClass('hide');
    };

    TabbarController.prototype._showMedia = function() {
      var tabMedia;
      tabMedia = this.tabbarView[this.tabbarView.options.length - 1];
      return tabMedia.el.removeClass('hide');
    };

    TabbarController.prototype._activateTabControllerByName = function(tabName) {
      var ref;
      return (ref = this.tabbarView[tabName]) != null ? ref.active() : void 0;
    };

    TabbarController.prototype._goHome = function() {
      return this.navigate('/home');
    };

    TabbarController.prototype.reset = function() {
      return this.tabbarView.resetControllers();
    };

    return TabbarController;

  })(Stage.Global);

  module.exports = TabbarController;

}).call(this);
}, "controllers/tabbar/tabbar-item": function(exports, require, module) {(function() {
  var Spine, Stage, StageTabbarItem, TabbarItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  StageTabbarItem = require('controllers/tabbar/stage-tabbar-item');

  Stage = require('controllers/base/stage/stage');

  TabbarItem = (function(superClass) {
    extend(TabbarItem, superClass);

    TabbarItem.prototype.className = 'tab-button';

    TabbarItem.prototype.elements = {
      '.tab-icon': 'elIcon',
      '.tab-title': 'elTitle'
    };

    TabbarItem.prototype.events = {
      'tap': '_onTabbarItemTap',
      'doubleTap': '_popToRoot'
    };

    TabbarItem.prototype.title = null;

    TabbarItem.prototype.name = null;

    TabbarItem.prototype.pathToIcon = null;

    TabbarItem.prototype.controller = null;

    TabbarItem.prototype.action = null;

    TabbarItem.prototype._onTabbarItemTap = function(event) {
      if (this.action) {
        return this.action();
      } else {
        return this.trigger('tabbarItemTap', this);
      }
    };

    function TabbarItem() {
      this._popToRoot = bind(this._popToRoot, this);
      this.reset = bind(this.reset, this);
      var stageController;
      TabbarItem.__super__.constructor.apply(this, arguments);
      if (this.controller) {
        stageController = new StageTabbarItem;
        Stage.globalStage().add(stageController);
        this.controller.stage = stageController;
        stageController.add(this.controller);
      }
    }

    TabbarItem.prototype.active = function() {
      TabbarItem.__super__.active.apply(this, arguments);
      this.render();
      this.controller.stage.active();
      if (!this._lastOpenedController().isActive()) {
        return this.controller.active();
      } else {
        return this._lastOpenedController().activate();
      }
    };

    TabbarItem.prototype._lastOpenedController = function() {
      return _.last(this.controller.stage.manager.controllers);
    };

    TabbarItem.prototype.render = function() {
      this.html(this.template());
      this.setTitle(this.title);
      this.setIcon(this.pathToIcon);
      return this;
    };

    TabbarItem.prototype.template = function() {
      return require('views/tabbar/tabbar-item');
    };

    TabbarItem.prototype.setTitle = function(title) {
      this.title = title;
      return this.elTitle.html(this.title());
    };

    TabbarItem.prototype.setIcon = function(pathToIcon) {
      this.pathToIcon = pathToIcon;
      return this.elIcon.css({
        '-webkit-mask': "url('" + this.pathToIcon + "') no-repeat center top",
        '-webkit-mask-size': 'auto 100%'
      });
    };

    TabbarItem.prototype.reset = function() {
      var ref;
      return (ref = this.controller) != null ? ref.stage.resetToRoot() : void 0;
    };

    TabbarItem.prototype._popToRoot = function() {
      var ref;
      return (ref = this.controller) != null ? ref.stage.popToRoot() : void 0;
    };

    return TabbarItem;

  })(Spine.Controller);

  module.exports = TabbarItem;

}).call(this);
}, "controllers/tabbar/tabbar-view": function(exports, require, module) {(function() {
  var Spine, TabbarView,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TabbarView = (function(superClass) {
    extend(TabbarView, superClass);

    TabbarView.prototype.tag = 'footer';

    function TabbarView(tabbarItems) {
      this.resetControllers = bind(this.resetControllers, this);
      TabbarView.__super__.constructor.apply(this, arguments);
      tabbarItems.forEach((function(_this) {
        return function(tabbarItem, index) {
          tabbarItem.on('tabbarItemTap', function(tabItem) {
            if (!tabItem.isActive()) {
              return tabItem.active();
            }
          });
          tabbarItem.stack = _this;
          _this[tabbarItem.name] = tabbarItem;
          return _this.add(tabbarItem.render());
        };
      })(this));
    }

    TabbarView.prototype._doForEachController = function(action) {
      var controller, i, len, ref, results;
      ref = this.manager.controllers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        controller = ref[i];
        results.push(action(controller));
      }
      return results;
    };

    TabbarView.prototype.resetControllers = function() {
      return this._doForEachController(function(controller) {
        return controller.reset();
      });
    };

    TabbarView.prototype.activate = function() {
      return this._doForEachController(function(controller) {
        return controller.render();
      });
    };

    return TabbarView;

  })(Spine.Stack);

  module.exports = TabbarView;

}).call(this);
}, "controllers/tot-card/tot-card-create": function(exports, require, module) {(function() {
  var CommentView, CommonInput, ConfirmationPopup, DatePicker, DatePickerExtended, Header, HeaderBaseControl, ListPopup, PickList, SforceDataContext, Tot, TotCardCreate, TotCardView, TotEventsPickListDatasource, TotsCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TotsCollection = require('/models/bll/tots-collection/tots-collection');

  Utils = require('common/utils');

  SforceDataContext = require('models/bll/sforce-data-context');

  TotCardView = require('controllers/tot-card/tot-card-view');

  DatePicker = require('controls/datepicker/datepicker');

  DatePickerExtended = require('controls/datepicker/datepicker-extended');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  ListPopup = require('controls/popups/list-popup');

  CommentView = require('controls/comment-view/comment-view');

  Tot = require('models/tot');

  TotEventsPickListDatasource = require('controllers/tot-card/tot-events-picklist-datasource');

  PickList = require('controls/pick-list/pick-list');

  CommonInput = require('controls/common-input/common-input');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  TotCardCreate = (function(superClass) {
    extend(TotCardCreate, superClass);

    function TotCardCreate() {
      this._save = bind(this._save, this);
      this._saveTot = bind(this._saveTot, this);
      this.onBack = bind(this.onBack, this);
      this._setEndDate = bind(this._setEndDate, this);
      this._showEndDatePicker = bind(this._showEndDatePicker, this);
      this._setStartDate = bind(this._setStartDate, this);
      this._showStartDatePicker = bind(this._showStartDatePicker, this);
      this._resetChangeFlags = bind(this._resetChangeFlags, this);
      return TotCardCreate.__super__.constructor.apply(this, arguments);
    }

    TotCardCreate.prototype.className = 'tot card create-mode';

    TotCardCreate.prototype.activeUser = null;

    TotCardCreate.prototype.eventsArray = null;

    TotCardCreate.prototype.daysMax = 13;

    TotCardCreate.prototype.daysAfter = 90;

    TotCardCreate.prototype.events = {
      'tap .tot-card-start-date': '_editStartDate',
      'tap .tot-card-end-date': '_editEndDate',
      'change .check-all-day': '_editAllDay'
    };

    TotCardCreate.prototype.active = function() {
      this._resetChangeFlags();
      TotCardCreate.__super__.active.apply(this, arguments);
      return this.placeholder = Locale.value('card.Tot.Placeholder');
    };

    TotCardCreate.prototype._resetChangeFlags = function() {
      return this.isChanged = false;
    };

    TotCardCreate.prototype._init = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(activeUser) {
          _this.activeUser = activeUser;
          return _this.render();
        };
      })(this));
    };

    TotCardCreate.prototype._initHeader = function() {
      var totHeader;
      this.saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      this.saveBtn.bind('tap', this._saveTot);
      totHeader = new Header(Locale.value('card.Tot.HeaderTitle'));
      totHeader.render();
      totHeader.addRightControlElement(this.saveBtn.el);
      return this.setHeader(totHeader);
    };

    TotCardCreate.prototype._fillDefaultInfo = function() {
      var ref;
      this.elUserFullName.html((ref = this.activeUser) != null ? ref.fullName() : void 0);
      this._initDefaultStartDate();
      this._initDefaultEndDate();
      this._initFirstQuarter();
      this._initThirdQuarter();
      if (this._hasQuarters) {
        this._initSecondQuarter();
        this._initFourthQuarter();
      } else {
        this.el.addClass('morning-afternoon');
        this.morningLabel.text(Locale.value('card.Tot.Morning'));
        this.afternoonLabel.text(Locale.value('card.Tot.Afternoon'));
      }
      this._initDefaultAllDay();
      return this._initDefaultDescription();
    };

    TotCardCreate.prototype._initDefaultStartDate = function() {
      this.startDate = Utils.getDateByStr(Utils.currentDate());
      return this.elStartDate.html(Utils.dotFormatDate(this.startDate));
    };

    TotCardCreate.prototype._initDefaultEndDate = function() {
      this.endDate = Utils.getDateByStr(Utils.currentDate());
      return this.elEndDate.html(Utils.dotFormatDate(this.endDate));
    };

    TotCardCreate.prototype._initFirstQuarter = function() {
      var ref;
      this.firstQuarterPickList = new PickList(this, this.elFirstQuarter, new TotEventsPickListDatasource, ((ref = this.tot) != null ? ref.firstQuarterEvent : void 0) || null);
      return this.firstQuarterPickList.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this.isChanged = true;
        };
      })(this));
    };

    TotCardCreate.prototype._initSecondQuarter = function() {
      var ref;
      this.secondQuarterPickList = new PickList(this, this.elSecondQuarter, new TotEventsPickListDatasource, ((ref = this.tot) != null ? ref.secondQuarterEvent : void 0) || null);
      return this.secondQuarterPickList.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this.isChanged = true;
        };
      })(this));
    };

    TotCardCreate.prototype._initThirdQuarter = function() {
      var ref;
      this.thirdQuarterPickList = new PickList(this, this.elThirdQuarter, new TotEventsPickListDatasource, ((ref = this.tot) != null ? ref.thirdQuarterEvent : void 0) || null);
      return this.thirdQuarterPickList.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this.isChanged = true;
        };
      })(this));
    };

    TotCardCreate.prototype._initFourthQuarter = function() {
      var ref;
      this.fourthQuarterPickList = new PickList(this, this.elFourthQuarter, new TotEventsPickListDatasource, ((ref = this.tot) != null ? ref.fourthQuarterEvent : void 0) || null);
      return this.fourthQuarterPickList.bind('onPickListItemSelected', (function(_this) {
        return function() {
          return _this.isChanged = true;
        };
      })(this));
    };

    TotCardCreate.prototype._initDefaultAllDay = function() {
      this.allDay = false;
      this.elAllDay[0].checked = this.allDay;
      return this._refreshQuarters();
    };

    TotCardCreate.prototype._refreshQuarters = function() {
      if (this.allDay) {
        this.el.addClass('all-day-checked');
        this.thirdQuarterPickList.setValue(null);
        if (this._hasQuarters) {
          this.secondQuarterPickList.setValue(null);
          return this.fourthQuarterPickList.setValue(null);
        }
      } else {
        return this.el.removeClass('all-day-checked');
      }
    };

    TotCardCreate.prototype._initDefaultDescription = function() {
      return this._initDescription('');
    };

    TotCardCreate.prototype._editStartDate = function() {
      return this._showStartDatePicker(this.startDate, this._setStartDate);
    };

    TotCardCreate.prototype._showStartDatePicker = function(date, handler) {
      var datePicker;
      datePicker = new DatePicker(date, {
        beforeKey: 'daysTimeOff',
        afterDays: this.daysAfter
      });
      datePicker.on('onDonePressed', (function(_this) {
        return function(selectedDate) {
          return _this._handleStartDateEntered(selectedDate, handler);
        };
      })(this));
      return this.presentModalController(datePicker);
    };

    TotCardCreate.prototype._setStartDate = function(value) {
      var daysBetween, latestDate;
      this.startDate = value;
      this.elStartDate.html(Utils.dotFormatDate(value));
      if (value) {
        this.isChanged = true;
      }
      daysBetween = Utils.getDaysBetween(this.startDate, this.endDate);
      if (daysBetween < 0) {
        this._setEndDate(value);
      }
      if (daysBetween > this.daysMax) {
        latestDate = new Date(value);
        latestDate.setDate(latestDate.getDate() + this.daysMax);
        return this._setEndDate(latestDate);
      }
    };

    TotCardCreate.prototype._handleStartDateEntered = function(date, handler) {
      var day, toastMessage;
      day = this._getDayOffByDate(date);
      if (day == null) {
        this.dismissModalController();
        return handler(date);
      } else {
        toastMessage = (day + " ") + Locale.value('card.Tot.UserDayOff');
        return $.fn.dpToast(toastMessage);
      }
    };

    TotCardCreate.prototype._editEndDate = function() {
      return this._showEndDatePicker(this._setEndDate);
    };

    TotCardCreate.prototype._showEndDatePicker = function(handler) {
      var datePicker, daysBetween, startDate;
      startDate = Utils.dateWithoutTime(this.startDate);
      daysBetween = Utils.getDaysBetween(startDate, this.endDate);
      datePicker = new DatePickerExtended(this.endDate, {
        beforeDays: daysBetween,
        afterDays: this.daysMax
      });
      datePicker.on('onDonePressed', (function(_this) {
        return function(selectedDate) {
          return _this._handleEndDateEntered(selectedDate, handler);
        };
      })(this));
      return this.presentModalController(datePicker);
    };

    TotCardCreate.prototype._setEndDate = function(value) {
      this.endDate = value;
      this.elEndDate.html(Utils.dotFormatDate(value));
      if (value) {
        return this.isChanged = true;
      }
    };

    TotCardCreate.prototype._handleEndDateEntered = function(date, handler) {
      var daysOff, toastMessage;
      daysOff = this._getUserDaysOffFromInterval(this.startDate, date);
      if (!(daysOff.length > 0)) {
        this.dismissModalController();
        return handler(date);
      } else {
        toastMessage = ((daysOff.join(', ').toString()) + " ") + Locale.value('card.Tot.UserDaysOff');
        return $.fn.dpToast(toastMessage);
      }
    };

    TotCardCreate.prototype._editAllDay = function(event) {
      this.isChanged = true;
      this.allDay = event.target.checked;
      return this._refreshQuarters();
    };

    TotCardCreate.prototype._getUserDaysOffFromInterval = function(startDate, endDate) {
      var day, daysOff;
      daysOff = [];
      startDate = Utils.dateWithoutTime(startDate);
      endDate = Utils.dateWithoutTime(endDate);
      while (startDate <= endDate) {
        day = this._getDayOffByDate(startDate);
        if (day && !_.contains(daysOff, day)) {
          daysOff.push(day);
        }
        startDate = new Date(startDate.setDate(startDate.getDate() + 1));
      }
      return daysOff;
    };

    TotCardCreate.prototype._getDayOffByDate = function(date) {
      var day;
      day = this.activeUser.getDayOffByIndex(date.getDay());
      if (day === this.activeUser.DayOff1 || day === this.activeUser.DayOff2) {
        return day;
      } else {
        return null;
      }
    };

    TotCardCreate.prototype.onBack = function() {
      var confirm;
      if (!this.isChanged) {
        return TotCardCreate.__super__.onBack.apply(this, arguments);
      } else {
        confirm = new ConfirmationPopup({
          caption: Locale.value('card.ConfirmationPopup.SaveChanges.Caption')
        });
        confirm.bind('yesClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            return _this._saveTot();
          };
        })(this));
        confirm.bind('noClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            _this._resetChangeFlags();
            return TotCardCreate.__super__.onBack.apply(_this, arguments);
          };
        })(this));
        return this.presentModalController(confirm);
      }
    };

    TotCardCreate.prototype._saveTot = function() {
      if (this._validData()) {
        return this._save().then(this._resetChangeFlags).then((function(_this) {
          return function() {
            return _this.trigger('totChanged');
          };
        })(this)).then(this.onBack);
      }
    };

    TotCardCreate.prototype._validData = function() {
      var daysOff, isDataValid, toastBody, toastHeader, toastMessage;
      toastHeader = (Locale.value('card.Tot.ToastMessage.ToastHeader')) + " <br/>";
      toastBody = '';
      if (this.allDay && !this._isQuarterValid(this.firstQuarterPickList.selectedValue)) {
        toastBody += this._hasQuarters ? (Locale.value('card.Tot.ToastMessage.FirstPart')) + " <br/>" : (Locale.value('card.Tot.ToastMessage.Morning')) + " <br/>";
      }
      if (!this.allDay && !this._isOneOfFieldsFilled()) {
        if (this._hasQuarters) {
          toastBody += (Locale.value('card.Tot.ToastMessage.FirstPart')) + " <br/>";
          toastBody += (Locale.value('card.Tot.ToastMessage.SecondPart')) + " <br/>";
          toastBody += (Locale.value('card.Tot.ToastMessage.ThirdPart')) + " <br/>";
          toastBody += (Locale.value('card.Tot.ToastMessage.ForthPart')) + " <br/>";
        } else {
          toastBody += (Locale.value('card.Tot.ToastMessage.Morning')) + " <br/>";
          toastBody += (Locale.value('card.Tot.ToastMessage.Afternoon')) + " <br/>";
        }
      }
      if (this.endDate < this.startDate) {
        toastBody += (Locale.value('card.Tot.ToastMessage.DateRange')) + " <br/>";
      }
      daysOff = this._getUserDaysOffFromInterval(this.startDate, this.endDate);
      if (daysOff.length) {
        if (toastBody.length === 0) {
          toastHeader = "";
        }
        toastBody += ((daysOff.join(', ').toString()) + " ") + Locale.value('card.Tot.UserDaysOff');
      }
      isDataValid = toastBody.length === 0;
      toastMessage = toastHeader + toastBody;
      if (!isDataValid) {
        $.fn.dpToast(toastMessage);
      }
      return isDataValid;
    };

    TotCardCreate.prototype._isQuarterValid = function(quarter) {
      return quarter && quarter !== null;
    };

    TotCardCreate.prototype._isOneOfFieldsFilled = function() {
      return this._isQuarterValid(this.firstQuarterPickList.selectedValue) || this._isQuarterValid(this.thirdQuarterPickList.selectedValue) || (this._hasQuarters ? this._isQuarterValid(this.secondQuarterPickList.selectedValue) || this._isQuarterValid(this.fourthQuarterPickList.selectedValue) : void 0);
    };

    TotCardCreate.prototype._save = function() {
      var collection, ref, ref1, ref2, ref3, ref4, tot;
      tot = {};
      tot[Tot.sfdc.createdOffline] = true;
      tot[Tot.sfdc.userSfId] = (ref = this.activeUser) != null ? ref.id : void 0;
      tot[Tot.sfdc.userLastName] = (ref1 = this.activeUser) != null ? ref1.lastName : void 0;
      tot[Tot.sfdc.userFirstName] = (ref2 = this.activeUser) != null ? ref2.firstName : void 0;
      tot[Tot.sfdc.allDay] = this.allDay;
      tot[Tot.sfdc.startDate] = Utils.currentDate(this.startDate);
      tot[Tot.sfdc.endDate] = Utils.currentDate(this.endDate);
      tot[Tot.sfdc.firstQuarterEvent] = this.firstQuarterPickList.selectedValue;
      tot[Tot.sfdc.secondQuarterEvent] = ((ref3 = this.secondQuarterPickList) != null ? ref3.selectedValue : void 0) || null;
      tot[Tot.sfdc.thirdQuarterEvent] = this.thirdQuarterPickList.selectedValue;
      tot[Tot.sfdc.fourthQuarterEvent] = ((ref4 = this.fourthQuarterPickList) != null ? ref4.selectedValue : void 0) || null;
      tot[Tot.sfdc.type] = Tot.TYPE_OPEN;
      tot[Tot.sfdc.description] = this.description;
      tot[Tot.sfdc.isSubmittedForApproval] = false;
      tot['attributes'] = {
        type: Tot.table
      };
      collection = new TotsCollection;
      return collection.createEntity(tot);
    };

    return TotCardCreate;

  })(TotCardView);

  module.exports = TotCardCreate;

}).call(this);
}, "controllers/tot-card/tot-card-edit": function(exports, require, module) {(function() {
  var ConfirmationPopup, Header, HeaderBaseControl, Tot, TotCardCreate, TotCardEdit, TotsCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TotCardCreate = require('controllers/tot-card/tot-card-create');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  TotsCollection = require('/models/bll/tots-collection/tots-collection');

  Utils = require('common/utils');

  Tot = require('models/tot');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  TotCardEdit = (function(superClass) {
    extend(TotCardEdit, superClass);

    function TotCardEdit() {
      this._save = bind(this._save, this);
      this._onDeleteDiscard = bind(this._onDeleteDiscard, this);
      this._onDeleteApprove = bind(this._onDeleteApprove, this);
      this._onDeleteTap = bind(this._onDeleteTap, this);
      return TotCardEdit.__super__.constructor.apply(this, arguments);
    }

    TotCardEdit.prototype.className = 'tot card edit-mode';

    TotCardEdit.prototype._initHeader = function() {
      var deleteBtn, saveBtn, totHeader;
      saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      saveBtn.bind('tap', this._saveTot);
      deleteBtn = new HeaderBaseControl(Locale.value('common:buttons.DeleteBtn'), 'ctrl-btn red');
      deleteBtn.bind('tap', this._onDeleteTap);
      totHeader = new Header(Locale.value('card.Tot.HeaderTitle'));
      totHeader.render();
      totHeader.addRightControlElement(deleteBtn.el);
      totHeader.addRightControlElement(saveBtn.el);
      return this.setHeader(totHeader);
    };

    TotCardEdit.prototype._fillGeneralInfo = function() {
      TotCardEdit.__super__._fillGeneralInfo.apply(this, arguments);
      return this._refreshQuarters();
    };

    TotCardEdit.prototype._onDeleteTap = function() {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('card.Tot.ConfirmationPopup.DeleteItem.Caption'),
        message: Locale.value('card.ConfirmationPopup.DeleteItem.Question')
      });
      confirm.bind('yesClicked', this._onDeleteApprove);
      confirm.bind('noClicked', this._onDeleteDiscard);
      return this.presentModalController(confirm);
    };

    TotCardEdit.prototype._onDeleteApprove = function(confirm) {
      this.dismissModalController();
      return this.collection.removeEntity(this.tot).then((function(_this) {
        return function() {
          _this.trigger('totChanged');
          _this.isChanged = false;
          return _this.onBack();
        };
      })(this));
    };

    TotCardEdit.prototype._onDeleteDiscard = function(confirm) {
      return this.dismissModalController();
    };

    TotCardEdit.prototype._save = function() {
      var ref, ref1;
      this.tot.allDay = this.allDay;
      this.tot.createdOffline = true;
      this.tot.startDate = Utils.currentDate(this.startDate);
      this.tot.endDate = Utils.currentDate(this.endDate);
      this.tot.firstQuarterEvent = this.firstQuarterPickList.selectedValue;
      this.tot.secondQuarterEvent = ((ref = this.secondQuarterPickList) != null ? ref.selectedValue : void 0) || null;
      this.tot.thirdQuarterEvent = this.thirdQuarterPickList.selectedValue;
      this.tot.fourthQuarterEvent = ((ref1 = this.fourthQuarterPickList) != null ? ref1.selectedValue : void 0) || null;
      this.tot.description = this.description;
      return this.collection.updateEntity(this.tot);
    };

    return TotCardEdit;

  })(TotCardCreate);

  module.exports = TotCardEdit;

}).call(this);
}, "controllers/tot-card/tot-card-view": function(exports, require, module) {(function() {
  var CommonInput, ConfigurationManager, ConfirmationPopup, Header, HeaderBaseControl, PanelScreen, Tot, TotCardView, TotEventsPickListDatasource, TotPicklistManager, TotsColection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  TotsColection = require('/models/bll/tots-collection/tots-collection');

  Utils = require('common/utils');

  TotEventsPickListDatasource = require('controllers/tot-card/tot-events-picklist-datasource');

  ConfigurationManager = require('db/configuration-manager');

  TotPicklistManager = require('db/picklist-managers/tot-picklist-manager');

  Tot = require('models/tot');

  CommonInput = require('controls/common-input/common-input');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  Header = require('controls/header/header');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  TotCardView = (function(superClass) {
    extend(TotCardView, superClass);

    TotCardView.prototype.className = 'tot card';

    TotCardView.prototype.elements = {
      '.tot-card-user': 'elUserFullName',
      '.check-all-day': 'elAllDay',
      '.tot-card-start-date': 'elStartDate',
      '.tot-card-end-date': 'elEndDate',
      '.first-quarter': 'elFirstQuarter',
      '.second-quarter': 'elSecondQuarter',
      '.third-quarter': 'elThirdQuarter',
      '.fourth-quarter': 'elFourthQuarter',
      '.call-comments': 'elDescription',
      '.morning': 'morningLabel',
      '.afternoon': 'afternoonLabel'
    };

    TotCardView.prototype._hasQuarters = true;

    TotCardView.prototype.maxCommentStringLength = 50;

    function TotCardView(totId, allowDelete) {
      this.totId = totId;
      this.allowDelete = allowDelete != null ? allowDelete : false;
      this._onDescriptionChange = bind(this._onDescriptionChange, this);
      this._initQuarter = bind(this._initQuarter, this);
      this._fillInfoWithConfig = bind(this._fillInfoWithConfig, this);
      this._fetchConfig = bind(this._fetchConfig, this);
      this._onDeleteDiscard = bind(this._onDeleteDiscard, this);
      this._onDeleteApprove = bind(this._onDeleteApprove, this);
      this._onDeleteTap = bind(this._onDeleteTap, this);
      this._initContent = bind(this._initContent, this);
      TotCardView.__super__.constructor.apply(this, arguments);
      this.collection = new TotsColection;
      this.totPicklistManager = new TotPicklistManager;
    }

    TotCardView.prototype.active = function() {
      TotCardView.__super__.active.apply(this, arguments);
      return this._init();
    };

    TotCardView.prototype._init = function() {
      return this.render();
    };

    TotCardView.prototype.render = function() {
      this.html(this.template());
      this._initHeader();
      this._initContent();
      Locale.localize(this.el);
      this._fetchConfig().then(this._fillInfoWithConfig);
      return this;
    };

    TotCardView.prototype.template = function() {
      return require('views/tot-card/tot-card')();
    };

    TotCardView.prototype._initHeader = function() {
      var deleteBtn, totHeader;
      totHeader = new Header(Locale.value('card.Tot.HeaderTitle'));
      if (this.allowDelete) {
        deleteBtn = new HeaderBaseControl(Locale.value('common:buttons.DeleteBtn'), 'ctrl-btn red');
        deleteBtn.bind('tap', this._onDeleteTap);
        totHeader.render();
        totHeader.addRightControlElement(deleteBtn.el);
      } else {
        totHeader.render();
      }
      return this.setHeader(totHeader);
    };

    TotCardView.prototype._initContent = function() {
      return this.el.addClass(this.allowDelete ? 'view-mode' : 'edit-mode');
    };

    TotCardView.prototype._onDeleteTap = function() {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('card.Tot.ConfirmationPopup.DeleteItem.Caption'),
        message: Locale.value('card.ConfirmationPopup.DeleteItem.Question')
      });
      confirm.bind('yesClicked', this._onDeleteApprove);
      confirm.bind('noClicked', this._onDeleteDiscard);
      return this.presentModalController(confirm);
    };

    TotCardView.prototype._onDeleteApprove = function(confirm) {
      this.dismissModalController();
      return this.collection.removeEntity(this.tot).then((function(_this) {
        return function() {
          _this.trigger('totChanged');
          return _this.onBack();
        };
      })(this));
    };

    TotCardView.prototype._onDeleteDiscard = function(confirm) {
      return this.dismissModalController();
    };

    TotCardView.prototype._fetchConfig = function() {
      return ConfigurationManager.getConfig('countryAndCurrencySettings');
    };

    TotCardView.prototype._fillInfoWithConfig = function(config) {
      if (config) {
        this._hasQuarters = config.isQuarter;
      }
      if (!this.totId) {
        return this._fillDefaultInfo();
      } else {
        return this.collection.fetchEntityById(this.totId).then((function(_this) {
          return function(tot) {
            _this.tot = tot;
            return _this._fillGeneralInfo();
          };
        })(this));
      }
    };

    TotCardView.prototype._fillDefaultInfo = function() {
      throw 'should be overridden';
    };

    TotCardView.prototype._fillGeneralInfo = function() {
      var ref;
      this._initUserFullName();
      this._initAllDay();
      this._initStartDate();
      this._initEndDate();
      this._initFirstQuarter();
      this._initThirdQuarter();
      if (this.tot.type === 'Closed' || this.tot.type === 'Submit') {
        this.el.addClass('view-mode');
      }
      if (this._hasQuarters) {
        this._initSecondQuarter();
        this._initFourthQuarter();
      } else {
        this.el.addClass('morning-afternoon');
        this.morningLabel.text(Locale.value('card.Tot.Morning'));
        this.afternoonLabel.text(Locale.value('card.Tot.Afternoon'));
      }
      return this._initDescription((ref = this.tot.description) != null ? ref : '');
    };

    TotCardView.prototype._initUserFullName = function() {
      this.userFullName = this.tot.userFullName();
      return this.elUserFullName.html(this.userFullName);
    };

    TotCardView.prototype._initAllDay = function() {
      this.allDay = this.tot.allDay;
      return this.elAllDay[0].checked = this.allDay;
    };

    TotCardView.prototype._initStartDate = function() {
      this.startDate = Utils.getDateByStr(this.tot.startDate);
      return this.elStartDate.html(Utils.dotFormatDate(this.startDate));
    };

    TotCardView.prototype._initEndDate = function() {
      this.endDate = Utils.getDateByStr(this.tot.endDate);
      return this.elEndDate.html(Utils.dotFormatDate(this.endDate));
    };

    TotCardView.prototype._initFirstQuarter = function() {
      return this._initQuarter(this.tot.firstQuarterEvent, this.elFirstQuarter);
    };

    TotCardView.prototype._initSecondQuarter = function() {
      return this._initQuarter(this.tot.secondQuarterEvent, this.elSecondQuarter);
    };

    TotCardView.prototype._initThirdQuarter = function() {
      return this._initQuarter(this.tot.thirdQuarterEvent, this.elThirdQuarter);
    };

    TotCardView.prototype._initFourthQuarter = function() {
      return this._initQuarter(this.tot.fourthQuarterEvent, this.elFourthQuarter);
    };

    TotCardView.prototype._initQuarter = function(quarterEvent, quarterLabel) {
      return this.totPicklistManager.getLabelByValue(Tot.sfdc.firstQuarterEvent, quarterEvent).then((function(_this) {
        return function(label) {
          return quarterLabel.html(label);
        };
      })(this));
    };

    TotCardView.prototype._initDescription = function(description) {
      this.description = description;
      this.elDescription.val(this.description);
      new CommonInput(this.el[0], this.elDescription[0], this.maxCommentStringLength);
      return this.elDescription.on('input', this._onDescriptionChange);
    };

    TotCardView.prototype._onDescriptionChange = function() {
      this.isChanged = true;
      return this.description = this.elDescription.val();
    };

    return TotCardView;

  })(PanelScreen);

  module.exports = TotCardView;

}).call(this);
}, "controllers/tot-card/tot-events-picklist-datasource": function(exports, require, module) {(function() {
  var PickListDatasource, Tot, TotEventsPickListDatasource, TotPicklistManager,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PickListDatasource = require('controllers/call-report-card/picklist-datasource');

  TotPicklistManager = require('db/picklist-managers/tot-picklist-manager');

  Tot = require('models/tot');

  TotEventsPickListDatasource = (function(superClass) {
    extend(TotEventsPickListDatasource, superClass);

    function TotEventsPickListDatasource() {
      return TotEventsPickListDatasource.__super__.constructor.apply(this, arguments);
    }

    TotEventsPickListDatasource.prototype.pickListName = function() {
      return Tot.sfdc.firstQuarterEvent;
    };

    TotEventsPickListDatasource.prototype.pickListManager = function() {
      return new TotPicklistManager;
    };

    return TotEventsPickListDatasource;

  })(PickListDatasource);

  module.exports = TotEventsPickListDatasource;

}).call(this);
}, "controllers/tots/tots-filter": function(exports, require, module) {(function() {
  var TotsFilter;

  TotsFilter = (function() {
    function TotsFilter() {}

    TotsFilter.totsAll = function() {
      return {
        id: 0,
        description: Locale.value('tots.FilterPopup.All')
      };
    };

    TotsFilter.totsOpen = function() {
      return {
        id: 1,
        description: Locale.value('tots.FilterPopup.Open')
      };
    };

    TotsFilter.totsSubmit = function() {
      return {
        id: 2,
        description: Locale.value('tots.FilterPopup.Submit')
      };
    };

    TotsFilter.totsClosed = function() {
      return {
        id: 3,
        description: Locale.value('tots.FilterPopup.Closed')
      };
    };

    TotsFilter.resources = function() {
      return [this.totsAll(), this.totsOpen(), this.totsSubmit(), this.totsClosed()];
    };

    return TotsFilter;

  })();

  module.exports = TotsFilter;

}).call(this);
}, "controllers/tots/tots-table-cell": function(exports, require, module) {(function() {
  var ConfigurationManager, Locale, Spine, Tot, TotPicklistManager, TotsAllTableCell, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  TotPicklistManager = require('db/picklist-managers/tot-picklist-manager');

  ConfigurationManager = require('db/configuration-manager');

  Tot = require('models/tot');

  Locale = require('common/localization/locale');

  TotsAllTableCell = (function(superClass) {
    extend(TotsAllTableCell, superClass);

    TotsAllTableCell.prototype.className = 'row';

    TotsAllTableCell.prototype.elements = {
      '.med-rep': 'elMedRep',
      '.type': 'elType',
      '.all-day': 'elAllDay',
      '.start-date': 'elStartDate',
      '.end-date': 'elEndDate',
      '.events': 'elEvents'
    };

    function TotsAllTableCell(tot, hasQuarters) {
      this.tot = tot;
      this.hasQuarters = hasQuarters != null ? hasQuarters : true;
      this._setMorningAfternoon = bind(this._setMorningAfternoon, this);
      this._setQuarter = bind(this._setQuarter, this);
      this._setQuarters = bind(this._setQuarters, this);
      this.bindEvents = bind(this.bindEvents, this);
      this._onCellTap = bind(this._onCellTap, this);
      TotsAllTableCell.__super__.constructor.call(this, {});
      this.totPicklistManager = new TotPicklistManager;
    }

    TotsAllTableCell.prototype.template = function() {
      return require('views/tots/tots-all/tots-all-table-cell')();
    };

    TotsAllTableCell.prototype._onCellTap = function() {
      return this.trigger('cellTap', this);
    };

    TotsAllTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    TotsAllTableCell.prototype._validateLabel = function(label) {
      if (label === Locale.value('common:defaultSelectValue')) {
        return '';
      } else {
        return label;
      }
    };

    TotsAllTableCell.prototype._setQuarters = function() {
      var fieldName;
      this.elEvents.addClass('list');
      fieldName = Tot.sfdc.firstQuarterEvent;
      this._setQuarter(fieldName, this.tot.firstQuarterEvent, Locale.value('card.Tot.FirstPart'));
      this._setQuarter(fieldName, this.tot.secondQuarterEvent, Locale.value('card.Tot.SecondPart'));
      this._setQuarter(fieldName, this.tot.thirdQuarterEvent, Locale.value('card.Tot.ThirdPart'));
      return this._setQuarter(fieldName, this.tot.fourthQuarterEvent, Locale.value('card.Tot.ForthPart'));
    };

    TotsAllTableCell.prototype._setQuarter = function(fieldName, quarterEvent, eventLabel) {
      return this.totPicklistManager.getLabelByValue(fieldName, quarterEvent).then((function(_this) {
        return function(label) {
          return _this.elEvents.append("<p>" + eventLabel + " " + (_this._validateLabel(label)) + "</p>");
        };
      })(this));
    };

    TotsAllTableCell.prototype._setMorningAfternoon = function() {
      var fieldName;
      this.elEvents.addClass('list morning-afternoon');
      fieldName = Tot.sfdc.firstQuarterEvent;
      this._setQuarter(fieldName, this.tot.firstQuarterEvent, Locale.value('card.Tot.Morning'));
      return this._setQuarter(fieldName, this.tot.thirdQuarterEvent, Locale.value('card.Tot.Afternoon'));
    };

    TotsAllTableCell.prototype.render = function() {
      this.html(this.template());
      this.elMedRep.html(this.tot.userFullName());
      if (this.tot.allDay) {
        this.elAllDay.addClass('checked');
      }
      this.elStartDate.html(Utils.dotFormatDate(this.tot.startDate));
      this.elEndDate.html(Utils.dotFormatDate(this.tot.endDate));
      this.totPicklistManager.getLabelByValue(Tot.sfdc.type, this.tot.type).then((function(_this) {
        return function(label) {
          return _this.elType.html(label);
        };
      })(this));
      ['firstQuarterEvent', 'secondQuarterEvent', 'thirdQuarterEvent', 'fourthQuarterEvent'].forEach((function(_this) {
        return function(eventField) {
          if (_this.tot[eventField] === _this.tot.TYPE_NONE) {
            return _this.tot[eventField] = '';
          }
        };
      })(this));
      if (this.tot.allDay) {
        this.totPicklistManager.getLabelByValue(Tot.sfdc.firstQuarterEvent, this.tot.firstQuarterEvent).then((function(_this) {
          return function(label) {
            return _this.elEvents.html(_this._validateLabel(label));
          };
        })(this));
      } else {
        if (this.hasQuarters) {
          this._setQuarters();
        } else {
          this._setMorningAfternoon();
        }
      }
      return this;
    };

    return TotsAllTableCell;

  })(Spine.Controller);

  module.exports = TotsAllTableCell;

}).call(this);
}, "controllers/tots/tots": function(exports, require, module) {(function() {
  var BaseHeader, ConfigurationManager, HeaderBaseControl, LazyTableController, ListPopup, RootPanelScreen, Search, SortingTableHeaderItem, TableController, TableHeaderItem, Tot, TotCardCreate, TotCardEdit, TotCardView, TotsAll, TotsClosedCollection, TotsCollection, TotsFilter, TotsOpenCollection, TotsSubmitCollection, TotsTableCell, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RootPanelScreen = require('controllers/base/panel/root-panel-screen');

  LazyTableController = require('controllers/lazy-table-controller');

  TotsCollection = require('models/bll/tots-collection/tots-collection');

  TotsClosedCollection = require('models/bll/tots-collection/tots-closed-collection');

  TotsOpenCollection = require('models/bll/tots-collection/tots-open-collection');

  TotsSubmitCollection = require('models/bll/tots-collection/tots-submit-collection');

  TableController = require('controls/table/table-controller');

  TotsTableCell = require('controllers/tots/tots-table-cell');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  Tot = require('models/tot');

  ConfigurationManager = require('db/configuration-manager');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  BaseHeader = require('controls/header/base-header');

  Search = require('controls/search/search');

  TotsFilter = require('controllers/tots/tots-filter');

  ListPopup = require('controls/popups/list-popup');

  TotCardView = require('controllers/tot-card/tot-card-view');

  TotCardCreate = require('controllers/tot-card/tot-card-create');

  TotCardEdit = require('controllers/tot-card/tot-card-edit');

  Utils = require('common/utils');

  TotsAll = (function(superClass) {
    extend(TotsAll, superClass);

    function TotsAll() {
      this._onCellTap = bind(this._onCellTap, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this._onAddTotTap = bind(this._onAddTotTap, this);
      this._resetSearch = bind(this._resetSearch, this);
      this._onSearchChanged = bind(this._onSearchChanged, this);
      this._onFilterTap = bind(this._onFilterTap, this);
      return TotsAll.__super__.constructor.apply(this, arguments);
    }

    TotsAll.prototype.className = 'table-view tots';

    TotsAll.prototype._hasQuarters = true;

    TotsAll.prototype.tableController = null;

    TotsAll.prototype.active = function() {
      TotsAll.__super__.active.apply(this, arguments);
      this._initHeader();
      return ConfigurationManager.getConfig('countryAndCurrencySettings').then((function(_this) {
        return function(currencySettings) {
          if (currencySettings) {
            _this._hasQuarters = currencySettings.isQuarter;
          }
          return _this._initContent();
        };
      })(this));
    };

    TotsAll.prototype._initHeader = function() {
      var addTotsEventButton, headerFilterBtn, totsHeader;
      this.currentFilter = TotsFilter.resources()[0];
      headerFilterBtn = new HeaderBaseControl(this.currentFilter.description, 'select-btn');
      headerFilterBtn.bind('tap', this._onFilterTap);
      this.search = new Search();
      this.search.bind('searchChanged', this._onSearchChanged);
      this.search.bind('searchClear', this._resetSearch);
      addTotsEventButton = new HeaderBaseControl('', 'ctrl-add-button');
      addTotsEventButton.bind('tap', this._onAddTotTap);
      totsHeader = new BaseHeader(Locale.value('tots.HeaderTitle'));
      totsHeader.render();
      totsHeader.addLeftControlElement(headerFilterBtn.el);
      totsHeader.addLeftControlElement(addTotsEventButton.el);
      totsHeader.addRightControlElement(this.search.render().el);
      return this.setHeader(totsHeader);
    };

    TotsAll.prototype._onFilterTap = function(headerFilterBtn) {
      var filterPopup;
      filterPopup = new ListPopup(TotsFilter.resources(), this.currentFilter);
      filterPopup.bind('onPopupItemSelected', (function(_this) {
        return function(selectedItem) {
          _this.currentFilter = selectedItem.model;
          headerFilterBtn.updateTitle(_this.currentFilter.description);
          _this.dismissModalController();
          return _this.reload();
        };
      })(this));
      return this.presentModalController(filterPopup);
    };

    TotsAll.prototype.reload = function() {
      return this.tableController.resetAndActive({
        search: this.search.getValue()
      });
    };

    TotsAll.prototype._onSearchChanged = function(value) {
      return this.tableController.filterBy(value);
    };

    TotsAll.prototype._resetSearch = function() {
      return this.tableController.resetAndActive();
    };

    TotsAll.prototype._onAddTotTap = function() {
      var totCard;
      totCard = new TotCardCreate;
      totCard.on('totChanged', (function(_this) {
        return function() {
          return _this.tableController.reload();
        };
      })(this));
      return this.stage.push(totCard);
    };

    TotsAll.prototype._initContent = function() {
      this.tableController = new LazyTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    TotsAll.prototype.createCollection = function() {
      var ref;
      switch ((ref = this.currentFilter) != null ? ref.id : void 0) {
        case TotsFilter.totsAll().id:
          return new TotsCollection;
        case TotsFilter.totsClosed().id:
          return new TotsClosedCollection;
        case TotsFilter.totsOpen().id:
          return new TotsOpenCollection;
        case TotsFilter.totsSubmit().id:
          return new TotsSubmitCollection;
        default:
          return new TotsCollection;
      }
    };

    TotsAll.prototype.createTableHeaderItemsForModel = function(model) {
      return [new TableHeaderItem(Locale.value('common:names.MedRep')), new SortingTableHeaderItem(Locale.value('common:names.Type'), model.sfdc.type), new TableHeaderItem(Locale.value('common:names.AllDay')), new SortingTableHeaderItem(Locale.value('common:names.StartDate'), model.sfdc.startDate), new SortingTableHeaderItem(Locale.value('common:names.EndDate'), model.sfdc.endDate), new TableHeaderItem(Locale.value('common:names.Events'))];
    };

    TotsAll.prototype.cellForObjectOnTable = function(object, table) {
      var totsTableCell;
      totsTableCell = new TotsTableCell(object, this._hasQuarters);
      totsTableCell.on('cellTap', this._onCellTap);
      return totsTableCell;
    };

    TotsAll.prototype._onCellTap = function(cell) {
      if (cell.tot.type === Tot.TYPE_OPEN && !cell.tot.isSubmittedForApproval) {
        return this._isTotValidForEditing(cell.tot).then((function(_this) {
          return function(isTotValidForEditing) {
            var totCard;
            totCard = isTotValidForEditing ? new TotCardEdit(cell.tot.id) : new TotCardView(cell.tot.id, true);
            totCard.on('totChanged', function() {
              return _this.tableController.reload();
            });
            return _this.stage.push(totCard);
          };
        })(this));
      } else {
        return this.stage.push(new TotCardView(cell.tot.id));
      }
    };

    TotsAll.prototype._isTotValidForEditing = function(tot) {
      return ConfigurationManager.getConfig('callReportValidationSettings').then((function(_this) {
        return function(dateRangeConfig) {
          var daysTimeOff, today, totStartDate;
          daysTimeOff = dateRangeConfig.daysTimeOff;
          today = Utils.getDateByStr(Utils.originalDate(new Date));
          totStartDate = Utils.getDateByStr(tot.startDate);
          return Utils.getDaysBetween(totStartDate, today) <= daysTimeOff;
        };
      })(this));
    };

    return TotsAll;

  })(RootPanelScreen);

  module.exports = TotsAll;

}).call(this);
}, "controllers/tour-planning/tour-planning-table-cell": function(exports, require, module) {(function() {
  var SforceDataContext, Spine, TargetFrequenciesCollection, TourPlanningTableCell, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  SforceDataContext = require('models/bll/sforce-data-context');

  TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');

  TourPlanningTableCell = (function(superClass) {
    extend(TourPlanningTableCell, superClass);

    TourPlanningTableCell.prototype.className = 'row';

    TourPlanningTableCell.prototype.elements = {
      '.contact': 'elContact',
      '.organization': 'elOrganization',
      '.contact-organization-cell': 'elContactOrganizationCell',
      '.at-calls': 'elAtCalls',
      '.last-call': 'elLastCall',
      '.priority': 'elPriority',
      '.visit-order': 'elVisitOrder',
      '.visit-time-info': 'elVisitTimeInfo',
      'input[type="checkbox"]': 'elCheckbox',
      '.checkbox-cell': 'elCheckboxCell',
      '.contact-cell': 'elContactCell',
      '.organization-cell': 'elOrganizationCell'
    };

    function TourPlanningTableCell(tourPlanningEntity) {
      this.tourPlanningEntity = tourPlanningEntity;
      this.setVisitNumber = bind(this.setVisitNumber, this);
      this._onVisitOrderCellTap = bind(this._onVisitOrderCellTap, this);
      this._onCheckboxCellTap = bind(this._onCheckboxCellTap, this);
      this._onContactCellTap = bind(this._onContactCellTap, this);
      this._onOrganizationCellTap = bind(this._onOrganizationCellTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      TourPlanningTableCell.__super__.constructor.call(this, {});
    }

    TourPlanningTableCell.prototype.template = function() {
      return require('views/tour-planning/tour-planning-table-cell')();
    };

    TourPlanningTableCell.prototype.bindEvents = function() {
      this.elOrganizationCell.on('tap', this._onOrganizationCellTap);
      this.elContactCell.on('tap', this._onContactCellTap);
      this.elCheckboxCell.on('tap', this._onCheckboxCellTap);
      return this.elVisitOrder.parent().on('tap', this._onVisitOrderCellTap);
    };

    TourPlanningTableCell.prototype._onOrganizationCellTap = function(event) {
      event.stopPropagation;
      return this.trigger('organizationCellTap', this);
    };

    TourPlanningTableCell.prototype._onContactCellTap = function(event) {
      event.stopPropagation;
      return this.trigger('contactCellTap', this);
    };

    TourPlanningTableCell.prototype._onCheckboxCellTap = function(event) {
      event.stopPropagation;
      this.tourPlanningEntity.isChecked = !this.elCheckbox[0].checked;
      this._setSelectedCheckbox();
      return this.trigger('checkboxCellTap', this);
    };

    TourPlanningTableCell.prototype._onVisitOrderCellTap = function(event) {
      event.stopPropagation;
      if (this.elCheckbox[0].checked) {
        return this.trigger('visitOrderCellTap', this);
      }
    };

    TourPlanningTableCell.prototype.render = function() {
      this.html(this.template());
      if (this.tourPlanningEntity.isChecked) {
        this._setSelectedCheckbox();
      }
      this.elContact.html(this.tourPlanningEntity.contactFullName());
      this.elOrganization.html(this.tourPlanningEntity.organizationNameAndAddress());
      this.setVisitNumber(this.tourPlanningEntity.visitOrderNumber);
      this.elLastCall.html(this.tourPlanningEntity.lastCall);
      this.tourPlanningEntity.getContact().then((function(_this) {
        return function(contact) {
          var lastDateTargetFrequency;
          lastDateTargetFrequency = new TargetFrequenciesCollection().parseEntity(contact.lastDateTargetFrequency);
          _this.elAtCalls.html(lastDateTargetFrequency.atCalls());
          return _this.elPriority.html(contact.priority);
        };
      })(this));
      return this;
    };

    TourPlanningTableCell.prototype._setSelectedCheckbox = function() {
      return this.elCheckbox[0].checked = this.tourPlanningEntity.isChecked;
    };

    TourPlanningTableCell.prototype.setVisitNumber = function(number) {
      var visitTimeInfo;
      this.tourPlanningEntity.visitOrderNumber = number;
      if (this.tourPlanningEntity.visitOrderNumber > 0) {
        visitTimeInfo = '-';
        if (this.tourPlanningEntity.visitStartTime && this.tourPlanningEntity.visitEndTime) {
          visitTimeInfo = Utils.formatTime(this.tourPlanningEntity.visitStartTime) + ' - ' + Utils.formatTime(this.tourPlanningEntity.visitEndTime);
        }
        this.elVisitOrder.html(this.tourPlanningEntity.visitOrderNumber);
        return this.elVisitTimeInfo.html(visitTimeInfo);
      } else {
        this.elVisitOrder.html('');
        this.elVisitTimeInfo.html('');
        this.tourPlanningEntity.visitStartTime = 0;
        return this.tourPlanningEntity.visitEndTime = 0;
      }
    };

    return TourPlanningTableCell;

  })(Spine.Controller);

  module.exports = TourPlanningTableCell;

}).call(this);
}, "controllers/tour-planning/tour-planning-table": function(exports, require, module) {(function() {
  var LazyTableController, TourPlanningTableController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  LazyTableController = require('controllers/lazy-table-controller');

  TourPlanningTableController = (function(superClass) {
    extend(TourPlanningTableController, superClass);

    function TourPlanningTableController() {
      this._sortBy = bind(this._sortBy, this);
      this._fetchAll = bind(this._fetchAll, this);
      this.moveEntitiesToBeginning = bind(this.moveEntitiesToBeginning, this);
      this.reloadTable = bind(this.reloadTable, this);
      return TourPlanningTableController.__super__.constructor.apply(this, arguments);
    }

    TourPlanningTableController.prototype.reloadTable = function() {
      this.tableHeader.reset();
      return this.tableView.render();
    };

    TourPlanningTableController.prototype.moveEntitiesToBeginning = function(entities) {
      return this.fetchResponse.records = entities.concat(_.without.apply(_, [this.fetchResponse.records].concat(slice.call(entities))));
    };

    TourPlanningTableController.prototype._fetchAll = function() {
      return this.collection.fetchAllByBrickIdsForUser(this.datasource.brickIds(), this.datasource.userId());
    };

    TourPlanningTableController.prototype._sortBy = function(fields, isAsc) {
      return this.collection.fetchAllByBrickIdsForUserSortedBy(this.datasource.brickIds(), this.datasource.userId(), fields, isAsc);
    };

    return TourPlanningTableController;

  })(LazyTableController);

  module.exports = TourPlanningTableController;

}).call(this);
}, "controllers/tour-planning/tour-planning": function(exports, require, module) {(function() {
  var ActivityIndicator, AlarmManager, AppointmentsCollection, BaseHeader, BricksCollection, CallReport, ConfigurationManager, ContactCard, DateTimePicker, HeaderBaseControl, HeaderDateTimeControl, ListPopup, MultiselectPopup, OrganizationCard, Query, RootPanelScreen, SettingsManager, SforceDataContext, SortingTableHeaderItem, TableHeaderItem, TourPlanning, TourPlanningCollection, TourPlanningTableCell, TourPlanningTableController, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RootPanelScreen = require('controllers/base/panel/root-panel-screen');

  TourPlanningTableController = require('controllers/tour-planning/tour-planning-table');

  TourPlanningCollection = require('models/bll/tour-planning-collection/tour-planning-collection');

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  TourPlanningTableCell = require('controllers/tour-planning/tour-planning-table-cell');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  ListPopup = require('controls/popups/list-popup');

  MultiselectPopup = require('controls/popups/multiselect-popup');

  CallReport = require('models/call-report');

  Utils = require('common/utils');

  Query = require('common/query');

  BricksCollection = require('models/bll/bricks-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  ConfigurationManager = require('db/configuration-manager');

  AlarmManager = require('common/alarm/alarm-manager');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  HeaderDateTimeControl = require('controls/header-controls/header-date-time-control');

  BaseHeader = require('controls/header/base-header');

  DateTimePicker = require('controls/datepicker/date-time-picker');

  ActivityIndicator = require('common/activity-indicator');

  ContactCard = require('controllers/contact-card/contact-card');

  OrganizationCard = require('controllers/organization-card/organization-card');

  SettingsManager = require('db/settings-manager');

  TourPlanning = (function(superClass) {
    extend(TourPlanning, superClass);

    TourPlanning.prototype.className = 'table-view tour-planning';

    TourPlanning.prototype.elements = {
      'input[name="checkAll"]': 'elCheckboxAll'
    };

    TourPlanning.prototype.isCheckAll = false;

    TourPlanning.prototype.isCalculated = false;

    TourPlanning.prototype.isNeedRecalculate = false;

    TourPlanning.prototype.checkedCells = [];

    TourPlanning.prototype.bricksList = [];

    TourPlanning.prototype.originDateTime = null;

    TourPlanning.prototype.currentTime = null;

    TourPlanning.prototype.currentFilter = null;

    TourPlanning.prototype.config = null;

    TourPlanning.prototype.activeUser = null;

    TourPlanning.prototype.saveBtn = null;

    TourPlanning.prototype.appointmentsCollection = null;

    TourPlanning.prototype.bricksCollection = null;

    TourPlanning.prototype.TIMEPICKER_BEFORE_DAYS = 0;

    TourPlanning.prototype.TIMEPICKER_AFTER_DAYS = 90;

    function TourPlanning() {
      this.savePlannedAppointments = bind(this.savePlannedAppointments, this);
      this.userId = bind(this.userId, this);
      this.brickIds = bind(this.brickIds, this);
      this._onVisitOrderCellTap = bind(this._onVisitOrderCellTap, this);
      this._onOrganizationCellTap = bind(this._onOrganizationCellTap, this);
      this._onContactCellTap = bind(this._onContactCellTap, this);
      this._recalculateVisitOrder = bind(this._recalculateVisitOrder, this);
      this._onCheckboxCellTap = bind(this._onCheckboxCellTap, this);
      this._createCell = bind(this._createCell, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this._onCheckAllTap = bind(this._onCheckAllTap, this);
      this._initContent = bind(this._initContent, this);
      this._setDateTime = bind(this._setDateTime, this);
      this._showDateTimePicker = bind(this._showDateTimePicker, this);
      this._updateSaveBtnState = bind(this._updateSaveBtnState, this);
      this._calculateReset = bind(this._calculateReset, this);
      this._calculateDone = bind(this._calculateDone, this);
      this._getExistingAppointments = bind(this._getExistingAppointments, this);
      this._sortCheckedCells = bind(this._sortCheckedCells, this);
      this.calculate = bind(this.calculate, this);
      this._onCalculateTap = bind(this._onCalculateTap, this);
      this._onSaveTap = bind(this._onSaveTap, this);
      this._setCheckAllState = bind(this._setCheckAllState, this);
      this.clearCheckedData = bind(this.clearCheckedData, this);
      this.refresh = bind(this.refresh, this);
      this.reload = bind(this.reload, this);
      this._onFilterTap = bind(this._onFilterTap, this);
      this._initHeader = bind(this._initHeader, this);
      this._composeFilterText = bind(this._composeFilterText, this);
      this._activeTourPlanning = bind(this._activeTourPlanning, this);
      this._getActiveUser = bind(this._getActiveUser, this);
      this._handleConfigResponse = bind(this._handleConfigResponse, this);
      this._fetchTourplanningSettings = bind(this._fetchTourplanningSettings, this);
      TourPlanning.__super__.constructor.apply(this, arguments);
      this.appointmentsCollection = new AppointmentsCollection;
      this.bricksCollection = new BricksCollection;
      this.subscribeOnNotification('callReportCreated', this.refresh);
    }

    TourPlanning.prototype.active = function() {
      TourPlanning.__super__.active.apply(this, arguments);
      this._resetToDefaults();
      Locale.localize(this.el);
      return ConfigurationManager.getConfig().then(this._handleConfigResponse, this._handleConfigResponse).then(this._fetchTourplanningSettings).then(this._activeTourPlanning, this._activeTourPlanning).then(this._initHeader, this._initHeader).then(this._initContent, this._initContent);
    };

    TourPlanning.prototype._fetchTourplanningSettings = function() {
      return SettingsManager.getTourPlanningSettings().then((function(_this) {
        return function(settings) {
          return _this.planningSettings = settings;
        };
      })(this));
    };

    TourPlanning.prototype._resetToDefaults = function() {
      this.isCheckAll = false;
      this.isCalculated = false;
      this.isNeedRecalculate = false;
      this.checkedCells = [];
      this.bricksList = [];
      this.originDateTime = null;
      this.currentTime = null;
      this.currentFilter = [];
      this.config = null;
      this.activeUser = null;
      return this.saveBtn = null;
    };

    TourPlanning.prototype._handleConfigResponse = function(config) {
      this.config = config;
      return this._getActiveUser();
    };

    TourPlanning.prototype._getActiveUser = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(activeUser) {
          _this.activeUser = activeUser;
          return _this.activeUser;
        };
      })(this));
    };

    TourPlanning.prototype._activeTourPlanning = function() {
      return this._fetchBricks().done((function(_this) {
        return function(bricksList) {
          _this.bricksList = bricksList.map(function(brick) {
            return {
              id: brick.id,
              description: brick.shortDescription
            };
          });
          return _this._clearFilter();
        };
      })(this)).fail((function(_this) {
        return function(err) {
          return alert('Error fetching records:\n #{JSON.stringify err}');
        };
      })(this));
    };

    TourPlanning.prototype._fetchBricks = function() {
      return this.bricksCollection.fetchAllSortedBy([this.bricksCollection.model.sfdc.name], true).then((function(_this) {
        return function(response) {
          return _this.bricksCollection.getAllEntitiesFromResponse(response);
        };
      })(this));
    };

    TourPlanning.prototype._clearFilter = function() {
      var ref;
      return this.currentFilter = (ref = _.first(this.bricksList)) != null ? ref : [
        {
          id: '',
          description: ''
        }
      ];
    };

    TourPlanning.prototype._composeFilterText = function() {
      var text;
      text = this.currentFilter.map((function(_this) {
        return function(filterItem) {
          return filterItem.description;
        };
      })(this)).join(', ');
      if (text.length > 35) {
        text = text.substr(0, 35) + '...';
      }
      return text;
    };

    TourPlanning.prototype._initHeader = function() {
      var calculateBtn, dateTimeBtn, headerFilterBtn, planningHeader;
      if (!_.isEmpty(this.bricksList)) {
        this.currentFilter = [_.first(this.bricksList)];
      }
      headerFilterBtn = new HeaderBaseControl(this._composeFilterText(), 'select-btn');
      headerFilterBtn.bind('tap', this._onFilterTap);
      this.saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      this.saveBtn.bind('tap', this._onSaveTap);
      calculateBtn = new HeaderBaseControl(Locale.value('tourPlanning.CalculateBtn'), 'ctrl-btn');
      calculateBtn.bind('tap', this._onCalculateTap);
      dateTimeBtn = new HeaderDateTimeControl(Locale.value('tourPlanning.StartTime'), '');
      dateTimeBtn.bind('tap', this._showDateTimePicker);
      planningHeader = new BaseHeader(Locale.value("tourPlanning.HeaderTitle"));
      planningHeader.render();
      planningHeader.addLeftControlElement(headerFilterBtn.el);
      planningHeader.addRightControlElement(dateTimeBtn.el);
      planningHeader.addRightControlElement(calculateBtn.el);
      planningHeader.addRightControlElement(this.saveBtn.el);
      this.setHeader(planningHeader);
      return this._setDateTime(dateTimeBtn, new Date);
    };

    TourPlanning.prototype._onFilterTap = function(headerFilterBtn) {
      var multiselectPopup;
      if (!_.isEmpty(this.bricksList)) {
        multiselectPopup = new MultiselectPopup(this.bricksList, _.clone(this.currentFilter), '', this.bricksList.length, 1);
        multiselectPopup.on('doneTap', (function(_this) {
          return function(selectedItems) {
            _this.currentFilter = selectedItems;
            headerFilterBtn.updateTitle(_this._composeFilterText());
            _this.dismissModalController();
            return _this.reload();
          };
        })(this));
        return this.presentModalController(multiselectPopup);
      }
    };

    TourPlanning.prototype.reload = function() {
      this.clearCheckedData();
      return this.tableController.reload();
    };

    TourPlanning.prototype.refresh = function() {
      var ref;
      return (ref = this.tableController) != null ? ref.reload() : void 0;
    };

    TourPlanning.prototype.clearCheckedData = function() {
      this.checkedCells = [];
      this._setCheckAllState(false);
      return this._calculateReset();
    };

    TourPlanning.prototype._setCheckAllState = function(isCheck) {
      if (this.elCheckboxAll[0]) {
        return this.elCheckboxAll[0].checked = this.isCheckAll = isCheck;
      }
    };

    TourPlanning.prototype._onSaveTap = function() {
      if (!this.isNeedRecalculate) {
        return this.savePlannedAppointments().then(function() {
          return AlarmManager.scheduleNextVisits();
        }).then((function(_this) {
          return function() {
            return _this.postNotification('appointmentChanged');
          };
        })(this)).then(this.reload);
      } else {
        return $.fn.dpToast(Locale.value('tourPlanning.ToastMessage.NeedCalculate'));
      }
    };

    TourPlanning.prototype._onCalculateTap = function() {
      return this.calculate();
    };

    TourPlanning.prototype.calculate = function() {
      if (!_.isEmpty(this.checkedCells)) {
        this.currentTime = moment(this.originDateTime);
        return this._sortCheckedCells();
      }
    };

    TourPlanning.prototype._sortCheckedCells = function() {
      var spinner;
      spinner = new ActivityIndicator(this.tableController.el[0]);
      spinner.show();
      return setTimeout((function(_this) {
        return function() {
          return _this._filteredCheckedCells(_this.checkedCells).then(function(arg) {
            var checkedCellsTourPlannings, haveExistingAppointments;
            _this.checkedCells = arg[0], haveExistingAppointments = arg[1];
            checkedCellsTourPlannings = _this.checkedCells.map(function(cell) {
              return cell.tourPlanningEntity;
            });
            _this.tableController.moveEntitiesToBeginning(checkedCellsTourPlannings);
            _this.tableController.reloadTable();
            if (!_.isEmpty(_this.checkedCells)) {
              _this._calculateDone();
            } else {
              _this._setCheckAllState(false);
              _this._calculateReset();
            }
            spinner.hide();
            if (haveExistingAppointments) {
              return _this._showMessageAboutExistingAppointments();
            }
          });
        };
      })(this), 100);
    };

    TourPlanning.prototype._filteredCheckedCells = function(cells) {
      var filteredCheckedCells, haveExistingAppointments;
      filteredCheckedCells = [];
      haveExistingAppointments = false;
      return this._getExistingAppointments().then((function(_this) {
        return function(appointments) {
          cells.forEach(function(cell) {
            var existingAppointments;
            existingAppointments = appointments.filter(function(record) {
              return record.contactFullName() === cell.tourPlanningEntity.contactFullName();
            });
            if (_.isEmpty(existingAppointments)) {
              _this._calculateTimeForTourPlanning(cell.tourPlanningEntity);
              if (cell.tourPlanningEntity.isChecked) {
                return filteredCheckedCells.push(cell);
              }
            } else {
              haveExistingAppointments = true;
              return _this._clearDataForTourPlanning(cell.tourPlanningEntity);
            }
          });
          return [filteredCheckedCells, haveExistingAppointments];
        };
      })(this));
    };

    TourPlanning.prototype._getExistingAppointments = function() {
      var endOfCurrentDate, endOfCurrentDateCondition, query, startOfCurrentDate, startOfCurrentDateCondition;
      startOfCurrentDate = Utils.originalStartOfDate(this.currentTime);
      endOfCurrentDate = Utils.originalEndOfDate(this.currentTime);
      startOfCurrentDateCondition = {};
      startOfCurrentDateCondition[this.appointmentsCollection.model.sfdc.dateTimeOfVisit] = startOfCurrentDate;
      endOfCurrentDateCondition = {};
      endOfCurrentDateCondition[this.appointmentsCollection.model.sfdc.dateTimeOfVisit] = endOfCurrentDate;
      query = new Query().selectFrom(this.appointmentsCollection.model.table).where(startOfCurrentDateCondition, Query.GRE).and().where(endOfCurrentDateCondition, Query.LRE);
      return this.appointmentsCollection.fetchWithQuery(query).then((function(_this) {
        return function(response) {
          return _this.appointmentsCollection.getAllEntitiesFromResponse(response);
        };
      })(this));
    };

    TourPlanning.prototype._calculateTimeForTourPlanning = function(tourPlanning) {
      var endTime, startTime;
      startTime = moment(this.currentTime);
      endTime = moment(startTime);
      tourPlanning.callDuration = this.planningSettings.callDuration;
      endTime.minutes(endTime.minutes() + Utils.minutesOfDay(tourPlanning.callDuration));
      if (Utils.isIntervalBefore(startTime, endTime, this.planningSettings.lastVisitTimeEnd)) {
        if (Utils.isTimeBefore(endTime, this.planningSettings.lunchTimeStart) || Utils.isTimeAfter(startTime, this.planningSettings.lunchTimeEnd)) {
          tourPlanning.visitStartTime = Utils.originalDateTime(startTime.toDate());
          tourPlanning.visitEndTime = Utils.originalDateTime(endTime.toDate());
          this.currentTime = endTime;
          return this.currentTime.minutes(this.currentTime.minutes() + Utils.minutesOfDay(this.planningSettings.breakDuration));
        } else {
          this.currentTime.hours(this.planningSettings.lunchTimeEnd.hours()).minutes(this.planningSettings.lunchTimeEnd.minutes());
          return this._calculateTimeForTourPlanning(tourPlanning);
        }
      } else {
        return this._clearDataForTourPlanning(tourPlanning);
      }
    };

    TourPlanning.prototype._clearDataForTourPlanning = function(tourPlanning) {
      tourPlanning.isChecked = false;
      return tourPlanning.visitOrderNumber = 0;
    };

    TourPlanning.prototype._calculateDone = function() {
      return this.isNeedRecalculate = false;
    };

    TourPlanning.prototype._calculateReset = function() {
      this.isNeedRecalculate = true;
      return this._updateSaveBtnState();
    };

    TourPlanning.prototype._updateSaveBtnState = function() {
      if (this.saveBtn) {
        return this.saveBtn.el[this.checkedCells.length ? 'addClass' : 'removeClass']('active');
      }
    };

    TourPlanning.prototype._showMessageAboutExistingAppointments = function() {
      return $.fn.dpToast(Locale.value('tourPlanning.ToastMessage.ExistedAppointments'));
    };

    TourPlanning.prototype._showDateTimePicker = function(dateTimeBtn) {
      var dateTimePicker;
      if (!this.originDateTime) {
        this.originDateTime = new Date();
      }
      dateTimePicker = new DateTimePicker(this.originDateTime, {
        beforeDays: this.TIMEPICKER_BEFORE_DAYS,
        afterDays: this.TIMEPICKER_AFTER_DAYS
      });
      dateTimePicker.on('onDonePressed', (function(_this) {
        return function(dateTime) {
          _this.dismissModalController();
          return _this._setDateTime(dateTimeBtn, dateTime);
        };
      })(this));
      return this.presentModalController(dateTimePicker);
    };

    TourPlanning.prototype._setDateTime = function(dateTimeBtn, result) {
      var dateTime;
      this.originDateTime = result;
      dateTime = Utils.formatDateTimeWithBreak(result);
      dateTimeBtn.updateValue(dateTime);
      return this._calculateReset();
    };

    TourPlanning.prototype._initContent = function() {
      this.tableController = new TourPlanningTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    TourPlanning.prototype.createCollection = function() {
      return new TourPlanningCollection;
    };

    TourPlanning.prototype.createTableHeaderItemsForModel = function(model) {
      var checkAllHeaderItem;
      checkAllHeaderItem = new TableHeaderItem('<input type="checkbox" name="checkAll" class="check-box">');
      checkAllHeaderItem.el.on('tap', this._onCheckAllTap);
      return [checkAllHeaderItem, new SortingTableHeaderItem(Locale.value('common:names.Contact'), model.sfdc.contactLastName, model.sfdc.contactFirstName, model.sfdc.id), new SortingTableHeaderItem(Locale.value('common:names.Organization'), model.sfdc.organizationName, model.sfdc.id), new SortingTableHeaderItem(Locale.value('common:names.AtCalls'), 'atCalls'), new TableHeaderItem(Locale.value('common:names.LastCall')), new TableHeaderItem(Locale.value('common:names.Priority')), new TableHeaderItem(Locale.value('common:names.VisitOrder')), new TableHeaderItem(Locale.value('common:names.VisitsTimeInfo'))];
    };

    TourPlanning.prototype._onCheckAllTap = function() {
      this._setCheckAllState(!this.elCheckboxAll[0].checked);
      this.checkedCells = [];
      if (this.isCheckAll) {
        return this.tableController.getAllEntities().then((function(_this) {
          return function(allEntities) {
            allEntities.forEach(function(tourPlanningEntity) {
              var tourPlanningTableCell;
              tourPlanningTableCell = _this._createCell(tourPlanningEntity);
              return _this.checkedCells.push(tourPlanningTableCell);
            });
            _this._calculateReset();
            return _this.tableController.reload();
          };
        })(this));
      } else {
        this._calculateReset();
        return this.tableController.reload();
      }
    };

    TourPlanning.prototype.cellForObjectOnTable = function(tourPlanningEntity, table) {
      var cellIndex, matchingCells, tourPlanningTableCell;
      tourPlanningTableCell = this._createCell(tourPlanningEntity);
      matchingCells = this.checkedCells.filter(function(cell) {
        return cell.tourPlanningEntity.id === tourPlanningEntity.id;
      });
      if (!_.isEmpty(matchingCells)) {
        cellIndex = this.checkedCells.indexOf(matchingCells[0]);
        tourPlanningTableCell.tourPlanningEntity.isChecked = true;
        tourPlanningTableCell.tourPlanningEntity.visitStartTime = matchingCells[0].tourPlanningEntity.visitStartTime;
        tourPlanningTableCell.tourPlanningEntity.visitEndTime = matchingCells[0].tourPlanningEntity.visitEndTime;
        tourPlanningTableCell.setVisitNumber(cellIndex + 1);
        this.checkedCells[cellIndex] = tourPlanningTableCell;
      }
      return tourPlanningTableCell;
    };

    TourPlanning.prototype._createCell = function(tourPlanningEntity) {
      var tourPlanningTableCell;
      tourPlanningTableCell = new TourPlanningTableCell(tourPlanningEntity);
      tourPlanningTableCell.on('checkboxCellTap', this._onCheckboxCellTap);
      tourPlanningTableCell.on('contactCellTap', this._onContactCellTap);
      tourPlanningTableCell.on('organizationCellTap', this._onOrganizationCellTap);
      tourPlanningTableCell.on('visitOrderCellTap', this._onVisitOrderCellTap);
      return tourPlanningTableCell;
    };

    TourPlanning.prototype._onCheckboxCellTap = function(cell) {
      var cellIndex;
      if (cell.tourPlanningEntity.isChecked) {
        this.checkedCells.push(cell);
        cell.setVisitNumber(this.checkedCells.length);
      } else {
        cellIndex = this.checkedCells.indexOf(cell);
        this.checkedCells.splice(cellIndex, 1);
        cell.setVisitNumber(0);
        if (this.checkedCells.length > 0) {
          this._recalculateVisitOrder(cellIndex);
        }
        if (this.isCheckAll) {
          this._setCheckAllState(false);
        }
      }
      return this._calculateReset();
    };

    TourPlanning.prototype._recalculateVisitOrder = function(indexFrom) {
      var i, index, ref, ref1, results;
      results = [];
      for (index = i = ref = indexFrom, ref1 = this.checkedCells.length; ref <= ref1 ? i < ref1 : i > ref1; index = ref <= ref1 ? ++i : --i) {
        results.push(this.checkedCells[index].setVisitNumber(index + 1));
      }
      return results;
    };

    TourPlanning.prototype._onContactCellTap = function(cell) {
      return this.stage.push(new ContactCard(cell.tourPlanningEntity.contactSfId));
    };

    TourPlanning.prototype._onOrganizationCellTap = function(cell) {
      return this.stage.push(new OrganizationCard(cell.tourPlanningEntity.organizationSfId));
    };

    TourPlanning.prototype._onVisitOrderCellTap = function(cell) {
      var currentCellNumber, datasource, i, orderPopup, ref, results;
      if (this.checkedCells.length) {
        datasource = (function() {
          results = [];
          for (var i = 1, ref = this.checkedCells.length; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this).map(function(value) {
          return {
            id: value,
            description: value
          };
        });
        currentCellNumber = cell.tourPlanningEntity.visitOrderNumber;
        orderPopup = new ListPopup(datasource, {
          id: currentCellNumber
        }, Locale.value('tourPlanning.VisitOrderPopupHeader'));
        orderPopup.bind('onPopupItemSelected', (function(_this) {
          return function(selectedItem) {
            var newIndex;
            newIndex = selectedItem.id - 1;
            _this.dismissModalController();
            return _this._swapOrderIndexes(currentCellNumber - 1, newIndex);
          };
        })(this));
        return this.presentModalController(orderPopup);
      }
    };

    TourPlanning.prototype._swapOrderIndexes = function(firstIndex, secondIndex) {
      var ref;
      ref = [this.checkedCells[secondIndex], this.checkedCells[firstIndex]], this.checkedCells[firstIndex] = ref[0], this.checkedCells[secondIndex] = ref[1];
      this.checkedCells[firstIndex].setVisitNumber(firstIndex + 1);
      this.checkedCells[secondIndex].setVisitNumber(secondIndex + 1);
      return this._calculateReset();
    };

    TourPlanning.prototype.brickIds = function() {
      return this.currentFilter.map((function(_this) {
        return function(filterItem) {
          return filterItem.id;
        };
      })(this));
    };

    TourPlanning.prototype.userId = function() {
      var ref, ref1;
      return (ref = (ref1 = this.activeUser) != null ? ref1.id : void 0) != null ? ref : null;
    };

    TourPlanning.prototype.savePlannedAppointments = function() {
      return Utils.runSimultaneously(_(this.checkedCells).map((function(_this) {
        return function(cell) {
          var newAppointment, tourPlanningEntity;
          tourPlanningEntity = cell.tourPlanningEntity;
          newAppointment = {};
          newAppointment[CallReport.sfdc.createdOffline] = true;
          newAppointment[CallReport.sfdc.dateTimeOfVisit] = tourPlanningEntity.visitStartTime;
          newAppointment[CallReport.sfdc.dateOfVisit] = Utils.originalDate(tourPlanningEntity.visitStartTime);
          newAppointment[CallReport.sfdc.organizationSfId] = tourPlanningEntity.organizationSfId;
          newAppointment[CallReport.sfdc.remoteOrganizationName] = tourPlanningEntity.organizationName;
          newAppointment.organizationName = tourPlanningEntity.organizationName;
          newAppointment[CallReport.sfdc.organizationCity] = tourPlanningEntity.organizationCity;
          newAppointment[CallReport.sfdc.organizationAddress] = tourPlanningEntity.organizationAddress;
          newAppointment[CallReport.sfdc.contactSfid] = tourPlanningEntity.contactSfId;
          newAppointment[CallReport.sfdc.remoteContactFirstName] = tourPlanningEntity.contactFirstName;
          newAppointment[CallReport.sfdc.remoteContactLastName] = tourPlanningEntity.contactLastName;
          newAppointment.contactFirstName = tourPlanningEntity.contactFirstName;
          newAppointment.contactLastName = tourPlanningEntity.contactLastName;
          newAppointment[CallReport.sfdc.contactRecordType] = tourPlanningEntity.contactRecordType;
          newAppointment[CallReport.sfdc.userFirstName] = _this.activeUser.firstName;
          newAppointment[CallReport.sfdc.userLastName] = _this.activeUser.lastName;
          newAppointment[CallReport.sfdc.userSfid] = _this.activeUser.id;
          newAppointment[CallReport.sfdc.duration] = tourPlanningEntity.callDuration.minutes();
          newAppointment[CallReport.sfdc.type] = CallReport.TYPE_APPOINTMENT;
          newAppointment[CallReport.sfdc.recordTypeId] = _this.config.appointmentRecordTypeId;
          newAppointment['attributes'] = {
            type: CallReport.table
          };
          return _this.appointmentsCollection.createEntity(newAppointment);
        };
      })(this)));
    };

    return TourPlanning;

  })(RootPanelScreen);

  module.exports = TourPlanning;

}).call(this);
}, "controllers/tour-planning-organization/tour-planning-organization-table": function(exports, require, module) {(function() {
  var TourPlanningOrganizationTableController, TourPlanningTableController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TourPlanningTableController = require('controllers/tour-planning/tour-planning-table');

  TourPlanningOrganizationTableController = (function(superClass) {
    extend(TourPlanningOrganizationTableController, superClass);

    function TourPlanningOrganizationTableController() {
      this._sortBy = bind(this._sortBy, this);
      this._fetchAll = bind(this._fetchAll, this);
      this.organizationById = bind(this.organizationById, this);
      return TourPlanningOrganizationTableController.__super__.constructor.apply(this, arguments);
    }

    TourPlanningOrganizationTableController.prototype.organizationById = function() {
      var organizationValue;
      organizationValue = {};
      organizationValue[this.collection.model.sfdc.organizationSfId] = this.datasource.organizationId;
      return organizationValue;
    };

    TourPlanningOrganizationTableController.prototype._fetchAll = function() {
      return this.collection.fetchAllWhere(this.organizationById());
    };

    TourPlanningOrganizationTableController.prototype._sortBy = function(fields, isAsc) {
      return this.collection.fetchAllWhereAndSortBy(this.organizationById(), fields, isAsc);
    };

    return TourPlanningOrganizationTableController;

  })(TourPlanningTableController);

  module.exports = TourPlanningOrganizationTableController;

}).call(this);
}, "controllers/tour-planning-organization/tour-planning-organization": function(exports, require, module) {(function() {
  var Header, HeaderBaseControl, HeaderDateTimeControl, TargetTourPlanningCollection, TourPlanning, TourPlanningOrganization, TourPlanningOrganizationTableController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TourPlanning = require('controllers/tour-planning/tour-planning');

  TargetTourPlanningCollection = require('models/bll/tour-planning-collection/target-tour-planning-collection');

  TourPlanningOrganizationTableController = require('controllers/tour-planning-organization/tour-planning-organization-table');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  HeaderDateTimeControl = require('controls/header-controls/header-date-time-control');

  Header = require('controls/header/header');

  TourPlanningOrganization = (function(superClass) {
    extend(TourPlanningOrganization, superClass);

    TourPlanningOrganization.prototype.className = 'table-view tour-planning-organization';

    TourPlanningOrganization.prototype.organizationId = null;

    function TourPlanningOrganization(organizationId) {
      this.organizationId = organizationId;
      this.onBack = bind(this.onBack, this);
      this._initHeader = bind(this._initHeader, this);
      this._initContent = bind(this._initContent, this);
      this.createCollection = bind(this.createCollection, this);
      TourPlanningOrganization.__super__.constructor.apply(this, arguments);
    }

    TourPlanningOrganization.prototype.createCollection = function() {
      return new TargetTourPlanningCollection;
    };

    TourPlanningOrganization.prototype._initContent = function() {
      this.tableController = new TourPlanningOrganizationTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    TourPlanningOrganization.prototype._initHeader = function() {
      var calculateBtn, dateTimeBtn, planningHeader;
      this.saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
      this.saveBtn.bind('tap', this._onSaveTap);
      calculateBtn = new HeaderBaseControl(Locale.value('tourPlanning.CalculateBtn'), 'ctrl-btn');
      calculateBtn.bind('tap', this._onCalculateTap);
      dateTimeBtn = new HeaderDateTimeControl(Locale.value('tourPlanning.StartTime'), '');
      dateTimeBtn.bind('tap', this._showDateTimePicker);
      planningHeader = new Header(Locale.value("tourPlanning.HeaderTitle"));
      planningHeader.render();
      planningHeader.addRightControlElement(dateTimeBtn.el);
      planningHeader.addRightControlElement(calculateBtn.el);
      planningHeader.addRightControlElement(this.saveBtn.el);
      this.setHeader(planningHeader);
      return this._setDateTime(dateTimeBtn, new Date);
    };

    TourPlanningOrganization.prototype.onBack = function() {
      this.unsubscribeFromBackButton();
      return this.stage.pop();
    };

    return TourPlanningOrganization;

  })(TourPlanning);

  module.exports = TourPlanningOrganization;

}).call(this);
}, "controllers/trade-module/navigation-promotions": function(exports, require, module) {(function() {
  var HeaderBaseControl, NavigationPromotions,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  NavigationPromotions = (function(superClass) {
    extend(NavigationPromotions, superClass);

    NavigationPromotions.prototype.className = 'navigation-promotions';

    NavigationPromotions.prototype.elements = {
      '.current': 'elCurrent',
      '.total': 'elTotal'
    };

    function NavigationPromotions(currentPromotionIndex, totalPromotions) {
      this.currentPromotionIndex = currentPromotionIndex;
      this.totalPromotions = totalPromotions;
      this._onNextTap = bind(this._onNextTap, this);
      this._onPrevTap = bind(this._onPrevTap, this);
      NavigationPromotions.__super__.constructor.call(this, {});
    }

    NavigationPromotions.prototype.render = function() {
      this.html(this._template());
      this.prev = new HeaderBaseControl(Locale.value('common:buttons.Prev'), 'ctrl-btn');
      this.next = new HeaderBaseControl(Locale.value('common:buttons.Next'), 'ctrl-btn');
      this.append(this.prev.el, this.next.el);
      this._setupForCurrentPromotionIndex();
      this._bindEvents();
      return this;
    };

    NavigationPromotions.prototype._template = function() {
      return require('views/trade-module/navigation-promotions');
    };

    NavigationPromotions.prototype._setupForCurrentPromotionIndex = function() {
      this.elCurrent.html(this.currentPromotionIndex + 1);
      return this.elTotal.html(this.totalPromotions);
    };

    NavigationPromotions.prototype._bindEvents = function() {
      this.prev.bind('tap', this._onPrevTap);
      return this.next.bind('tap', this._onNextTap);
    };

    NavigationPromotions.prototype._onPrevTap = function() {
      return this.trigger('prevBtnTap');
    };

    NavigationPromotions.prototype._onNextTap = function() {
      return this.trigger('nextBtnTap');
    };

    return NavigationPromotions;

  })(Spine.Controller);

  module.exports = NavigationPromotions;

}).call(this);
}, "controllers/trade-module/photos/photo-item": function(exports, require, module) {(function() {
  var AttachmentLoadManager, AttachmentLoader, NullImage, PhotoAdjustmentsCollection, PhotoAttachmentFileManager, PhotoItem, ProgressBar, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PhotoAttachmentFileManager = require('common/attachment-managers/photo-attachment-file-manager');

  AttachmentLoadManager = require('common/attachment-managers/attachment-load-manager');

  AttachmentLoader = require('common/attachment-managers/attachment-loader');

  ProgressBar = require('controls/progress-bar/progress-bar');

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  NullImage = (function() {
    function NullImage() {
      this.path = '';
      this.thumbnailPath = '';
    }

    return NullImage;

  })();

  PhotoItem = (function(superClass) {
    extend(PhotoItem, superClass);

    PhotoItem.prototype.tag = 'li';

    PhotoItem.prototype.className = 'photo-item';

    PhotoItem.prototype.elements = {
      '.progress-holder': 'elProgressHolder',
      '.remove-photo-item': 'elRemovePhoto'
    };

    function PhotoItem(localImage, photoAdjustmentEntity) {
      this.photoAdjustmentEntity = photoAdjustmentEntity;
      this._onItemHold = bind(this._onItemHold, this);
      this._onRemoveTap = bind(this._onRemoveTap, this);
      this._loadStart = bind(this._loadStart, this);
      this._onItemTap = bind(this._onItemTap, this);
      this._changeLoadingState = bind(this._changeLoadingState, this);
      this._dropLoading = bind(this._dropLoading, this);
      this._finishLoading = bind(this._finishLoading, this);
      this._resumeLoading = bind(this._resumeLoading, this);
      this._checkLoadingState = bind(this._checkLoadingState, this);
      this.refreshPhoto = bind(this.refreshPhoto, this);
      PhotoItem.__super__.constructor.call(this, {});
      this.image = localImage || new NullImage;
      this.photoAdjustmentsCollection = new PhotoAdjustmentsCollection;
    }

    PhotoItem.prototype.render = function() {
      this.html(this.template());
      this.photoAdjustmentsCollection.getAttachmentByPhotoAdjustmentId(this.photoAdjustmentEntity.id).then((function(_this) {
        return function(attachment) {
          _this.attachment = attachment;
          return _this.refreshPhoto();
        };
      })(this));
      this._bindEvents();
      return this;
    };

    PhotoItem.prototype._bindEvents = function() {
      this.el.on('tap', this._onItemTap);
      this.el.on('hold', this._onItemHold);
      return this.elRemovePhoto.on('tap', this._onRemoveTap);
    };

    PhotoItem.prototype.refreshPhoto = function() {
      return PhotoAttachmentFileManager.fileExist(this.image.path).done((function(_this) {
        return function() {
          return _this.el.css('background-image', "url('" + _this.image.thumbnailPath + "')");
        };
      })(this)).fail((function(_this) {
        return function() {
          return _this.el.css('background-color', 'grey');
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._checkLoadingState();
        };
      })(this));
    };

    PhotoItem.prototype.template = function() {
      return require('views/trade-module/photo-item')();
    };

    PhotoItem.prototype._checkLoadingState = function() {
      var loader;
      loader = AttachmentLoadManager.getLoaderForAttachment(this.attachment);
      switch (loader != null ? loader.status : void 0) {
        case AttachmentLoader.states.DOWNLOAD:
          return this._resumeLoading(loader);
        case AttachmentLoader.states.FINISHED:
          return this._finishLoading();
        case AttachmentLoader.states.ERROR:
          return this._dropLoading();
      }
    };

    PhotoItem.prototype._resumeLoading = function(loader) {
      this.progressBar || (this.progressBar = new ProgressBar);
      this.elProgressHolder.append(this.progressBar.el);
      this.el.addClass('in-progress');
      loader.onStateChange = this._changeLoadingState;
      loader.onSuccess = this._finishLoading;
      loader.onFail = this._dropLoading;
      return this._changeLoadingState(loader.status, {
        current: loader.loadedSize,
        total: loader.fileSize
      });
    };

    PhotoItem.prototype._finishLoading = function(entry) {
      this.progressBar && this.progressBar.el.remove();
      this.progressBar = null;
      this.el.removeClass('in-progress');
      return this.photoAdjustmentsCollection.saveDownloadedImageWithThumbnail(this.attachment, entry.fullPath).then((function(_this) {
        return function(image) {
          _this.image = image;
          _this.refreshPhoto();
          return $.fn.dpToast(Locale.value('PhotoAttachmentsPopup.Success'));
        };
      })(this));
    };

    PhotoItem.prototype._dropLoading = function(error) {
      this.image = new NullImage;
      this.progressBar && this.progressBar.el.remove();
      this.el.removeClass('in-progress');
      switch (error.code) {
        case FileTransferError.CONNECTION_ERR:
          return this.trigger('errorOffline', this);
        case FileTransferError.FILE_NOT_FOUND_ERR:
          return this.trigger('errorUnauthorized', this);
        default:
          return $.fn.dpToast(Locale.value('PhotoAttachmentsPopup.Error'));
      }
    };

    PhotoItem.prototype._changeLoadingState = function(state, progress) {
      return this.progressBar.setValue(Math.round(progress.current / progress.total * 100));
    };

    PhotoItem.prototype._onItemTap = function() {
      if (!this.attachment) {
        return this.trigger('errorAttachment', this);
      } else if (this.image.path) {
        return this.trigger('itemTap', this);
      } else {
        return this._loadStart();
      }
    };

    PhotoItem.prototype._loadStart = function() {
      if (!AttachmentLoadManager.getLoaderForAttachment(this.attachment)) {
        this.progressBar = new ProgressBar;
        this.elProgressHolder.append(this.progressBar.el);
        this.el.addClass('in-progress');
        this.attachment.title += '.jpg';
        return AttachmentLoadManager.queueInvoke(this.attachment, {
          onStateChange: this._changeLoadingState,
          onSuccess: this._finishLoading,
          onFail: this._dropLoading
        }, PhotoAttachmentFileManager);
      }
    };

    PhotoItem.prototype._onRemoveTap = function(event) {
      event.stopPropagation();
      return this.trigger('removeTap', this);
    };

    PhotoItem.prototype._onItemHold = function() {
      return this.trigger('itemHold', this);
    };

    return PhotoItem;

  })(Spine.Controller);

  module.exports = PhotoItem;

}).call(this);
}, "controllers/trade-module/photos/photo-preview": function(exports, require, module) {(function() {
  var BasePopup, PhotoPreview, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  BasePopup = require('controls/popups/base-popup');

  PhotoPreview = (function(superClass) {
    extend(PhotoPreview, superClass);

    PhotoPreview.prototype.className = 'popup preview';

    PhotoPreview.prototype.events = {
      'tap': '_onPhotoTap'
    };

    function PhotoPreview(imageUrl) {
      this.imageUrl = imageUrl;
      this._onPhotoTap = bind(this._onPhotoTap, this);
      PhotoPreview.__super__.constructor.apply(this, arguments);
      this.render();
    }

    PhotoPreview.prototype._renderContent = function() {
      var img;
      img = document.createElement('img');
      img.src = this.imageUrl;
      return this.html(img);
    };

    PhotoPreview.prototype._onPhotoTap = function() {
      return this.trigger("onPhotoPreviewTap");
    };

    return PhotoPreview;

  })(BasePopup);

  module.exports = PhotoPreview;

}).call(this);
}, "controllers/trade-module/photos/photos-grid-view": function(exports, require, module) {(function() {
  var AlertPopup, ConfirmationPopup, FileProcessor, PanelScreen, PhotoAdjustmentsCollection, PhotoItem, PhotoPreview, PhotosGridView, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PhotoItem = require('controllers/trade-module/photos/photo-item');

  PhotoPreview = require('controllers/trade-module/photos/photo-preview');

  FileProcessor = require('common/file-processor/file-processor');

  PanelScreen = require('controllers/base/panel/panel-screen');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  AlertPopup = require('controls/popups/alert-popup');

  PhotosGridView = (function(superClass) {
    extend(PhotosGridView, superClass);

    PhotosGridView.prototype.className = 'photos-grid-view stack-page scroll-container';

    PhotosGridView.prototype.navigator = navigator;

    PhotosGridView.prototype.elements = {
      '.take-photo': 'elTakePhoto',
      '.photos-list': 'elPhotosList'
    };

    PhotosGridView.prototype.events = {
      'tap .take-photo': '_takePhoto'
    };

    PhotosGridView.prototype.PHOTO_LIMIT = 14;

    PhotosGridView.prototype.cameraOptions = {
      correctOrientation: true,
      quality: 40
    };

    function PhotosGridView(promoAdjustmentEntity) {
      this.promoAdjustmentEntity = promoAdjustmentEntity;
      this._dataChanged = bind(this._dataChanged, this);
      this._createPhotoAdjustment = bind(this._createPhotoAdjustment, this);
      this._addPhoto = bind(this._addPhoto, this);
      this._onError = bind(this._onError, this);
      this._takePhoto = bind(this._takePhoto, this);
      this._activateDeleteMode = bind(this._activateDeleteMode, this);
      this._checkPhotoNumber = bind(this._checkPhotoNumber, this);
      this._removePhotoItem = bind(this._removePhotoItem, this);
      this._onRemovePhotoTap = bind(this._onRemovePhotoTap, this);
      this._onPhotoPreviewTap = bind(this._onPhotoPreviewTap, this);
      this._deActivateDeleteMode = bind(this._deActivateDeleteMode, this);
      this._preview = bind(this._preview, this);
      this._showNoAttachmentErrorAlert = bind(this._showNoAttachmentErrorAlert, this);
      this._showUnauthorizedErrorAlert = bind(this._showUnauthorizedErrorAlert, this);
      this._showOfflineErrorAlert = bind(this._showOfflineErrorAlert, this);
      this._createPhotoItem = bind(this._createPhotoItem, this);
      this._showSavedPhotos = bind(this._showSavedPhotos, this);
      this._fetchPhotos = bind(this._fetchPhotos, this);
      this._prefetchExistingPhotosIfNeeded = bind(this._prefetchExistingPhotosIfNeeded, this);
      PhotosGridView.__super__.constructor.call(this, {});
      this.photoAdjustmentsCollection = new PhotoAdjustmentsCollection;
    }

    PhotosGridView.prototype.active = function() {
      PhotosGridView.__super__.active.apply(this, arguments);
      return this.render();
    };

    PhotosGridView.prototype.render = function() {
      this.html(this.template());
      this._prefetchExistingPhotosIfNeeded().then(this._showSavedPhotos);
      this._checkPhotoNumber();
      return this;
    };

    PhotosGridView.prototype.template = function() {
      return require('views/trade-module/photos-grid-view')();
    };

    PhotosGridView.prototype._prefetchExistingPhotosIfNeeded = function() {
      if (this.promoAdjustmentEntity.isReadOnly) {
        return this._fetchPhotos();
      } else {
        return $.when();
      }
    };

    PhotosGridView.prototype._fetchPhotos = function() {
      return this.photoAdjustmentsCollection.getEntitiesForCallReportAndPromotion(this.promoAdjustmentEntity.callReport, this.promoAdjustmentEntity.promoId).then((function(_this) {
        return function(photoAdjustmentEntities) {
          return photoAdjustmentEntities.forEach(_this.promoAdjustmentEntity.addPhoto);
        };
      })(this));
    };

    PhotosGridView.prototype._showSavedPhotos = function() {
      return this.photoAdjustmentsCollection.getLocalImagesByAdjustments(this.promoAdjustmentEntity.photos).then((function(_this) {
        return function(promotionAttachmentsImages) {
          return _this.promoAdjustmentEntity.photos.forEach(function(photoAdjustmentEntity) {
            return _this._createPhotoItem(photoAdjustmentEntity, promotionAttachmentsImages[photoAdjustmentEntity.id]);
          });
        };
      })(this));
    };

    PhotosGridView.prototype._createPhotoItem = function(photoAdjustmentEntity, image) {
      var photo;
      photo = new PhotoItem(image, photoAdjustmentEntity);
      photo.on('itemTap', this._preview);
      photo.on('errorOffline', this._showOfflineErrorAlert);
      photo.on('errorUnauthorized', this._showUnauthorizedErrorAlert);
      photo.on('errorAttachment', this._showNoAttachmentErrorAlert);
      if (!this.promoAdjustmentEntity.isReadOnly) {
        photo.on('removeTap', this._onRemovePhotoTap);
        photo.on('itemHold', this._activateDeleteMode);
      }
      return photo.render().el.insertAfter(this.elTakePhoto);
    };

    PhotosGridView.prototype._showOfflineErrorAlert = function() {
      return this._showErrorAlert(Locale.value('PhotoAttachmentsPopup.Offline.caption'), Locale.value('PhotoAttachmentsPopup.Offline.message'));
    };

    PhotosGridView.prototype._showUnauthorizedErrorAlert = function() {
      return this._showErrorAlert(Locale.value('PhotoAttachmentsPopup.Unauthorized.caption'), Locale.value('PhotoAttachmentsPopup.Unauthorized.message'));
    };

    PhotosGridView.prototype._showNoAttachmentErrorAlert = function() {
      return this._showErrorAlert(Locale.value('PhotoAttachmentsPopup.NoAttachment.caption'), Locale.value('PhotoAttachmentsPopup.NoAttachment.message'));
    };

    PhotosGridView.prototype._showErrorAlert = function(caption, message) {
      var alertPopup;
      alertPopup = new AlertPopup({
        caption: caption,
        message: message
      });
      alertPopup.bind('yesClicked', (function(_this) {
        return function() {
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', alertPopup);
    };

    PhotosGridView.prototype._preview = function(item) {
      var photoPreview;
      if (this.elPhotosList.hasClass('delete-mode')) {
        return this._deActivateDeleteMode();
      } else {
        photoPreview = new PhotoPreview(item.image.path);
        photoPreview.on('onPhotoPreviewTap', this._onPhotoPreviewTap);
        return this.trigger('presentModalController', photoPreview);
      }
    };

    PhotosGridView.prototype._deActivateDeleteMode = function() {
      return this.elPhotosList.removeClass('delete-mode');
    };

    PhotosGridView.prototype._onPhotoPreviewTap = function() {
      return this.trigger('dismissModalController');
    };

    PhotosGridView.prototype._onRemovePhotoTap = function(item) {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('card.ConfirmationPopup.DeleteItem.Question')
      });
      confirm.bind('yesClicked', (function(_this) {
        return function() {
          _this._removePhotoItem(item);
          return _this.trigger('dismissModalController');
        };
      })(this));
      confirm.bind('noClicked', (function(_this) {
        return function() {
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', confirm);
    };

    PhotosGridView.prototype._removePhotoItem = function(item) {
      return this.photoAdjustmentsCollection.removePhoto(item.photoAdjustmentEntity, item.image).then((function(_this) {
        return function() {
          _this.promoAdjustmentEntity.removePhoto(item.photoAdjustmentEntity);
          item.release();
          return _this._checkPhotoNumber();
        };
      })(this));
    };

    PhotosGridView.prototype._checkPhotoNumber = function() {
      if (this.promoAdjustmentEntity.photos.length >= this.PHOTO_LIMIT) {
        return this.elTakePhoto.addClass('disabled');
      } else {
        return this.elTakePhoto.removeClass('disabled');
      }
    };

    PhotosGridView.prototype._activateDeleteMode = function() {
      this.el.one('tap', this._deActivateDeleteMode);
      return this.elPhotosList.addClass('delete-mode');
    };

    PhotosGridView.prototype._takePhoto = function() {
      return this.navigator.camera.getPicture(this._addPhoto, this._onError, this.cameraOptions);
    };

    PhotosGridView.prototype._onError = function(error) {
      return console.log("Something went wrong: " + error);
    };

    PhotosGridView.prototype._addPhoto = function(imageUrl) {
      return this.photoAdjustmentsCollection.addPhoto(this._createPhotoAdjustment(), imageUrl).then((function(_this) {
        return function(arg) {
          var image, photoAdjustmentEntity;
          photoAdjustmentEntity = arg[0], image = arg[1];
          _this.promoAdjustmentEntity.addPhoto(photoAdjustmentEntity);
          _this._dataChanged();
          _this._createPhotoItem(photoAdjustmentEntity, image);
          return _this._checkPhotoNumber();
        };
      })(this));
    };

    PhotosGridView.prototype._createPhotoAdjustment = function() {
      var photoAdjustment;
      photoAdjustment = {};
      photoAdjustment[this.photoAdjustmentsCollection.model.sfdc.callReportSfId] = this.promoAdjustmentEntity.callReport.attributes._soupEntryId;
      photoAdjustment[this.photoAdjustmentsCollection.model.sfdc.promotionSfId] = this.promoAdjustmentEntity.promoId;
      photoAdjustment.isModifiedInTrade = true;
      photoAdjustment.isModifiedInCall = true;
      return photoAdjustment;
    };

    PhotosGridView.prototype._dataChanged = function() {
      return this.trigger('dataChanged');
    };

    return PhotosGridView;

  })(Spine.Controller);

  module.exports = PhotosGridView;

}).call(this);
}, "controllers/trade-module/promotion-details/notes-attachments/attachments-table-cell": function(exports, require, module) {(function() {
  var AttachmentFileManager, AttachmentLoadManager, AttachmentLoader, AttachmentsTableCell, ProgressBar, TableCell,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableCell = require('controls/table/table-cell');

  AttachmentFileManager = require('common/attachment-managers/attachment-file-manager');

  AttachmentLoadManager = require('common/attachment-managers/attachment-load-manager');

  AttachmentLoader = require('common/attachment-managers/attachment-loader');

  ProgressBar = require('controls/progress-bar/progress-bar');

  AttachmentsTableCell = (function(superClass) {
    extend(AttachmentsTableCell, superClass);

    AttachmentsTableCell.prototype.elProgressBarHolder = null;

    AttachmentsTableCell.prototype.elLoadedCheck = null;

    function AttachmentsTableCell(attachment) {
      this.attachment = attachment;
      this._onCellTap = bind(this._onCellTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      this.onLoadFail = bind(this.onLoadFail, this);
      this.onLoadSuccess = bind(this.onLoadSuccess, this);
      this.onLoadStateChange = bind(this.onLoadStateChange, this);
      this._loadResume = bind(this._loadResume, this);
      this._checkLoadState = bind(this._checkLoadState, this);
      this._renderContent = bind(this._renderContent, this);
      this.addProgress = bind(this.addProgress, this);
      AttachmentsTableCell.__super__.constructor.call(this, {});
    }

    AttachmentsTableCell.prototype.render = function() {
      var filePath;
      filePath = AttachmentFileManager.getFilePath(this.attachment.body, this.attachment.title);
      AttachmentFileManager.fileExist(filePath).done((function(_this) {
        return function() {
          _this.attachment.loaded = true;
          return _this._renderContent();
        };
      })(this)).fail(this._renderContent);
      return this;
    };

    AttachmentsTableCell.prototype.addProgress = function() {
      this.progressBar = new ProgressBar;
      return this.elProgressBarHolder.addClass('in-progress').append(this.progressBar.el);
    };

    AttachmentsTableCell.prototype._renderContent = function() {};

    AttachmentsTableCell.prototype._checkLoadState = function() {
      var loader;
      loader = AttachmentLoadManager.getLoaderForAttachment(this.attachment);
      switch (loader != null ? loader.status : void 0) {
        case AttachmentLoader.states.DOWNLOAD:
          this._loadResume(loader);
          break;
        case AttachmentLoader.states.FINISHED:
          this.onLoadSuccess();
          break;
        case AttachmentLoader.states.ERROR:
          this.onLoadFail();
      }
      if (this.attachment.loaded) {
        return this.elLoadedCheck.addClass('checked');
      }
    };

    AttachmentsTableCell.prototype._loadResume = function(loader) {
      this.progressBar || (this.progressBar = new ProgressBar);
      this.elProgressBarHolder.addClass('in-progress').append(this.progressBar.el);
      loader.onStateChange = this.onLoadStateChange;
      loader.onSuccess = this.onLoadSuccess;
      loader.onFail = this.onLoadFail;
      return this.onLoadStateChange(loader.status, {
        current: loader.loadedSize,
        total: loader.fileSize
      });
    };

    AttachmentsTableCell.prototype.onLoadStateChange = function(state, progress) {
      return this.progressBar.setValue(Math.round(progress.current / progress.total * 100));
    };

    AttachmentsTableCell.prototype.onLoadSuccess = function() {
      this.attachment.loaded = true;
      this.progressBar && this.progressBar.el.remove();
      this.elProgressBarHolder.removeClass('in-progress');
      this.progressBar = null;
      this.elLoadedCheck.addClass('checked');
      return $.fn.dpToast((Locale.value("AttachmentsPopup.Success")) + " " + this.attachment.title);
    };

    AttachmentsTableCell.prototype.onLoadFail = function(error) {
      this.attachment.loaded = false;
      this.progressBar && this.progressBar.el.remove();
      this.elProgressBarHolder.removeClass('in-progress');
      this.elLoadedCheck.removeClass("checked");
      if (error.code === FileTransferError.FILE_NOT_FOUND_ERR && error.http_status === 401) {
        return $.fn.dpToast(Locale.value('AttachmentsPopup.Unauthorized'));
      } else if (error.http_status === 404) {
        return $.fn.dpToast(Locale.value('AttachmentsPopup.Deleted'));
      } else if (error.code === FileTransferError.CONNECTION_ERR) {
        return $.fn.dpToast(Locale.value('AttachmentsPopup.LoadFail'));
      } else {
        return $.fn.dpToast((Locale.value("AttachmentsPopup.Error")) + " " + this.attachment.title);
      }
    };

    AttachmentsTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    AttachmentsTableCell.prototype._onCellTap = function() {
      return this.trigger('attachmentCellTap', this);
    };

    return AttachmentsTableCell;

  })(TableCell);

  module.exports = AttachmentsTableCell;

}).call(this);
}, "controllers/trade-module/promotion-details/notes-attachments/attachments-trade-table-cell": function(exports, require, module) {(function() {
  var AttachmentsTableCell, NotesAttachmentsTableCell, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Utils = require('common/utils');

  AttachmentsTableCell = require('controllers/trade-module/promotion-details/notes-attachments/attachments-table-cell');

  NotesAttachmentsTableCell = (function(superClass) {
    extend(NotesAttachmentsTableCell, superClass);

    function NotesAttachmentsTableCell() {
      this._renderContent = bind(this._renderContent, this);
      return NotesAttachmentsTableCell.__super__.constructor.apply(this, arguments);
    }

    NotesAttachmentsTableCell.prototype.tag = 'tr';

    NotesAttachmentsTableCell.prototype.elements = {
      ".note-type": "elType",
      ".progress-bar-holder": "elProgressBarHolder",
      ".last-modify": "elLastModify",
      ".attached-by": "elAttachedBy",
      ".check-box": "elLoadedCheck"
    };

    NotesAttachmentsTableCell.prototype.template = function() {
      return require('views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell')();
    };

    NotesAttachmentsTableCell.prototype._renderContent = function() {
      this.html(this.template());
      this.elType.text(this.attachment.sobjectType);
      this.elProgressBarHolder.find('.title-label').text(this.attachment.title);
      this.elLastModify.html((Utils.dotFormatDate(this.attachment.lastModify)) + "<br />" + (Utils.formatTime(this.attachment.lastModify)));
      this.elAttachedBy.text(this.attachment.attachedByName);
      this._checkLoadState();
      return this.bindEvents();
    };

    return NotesAttachmentsTableCell;

  })(AttachmentsTableCell);

  module.exports = NotesAttachmentsTableCell;

}).call(this);
}, "controllers/trade-module/promotion-details/notes-attachments/notes-attachments-table": function(exports, require, module) {(function() {
  var NotesAttachmentsTable, TableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  NotesAttachmentsTable = (function(superClass) {
    extend(NotesAttachmentsTable, superClass);

    function NotesAttachmentsTable() {
      return NotesAttachmentsTable.__super__.constructor.apply(this, arguments);
    }

    NotesAttachmentsTable.prototype.elements = {
      '.scroll-content tbody': 'elTbody'
    };

    NotesAttachmentsTable.prototype.template = function() {
      return require('views/trade-module/promotion-details/notes-attachments/notes-attachments-table')();
    };

    return NotesAttachmentsTable;

  })(TableController);

  module.exports = NotesAttachmentsTable;

}).call(this);
}, "controllers/trade-module/promotion-details/notes-attachments/notes-attachments": function(exports, require, module) {(function() {
  var AttachmentFileManager, AttachmentLoadManager, AttachmentsManager, AttachmentsTradeTableCell, Notes, NotesAttachmentsTable, NotesTableCell, PromotionAttachment, PromotionAttachmentsCollection, PromotionNotePopup, PromotionNotesCollection, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  NotesAttachmentsTable = require('controllers/trade-module/promotion-details/notes-attachments/notes-attachments-table');

  AttachmentsTradeTableCell = require('controllers/trade-module/promotion-details/notes-attachments/attachments-trade-table-cell');

  NotesTableCell = require('controllers/trade-module/promotion-details/notes-attachments/notes-table-cell');

  PromotionNotesCollection = require('models/bll/promotion-notes-collection');

  PromotionAttachmentsCollection = require('models/bll/promotion-attachments-collection');

  PromotionNotePopup = require('/controls/popups/promotion-note-popup');

  AttachmentLoadManager = require('common/attachment-managers/attachment-load-manager');

  AttachmentsManager = require('common/attachment-managers/attachments-manager');

  AttachmentFileManager = require('common/attachment-managers/attachment-file-manager');

  Utils = require('common/utils');

  PromotionAttachment = require('models/promotion-attachment');

  Notes = (function(superClass) {
    extend(Notes, superClass);

    Notes.prototype.className = 'notes stack-page';

    function Notes(promotionAccount) {
      this.promotionAccount = promotionAccount;
      this._onAttachmentCellTap = bind(this._onAttachmentCellTap, this);
      this._onNoteCellTap = bind(this._onNoteCellTap, this);
      this.cellForRowAtIndexForTable = bind(this.cellForRowAtIndexForTable, this);
      this.numberOfRowsForTable = bind(this.numberOfRowsForTable, this);
      Notes.__super__.constructor.call(this, {});
      this.promotionNotesCollection = new PromotionNotesCollection;
      this.promotionAttachmentsCollection = new PromotionAttachmentsCollection;
    }

    Notes.prototype.active = function() {
      Notes.__super__.active.apply(this, arguments);
      return this.render();
    };

    Notes.prototype.render = function() {
      this.promotionAttachmentsCollection.getAllAttachmentsForPromotionWithId(this.promotionAccount.promotionSfId).then((function(_this) {
        return function(attachments) {
          _this.attachments = attachments;
          return _this.promotionNotesCollection.getAllNotesForPromotionWithId(_this.promotionAccount.promotionSfId).then(function(notes) {
            var notesAttachmentsTable;
            _this.notes = notes;
            if (_.isEmpty(_this.attachments) && _.isEmpty(_this.notes)) {
              return _this._renderEmptyTemplate();
            } else {
              _this.notesAndAttachments = _this.attachments.concat(_this.notes);
              notesAttachmentsTable = new NotesAttachmentsTable;
              notesAttachmentsTable.datasource = _this;
              _this.el.html(notesAttachmentsTable.render().el);
              return Locale.localize(_this.el);
            }
          });
        };
      })(this));
      return this;
    };

    Notes.prototype.numberOfRowsForTable = function(table) {
      return this.notesAndAttachments.length;
    };

    Notes.prototype._renderEmptyTemplate = function() {
      this.html(Locale.value('tradeModule.Notes.NoNotes'));
      return this.el.addClass('empty-tab');
    };

    Notes.prototype.cellForRowAtIndexForTable = function(index, table) {
      var record;
      record = this.notesAndAttachments[index];
      if (record instanceof PromotionAttachment) {
        return this._createAttachmentTableCell(record);
      } else {
        return this._createNoteTableCell(record);
      }
    };

    Notes.prototype._onNoteCellTap = function(cell) {
      return new PromotionNotePopup(cell.note).show();
    };

    Notes.prototype._onAttachmentCellTap = function(cell) {
      var attachment, filePath;
      attachment = cell.attachment;
      if (attachment.loaded) {
        filePath = AttachmentFileManager.getFilePath(attachment.body, attachment.title);
        return AttachmentsManager.open(filePath, attachment.contentType);
      } else {
        if (!Utils.deviceIsOnline()) {
          return $.fn.dpToast(Locale.value("AttachmentsPopup.Offline"));
        }
        if (!AttachmentLoadManager.getLoaderForAttachment(attachment)) {
          cell.addProgress();
          return AttachmentLoadManager.queueInvoke(attachment, {
            onStateChange: cell.onLoadStateChange,
            onSuccess: cell.onLoadSuccess,
            onFail: cell.onLoadFail
          });
        }
      }
    };

    Notes.prototype._createAttachmentTableCell = function(attachment) {
      return new AttachmentsTradeTableCell(attachment).on('attachmentCellTap', this._onAttachmentCellTap);
    };

    Notes.prototype._createNoteTableCell = function(note) {
      return new NotesTableCell(note).on('noteCellTap', this._onNoteCellTap);
    };

    return Notes;

  })(Spine.Controller);

  module.exports = Notes;

}).call(this);
}, "controllers/trade-module/promotion-details/notes-attachments/notes-table-cell": function(exports, require, module) {(function() {
  var NotesTableCell, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  NotesTableCell = (function(superClass) {
    extend(NotesTableCell, superClass);

    NotesTableCell.prototype.tag = 'tr';

    NotesTableCell.prototype.elements = {
      ".note-type": "elType",
      ".progress-bar-holder": "elTitle",
      ".last-modify": "elLastModify",
      ".attached-by": "elAttachedBy",
      ".check-box": "elLoadedCheck"
    };

    function NotesTableCell(note) {
      this.note = note;
      this._onCellTap = bind(this._onCellTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      NotesTableCell.__super__.constructor.call(this, {});
    }

    NotesTableCell.prototype.template = function() {
      return require('views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell')();
    };

    NotesTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    NotesTableCell.prototype.render = function() {
      this.html(this.template());
      this.elType.text(this.note.sobjectType);
      this.elTitle.find('.title-label').text(this.note.title);
      this.elLastModify.html((Utils.dotFormatDate(this.note.lastModify)) + "<br />" + (Utils.formatTime(this.note.lastModify)));
      this.elAttachedBy.text(this.note.attachedByName);
      this.elLoadedCheck.addClass('checked');
      this.bindEvents();
      return this;
    };

    NotesTableCell.prototype._onCellTap = function(event) {
      event.stopPropagation;
      return this.trigger('noteCellTap', this);
    };

    return NotesTableCell;

  })(Spine.Controller);

  module.exports = NotesTableCell;

}).call(this);
}, "controllers/trade-module/promotion-details/promotion-details": function(exports, require, module) {(function() {
  var NotesAttachments, PhotosGridView, PromotionDetails, PromotionTasks, SegmentControl, SegmentItem, Skus, Spine, Tactics,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  SegmentControl = require('controls/segment-control/segment-control');

  SegmentItem = require('controls/segment-control/segment-item');

  Tactics = require('controllers/trade-module/promotion-details/tactics/tactics');

  PromotionTasks = require('controllers/trade-module/promotion-details/promotion-tasks/promotion-tasks');

  Skus = require('controllers/trade-module/promotion-details/skus/skus');

  NotesAttachments = require('controllers/trade-module/promotion-details/notes-attachments/notes-attachments');

  PhotosGridView = require('controllers/trade-module/photos/photos-grid-view');

  PromotionDetails = (function(superClass) {
    extend(PromotionDetails, superClass);

    PromotionDetails.prototype.className = 'promotion-details';

    PromotionDetails.prototype.events = {
      'tap .full-screen-btn': '_onFullScreenTap'
    };

    PromotionDetails.prototype.elements = {
      '.top-panel': 'elTopPanel',
      '.segmentation': 'elSegmentation',
      '.content': 'elContent'
    };

    function PromotionDetails(promotionAccount, promoAdjustmentEntity) {
      this._onFullScreenTap = bind(this._onFullScreenTap, this);
      this.refresh = bind(this.refresh, this);
      this._onDismissModalController = bind(this._onDismissModalController, this);
      this._onPresentModalController = bind(this._onPresentModalController, this);
      this._dataChanged = bind(this._dataChanged, this);
      this._bindEvents = bind(this._bindEvents, this);
      PromotionDetails.__super__.constructor.call(this, {});
      this.tactics = new Tactics(promotionAccount, promoAdjustmentEntity);
      this.promoTasks = new PromotionTasks(promotionAccount, promoAdjustmentEntity);
      this.skus = new Skus(promotionAccount, promoAdjustmentEntity);
      this.notesAttachments = new NotesAttachments(promotionAccount, promoAdjustmentEntity);
      this.photos = new PhotosGridView(promoAdjustmentEntity);
      this._bindEvents();
    }

    PromotionDetails.prototype.active = function() {
      PromotionDetails.__super__.active.apply(this, arguments);
      return this.render();
    };

    PromotionDetails.prototype.render = function() {
      this.html(this.template());
      this._initSegmentation();
      return this;
    };

    PromotionDetails.prototype._bindEvents = function() {
      return [this.tactics, this.promoTasks, this.skus, this.notesAttachments, this.photos].forEach((function(_this) {
        return function(page) {
          page.on('presentModalController', _this._onPresentModalController);
          page.on('dismissModalController', _this._onDismissModalController);
          return page.on('dataChanged', _this._dataChanged);
        };
      })(this));
    };

    PromotionDetails.prototype._dataChanged = function() {
      return this.trigger('dataChanged');
    };

    PromotionDetails.prototype._onPresentModalController = function(mediaController) {
      return this.trigger('presentModalController', mediaController);
    };

    PromotionDetails.prototype._onDismissModalController = function() {
      return this.trigger('dismissModalController');
    };

    PromotionDetails.prototype.refresh = function() {
      var timeout;
      this.el.addClass("hide");
      return timeout = setTimeout((function(_this) {
        return function() {
          _this.el.removeClass("hide");
          return clearTimeout(timeout);
        };
      })(this), 0);
    };

    PromotionDetails.prototype._initSegmentation = function() {
      var segmentControl;
      this._initSegmentItems();
      segmentControl = new SegmentControl([
        new SegmentItem({
          name: 'tactics',
          title: Locale.value('tradeModule.PromoDetails.Tactics'),
          controller: this.tactics
        }), new SegmentItem({
          name: 'promotionTasks',
          title: Locale.value('tradeModule.PromoDetails.PromotionTasks'),
          controller: this.promoTasks
        }), new SegmentItem({
          name: 'skus',
          title: Locale.value('tradeModule.PromoDetails.SKUs'),
          controller: this.skus
        }), new SegmentItem({
          name: 'notes',
          title: Locale.value('tradeModule.PromoDetails.Notes'),
          controller: this.notesAttachments
        }), new SegmentItem({
          name: 'photos',
          title: Locale.value('tradeModule.PromoDetails.Photos'),
          controller: this.photos
        })
      ]);
      return this.elSegmentation.append(segmentControl.el);
    };

    PromotionDetails.prototype._onFullScreenTap = function() {
      return this.trigger('fullScreenTap', this);
    };

    PromotionDetails.prototype._initSegmentItems = function() {
      this.elContent.append(this.tactics.el);
      this.elContent.append(this.promoTasks.el);
      this.elContent.append(this.skus.el);
      this.elContent.append(this.notesAttachments.el);
      return this.elContent.append(this.photos.el);
    };

    PromotionDetails.prototype.template = function() {
      return require('views/trade-module/promotion-details/promotion-details');
    };

    return PromotionDetails;

  })(Spine.Controller);

  module.exports = PromotionDetails;

}).call(this);
}, "controllers/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell": function(exports, require, module) {(function() {
  var CommonInput, FloatCommonInput, PromotionTaskAccount, PromotionTasksTableCell, TableController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  PromotionTaskAccount = require('models/promotion-task-account');

  CommonInput = require('controls/common-input/common-input');

  FloatCommonInput = require('controls/common-input/float-common-input');

  PromotionTasksTableCell = (function(superClass) {
    extend(PromotionTasksTableCell, superClass);

    PromotionTasksTableCell.prototype.tag = 'tr';

    PromotionTasksTableCell.prototype.elements = {
      '.name': 'elName',
      '.value': 'elValue'
    };

    PromotionTasksTableCell.prototype.MAX_TEXT_LENGTH = 255;

    PromotionTasksTableCell.prototype.MAX_NUMBER_LENGTH = 18;

    function PromotionTasksTableCell(promotionTaskAccount, taskAdjustment) {
      this.promotionTaskAccount = promotionTaskAccount;
      this.taskAdjustment = taskAdjustment;
      this._select = bind(this._select, this);
      this._onValueChange = bind(this._onValueChange, this);
      this._processRecurrency = bind(this._processRecurrency, this);
      PromotionTasksTableCell.__super__.constructor.call(this, {});
    }

    PromotionTasksTableCell.prototype.template = function() {
      return require('views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell')();
    };

    PromotionTasksTableCell.prototype.render = function() {
      this.html(this.template());
      this.elName.text(this.promotionTaskAccount.taskName);
      this.elValue.html(this._getControl());
      this._processRecurrency();
      return this;
    };

    PromotionTasksTableCell.prototype._processRecurrency = function() {
      if (this.promotionTaskAccount.isRecurrent && (this.promotionTaskAccount.plannedRecurrency <= this.promotionTaskAccount.actualCallReports)) {
        this.el.addClass('disabled');
        return this.elValue.find('>*').attr('readonly', 'readonly');
      }
    };

    PromotionTasksTableCell.prototype._getControl = function() {
      switch (this.promotionTaskAccount.taskType) {
        case PromotionTaskAccount.TASK_TYPE_NUMERIC:
          return this._input('tel', this.taskAdjustment.numberRealValue);
        case PromotionTaskAccount.TASK_TYPE_TEXT:
          return this._input('text', this.taskAdjustment.stringRealValue);
        case PromotionTaskAccount.TASK_TYPE_PICKLIST:
          return this._select(this.taskAdjustment.stringRealValue);
      }
    };

    PromotionTasksTableCell.prototype._input = function(type, value) {
      var controlType, input, maxInputLength;
      input = $('<input/>');
      input.attr({
        type: type,
        "class": 'promotion-input',
        value: value,
        'data-placeholder': '. . .'
      });
      maxInputLength = type === 'text' ? this.MAX_TEXT_LENGTH : this.MAX_NUMBER_LENGTH;
      controlType = type === 'tel' ? FloatCommonInput : CommonInput;
      new controlType($('.trade-scroll-content')[0], input, maxInputLength);
      input.on('input', this._onValueChange);
      return input;
    };

    PromotionTasksTableCell.prototype._onValueChange = function(event) {
      return this.trigger('valueChanged', this.taskAdjustment, this.promotionTaskAccount, event.target.value);
    };

    PromotionTasksTableCell.prototype._select = function(value) {
      var button;
      button = $('<div class="btn-select"/>');
      button.text(value || Locale.value('common:defaultSelectValue'));
      button.on('tap', (function(_this) {
        return function() {
          return _this.trigger('selected', button, _this.promotionTaskAccount, _this.taskAdjustment);
        };
      })(this));
      return button;
    };

    return PromotionTasksTableCell;

  })(Spine.Controller);

  module.exports = PromotionTasksTableCell;

}).call(this);
}, "controllers/trade-module/promotion-details/promotion-tasks/promotion-tasks-table": function(exports, require, module) {(function() {
  var PromotionTasksTable, TableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  PromotionTasksTable = (function(superClass) {
    extend(PromotionTasksTable, superClass);

    function PromotionTasksTable() {
      return PromotionTasksTable.__super__.constructor.apply(this, arguments);
    }

    PromotionTasksTable.prototype.elements = {
      '.scroll-content tbody': 'elTbody'
    };

    PromotionTasksTable.prototype.template = function() {
      return require('views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table')();
    };

    return PromotionTasksTable;

  })(TableController);

  module.exports = PromotionTasksTable;

}).call(this);
}, "controllers/trade-module/promotion-details/promotion-tasks/promotion-tasks": function(exports, require, module) {(function() {
  var ListPopup, MultiselectPopup, PanelScreen, PromoAdjustmentTradeManager, PromotionTaskAccountsCollection, PromotionTasks, PromotionTasksTable, PromotionTasksTableCell, TaskAdjustment, TaskAdjustmentsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PanelScreen = require('controllers/base/panel/panel-screen');

  PromotionTasksTable = require('controllers/trade-module/promotion-details/promotion-tasks/promotion-tasks-table');

  PromotionTasksTableCell = require('controllers/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell');

  ListPopup = require('controls/popups/list-popup');

  MultiselectPopup = require('controls/popups/multiselect-popup');

  PromotionTaskAccountsCollection = require('models/bll/promotion-task-accounts-collection');

  TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');

  TaskAdjustment = require('models/task-adjustment');

  PromoAdjustmentTradeManager = require('db/trade-module-managers/promo-adjustment-trade-manager');

  PromotionTasks = (function(superClass) {
    extend(PromotionTasks, superClass);

    PromotionTasks.prototype.className = 'promotion-tasks stack-page';

    function PromotionTasks(promotionAccount, promoAdjustmentEntity) {
      this.promotionAccount = promotionAccount;
      this.promoAdjustmentEntity = promoAdjustmentEntity;
      this._onValueChange = bind(this._onValueChange, this);
      this._onTaskSelectTap = bind(this._onTaskSelectTap, this);
      this._renderTable = bind(this._renderTable, this);
      this._createNewAdjustments = bind(this._createNewAdjustments, this);
      this._fetchExistingAdjustments = bind(this._fetchExistingAdjustments, this);
      this._initAdjustments = bind(this._initAdjustments, this);
      PromotionTasks.__super__.constructor.call(this, {});
      this.taskAdjustmentsCollection = new TaskAdjustmentsCollection;
      this.promotionTaskAccounts = [];
    }

    PromotionTasks.prototype.active = function() {
      PromotionTasks.__super__.active.apply(this, arguments);
      return this.render();
    };

    PromotionTasks.prototype.render = function() {
      new PromotionTaskAccountsCollection().getAllTasksForPromotionAccountWithId(this.promotionAccount.id).then((function(_this) {
        return function(promotionTaskAccounts) {
          _this.promotionTaskAccounts = promotionTaskAccounts;
          if (_.isEmpty(_this.promotionTaskAccounts)) {
            return _this._renderEmptyTemplate();
          } else {
            return _this._initAdjustments().then(_this._renderTable);
          }
        };
      })(this));
      return this;
    };

    PromotionTasks.prototype._renderEmptyTemplate = function() {
      this.html(Locale.value('tradeModule.PromotionTasks.NoPromotionTasks'));
      return this.el.addClass('empty-tab');
    };

    PromotionTasks.prototype._initAdjustments = function() {
      if (this.promoAdjustmentEntity.hasTasks()) {
        return $.when();
      }
      if (this.promoAdjustmentEntity.isReadOnly) {
        return this._fetchExistingAdjustments();
      } else {
        return this._createNewAdjustments();
      }
    };

    PromotionTasks.prototype._fetchExistingAdjustments = function() {
      var promoTaskAccountIds;
      promoTaskAccountIds = this.promotionTaskAccounts.map(function(promoTaskAccount) {
        return promoTaskAccount.id;
      });
      return this.taskAdjustmentsCollection.getAllTaskAdjustmentsByCallReportAndTaskAccounts(this.promoAdjustmentEntity.callReport, promoTaskAccountIds).then((function(_this) {
        return function(taskAdjustments) {
          return taskAdjustments.forEach(_this.promoAdjustmentEntity.addTask);
        };
      })(this));
    };

    PromotionTasks.prototype._createNewAdjustments = function() {
      this.promotionTaskAccounts.forEach((function(_this) {
        return function(promotionTaskAccount) {
          var taskAdjustment;
          taskAdjustment = {};
          taskAdjustment.isModifiedInCall = true;
          taskAdjustment.isModifiedInTrade = false;
          taskAdjustment.promotionTaskSfId = promotionTaskAccount.promotionTaskSfId;
          taskAdjustment[TaskAdjustment.sfdc.promotionTaskAccountSfId] = promotionTaskAccount.id;
          taskAdjustment.attributes = {
            type: TaskAdjustment.table
          };
          return _this.promoAdjustmentEntity.addTask(_this.taskAdjustmentsCollection.parseEntity(taskAdjustment));
        };
      })(this));
      return new PromoAdjustmentTradeManager(this.promoAdjustmentEntity).initializeTasks();
    };

    PromotionTasks.prototype._renderTable = function() {
      var promotionTasksTable;
      promotionTasksTable = new PromotionTasksTable;
      promotionTasksTable.datasource = this;
      return this.html(promotionTasksTable.render().el);
    };

    PromotionTasks.prototype.numberOfRowsForTable = function(table) {
      return this.promotionTaskAccounts.length;
    };

    PromotionTasks.prototype.cellForRowAtIndexForTable = function(index, table) {
      var currentPromoTaskAccount, currentTaskAdjustment, promotionTasksTableCell;
      currentPromoTaskAccount = this.promotionTaskAccounts[index];
      currentTaskAdjustment = this.promoAdjustmentEntity.getTaskAdjustmentByTaskAccountEntity(currentPromoTaskAccount);
      promotionTasksTableCell = new PromotionTasksTableCell(currentPromoTaskAccount, currentTaskAdjustment);
      promotionTasksTableCell.on('selected', this._onTaskSelectTap);
      promotionTasksTableCell.on('valueChanged', this._onValueChange);
      return promotionTasksTableCell;
    };

    PromotionTasks.prototype._onTaskSelectTap = function(sender, promotionTaskAccount, taskAdjustment) {
      var datasource, defaultValue, initialIndex, initialValue, popup, taskAdjustmentValue;
      initialIndex = 0;
      initialValue = {
        id: initialIndex,
        value: null,
        description: Locale.value('common:defaultSelectValue')
      };
      datasource = promotionTaskAccount.taskPicklistValues.split('\n').map(function(value, index) {
        return {
          id: index + 1,
          value: value,
          description: value
        };
      });
      taskAdjustmentValue = _.find(datasource, (function(_this) {
        return function(item) {
          return taskAdjustment.stringRealValue === item.value || taskAdjustment.numberRealValue === item.value;
        };
      })(this));
      defaultValue = taskAdjustmentValue || initialValue;
      popup = new ListPopup(datasource, defaultValue, promotionTaskAccount.taskName);
      popup.el.addClass('promotion-pick-list');
      popup.bind('onPopupItemSelected', (function(_this) {
        return function(item) {
          sender.text(item.model.description);
          _this._onValueChange(taskAdjustment, promotionTaskAccount, item.model.value);
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', popup);
    };

    PromotionTasks.prototype._onValueChange = function(taskAdjustment, promotionTaskAccount, value) {
      this.trigger('dataChanged');
      taskAdjustment.isModifiedInTrade = true;
      return this.promoAdjustmentEntity.setTaskValue(taskAdjustment.id, promotionTaskAccount, value);
    };

    return PromotionTasks;

  })(Spine.Controller);

  module.exports = PromotionTasks;

}).call(this);
}, "controllers/trade-module/promotion-details/skus/skus-table-cell-value": function(exports, require, module) {(function() {
  var CommonInput, FloatCommonInput, PromotionTaskAccount, SkusTableCellValue, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  CommonInput = require('controls/common-input/common-input');

  FloatCommonInput = require('controls/common-input/float-common-input');

  PromotionTaskAccount = require('models/promotion-task-account');

  SkusTableCellValue = (function(superClass) {
    extend(SkusTableCellValue, superClass);

    SkusTableCellValue.prototype.tag = 'div';

    SkusTableCellValue.prototype.className = 'skus col';

    SkusTableCellValue.prototype.elements = {
      '.main-data span': 'elAdjustmentValue'
    };

    SkusTableCellValue.prototype.MAX_TEXT_LENGTH = 255;

    SkusTableCellValue.prototype.MAX_NUMBER_LENGTH = 18;

    function SkusTableCellValue(task, taskAdjustment) {
      this.task = task;
      this.taskAdjustment = taskAdjustment;
      this._onValueChange = bind(this._onValueChange, this);
      SkusTableCellValue.__super__.constructor.call(this, {});
      this.render();
    }

    SkusTableCellValue.prototype.template = function() {
      return require('views/trade-module/promotion-details/skus/skus-table-cell-value')();
    };

    SkusTableCellValue.prototype.render = function() {
      this.html(this.template());
      this.elAdjustmentValue.html(this._getControl());
      return this;
    };

    SkusTableCellValue.prototype._getControl = function() {
      switch (this.task.taskType) {
        case PromotionTaskAccount.TASK_TYPE_NUMERIC:
          return this._input('tel');
        case PromotionTaskAccount.TASK_TYPE_TEXT:
          return this._input('text');
        case PromotionTaskAccount.TASK_TYPE_PICKLIST:
          return this._select();
      }
    };

    SkusTableCellValue.prototype._getTaskAdjustmentValue = function() {
      switch (this.task.taskType) {
        case PromotionTaskAccount.TASK_TYPE_NUMERIC:
          return this.taskAdjustment.numberRealValue;
        case PromotionTaskAccount.TASK_TYPE_TEXT:
        case PromotionTaskAccount.TASK_TYPE_PICKLIST:
          return this.taskAdjustment.stringRealValue;
        default:
          return this.taskAdjustment.realValue;
      }
    };

    SkusTableCellValue.prototype._input = function(type) {
      var controlType, input, maxInputLength;
      input = $('<input/>');
      input.attr({
        type: type,
        "class": 'promotion-input',
        value: this._getTaskAdjustmentValue(),
        'data-placeholder': '. . .'
      });
      maxInputLength = type === 'text' ? this.MAX_TEXT_LENGTH : this.MAX_NUMBER_LENGTH;
      controlType = type === 'tel' ? FloatCommonInput : CommonInput;
      new controlType($('.trade-scroll-content')[0], input, maxInputLength);
      input.on('input', this._onValueChange);
      return input;
    };

    SkusTableCellValue.prototype._onValueChange = function(event) {
      return this.trigger('valueChanged', this.taskAdjustment, this.task, event.target.value);
    };

    SkusTableCellValue.prototype._select = function() {
      var button;
      button = $('<div class="btn-select"/>');
      button.text(this._getTaskAdjustmentValue() || Locale.value('common:defaultSelectValue'));
      button.on('tap', (function(_this) {
        return function() {
          return _this.trigger('selected', button, _this.task, _this.taskAdjustment);
        };
      })(this));
      return button;
    };

    return SkusTableCellValue;

  })(Spine.Controller);

  module.exports = SkusTableCellValue;

}).call(this);
}, "controllers/trade-module/promotion-details/skus/skus-table-cell": function(exports, require, module) {(function() {
  var SkusTableCell, SkusTableCellValue,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SkusTableCellValue = require('controllers/trade-module/promotion-details/skus/skus-table-cell-value');

  SkusTableCell = (function(superClass) {
    extend(SkusTableCell, superClass);

    SkusTableCell.prototype.tag = 'div';

    SkusTableCell.prototype.className = 'skus-table-cell row';

    function SkusTableCell(sku, tasks, taskAdjustments) {
      this.sku = sku;
      this.tasks = tasks;
      this.taskAdjustments = taskAdjustments;
      SkusTableCell.__super__.constructor.call(this, {});
    }

    SkusTableCell.prototype.render = function() {
      var docFragment;
      docFragment = $(document.createDocumentFragment());
      docFragment.append(this._initProductName());
      docFragment.append(this._initValues());
      this.html(docFragment);
      return this;
    };

    SkusTableCell.prototype._productNameTemplate = function() {
      return require('views/trade-module/promotion-details/skus/skus-table-cell')();
    };

    SkusTableCell.prototype._initProductName = function() {
      var docFragment, template;
      docFragment = $(document.createDocumentFragment());
      template = $(this._productNameTemplate());
      template.find('p').text(this.sku.productItemName);
      return docFragment.append(template);
    };

    SkusTableCell.prototype._initValues = function() {
      var docFragment;
      docFragment = $(document.createDocumentFragment());
      this.tasks.forEach((function(_this) {
        return function(task, index) {
          var skusTableCellValue;
          skusTableCellValue = new SkusTableCellValue(task, _this.taskAdjustments[index]);
          skusTableCellValue.on('selected', function(sender, promotionTask, taskAdjustment) {
            return _this.trigger('selected', sender, promotionTask, taskAdjustment);
          });
          skusTableCellValue.on('valueChanged', function(taskAdjustment, value, promotionTask) {
            return _this.trigger('valueChanged', taskAdjustment, value, promotionTask);
          });
          return docFragment.append(skusTableCellValue.el);
        };
      })(this));
      return docFragment;
    };

    return SkusTableCell;

  })(Spine.Controller);

  module.exports = SkusTableCell;

}).call(this);
}, "controllers/trade-module/promotion-details/skus/skus": function(exports, require, module) {(function() {
  var Iterator, ListPopup, PageControl, PromoAdjustmentTradeManager, PromotionSkusCollection, PromotionTaskAccount, PromotionTaskAccountsCollection, Skus, SkusTableCell, Spine, TableController, TableHeaderItem, TableHeadersList, TaskAdjustment, TaskAdjustmentsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TableController = require('controls/table/card-table');

  TableHeadersList = require('controls/table/table-header/table-headers-list');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  PromotionSkusCollection = require('models/bll/promotion-skus-collection');

  PromotionTaskAccountsCollection = require('models/bll/promotion-task-accounts-collection');

  TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');

  PageControl = require('controls/page-control/page-control');

  Iterator = require('common/iterator');

  ListPopup = require('controls/popups/list-popup');

  SkusTableCell = require('controllers/trade-module/promotion-details/skus/skus-table-cell');

  TaskAdjustment = require('models/task-adjustment');

  PromotionTaskAccount = require('models/promotion-task-account');

  PromoAdjustmentTradeManager = require('db/trade-module-managers/promo-adjustment-trade-manager');

  Skus = (function(superClass) {
    extend(Skus, superClass);

    Skus.prototype.className = 'skus stack-page';

    Skus.prototype.elements = {
      '.skus-table': 'elTable',
      '.navigation-panel': 'elNavigationPanel'
    };

    Skus.prototype.events = {
      'swipeleft': '_onPrevPageTap',
      'swiperight': '_onNextPageTap'
    };

    Skus.prototype.NUM_TASKS_PER_PAGE = 5;

    function Skus(promotionAccount, promoAdjustmentEntity) {
      this.promotionAccount = promotionAccount;
      this.promoAdjustmentEntity = promoAdjustmentEntity;
      this._onValueChange = bind(this._onValueChange, this);
      this._onTaskSelectTap = bind(this._onTaskSelectTap, this);
      this.cellForRowAtIndexForTable = bind(this.cellForRowAtIndexForTable, this);
      this.numberOfRowsForTable = bind(this.numberOfRowsForTable, this);
      this._renderTable = bind(this._renderTable, this);
      this._createNewAdjustments = bind(this._createNewAdjustments, this);
      this._fetchExistingAdjustments = bind(this._fetchExistingAdjustments, this);
      this._renderPage = bind(this._renderPage, this);
      this._getAllSkusForCurrentPromotion = bind(this._getAllSkusForCurrentPromotion, this);
      Skus.__super__.constructor.call(this, {});
      this.pageControl = null;
      this.tasksIterator = null;
      this.skus = [];
      this.taskAdjustmentsCollection = new TaskAdjustmentsCollection;
    }

    Skus.prototype._onPrevPageTap = function() {
      var ref;
      if (!((ref = this.tasksIterator) != null ? ref.hasPrev() : void 0)) {
        return;
      }
      this.tasksIterator.prev();
      return this._renderPage();
    };

    Skus.prototype._onNextPageTap = function() {
      var ref;
      if (!((ref = this.tasksIterator) != null ? ref.hasNext() : void 0)) {
        return;
      }
      this.tasksIterator.next();
      return this._renderPage();
    };

    Skus.prototype.active = function() {
      Skus.__super__.active.apply(this, arguments);
      return this.render();
    };

    Skus.prototype.render = function() {
      this.html(this.template());
      new PromotionTaskAccountsCollection().getAllTasksRelatedToSKUsForPromotionAccountWithId(this.promotionAccount.id).then((function(_this) {
        return function(tasks) {
          if (_.isEmpty(tasks)) {
            return _this._renderEmptyTemplate();
          } else {
            return _this._getAllSkusForCurrentPromotion().then(function(skus1) {
              var tasksPerPage;
              _this.skus = skus1;
              tasksPerPage = _this._splitTasks(tasks);
              _this._initPageControl(tasksPerPage);
              _this._initIterator(tasksPerPage);
              return _this._initAdjustmentsForSkusAndTasks(_this.skus, tasks).then(_this._renderPage);
            });
          }
        };
      })(this));
      Locale.localize(this.el);
      return this;
    };

    Skus.prototype.template = function() {
      return require('views/trade-module/promotion-details/skus/skus')();
    };

    Skus.prototype._renderEmptyTemplate = function() {
      this.html(Locale.value('tradeModule.Skus.NoSkus'));
      return this.el.addClass('empty-tab');
    };

    Skus.prototype._getAllSkusForCurrentPromotion = function() {
      return new PromotionSkusCollection().getAllSkusForPromotionWithId(this.promotionAccount.promotionSfId);
    };

    Skus.prototype._splitTasks = function(tasks) {
      return _.chain(tasks).groupBy((function(_this) {
        return function(_, index) {
          return Math.floor(index / _this.NUM_TASKS_PER_PAGE);
        };
      })(this)).toArray().value();
    };

    Skus.prototype._initPageControl = function(tasksPerPage) {
      this.pageControl = new PageControl(tasksPerPage.length);
      this.pageControl.on('pageControlItemTap', (function(_this) {
        return function(pageControlItem) {
          return _this._moveToPageAtIndex(pageControlItem.index);
        };
      })(this));
      return this.elNavigationPanel.prepend(this.pageControl.el);
    };

    Skus.prototype._moveToPageAtIndex = function(index) {
      if (this.tasksIterator.currentIndex() === index) {
        return;
      }
      this.tasksIterator.setCurrentIndex(index);
      return this._renderPage();
    };

    Skus.prototype._renderPage = function() {
      this.pageControl.refreshByActivePageIndex(this.tasksIterator.currentIndex());
      this.elTable.html('');
      this._renderTableHeader();
      return this._renderTable();
    };

    Skus.prototype._initIterator = function(tasksPerPage) {
      return this.tasksIterator = new Iterator(tasksPerPage);
    };

    Skus.prototype._initAdjustmentsForSkusAndTasks = function(skus, tasks) {
      if (this.promoAdjustmentEntity.hasTaskSkus()) {
        return $.when();
      }
      if (this.promoAdjustmentEntity.isReadOnly) {
        return this._fetchExistingAdjustments(tasks);
      } else {
        return this._createNewAdjustments(skus, tasks);
      }
    };

    Skus.prototype._fetchExistingAdjustments = function(tasks) {
      var taskIds;
      taskIds = tasks.map(function(task) {
        return task.id;
      });
      return this.taskAdjustmentsCollection.getAllTaskAdjustmentsByCallReportAndTaskAccounts(this.promoAdjustmentEntity.callReport, taskIds).then((function(_this) {
        return function(taskAdjustments) {
          return taskAdjustments.forEach(_this.promoAdjustmentEntity.addTaskSku);
        };
      })(this));
    };

    Skus.prototype._createNewAdjustments = function(skus, tasks) {
      skus.forEach((function(_this) {
        return function(sku) {
          return tasks.forEach(function(task) {
            var taskAdjustment;
            taskAdjustment = {};
            taskAdjustment.isModifiedInCall = true;
            taskAdjustment.isModifiedInTrade = false;
            taskAdjustment.promotionTaskSfId = task.promotionTaskSfId;
            taskAdjustment[TaskAdjustment.sfdc.productItemSfId] = sku.productItemSfId;
            taskAdjustment[TaskAdjustment.sfdc.promotionTaskAccountSfId] = task.id;
            taskAdjustment.attributes = {
              type: TaskAdjustment.table
            };
            return _this.promoAdjustmentEntity.addTaskSku(_this.taskAdjustmentsCollection.parseEntity(taskAdjustment));
          });
        };
      })(this));
      return new PromoAdjustmentTradeManager(this.promoAdjustmentEntity).initializeTaskSkus();
    };

    Skus.prototype._renderTableHeader = function() {
      var currentTaksHeaderItems, tasksTableHeader;
      currentTaksHeaderItems = this.tasksIterator.currentItem().map(function(task) {
        return new TableHeaderItem(task.taskName);
      });
      tasksTableHeader = new TableHeadersList([new TableHeaderItem(Locale.value('common:names.Product'))].concat(currentTaksHeaderItems));
      return this.elTable.append(tasksTableHeader.el);
    };

    Skus.prototype._renderTable = function() {
      var skusTable;
      skusTable = new TableController;
      skusTable.datasource = this;
      skusTable.render();
      skusTable.el.addClass('scroll-container');
      return this.elTable.append(skusTable.el);
    };

    Skus.prototype.numberOfRowsForTable = function(table) {
      return this.skus.length;
    };

    Skus.prototype.cellForRowAtIndexForTable = function(index, table) {
      var adjustmnets, skuCell;
      adjustmnets = this.promoAdjustmentEntity.getTaskSkuAdjustmentsByTasksAndSku(this.tasksIterator.currentItem(), this.skus[index]);
      skuCell = new SkusTableCell(this.skus[index], this.tasksIterator.currentItem(), adjustmnets);
      skuCell.on('selected', this._onTaskSelectTap);
      skuCell.on('valueChanged', this._onValueChange);
      return skuCell;
    };

    Skus.prototype._onTaskSelectTap = function(sender, promotionTaskAccount, taskAdjustment) {
      var datasource, defaultValue, initialIndex, initialValue, popup, taskAdjustmentValue;
      initialIndex = 0;
      initialValue = {
        id: initialIndex,
        value: null,
        description: Locale.value('common:defaultSelectValue')
      };
      datasource = promotionTaskAccount.taskPicklistValues.split('\n').map(function(value, index) {
        return {
          id: index + 1,
          value: value,
          description: value
        };
      });
      taskAdjustmentValue = _.find(datasource, function(item) {
        return taskAdjustment.stringRealValue === item.value || taskAdjustment.numberRealValue === item.value;
      });
      defaultValue = taskAdjustmentValue || initialValue;
      popup = new ListPopup(datasource, defaultValue, promotionTaskAccount.taskName);
      popup.el.addClass('promotion-pick-list');
      popup.bind('onPopupItemSelected', (function(_this) {
        return function(item) {
          sender.text(item.model.description);
          _this._onValueChange(taskAdjustment, promotionTaskAccount, item.model.value);
          return _this.trigger('dismissModalController');
        };
      })(this));
      return this.trigger('presentModalController', popup);
    };

    Skus.prototype._onValueChange = function(taskAdjustment, promotionTaskAccount, value) {
      this.trigger('dataChanged');
      taskAdjustment.isModifiedInTrade = true;
      return this.promoAdjustmentEntity.setTaskSkuValue(taskAdjustment.id, promotionTaskAccount, value);
    };

    return Skus;

  })(Spine.Controller);

  module.exports = Skus;

}).call(this);
}, "controllers/trade-module/promotion-details/tactics/tactics-table-cell-item": function(exports, require, module) {(function() {
  var CommonInput, FloatCommonInput, PromotionMechanic, SimplePopup, Spine, TacticsTableCellItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  CommonInput = require('controls/common-input/common-input');

  FloatCommonInput = require('controls/common-input/float-common-input');

  PromotionMechanic = require('models/promotion-mechanic');

  SimplePopup = require('controls/popups/simple-popup');

  TacticsTableCellItem = (function(superClass) {
    extend(TacticsTableCellItem, superClass);

    TacticsTableCellItem.prototype.tag = 'div';

    TacticsTableCellItem.prototype.className = 'tactic col';

    TacticsTableCellItem.prototype.elements = {
      '.border-value': 'elBorderValueHolder',
      '.main-data': 'elAdjustmentHolder',
      '.border-value p': 'elBorderValue',
      '.main-data p': 'elAdjustmentValue'
    };

    TacticsTableCellItem.prototype.MAX_TEXT_LENGTH = 254;

    TacticsTableCellItem.prototype.MAX_NUMBER_LENGTH = 18;

    function TacticsTableCellItem(evaluationWithAdjustment) {
      this.evaluationWithAdjustment = evaluationWithAdjustment;
      this.didSelectValue = bind(this.didSelectValue, this);
      this._select = bind(this._select, this);
      this._onValueChange = bind(this._onValueChange, this);
      this._onBorderValueTap = bind(this._onBorderValueTap, this);
      this._processRecurrency = bind(this._processRecurrency, this);
      this._displayColorStatusNotMatch = bind(this._displayColorStatusNotMatch, this);
      this._displayColorStatusMatch = bind(this._displayColorStatusMatch, this);
      this._displayColorStatusDefault = bind(this._displayColorStatusDefault, this);
      this._displayColorStatusWithValue = bind(this._displayColorStatusWithValue, this);
      TacticsTableCellItem.__super__.constructor.call(this, {});
      this.selectButton = null;
    }

    TacticsTableCellItem.prototype.render = function() {
      this.html(this.template());
      this.elBorderValue.text(this.evaluationWithAdjustment.evaluation.realValue());
      this.elAdjustmentValue.html(this._getControl());
      this._processRecurrency();
      this._bindEvents();
      this._displayColorStatusWithValue(this._adjustmentValue());
      return this;
    };

    TacticsTableCellItem.prototype.template = function() {
      return require('views/trade-module/promotion-details/tactics/tactics-table-cell-tactic')();
    };

    TacticsTableCellItem.prototype._displayColorStatusWithValue = function(adjustmentValue) {
      var evaluationValue;
      evaluationValue = this.evaluationWithAdjustment.evaluation.realValue();
      if (!adjustmentValue || adjustmentValue === Locale.value('common:defaultSelectValue')) {
        return this._displayColorStatusDefault();
      } else if ((evaluationValue != null ? evaluationValue.toString().trim().toLowerCase() : void 0) === adjustmentValue.toString().trim().toLowerCase()) {
        return this._displayColorStatusMatch();
      } else {
        return this._displayColorStatusNotMatch();
      }
    };

    TacticsTableCellItem.prototype._displayColorStatusDefault = function() {
      var transparent;
      transparent = 'rgba(255, 255, 255, 0.0)';
      this.elBorderValueHolder.css('background-color', transparent);
      return this.elAdjustmentHolder.css('background-color', transparent);
    };

    TacticsTableCellItem.prototype._displayColorStatusMatch = function() {
      var lightGreen;
      lightGreen = 'rgba(204, 255, 204, 0.3)';
      this.elBorderValueHolder.css('background-color', lightGreen);
      return this.elAdjustmentHolder.css('background-color', lightGreen);
    };

    TacticsTableCellItem.prototype._displayColorStatusNotMatch = function() {
      var lightRed;
      lightRed = 'rgba(255, 204, 204, 0.3)';
      this.elBorderValueHolder.css('background-color', lightRed);
      return this.elAdjustmentHolder.css('background-color', lightRed);
    };

    TacticsTableCellItem.prototype._processRecurrency = function() {
      var evaluation;
      evaluation = this.evaluationWithAdjustment.evaluation;
      if (evaluation.isDisabled()) {
        this.el.addClass('disabled');
        return this.elAdjustmentValue.find('>*').attr('readonly', 'readonly');
      }
    };

    TacticsTableCellItem.prototype._bindEvents = function() {
      return this.elBorderValueHolder.on('tap', this._onBorderValueTap);
    };

    TacticsTableCellItem.prototype._onBorderValueTap = function(event) {
      var text;
      text = $(event.currentTarget).find('p').text();
      if (text && text.length > 5) {
        return new SimplePopup(text).show();
      }
    };

    TacticsTableCellItem.prototype._getControl = function() {
      var adjustmentValue;
      adjustmentValue = this._adjustmentValue();
      switch (this.evaluationWithAdjustment.evaluation.mechanicType) {
        case PromotionMechanic.MECHANIC_TYPE_NUMERIC:
          return this._input('tel', adjustmentValue);
        case PromotionMechanic.MECHANIC_TYPE_TEXT:
          return this._input('text', adjustmentValue);
        case PromotionMechanic.MECHANIC_TYPE_PICKLIST:
          return this._select(adjustmentValue);
        default:
          return adjustmentValue;
      }
    };

    TacticsTableCellItem.prototype._adjustmentValue = function() {
      var adjustment;
      adjustment = this.evaluationWithAdjustment.adjustment;
      switch (this.evaluationWithAdjustment.evaluation.mechanicType) {
        case PromotionMechanic.MECHANIC_TYPE_NUMERIC:
          return adjustment.numberRealValue;
        case PromotionMechanic.MECHANIC_TYPE_TEXT:
          return adjustment.stringRealValue;
        case PromotionMechanic.MECHANIC_TYPE_PICKLIST:
          return adjustment.stringRealValue;
        default:
          return adjustment.realValue;
      }
    };

    TacticsTableCellItem.prototype._input = function(type, value) {
      var input, inputControl, maxInputLength;
      input = $('<input/>');
      input.attr({
        type: type,
        "class": 'promotion-input',
        value: value,
        'data-placeholder': '. . .'
      });
      maxInputLength = type === 'text' ? this.MAX_TEXT_LENGTH : this.MAX_NUMBER_LENGTH;
      inputControl = type === 'tel' ? FloatCommonInput : CommonInput;
      new inputControl($('.trade-scroll-content')[0], input, maxInputLength);
      input.on('input', this._onValueChange);
      return input;
    };

    TacticsTableCellItem.prototype._onValueChange = function(event) {
      var parsedValue, value;
      value = event.target.value;
      parsedValue = parseFloat(event.target.value);
      if (this.evaluationWithAdjustment.evaluation.mechanicType === PromotionMechanic.MECHANIC_TYPE_NUMERIC && parsedValue) {
        value = parsedValue.toString();
      }
      this._displayColorStatusWithValue(value);
      return this.trigger('valueChanged', this.evaluationWithAdjustment, event.target.value);
    };

    TacticsTableCellItem.prototype._select = function(value) {
      this.selectButton = $('<div class="btn-select"/>');
      this.selectButton.text(value || Locale.value('common:defaultSelectValue'));
      this.selectButton.on('tap', (function(_this) {
        return function() {
          return _this.trigger('selected', _this, _this.evaluationWithAdjustment);
        };
      })(this));
      return this.selectButton;
    };

    TacticsTableCellItem.prototype.didSelectValue = function(value) {
      this.selectButton.text(value);
      return this._displayColorStatusWithValue(value);
    };

    return TacticsTableCellItem;

  })(Spine.Controller);

  module.exports = TacticsTableCellItem;

}).call(this);
}, "controllers/trade-module/promotion-details/tactics/tactics-table-cell": function(exports, require, module) {(function() {
  var CommonInput, Spine, TacticsTableCell, TacticsTableCellItem,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TacticsTableCellItem = require('controllers/trade-module/promotion-details/tactics/tactics-table-cell-item');

  CommonInput = require('controls/common-input/common-input');

  TacticsTableCell = (function(superClass) {
    extend(TacticsTableCell, superClass);

    TacticsTableCell.prototype.tag = 'div';

    TacticsTableCell.prototype.className = 'tactics-table-cell row';

    TacticsTableCell.prototype.elements = {
      '.tactic': 'elTactic'
    };

    function TacticsTableCell(promoSku, evaluationsWithAdjustments1) {
      this.promoSku = promoSku;
      this.evaluationsWithAdjustments = evaluationsWithAdjustments1;
      TacticsTableCell.__super__.constructor.call(this, {});
    }

    TacticsTableCell.prototype.render = function() {
      var docFragment;
      docFragment = $(document.createDocumentFragment());
      docFragment.append(this._initProductName(this.promoSku.productItemName));
      docFragment.append(this._initTactics(this.evaluationsWithAdjustments));
      this.html(docFragment);
      return this;
    };

    TacticsTableCell.prototype._productNameTemplate = function() {
      return require('views/trade-module/promotion-details/tactics/tactics-table-cell-product')();
    };

    TacticsTableCell.prototype._initProductName = function(name) {
      var docFragment, template;
      docFragment = $(document.createDocumentFragment());
      template = $(this._productNameTemplate());
      template.find('span').text(name);
      return docFragment.append(template);
    };

    TacticsTableCell.prototype._initTactics = function(evaluationsWithAdjustments) {
      var docFragment;
      docFragment = $(document.createDocumentFragment());
      evaluationsWithAdjustments.forEach((function(_this) {
        return function(evalWithAdj, index) {
          var cell;
          cell = new TacticsTableCellItem(evalWithAdj);
          cell.on('selected', function(sender, evalWithAdj) {
            return _this.trigger('selected', sender, evalWithAdj);
          });
          cell.on('valueChanged', function(evalWithAdj, value) {
            return _this.trigger('valueChanged', evalWithAdj, value);
          });
          return docFragment.append(cell.render().el);
        };
      })(this));
      return docFragment;
    };

    return TacticsTableCell;

  })(Spine.Controller);

  module.exports = TacticsTableCell;

}).call(this);
}, "controllers/trade-module/promotion-details/tactics/tactics": function(exports, require, module) {(function() {
  var Iterator, ListPopup, MechanicAdjustment, MechanicAdjustmentsCollection, MechanicEvaluationAccountsCollection, NullMechanicAdjustment, PageControl, PromoAdjustmentTradeManager, PromotionMechanicsCollection, PromotionSkusCollection, Spine, TableController, TableHeaderItem, TableHeadersList, Tactics, TacticsTableCell, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TableController = require('controls/table/card-table');

  TableHeadersList = require('controls/table/table-header/table-headers-list');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  PageControl = require('controls/page-control/page-control');

  Iterator = require('common/iterator');

  TacticsTableCell = require('controllers/trade-module/promotion-details/tactics/tactics-table-cell');

  PromotionMechanicsCollection = require('models/bll/promotion-mechanics-collection');

  PromotionSkusCollection = require('models/bll/promotion-skus-collection');

  MechanicEvaluationAccountsCollection = require('models/bll/mechanic-evaluation-accounts-collection');

  MechanicAdjustmentsCollection = require('models/bll/mechanic-adjustments-collection');

  MechanicAdjustment = require('models/mechanic-adjustment');

  ListPopup = require('controls/popups/list-popup');

  PromoAdjustmentTradeManager = require('db/trade-module-managers/promo-adjustment-trade-manager');

  Utils = require('common/utils');

  NullMechanicAdjustment = (function() {
    function NullMechanicAdjustment() {
      this.realValue = '-';
    }

    return NullMechanicAdjustment;

  })();

  Tactics = (function(superClass) {
    extend(Tactics, superClass);

    Tactics.prototype.className = 'tactics stack-page';

    Tactics.prototype.elements = {
      '.tactics-table': 'elTable',
      '.navigation-panel': 'elNavigationPanel',
      '.navigation-panel .check-box': 'elBorderValueCheck'
    };

    Tactics.prototype.events = {
      'swipeleft': '_onPrevPageTap',
      'swiperight': '_onNextPageTap',
      'change .check-box': '_handleBorderValue',
      'tap .navigation-panel p': '_changeBorderValue'
    };

    Tactics.prototype.NUM_MECHANICS_PER_PAGE = 5;

    function Tactics(promotionAccount, promoAdjustmentEntity) {
      this.promotionAccount = promotionAccount;
      this.promoAdjustmentEntity = promoAdjustmentEntity;
      this._onTacticsSelectTap = bind(this._onTacticsSelectTap, this);
      this._onValueChange = bind(this._onValueChange, this);
      this._createNewAdjustments = bind(this._createNewAdjustments, this);
      this._fetchExistingAdjustments = bind(this._fetchExistingAdjustments, this);
      this._renderPage = bind(this._renderPage, this);
      this._getAllSkusForCurrentPromotion = bind(this._getAllSkusForCurrentPromotion, this);
      this._changeBorderValue = bind(this._changeBorderValue, this);
      this._handleBorderValue = bind(this._handleBorderValue, this);
      Tactics.__super__.constructor.call(this, {});
      this.evaluationAccountsCollection = new MechanicEvaluationAccountsCollection;
      this.adjustmentsCollection = new MechanicAdjustmentsCollection;
      this.pageControl = null;
      this.mechanicsIterator = null;
      this.promoSkus = null;
    }

    Tactics.prototype._onPrevPageTap = function(event) {
      var ref;
      event.stopPropagation();
      if (!((ref = this.mechanicsIterator) != null ? ref.hasPrev() : void 0)) {
        return;
      }
      this.mechanicsIterator.prev();
      return this._renderPage();
    };

    Tactics.prototype._onNextPageTap = function(event) {
      var ref;
      event.stopPropagation();
      if (!((ref = this.mechanicsIterator) != null ? ref.hasNext() : void 0)) {
        return;
      }
      this.mechanicsIterator.next();
      return this._renderPage();
    };

    Tactics.prototype._handleBorderValue = function(event) {
      return this.el.toggleClass('hide-border-value');
    };

    Tactics.prototype._changeBorderValue = function() {
      var checkbox;
      checkbox = this.elBorderValueCheck[0];
      checkbox.checked = !checkbox.checked;
      return this._handleBorderValue();
    };

    Tactics.prototype.active = function() {
      Tactics.__super__.active.apply(this, arguments);
      return this.render();
    };

    Tactics.prototype.render = function() {
      this.html(this.template());
      new PromotionMechanicsCollection().getAllMechanicsForPromotionWithId(this.promotionAccount.promotionSfId).then((function(_this) {
        return function(mechanics) {
          if (_.isEmpty(mechanics)) {
            return _this._renderEmptyTemplate();
          } else {
            return _this._getAllSkusForCurrentPromotion().then(function(promoSkus) {
              var mechanicsPerPage;
              _this.promoSkus = promoSkus;
              mechanicsPerPage = _this._splitMechanics(mechanics);
              _this._initPageControl(mechanicsPerPage);
              _this._initIterator(mechanicsPerPage);
              return _this._initEvaluationsAndAdjustmentsForMechanics(mechanics).then(_this._renderPage);
            });
          }
        };
      })(this));
      Locale.localize(this.el);
      return this;
    };

    Tactics.prototype.template = function() {
      return require('views/trade-module/promotion-details/tactics/tactics')();
    };

    Tactics.prototype._renderEmptyTemplate = function() {
      this.html(Locale.value('tradeModule.Tactics.NoMechanics'));
      return this.el.addClass('empty-tab');
    };

    Tactics.prototype._getAllSkusForCurrentPromotion = function() {
      return new PromotionSkusCollection().getAllSkusForPromotionWithId(this.promotionAccount.promotionSfId);
    };

    Tactics.prototype._splitMechanics = function(mechanics) {
      return _.chain(mechanics).groupBy((function(_this) {
        return function(_, index) {
          return Math.floor(index / _this.NUM_MECHANICS_PER_PAGE);
        };
      })(this)).toArray().value();
    };

    Tactics.prototype._initPageControl = function(mechanicsPerPage) {
      this.pageControl = new PageControl(mechanicsPerPage.length);
      this.pageControl.on('pageControlItemTap', (function(_this) {
        return function(pageControlItem) {
          return _this._moveToPageAtIndex(pageControlItem.index);
        };
      })(this));
      return this.elNavigationPanel.prepend(this.pageControl.el);
    };

    Tactics.prototype._moveToPageAtIndex = function(index) {
      if (this.mechanicsIterator.currentIndex() === index) {
        return;
      }
      this.mechanicsIterator.setCurrentIndex(index);
      return this._renderPage();
    };

    Tactics.prototype._renderPage = function() {
      this.pageControl.refreshByActivePageIndex(this.mechanicsIterator.currentIndex());
      this.elTable.html('');
      this._renderTableHeader();
      return this._renderTable();
    };

    Tactics.prototype._renderTableHeader = function() {
      var currentMechanicsHeaderItems, mechanicsTableHeader;
      currentMechanicsHeaderItems = this.mechanicsIterator.currentItem().map(function(mechanic) {
        return new TableHeaderItem(mechanic.mechanicName);
      });
      mechanicsTableHeader = new TableHeadersList([new TableHeaderItem(Locale.value('common:names.Product'))].concat(currentMechanicsHeaderItems));
      return this.elTable.append(mechanicsTableHeader.el);
    };

    Tactics.prototype._renderTable = function() {
      var tacticsTable;
      tacticsTable = new TableController;
      tacticsTable.datasource = this;
      tacticsTable.render();
      tacticsTable.el.addClass('scroll-container');
      return this.elTable.append(tacticsTable.el);
    };

    Tactics.prototype._initIterator = function(mechanicsPerPage) {
      return this.mechanicsIterator = new Iterator(mechanicsPerPage);
    };

    Tactics.prototype._initEvaluationsAndAdjustmentsForMechanics = function(mechanics) {
      if (this.promoAdjustmentEntity.hasMechanics()) {
        return $.when();
      }
      if (this.promoAdjustmentEntity.isReadOnly) {
        return this._fetchExistingAdjustments(mechanics);
      } else {
        return this._createNewAdjustments(mechanics);
      }
    };

    Tactics.prototype._fetchExistingAdjustments = function(mechanics) {
      return this.evaluationAccountsCollection.getAllEvaluationsForPromoMechanics(this.promotionAccount, mechanics).then((function(_this) {
        return function(evaluations) {
          var mechanicEvaluationIds;
          mechanicEvaluationIds = evaluations.map(function(evaluation) {
            return evaluation.id;
          });
          return _this.adjustmentsCollection.getAdjustmentsByCallReportAndMechanicEvaluationAccounts(_this.promoAdjustmentEntity.callReport, mechanicEvaluationIds).then(function(mechanicAdjustments) {
            return evaluations.forEach(function(evaluation) {
              var adjustment;
              adjustment = _.find(mechanicAdjustments, function(adjustment) {
                return adjustment.mechanicEvaluationAccountSfId === evaluation.id;
              }) || new NullMechanicAdjustment;
              return _this.promoAdjustmentEntity.addMechanicEvaluationWithAdjustment({
                evaluation: evaluation,
                adjustment: adjustment
              });
            });
          });
        };
      })(this));
    };

    Tactics.prototype._createNewAdjustments = function(mechanics) {
      return this.evaluationAccountsCollection.getAllEvaluationsForPromoMechanics(this.promotionAccount, mechanics).then((function(_this) {
        return function(evaluations) {
          evaluations.forEach(function(evaluation) {
            var adjustment;
            adjustment = {};
            adjustment.isModifiedInCall = true;
            adjustment.isModifiedInTrade = false;
            adjustment[MechanicAdjustment.sfdc.mechanicEvaluationAccountSfId] = evaluation.id;
            adjustment[MechanicAdjustment.sfdc.mechanicType] = evaluation.mechanicType;
            adjustment.attributes = {
              type: MechanicAdjustment.table
            };
            return _this.promoAdjustmentEntity.addMechanicEvaluationWithAdjustment({
              evaluation: evaluation,
              adjustment: _this.adjustmentsCollection.parseEntity(adjustment)
            });
          });
          return new PromoAdjustmentTradeManager(_this.promoAdjustmentEntity).initializeMechanics();
        };
      })(this));
    };

    Tactics.prototype.numberOfRowsForTable = function(table) {
      return this.promoSkus.length;
    };

    Tactics.prototype.cellForRowAtIndexForTable = function(index, table) {
      var evaluationsWithAdjustments, promoSku, tacticsTableCell;
      promoSku = this.promoSkus[index];
      evaluationsWithAdjustments = this.promoAdjustmentEntity.getEvaluationsAndMechanicAdjustmentsByMechanicsAndSku(this.mechanicsIterator.currentItem(), promoSku);
      tacticsTableCell = new TacticsTableCell(promoSku, evaluationsWithAdjustments);
      tacticsTableCell.on('selected', this._onTacticsSelectTap);
      tacticsTableCell.on('valueChanged', this._onValueChange);
      return tacticsTableCell;
    };

    Tactics.prototype._onValueChange = function(evalWithAdj, value) {
      this.trigger('dataChanged');
      evalWithAdj.evaluation.isModifiedInTrade = true;
      return this.promoAdjustmentEntity.setMechanicValue(evalWithAdj, value);
    };

    Tactics.prototype._onTacticsSelectTap = function(sender, evaluationWithAdjustment) {
      var adjustment, datasource, defaultValue, evaluation, initialIndex, initialValue, mechanicAdjustmentValue, popup;
      evaluation = evaluationWithAdjustment.evaluation;
      adjustment = evaluationWithAdjustment.adjustment;
      initialIndex = 0;
      initialValue = {
        id: initialIndex,
        value: null,
        description: Locale.value('common:defaultSelectValue')
      };
      datasource = evaluation.promotionMechanicPicklistValues.split('\n').map(function(value, index) {
        return {
          id: index + 1,
          value: value,
          description: value
        };
      });
      mechanicAdjustmentValue = _.find(datasource, function(item) {
        return item.value === adjustment.stringRealValue || item.value === adjustment.numberRealValue;
      });
      defaultValue = mechanicAdjustmentValue || initialValue;
      popup = new ListPopup(datasource, defaultValue, evaluation.mechanicName);
      popup.el.addClass('promotion-pick-list');
      popup.bind('onPopupItemSelected', (function(_this) {
        return function(item) {
          sender.didSelectValue(item.model.description);
          return _this._onValueChange(evaluationWithAdjustment, item.model.value, _this.trigger('dismissModalController'));
        };
      })(this));
      return this.trigger('presentModalController', popup);
    };

    return Tactics;

  })(Spine.Controller);

  module.exports = Tactics;

}).call(this);
}, "controllers/trade-module/promotion-general-info": function(exports, require, module) {(function() {
  var PromotionGeneralInfo, Spine, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  PromotionGeneralInfo = (function(superClass) {
    extend(PromotionGeneralInfo, superClass);

    PromotionGeneralInfo.prototype.className = 'general-info';

    PromotionGeneralInfo.prototype.elements = {
      '.trade-module-promotion-start-date': 'elPromotionStartDate',
      '.trade-module-promotion-end-date': 'elPromotionEndDate',
      '.trade-module-contract': 'elContractNumber',
      '.trade-module-number-of-pharmacies': 'elNumberOfPharmacies',
      '.trade-module-mobile-record-type': 'elRecordType',
      '.trade-module-status': 'elStatus',
      '.trade-module-objectives': 'elObjectives',
      '.trade-module-description': 'elDescription'
    };

    function PromotionGeneralInfo(promotionAccount) {
      this.promotionAccount = promotionAccount;
      PromotionGeneralInfo.__super__.constructor.call(this, {});
    }

    PromotionGeneralInfo.prototype.active = function() {
      PromotionGeneralInfo.__super__.active.apply(this, arguments);
      return this.render();
    };

    PromotionGeneralInfo.prototype.render = function() {
      this.html(this.template());
      this.elPromotionStartDate.text(Utils.slashFormatDate(new Date(this.promotionAccount.startDate)));
      this.elPromotionEndDate.text(Utils.slashFormatDate(new Date(this.promotionAccount.endDate)));
      this.elContractNumber.text(this.promotionAccount.contractNumber);
      this.elNumberOfPharmacies.text(this.promotionAccount.numberOfPharmacies);
      this.elRecordType.text(this.promotionAccount.recordType);
      this.elObjectives.text(this.promotionAccount.objectives);
      this.elDescription.text(this.promotionAccount.description);
      this.promotionAccount.getPromotionStatus().then((function(_this) {
        return function(status) {
          return _this.elStatus.text(status);
        };
      })(this));
      Locale.localize(this.el);
      return this;
    };

    PromotionGeneralInfo.prototype.template = function() {
      return require('views/trade-module/promotion-general-info');
    };

    return PromotionGeneralInfo;

  })(Spine.Controller);

  module.exports = PromotionGeneralInfo;

}).call(this);
}, "controllers/trade-module/promotion-screen": function(exports, require, module) {(function() {
  var PromotionDetails, PromotionGeneralInfo, PromotionScreen, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PromotionGeneralInfo = require('controllers/trade-module/promotion-general-info');

  PromotionDetails = require('controllers/trade-module/promotion-details/promotion-details');

  PromotionScreen = (function(superClass) {
    extend(PromotionScreen, superClass);

    PromotionScreen.prototype.tag = 'div';

    PromotionScreen.prototype.className = 'promotion-screen';

    function PromotionScreen(promotionAccount, promoAdjustmentEntity) {
      this.promotionAccount = promotionAccount;
      this.promoAdjustmentEntity = promoAdjustmentEntity;
      this._onDismissModalController = bind(this._onDismissModalController, this);
      this._onPresentModalController = bind(this._onPresentModalController, this);
      this._toggleFullScreen = bind(this._toggleFullScreen, this);
      this._dataChanged = bind(this._dataChanged, this);
      PromotionScreen.__super__.constructor.call(this, {});
    }

    PromotionScreen.prototype.active = function() {
      PromotionScreen.__super__.active.apply(this, arguments);
      return this.render();
    };

    PromotionScreen.prototype.render = function() {
      this._initPromotionGeneralInfo();
      this._initPromotionDetails();
      return this;
    };

    PromotionScreen.prototype._initPromotionGeneralInfo = function() {
      return this.append(new PromotionGeneralInfo(this.promotionAccount).render().el);
    };

    PromotionScreen.prototype._initPromotionDetails = function() {
      this.promoDetails = new PromotionDetails(this.promotionAccount, this.promoAdjustmentEntity);
      this.promoDetails.on('fullScreenTap', this._toggleFullScreen);
      this.promoDetails.on('presentModalController', this._onPresentModalController);
      this.promoDetails.on('dismissModalController', this._onDismissModalController);
      this.promoDetails.on('dataChanged', this._dataChanged);
      return this.append(this.promoDetails.render().el);
    };

    PromotionScreen.prototype._dataChanged = function() {
      return this.trigger('dataChanged');
    };

    PromotionScreen.prototype._toggleFullScreen = function(promoDetails) {
      this.el.toggleClass('full-screen-mode');
      if (!this.el.hasClass('full-screen-mode')) {
        return promoDetails.refresh();
      }
    };

    PromotionScreen.prototype._onPresentModalController = function(modalController) {
      return this.trigger('presentModalController', modalController);
    };

    PromotionScreen.prototype._onDismissModalController = function() {
      return this.trigger('dismissModalController');
    };

    return PromotionScreen;

  })(Spine.Controller);

  module.exports = PromotionScreen;

}).call(this);
}, "controllers/trade-module/trade-module": function(exports, require, module) {(function() {
  var AlertPopup, ConfirmationPopup, FullscreenPanel, Header, HeaderBaseControl, Iterator, NavigationPromotions, PromoAdjustmentEntity, PromotionAccountsCollection, PromotionScreen, SimplePopup, Stage, TradeModule, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FullscreenPanel = require('controllers/base/panel/fullscreen-panel');

  Header = require('controls/header/header');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  NavigationPromotions = require('controllers/trade-module/navigation-promotions');

  PromotionScreen = require('controllers/trade-module/promotion-screen');

  ConfirmationPopup = require('controls/popups/confirmation-popup');

  Iterator = require('common/iterator');

  PromotionAccountsCollection = require('models/bll/promotion-accounts-collection');

  PromoAdjustmentEntity = require('db/trade-module-managers/promo-adjustment-entity');

  Stage = require('controllers/base/stage/stage');

  SimplePopup = require('controls/popups/simple-popup');

  AlertPopup = require('controls/popups/alert-popup');

  Utils = require('common/utils');

  TradeModule = (function(superClass) {
    extend(TradeModule, superClass);

    TradeModule.prototype.className = 'trade-module';

    TradeModule.prototype.elements = {
      '.trade-module-promotion-header': 'elHeader',
      '.promotion-name': 'elPromotion',
      '.trade-scroll-content': 'elTradeScrollContent'
    };

    TradeModule.prototype.events = {
      'tap': '_blurInputs',
      'tap .main-data': '_onShowSimplePopup'
    };

    function TradeModule(organizationId, callReport, promoAdjustmentCollection, isReadOnly) {
      this.organizationId = organizationId;
      this.callReport = callReport;
      this.promoAdjustmentCollection = promoAdjustmentCollection;
      this.isReadOnly = isReadOnly;
      this._dataChanged = bind(this._dataChanged, this);
      this._onPresentModalController = bind(this._onPresentModalController, this);
      this._goToNextPromotion = bind(this._goToNextPromotion, this);
      this._goToPrevPromotion = bind(this._goToPrevPromotion, this);
      this._addPromotionsToCallAdjustmentsCollection = bind(this._addPromotionsToCallAdjustmentsCollection, this);
      this._resetData = bind(this._resetData, this);
      this.onBack = bind(this.onBack, this);
      this._resetChangeFlags = bind(this._resetChangeFlags, this);
      this._save = bind(this._save, this);
      this._noClickHandle = bind(this._noClickHandle, this);
      this._yesClickHandle = bind(this._yesClickHandle, this);
      this._onSaveTap = bind(this._onSaveTap, this);
      this._setContentSize = bind(this._setContentSize, this);
      this.render = bind(this.render, this);
      this._onShowSimplePopup = bind(this._onShowSimplePopup, this);
      this._blurInputs = bind(this._blurInputs, this);
      TradeModule.__super__.constructor.apply(this, arguments);
      this.promotionsIterator = null;
      this.promoAdjustmentCollection.setCallReport(this.callReport);
    }

    TradeModule.prototype.active = function() {
      TradeModule.__super__.active.apply(this, arguments);
      return this.render();
    };

    TradeModule.prototype.activate = function() {
      TradeModule.__super__.activate.apply(this, arguments);
      if (this.isReadOnly) {
        return this._activateReadOnlyMode();
      }
    };

    TradeModule.prototype._blurInputs = function() {
      var $input;
      $input = this.el.find('.scroll-container input');
      if ($input.is(':focus')) {
        return $input.blur();
      }
    };

    TradeModule.prototype._onShowSimplePopup = function(event) {
      var target, text;
      if (this.isReadOnly) {
        target = $(event.currentTarget);
        text = target.find('input').val() || target.find('.btn-select').text();
        if (text && text.length > 5) {
          return new SimplePopup(text).show();
        }
      }
    };

    TradeModule.prototype.render = function() {
      this._initHeader();
      return this._fetchPromotionsForOrganizationWithId(this.organizationId).then((function(_this) {
        return function(promotionAccounts) {
          _this.promotionAccounts = promotionAccounts;
          return _this._addPromotionsToCallAdjustmentsCollection();
        };
      })(this)).then((function(_this) {
        return function() {
          _this._initIterator();
          _this._renderPromotion();
          _this._resetChangeFlags();
          return _this._setContentSize();
        };
      })(this));
    };

    TradeModule.prototype._setContentSize = function() {
      if (!Utils.isIOS()) {
        return this.elTradeScrollContent.height(this.elTradeScrollContent.height());
      }
    };

    TradeModule.prototype._activateReadOnlyMode = function() {
      this.el.addClass('read-only-mode');
      return Stage.globalStage().el.removeClass('fullscreen-panel-mode');
    };

    TradeModule.prototype._initHeader = function() {
      var saveBtn, scenariosHeader;
      scenariosHeader = new Header(Locale.value('tradeModule.HeaderTitle'));
      scenariosHeader.render();
      if (!this.isReadOnly) {
        saveBtn = new HeaderBaseControl(Locale.value('common:buttons.SaveBtn'), 'ctrl-btn');
        saveBtn.bind('tap', this._onSaveTap);
        scenariosHeader.addRightControlElement(saveBtn.el);
      }
      return this.setHeader(scenariosHeader);
    };

    TradeModule.prototype._onSaveTap = function() {
      if (!this.promoAdjustmentCollection.areAllPromoAdjustmentsFilled()) {
        return this._showWarning();
      } else {
        return this._save();
      }
    };

    TradeModule.prototype._showWarning = function() {
      var confirm;
      confirm = new ConfirmationPopup({
        caption: Locale.value('tradeModule.SaveWarningTitle'),
        message: Locale.value('tradeModule.AreYouShureSaveAndExit')
      });
      confirm.bind('yesClicked', this._yesClickHandle);
      confirm.bind('noClicked', this._noClickHandle);
      return this.presentModalController(confirm);
    };

    TradeModule.prototype._yesClickHandle = function() {
      this.dismissModalController();
      return this._save();
    };

    TradeModule.prototype._noClickHandle = function() {
      return this.dismissModalController();
    };

    TradeModule.prototype._save = function() {
      this.promoAdjustmentCollection.tradeSave();
      this._resetChangeFlags();
      return this.onBack();
    };

    TradeModule.prototype._resetChangeFlags = function() {
      return this.isChanged = false;
    };

    TradeModule.prototype.onBack = function() {
      var confirm;
      if (this.isReadOnly || !this.isChanged) {
        return TradeModule.__super__.onBack.apply(this, arguments);
      } else {
        confirm = new ConfirmationPopup({
          caption: Locale.value('card.ConfirmationPopup.SaveChanges.Caption')
        });
        confirm.bind('yesClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            return _this._onSaveTap();
          };
        })(this));
        confirm.bind('noClicked', (function(_this) {
          return function() {
            _this.dismissModalController();
            _this._resetData();
            _this._resetChangeFlags();
            return TradeModule.__super__.onBack.apply(_this, arguments);
          };
        })(this));
        return this.presentModalController(confirm);
      }
    };

    TradeModule.prototype._resetData = function() {
      return this.promoAdjustmentCollection.resetTradeData();
    };

    TradeModule.prototype._fetchPromotionsForOrganizationWithId = function(orgId) {
      return new PromotionAccountsCollection().getActualPromotionsForAccount(orgId);
    };

    TradeModule.prototype._addPromotionsToCallAdjustmentsCollection = function() {
      if (!this.promoAdjustmentCollection.hasPromo()) {
        return this.promotionAccounts.forEach((function(_this) {
          return function(promotionAccount) {
            var promoAdjustmentEntity;
            promoAdjustmentEntity = new PromoAdjustmentEntity;
            promoAdjustmentEntity.promoId = promotionAccount.promotionSfId;
            promoAdjustmentEntity.promotionAccount = promotionAccount;
            promoAdjustmentEntity.callReport = _this.callReport;
            promoAdjustmentEntity.isReadOnly = _this.isReadOnly;
            return _this.promoAdjustmentCollection.add(promoAdjustmentEntity);
          };
        })(this));
      } else {
        return $.when();
      }
    };

    TradeModule.prototype._initIterator = function() {
      return this.promotionsIterator = new Iterator(this.promotionAccounts);
    };

    TradeModule.prototype._renderPromotion = function() {
      var promotion;
      promotion = this.promotionsIterator.currentItem();
      if (!promotion) {
        return;
      }
      this.html(this.template());
      this.elPromotion.text(promotion.name);
      this._initNavPromotionsControl();
      this._initPromotionScreen();
      Locale.localize(this.el);
      return this._setContentSize();
    };

    TradeModule.prototype.template = function() {
      return require('views/trade-module/trade-module')();
    };

    TradeModule.prototype._initNavPromotionsControl = function() {
      var navigationPromotions;
      navigationPromotions = new NavigationPromotions(this.promotionsIterator.currentIndex(), this.promotionAccounts.length);
      navigationPromotions.on('prevBtnTap', this._goToPrevPromotion);
      navigationPromotions.on('nextBtnTap', this._goToNextPromotion);
      this.elHeader.append(navigationPromotions.el);
      return navigationPromotions.render();
    };

    TradeModule.prototype._goToPrevPromotion = function() {
      if (!this.promotionsIterator.hasPrev()) {
        return;
      }
      this.promotionsIterator.prev();
      return this._renderPromotion();
    };

    TradeModule.prototype._goToNextPromotion = function() {
      if (!this.promotionsIterator.hasNext()) {
        return;
      }
      this.promotionsIterator.next();
      return this._renderPromotion();
    };

    TradeModule.prototype._initPromotionScreen = function() {
      var promotionAccount, promotionModel;
      promotionAccount = this.promotionsIterator.currentItem();
      promotionModel = this.promoAdjustmentCollection.getPromoModel(promotionAccount.promotionSfId);
      this.promotionScreen = new PromotionScreen(promotionAccount, promotionModel);
      this.promotionScreen.on('presentModalController', this._onPresentModalController);
      this.promotionScreen.on('dismissModalController', this.dismissModalController);
      this.promotionScreen.on('dataChanged', this._dataChanged);
      return this.elTradeScrollContent.append(this.promotionScreen.render().el);
    };

    TradeModule.prototype._onPresentModalController = function(mediaController) {
      return this.presentModalController(mediaController);
    };

    TradeModule.prototype._dataChanged = function() {
      this.trigger('dataChanged');
      return this.isChanged = true;
    };

    return TradeModule;

  })(FullscreenPanel);

  module.exports = TradeModule;

}).call(this);
}, "controllers/users/users-table-cell": function(exports, require, module) {(function() {
  var Spine, UsersTableCell, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  UsersTableCell = (function(superClass) {
    extend(UsersTableCell, superClass);

    UsersTableCell.prototype.className = 'row';

    UsersTableCell.prototype.elements = {
      '.check-box': 'elCheckbox',
      '.user': 'elUser',
      '.email': 'elEmail'
    };

    UsersTableCell.prototype.isChecked = false;

    function UsersTableCell(user) {
      this.user = user;
      this._setSelectedCheckbox = bind(this._setSelectedCheckbox, this);
      this.bindEvents = bind(this.bindEvents, this);
      this._onCellTap = bind(this._onCellTap, this);
      UsersTableCell.__super__.constructor.call(this, {});
    }

    UsersTableCell.prototype.template = function() {
      return require('views/users/users-table-cell')();
    };

    UsersTableCell.prototype._onCellTap = function() {
      this.isChecked = !this.elCheckbox[0].checked;
      this._setSelectedCheckbox();
      return this.trigger('cellTap', this);
    };

    UsersTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    UsersTableCell.prototype.render = function() {
      this.html(this.template());
      this.elUser.text(this.user.fullName());
      this.elEmail.text(this.user.email);
      if (this.isChecked) {
        this._setSelectedCheckbox();
      }
      return this;
    };

    UsersTableCell.prototype._setSelectedCheckbox = function() {
      return this.elCheckbox[0].checked = this.isChecked;
    };

    return UsersTableCell;

  })(Spine.Controller);

  module.exports = UsersTableCell;

}).call(this);
}, "controllers/users/users-table": function(exports, require, module) {(function() {
  var LazyTableController, UsersTableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  LazyTableController = require('controllers/lazy-table-controller');

  UsersTableController = (function(superClass) {
    extend(UsersTableController, superClass);

    function UsersTableController() {
      return UsersTableController.__super__.constructor.apply(this, arguments);
    }

    UsersTableController.prototype._fetchAll = function() {
      return this.collection.fetchAllSortedBy([this.collection.model.sfdc.lastName], true);
    };

    UsersTableController.prototype._filterBy = function(searchString) {
      var field, fieldsValues, i, len, ref;
      this.searchString = searchString;
      fieldsValues = {};
      ref = this.collection.model.searchFields;
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        fieldsValues[field] = this.searchString;
      }
      return this.collection.fetchAllLikeAndSortBy(fieldsValues, [this.collection.model.sfdc.lastName], true);
    };

    return UsersTableController;

  })(LazyTableController);

  module.exports = UsersTableController;

}).call(this);
}, "controllers/users/users": function(exports, require, module) {(function() {
  var ActivityIndicator, FullscreenPanel, Header, HeaderBaseControl, Search, SortingTableHeaderItem, TableDatasource, TableHeaderItem, Users, UsersCollection, UsersTableCell, UsersTableController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  FullscreenPanel = require('controllers/base/panel/fullscreen-panel');

  UsersTableCell = require('controllers/users/users-table-cell');

  UsersCollection = require('models/bll/users-collection');

  TableDatasource = require('controls/table/table-data-source');

  ActivityIndicator = require('common/activity-indicator');

  UsersTableController = require('controllers/users/users-table');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = require('controls/table/table-header/sorting-table-header-item');

  Header = require('controls/header/header');

  Search = require('controls/search/search');

  Users = (function(superClass) {
    extend(Users, superClass);

    Users.prototype.className = 'table-view users full-screen';

    Users.prototype.elements = {
      'input': 'elInput'
    };

    Users.prototype.events = {
      'tap header': '_searchBlur',
      'tap .tables-holder': '_searchBlur'
    };

    function Users(chosenUser) {
      this.chosenUser = chosenUser;
      this._onCellTap = bind(this._onCellTap, this);
      this.cellForObjectOnTable = bind(this.cellForObjectOnTable, this);
      this.onBack = bind(this.onBack, this);
      this._resetSearchingFilter = bind(this._resetSearchingFilter, this);
      this._onSearchChanged = bind(this._onSearchChanged, this);
      this._searchBlur = bind(this._searchBlur, this);
      Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.deactivate = function() {
      Users.__super__.deactivate.apply(this, arguments);
      return this._searchBlur();
    };

    Users.prototype._searchBlur = function() {
      return this.elInput.blur();
    };

    Users.prototype.active = function() {
      Users.__super__.active.apply(this, arguments);
      Locale.localize(this.el);
      this._initHeader();
      return this._initContent();
    };

    Users.prototype._initHeader = function() {
      var search, usersHeader;
      search = new Search();
      search.bind('searchChanged', this._onSearchChanged);
      search.bind('searchClear', this._resetSearchingFilter);
      usersHeader = new Header(Locale.value('card.UsersHeaderTitle'));
      usersHeader.render();
      usersHeader.addRightControlElement(search.render().el);
      return this.setHeader(usersHeader);
    };

    Users.prototype._onSearchChanged = function(value) {
      return this.tableController.filterBy(value);
    };

    Users.prototype._resetSearchingFilter = function() {
      return this.tableController.resetAndActive();
    };

    Users.prototype.onBack = function() {
      this.trigger('onClose', this.chosenUser);
      return Users.__super__.onBack.apply(this, arguments);
    };

    Users.prototype._initContent = function() {
      this.tableController = new UsersTableController({
        datasource: this
      });
      return this.html(this.tableController.render().el);
    };

    Users.prototype.createCollection = function() {
      return new UsersCollection;
    };

    Users.prototype.createTableHeaderItemsForModel = function(model) {
      return [new TableHeaderItem, new SortingTableHeaderItem(Locale.value('common:names.Name'), model.sfdc.lastName, model.sfdc.firstName), new SortingTableHeaderItem(Locale.value('common:names.Email'), model.sfdc.email)];
    };

    Users.prototype.cellForObjectOnTable = function(user, table) {
      var usersTableCell;
      usersTableCell = new UsersTableCell(user);
      usersTableCell.on('cellTap', this._onCellTap);
      if ((this.chosenUser != null) && this.chosenUser.id === user.id) {
        usersTableCell.isChecked = true;
      }
      return usersTableCell;
    };

    Users.prototype._onCellTap = function(cell) {
      return this.chosenUser = cell.isChecked ? cell.user : null;
    };

    return Users;

  })(FullscreenPanel);

  module.exports = Users;

}).call(this);
}, "controls/bottom-menu/bottom-menu": function(exports, require, module) {(function() {
  var Alarm, AlertPopup, BottomMenu, Locale, LockManager, SforceDataContext, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Alarm = require('common/alarm/alarm');

  LockManager = require('common/lock-manager');

  SforceDataContext = require('models/bll/sforce-data-context');

  Locale = require('common/localization/locale');

  AlertPopup = require('controls/popups/alert-popup');

  Utils = require('common/utils');

  BottomMenu = (function(superClass) {
    extend(BottomMenu, superClass);

    BottomMenu.prototype.className = 'bottom-menu';

    BottomMenu.prototype.tagName = 'ul';

    BottomMenu.prototype.isVisible = false;

    BottomMenu.prototype.elements = {
      'li': 'buttons',
      'li[data-action="dynamicAgenda"]': 'elAgenda'
    };

    BottomMenu.prototype.template = function() {
      return require('views/controls/bottom-menu/bottom-menu')();
    };

    function BottomMenu() {
      this._openDynamicAgenda = bind(this._openDynamicAgenda, this);
      this._menuButtonAction = bind(this._menuButtonAction, this);
      BottomMenu.__super__.constructor.apply(this, arguments);
      this.isAgendaHidden = false;
    }

    BottomMenu.prototype.show = function() {
      if (!this.isVisible) {
        app.mainController.append(this);
        return this.render();
      }
    };

    BottomMenu.prototype.hide = function() {
      if (this.isVisible) {
        this.el.removeClass('open');
        setTimeout((function(_this) {
          return function() {
            _this.release();
            return _this.isVisible = false;
          };
        })(this), 400);
      }
      return this;
    };

    BottomMenu.prototype.hideAgenda = function() {
      return this.isAgendaHidden = true;
    };

    BottomMenu.prototype.showAgenda = function() {
      return this.isAgendaHidden = false;
    };

    BottomMenu.prototype.toggle = function() {
      if (this.isVisible) {
        this.hide();
      }
      if (!this.isVisible) {
        return this.show();
      }
    };

    BottomMenu.prototype.render = function() {
      this.html(this.template());
      if (this.isAgendaHidden) {
        this.elAgenda.css('display', 'none');
      }
      Locale.localize(this.el);
      this._bindEvents();
      setTimeout((function(_this) {
        return function() {
          _this.el.addClass('open');
          return _this.isVisible = true;
        };
      })(this), 100);
      return this;
    };

    BottomMenu.prototype._bindEvents = function() {
      this.el.bind('touchmove', function(event) {
        return event.preventDefault();
      });
      return this.buttons.on('tap', this._menuButtonAction);
    };

    BottomMenu.prototype._menuButtonAction = function(event) {
      var action;
      event.stopPropagation();
      this.hide();
      action = $(event.currentTarget).data('action');
      return this._handlePanelEvent(action);
    };

    BottomMenu.prototype._openDynamicAgenda = function() {
      return this.trigger('openDynamicAgenda', this);
    };

    BottomMenu.prototype._showOfflineAlert = function() {
      var alertPopup;
      alertPopup = new AlertPopup({
        caption: Locale.value('home.AlertPopup.Caption'),
        message: Locale.value('home.AlertPopup.Message')
      });
      alertPopup.bind('yesClicked', alertPopup.hide);
      return alertPopup.show();
    };

    BottomMenu.prototype._handlePanelEvent = function(actionName) {
      switch (actionName) {
        case 'alarm':
          return Alarm.setup();
        case 'helpdesk':
          return this.navigate('/helpdesk');
        case 'language':
          return this.trigger('changeLanguage', this);
        case 'lock':
          return LockManager.lock();
        case 'logout':
          if (!Utils.deviceIsOnline()) {
            return this._showOfflineAlert();
          }
          return SforceDataContext.logout();
        case 'dynamicAgenda':
          return this._openDynamicAgenda();
      }
    };

    return BottomMenu;

  })(Spine.Controller);

  module.exports = BottomMenu;

}).call(this);
}, "controls/button/button": function(exports, require, module) {(function() {
  var Button, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Button = (function(superClass) {
    extend(Button, superClass);

    function Button() {
      return Button.__super__.constructor.apply(this, arguments);
    }

    Button.prototype.className = "ctrl-btn";

    Button.prototype.setTitle = function(title) {
      return this.html(title);
    };

    return Button;

  })(Spine.Controller);

  module.exports = Button;

}).call(this);
}, "controls/comment-view/comment-input": function(exports, require, module) {(function() {
  var CommentInput, CommentView,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CommentView = require('controls/comment-view/comment-view');

  CommentInput = (function() {
    function CommentInput(context, button, description1, placeholder, maxLength) {
      this.context = context;
      this.button = button;
      this.description = description1;
      this.placeholder = placeholder;
      this.maxLength = maxLength != null ? maxLength : 1000;
      this._onComentTyped = bind(this._onComentTyped, this);
      this.setDescription = bind(this.setDescription, this);
      this.show = bind(this.show, this);
      this.button.bind('tap', this.show);
      this.setDescription(this.description);
    }

    CommentInput.prototype.show = function() {
      var commentView;
      commentView = new CommentView(this.description, this.maxLength, this.placeholder);
      commentView.bind('onComment', (function(_this) {
        return function(description1) {
          _this.description = description1;
          _this.setDescription(_this.description);
          _this._onComentTyped(_this.description);
          return _this._onComentHide();
        };
      })(this));
      this._onComentShow();
      return commentView.show();
    };

    CommentInput.prototype._refreshPlaceholder = function() {
      var ref;
      if (((ref = this.description) != null ? ref.length : void 0) > 0) {
        return this.button.removeClass('placeholder');
      } else {
        this.button.addClass('placeholder');
        return this.button.html(this.placeholder);
      }
    };

    CommentInput.prototype.setDescription = function(description1) {
      this.description = description1;
      this.button.html(this.description.replace(/\n/gim, '<br/>'));
      return this._refreshPlaceholder();
    };

    CommentInput.prototype._onComentTyped = function(description) {
      return this.context.trigger('onCommentTyped', description);
    };

    CommentInput.prototype._onComentShow = function() {
      return this.context.trigger('onCommentShow', this);
    };

    CommentInput.prototype._onComentHide = function() {
      return this.context.trigger('onCommentHide', this);
    };

    CommentInput.prototype.bind = function(eventName, event) {
      return this.context.bind(eventName, event);
    };

    return CommentInput;

  })();

  module.exports = CommentInput;

}).call(this);
}, "controls/comment-view/comment-view": function(exports, require, module) {(function() {
  var AndroidViewResizer, CommentView, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  AndroidViewResizer = require('common/android-view-resizer');

  CommentView = (function(superClass) {
    extend(CommentView, superClass);

    CommentView.prototype.className = "comment";

    CommentView.prototype.events = {
      "tap .done-btn": "_onSubmit",
      "keyup .input": "_onKeyUp",
      "input .input": "_refreshPlaceholder",
      "touchmove .input": "_preventDefault",
      "tap .btnCancel": "hide",
      "tap .btnDone": "_onSubmit",
      "touchmove .btnCancel": "_preventDefault",
      "touchmove .btnDone": "_preventDefault"
    };

    CommentView.prototype.elements = {
      ".input": "elInput",
      ".placeholder": "elPlaceholder",
      "textarea": "elTextArea"
    };

    function CommentView(defaultText, maxStringLength, placeholder) {
      this.defaultText = defaultText;
      this.maxStringLength = maxStringLength != null ? maxStringLength : null;
      this.placeholder = placeholder;
      this._preventDefault = bind(this._preventDefault, this);
      this._onKeyUp = bind(this._onKeyUp, this);
      this._onSubmit = bind(this._onSubmit, this);
      this._setMaxStringLength = bind(this._setMaxStringLength, this);
      this.hide = bind(this.hide, this);
      this._preventDefault = bind(this._preventDefault, this);
      CommentView.__super__.constructor.call(this, {});
    }

    CommentView.prototype.show = function() {
      this.render();
      new AndroidViewResizer(this.el[0], this.elInput[0]);
      this.elInput.focus();
      this.elInput.val(this.defaultText);
      this._refreshPlaceholder();
      this._setMaxStringLength();
      document.addEventListener('backbutton', this.hide, false);
      return this.el.bind('touchmove', this._preventDefault);
    };

    CommentView.prototype._preventDefault = function(event) {
      if (event.target === this.elInput) {
        return event.preventDefault();
      }
    };

    CommentView.prototype.hide = function() {
      this.elInput.blur();
      document.removeEventListener('backbutton', this.hide, false);
      return this.release();
    };

    CommentView.prototype._setMaxStringLength = function() {
      if (this.maxStringLength) {
        return this.elTextArea.attr('maxLength', this.maxStringLength);
      }
    };

    CommentView.prototype.render = function() {
      this.html(require('views/comment/comment')());
      Locale.localize(this.el);
      if (this.placeholder) {
        this.elPlaceholder.html(this.placeholder);
      }
      return app.mainController.append(this.el);
    };

    CommentView.prototype._onSubmit = function() {
      var comment;
      comment = this.elInput.val();
      this.trigger("onComment", comment);
      return this.hide();
    };

    CommentView.prototype._refreshPlaceholder = function() {
      if (!this.elInput.val()) {
        return this.elPlaceholder.show();
      } else {
        return this.elPlaceholder.hide();
      }
    };

    CommentView.prototype._onKeyUp = function(key) {
      return this._refreshPlaceholder();
    };

    CommentView.prototype._preventDefault = function(event) {
      return event.preventDefault();
    };

    return CommentView;

  })(Spine.Controller);

  module.exports = CommentView;

}).call(this);
}, "controls/common-input/common-input": function(exports, require, module) {(function() {
  var AndroidViewResizer, CommonInput, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Utils = require('common/utils');

  AndroidViewResizer = require('common/android-view-resizer');

  CommonInput = (function() {
    function CommonInput(wrapper, element, maxLength, blurEvent) {
      if (maxLength == null) {
        maxLength = 32000;
      }
      if (blurEvent == null) {
        blurEvent = 'tap';
      }
      this.onBlur = bind(this.onBlur, this);
      this.onFocus = bind(this.onFocus, this);
      this.element = jQuery(element);
      this.element.elastic();
      this.element.on('focus', this.onFocus);
      this.element.on('blur', this.onBlur);
      this.element.attr('maxlength', maxLength);
      this.placeholder = this.element.attr('data-placeholder');
      this.onBlur();
      if (!Utils.isIOS()) {
        this.androidViewResizer = new AndroidViewResizer(wrapper, element);
      }
      jQuery(wrapper).bind(blurEvent, (function(_this) {
        return function() {
          if (_this.element.is(":focus")) {
            return _this.element.blur();
          }
        };
      })(this));
      this.element[0].getValue = this._getValue;
      this.element[0].setValue = this.setValue;
    }

    CommonInput.prototype._getValue = function() {
      if (this.classList.contains('placeholder-mode')) {
        return '';
      } else {
        return this.value;
      }
    };

    CommonInput.prototype.setValue = function(value) {
      if (value != null ? value.length : void 0) {
        this.element.val(value);
        return this.element.removeClass('placeholder-mode');
      }
    };

    CommonInput.prototype.onFocus = function() {
      if (this.element.hasClass('placeholder-mode')) {
        this.element.val('');
        return this.element.removeClass('placeholder-mode');
      }
    };

    CommonInput.prototype.onBlur = function() {
      if (this.element.val().length === 0) {
        this.element.val(this.placeholder);
        return this.element.addClass('placeholder-mode');
      }
    };

    return CommonInput;

  })();

  module.exports = CommonInput;

}).call(this);
}, "controls/common-input/float-common-input": function(exports, require, module) {(function() {
  var CommonInput, FloatCommonInput,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonInput = require('controls/common-input/common-input');

  FloatCommonInput = (function(superClass) {
    extend(FloatCommonInput, superClass);

    function FloatCommonInput(wrapper, element, maxLength) {
      this._validate = bind(this._validate, this);
      FloatCommonInput.__super__.constructor.call(this, wrapper, element, maxLength);
      this._validate();
    }

    FloatCommonInput.prototype._validate = function(value) {
      this.element.on('input', (function(_this) {
        return function(event) {
          var newValue;
          newValue = event.target.value;
          if (newValue === '' || /^\d+(?:\.\d*)?$/ig.test(newValue)) {
            value = newValue;
          } else {
            if (!value) {
              value = '';
            }
          }
          return event.target.value = value;
        };
      })(this));
      return this.element.on('blur', function() {
        return this.value = this.value.replace(/(\d+)\.$/ig, '$1');
      });
    };

    return FloatCommonInput;

  })(CommonInput);

  module.exports = FloatCommonInput;

}).call(this);
}, "controls/datepicker/date-time-picker-extended": function(exports, require, module) {(function() {
  var DateTimePicker, DateTimePickerExtended, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  DateTimePicker = require('controls/datepicker/date-time-picker');

  DateTimePickerExtended = (function(superClass) {
    extend(DateTimePickerExtended, superClass);

    function DateTimePickerExtended(baseDate) {
      this.baseDate = baseDate;
      DateTimePickerExtended.__super__.constructor.apply(this, arguments);
    }

    DateTimePickerExtended.prototype.getStartDate = function() {
      var date;
      date = this.baseDate ? new Date(this.baseDate) : new Date();
      date.setDate(date.getDate() - this.daysBefore);
      return date;
    };

    DateTimePickerExtended.prototype.getEndDate = function() {
      var date;
      date = this.getStartDate();
      date.setDate(date.getDate() + this.daysAfter);
      return date;
    };

    return DateTimePickerExtended;

  })(DateTimePicker);

  module.exports = DateTimePickerExtended;

}).call(this);
}, "controls/datepicker/date-time-picker": function(exports, require, module) {(function() {
  var DatePicker, DateTimePicker, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require('common/utils');

  DatePicker = require('controls/datepicker/datepicker');

  DateTimePicker = (function(superClass) {
    extend(DateTimePicker, superClass);

    function DateTimePicker() {
      this.minutes = bind(this.minutes, this);
      this.hours = bind(this.hours, this);
      this.getKeyValues = bind(this.getKeyValues, this);
      this.setConfig = bind(this.setConfig, this);
      this.result = bind(this.result, this);
      return DateTimePicker.__super__.constructor.apply(this, arguments);
    }

    DateTimePicker.prototype.className = 'date-time-picker';

    DateTimePicker.prototype.MAX_HOURS_IN_DAY = 23;

    DateTimePicker.prototype.MAX_MINUTES_IN_HOUR = 59;

    DateTimePicker.prototype.result = function() {
      var dd, hh, min, results, yyyy;
      results = SpinningWheel.getSelectedValues();
      yyyy = this.getYearFromResult(results.values[0]);
      dd = this.getDateWithoutYearFromResult(results.values[0]);
      hh = results.values[2];
      min = results.values[4];
      return moment(dd + ", " + yyyy + " " + hh + ":" + min, 'dd MMM D, YYYY HH:mm').toDate();
    };

    DateTimePicker.prototype.setConfig = function() {
      SpinningWheel.addSlot(this.days(), this.right, this.defaultMonthIndex);
      SpinningWheel.addSlot({
        separator: '.'
      }, 'readonly shrink');
      SpinningWheel.addSlot(this.hours(), this.right, this.date.getHours());
      SpinningWheel.addSlot({
        separator: ':'
      }, 'readonly shrink');
      SpinningWheel.addSlot(this.minutes(), this.right, this.date.getMinutes());
      SpinningWheel.setCancelAction(this.cancel);
      return SpinningWheel.setDoneAction(this.done);
    };

    DateTimePicker.prototype.getKeyValues = function(start, end) {
      var i, index, keyValue, ref, ref1, val;
      keyValue = {};
      for (index = i = ref = start, ref1 = end; ref <= ref1 ? i <= ref1 : i >= ref1; index = ref <= ref1 ? ++i : --i) {
        val = index < 10 ? '0' + index : index.toString();
        keyValue[index] = val;
      }
      return keyValue;
    };

    DateTimePicker.prototype.hours = function() {
      return this.getKeyValues(0, this.MAX_HOURS_IN_DAY);
    };

    DateTimePicker.prototype.minutes = function() {
      return this.getKeyValues(0, this.MAX_MINUTES_IN_HOUR);
    };

    return DateTimePicker;

  })(DatePicker);

  module.exports = DateTimePicker;

}).call(this);
}, "controls/datepicker/datepicker-extended": function(exports, require, module) {(function() {
  var DatePicker, DatePickerExtended, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  DatePicker = require('controls/datepicker/datepicker');

  DatePickerExtended = (function(superClass) {
    extend(DatePickerExtended, superClass);

    function DatePickerExtended() {
      return DatePickerExtended.__super__.constructor.apply(this, arguments);
    }

    DatePickerExtended.prototype.getStartDate = function() {
      var startDate;
      startDate = this.date ? new Date(this.date) : new Date();
      startDate.setDate(startDate.getDate() - this.daysBefore);
      return startDate;
    };

    DatePickerExtended.prototype.getEndDate = function() {
      var endDate;
      endDate = this.getStartDate();
      endDate.setDate(endDate.getDate() + this.daysAfter);
      return endDate;
    };

    return DatePickerExtended;

  })(DatePicker);

  module.exports = DatePickerExtended;

}).call(this);
}, "controls/datepicker/datepicker": function(exports, require, module) {(function() {
  var ConfigurationManager, DatePicker, ModalControllerModule, SforceDataContext, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Utils = require("common/utils");

  SforceDataContext = require('models/bll/sforce-data-context');

  ConfigurationManager = require('db/configuration-manager');

  ModalControllerModule = require('controls/popups/modal-controller-module');

  DatePicker = (function(superClass) {
    extend(DatePicker, superClass);

    DatePicker.include(ModalControllerModule);

    DatePicker.prototype.className = "date-picker";

    DatePicker.prototype.daysAfter = 30;

    DatePicker.prototype.daysBefore = 14;

    DatePicker.prototype.right = 'right';

    DatePicker.prototype.center = 'center';

    function DatePicker(date1, limitation) {
      this.date = date1 != null ? date1 : new Date();
      this.limitation = limitation != null ? limitation : null;
      this.showOverflow = bind(this.showOverflow, this);
      this.cancel = bind(this.cancel, this);
      this.setDaysLimitations = bind(this.setDaysLimitations, this);
      this._setLimitation = bind(this._setLimitation, this);
      this.done = bind(this.done, this);
      this._configureAndOpen = bind(this._configureAndOpen, this);
      this.hide = bind(this.hide, this);
      DatePicker.__super__.constructor.call(this, {});
    }

    DatePicker.prototype.show = function() {
      this.date = this.date instanceof Date ? this.date : new Date(this.date);
      if (this.limitation != null) {
        this._setLimitation(this.limitation).then(this._configureAndOpen);
      } else {
        this._configureAndOpen();
      }
      document.addEventListener('backbutton', this.cancel, true);
      return $(document.body).addClass('popup-mode');
    };

    DatePicker.prototype.hide = function() {
      return this.cancel();
    };

    DatePicker.prototype._configureAndOpen = function() {
      this.setConfig();
      this.showOverflow();
      return SpinningWheel.open(this.className);
    };

    DatePicker.prototype.result = function() {
      var dd, results, yyyy;
      results = SpinningWheel.getSelectedValues();
      yyyy = this.getYearFromResult(results.values[0]);
      dd = this.getDateWithoutYearFromResult(results.values[0]);
      return moment(dd + ", " + yyyy, 'dd MMM D, YYYY').toDate();
    };

    DatePicker.prototype.getYearFromResult = function(result) {
      var indexOfYear;
      indexOfYear = result.lastIndexOf(' ') + 1;
      return result.substring(indexOfYear);
    };

    DatePicker.prototype.getDateWithoutYearFromResult = function(result) {
      var indexOfYear;
      indexOfYear = result.lastIndexOf(' ');
      return result.substring(0, indexOfYear);
    };

    DatePicker.prototype.done = function() {
      var res;
      $(document.body).removeClass('popup-mode');
      res = this.result();
      return this.trigger('onDonePressed', res);
    };

    DatePicker.prototype._setLimitation = function(newLmitation) {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(user) {
          if (!user) {
            return $.when();
          }
          if (!user.callReportValidationExcempted) {
            return ConfigurationManager.getConfig('callReportValidationSettings').then(function(dateRangeConfig) {
              var deltaAfter, deltaBefore;
              deltaBefore = newLmitation['beforeKey'] != null ? dateRangeConfig[newLmitation['beforeKey']] : newLmitation['beforeDays'];
              deltaAfter = newLmitation['afterKey'] != null ? dateRangeConfig[newLmitation['afterKey']] : newLmitation['afterDays'];
              return _this.setDaysLimitations(deltaBefore, deltaAfter);
            });
          } else {
            return _this.setDaysLimitations(newLmitation['beforeDays'], newLmitation['afterDays']);
          }
        };
      })(this));
    };

    DatePicker.prototype.setDaysLimitations = function(daysBefore, daysAfter) {
      if (daysBefore != null) {
        this.daysBefore = Math.floor(daysBefore);
      }
      if (daysAfter != null) {
        return this.daysAfter = Math.floor(daysAfter);
      }
    };

    DatePicker.prototype.cancel = function() {
      $(document.body).removeClass('popup-mode');
      document.removeEventListener('backbutton', this.cancel, true);
      this.willHide(this);
      SpinningWheel.destroy();
      return this.hideOverflow();
    };

    DatePicker.prototype.showOverflow = function() {
      this.overflow = $("<div class='popup-overflow'/>");
      app.mainController.append(this.overflow);
      return this.didShow(this);
    };

    DatePicker.prototype.hideOverflow = function() {
      return this.overflow.remove();
    };

    DatePicker.prototype.setConfig = function() {
      SpinningWheel.addSlot(this.days(), this.center, this.defaultMonthIndex);
      SpinningWheel.setCancelAction(this.cancel);
      return SpinningWheel.setDoneAction(this.done);
    };

    DatePicker.prototype.getStartDate = function() {
      var date;
      date = new Date();
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() - this.daysBefore);
      return date;
    };

    DatePicker.prototype.getEndDate = function() {
      var date;
      date = new Date();
      date.setDate(date.getDate() + this.daysAfter);
      return date;
    };

    DatePicker.prototype.getDaysBetween = function(startDate, endDate) {
      var dateStep, dayNumber, dayOfWeek, days, index, month, selectedDate, year;
      days = {};
      index = 1;
      endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());
      dateStep = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());
      selectedDate = this.date < startDate ? new Date : this.date;
      selectedDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());
      while (dateStep <= endDate) {
        year = dateStep.getFullYear();
        month = Utils.monthByIndex(dateStep.getMonth());
        dayNumber = dateStep.getDate() < 10 ? '0' + dateStep.getDate() : dateStep.getDate();
        dayOfWeek = Utils.dayOfWeekByIndex(dateStep.getDay());
        days[index] = dayOfWeek + " " + month + " " + dayNumber + " " + year;
        if (Number(dateStep) === Number(selectedDate)) {
          this.defaultMonthIndex = index;
        }
        index++;
        dateStep.setDate(dateStep.getDate() + 1);
      }
      return days;
    };

    DatePicker.prototype._dateWithoutTime = function(date) {};

    DatePicker.prototype.days = function() {
      var days, endDate, startDate;
      startDate = this.getStartDate();
      endDate = this.getEndDate();
      days = this.getDaysBetween(startDate, endDate);
      return days;
    };

    return DatePicker;

  })(Spine.Controller);

  module.exports = DatePicker;

}).call(this);
}, "controls/filters/duration-filters/duration-filter": function(exports, require, module) {(function() {
  var DurationFilter, SettingsManager;

  SettingsManager = require('db/settings-manager');

  DurationFilter = (function() {
    function DurationFilter() {}

    DurationFilter.mapFilterItems = function(settings) {
      var durations, indexOfDefault, minutes;
      minutes = settings.duration;
      indexOfDefault = minutes.indexOf(settings['callDuration'].minutes());
      if (indexOfDefault === -1) {
        indexOfDefault = 0;
      }
      durations = minutes.map(function(minute, index) {
        return {
          id: index,
          value: minute,
          description: (minute + " ") + Locale.value('card.DurationPopup.TimeUnits')
        };
      });
      durations.defaultValue = durations[indexOfDefault];
      return durations;
    };

    DurationFilter.resources = function() {
      return SettingsManager.getTourPlanningSettings().then(this.mapFilterItems);
    };

    return DurationFilter;

  })();

  module.exports = DurationFilter;

}).call(this);
}, "controls/header/base-header": function(exports, require, module) {(function() {
  var BaseHeader, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  BaseHeader = (function(superClass) {
    extend(BaseHeader, superClass);

    BaseHeader.prototype.tag = 'header';

    BaseHeader.prototype.className = 'ordinary-header';

    BaseHeader.prototype.elements = {
      '.title': 'elTitle',
      '.left-controls': 'elLeftControls',
      '.right-controls': 'elRightControls'
    };

    function BaseHeader(title1) {
      this.title = title1;
      this.setTitle = bind(this.setTitle, this);
      BaseHeader.__super__.constructor.call(this, {});
    }

    BaseHeader.prototype.template = function() {
      return require('views/controls/header/base-header');
    };

    BaseHeader.prototype.render = function() {
      this.html(this.template());
      this.setTitle(this.title);
      Locale.localize(this.el);
      return this;
    };

    BaseHeader.prototype.setTitle = function(title) {
      return this.elTitle.html(title);
    };

    BaseHeader.prototype.addLeftControlElement = function(element) {
      this.elLeftControls.append(element);
      return this.elLeftControls.addClass('show');
    };

    BaseHeader.prototype.addRightControlElement = function(element) {
      this.elRightControls.append(element);
      return this.elRightControls.addClass('show');
    };

    return BaseHeader;

  })(Spine.Controller);

  module.exports = BaseHeader;

}).call(this);
}, "controls/header/header": function(exports, require, module) {(function() {
  var BaseHeader, Header,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseHeader = require('controls/header/base-header');

  Header = (function(superClass) {
    extend(Header, superClass);

    function Header() {
      this._onBackClick = bind(this._onBackClick, this);
      return Header.__super__.constructor.apply(this, arguments);
    }

    Header.prototype.events = {
      'tap .back': '_onBackClick'
    };

    Header.prototype.template = function() {
      return require('views/controls/header/header');
    };

    Header.prototype._onBackClick = function() {
      return this.trigger('backbutton', this);
    };

    return Header;

  })(BaseHeader);

  module.exports = Header;

}).call(this);
}, "controls/header-controls/header-base-control": function(exports, require, module) {(function() {
  var HeaderBaseControl, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  HeaderBaseControl = (function(superClass) {
    extend(HeaderBaseControl, superClass);

    HeaderBaseControl.prototype.events = {
      'tap': '_tap'
    };

    function HeaderBaseControl(title, className) {
      this.className = className;
      HeaderBaseControl.__super__.constructor.call(this, {});
      this.updateTitle(title);
    }

    HeaderBaseControl.prototype._tap = function() {
      return this.trigger('tap', this);
    };

    HeaderBaseControl.prototype.updateTitle = function(title) {
      return this.html(title);
    };

    return HeaderBaseControl;

  })(Spine.Controller);

  module.exports = HeaderBaseControl;

}).call(this);
}, "controls/header-controls/header-date-time-control": function(exports, require, module) {(function() {
  var HeaderBaseControl, HeaderDateTimeControl, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  HeaderBaseControl = require('controls/header-controls/header-base-control');

  HeaderDateTimeControl = (function(superClass) {
    extend(HeaderDateTimeControl, superClass);

    HeaderDateTimeControl.prototype.className = 'ctrl-date-time';

    HeaderDateTimeControl.prototype.events = {
      'tap': '_tap'
    };

    HeaderDateTimeControl.prototype.elements = {
      '.header-date-time-title': 'elTitle',
      '.header-date-time-value': 'elValue'
    };

    function HeaderDateTimeControl(title, value) {
      HeaderDateTimeControl.__super__.constructor.call(this, {});
      this.html(require('views/controls/header-controls/header-date-time-control'));
      this.updateTitle(title);
      this.updateValue(value);
    }

    HeaderDateTimeControl.prototype._tap = function() {
      return this.trigger('tap', this);
    };

    HeaderDateTimeControl.prototype.updateTitle = function(title) {
      return this.elTitle.html(title);
    };

    HeaderDateTimeControl.prototype.updateValue = function(value) {
      return this.elValue.html(value);
    };

    return HeaderDateTimeControl;

  })(Spine.Controller);

  module.exports = HeaderDateTimeControl;

}).call(this);
}, "controls/page-control/page-control-item": function(exports, require, module) {(function() {
  var PageControlItem, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PageControlItem = (function(superClass) {
    extend(PageControlItem, superClass);

    PageControlItem.prototype.tag = 'li';

    PageControlItem.prototype.className = 'page-control-item';

    PageControlItem.prototype.events = {
      'tap': '_onPageControlItemTap'
    };

    function PageControlItem(index) {
      this.index = index;
      this._onPageControlItemTap = bind(this._onPageControlItemTap, this);
      PageControlItem.__super__.constructor.call(this, {});
    }

    PageControlItem.prototype._onPageControlItemTap = function() {
      return this.trigger('pageControlItemTap', this);
    };

    return PageControlItem;

  })(Spine.Controller);

  module.exports = PageControlItem;

}).call(this);
}, "controls/page-control/page-control": function(exports, require, module) {(function() {
  var PageControl, PageControlItem, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PageControlItem = require('controls/page-control/page-control-item');

  PageControl = (function(superClass) {
    extend(PageControl, superClass);

    PageControl.prototype.tag = 'ul';

    PageControl.prototype.className = 'page-control';

    function PageControl(pagesCount) {
      this.pagesCount = pagesCount;
      this.refreshByActivePageIndex = bind(this.refreshByActivePageIndex, this);
      PageControl.__super__.constructor.call(this, {});
      this.items = [];
      this.render();
    }

    PageControl.prototype.render = function() {
      this.pagesCount === 1 && this.el.hide();
      return _(this.pagesCount).times((function(_this) {
        return function() {
          var item;
          item = new PageControlItem(_this.items.length);
          item.on('pageControlItemTap', function() {
            return _this.trigger('pageControlItemTap', item);
          });
          _this.items.push(item);
          return _this.append(item);
        };
      })(this));
    };

    PageControl.prototype.refreshByActivePageIndex = function(index) {
      _.each(this.items, function(item) {
        return item.deactivate();
      });
      if (this.items[index]) {
        return this.items[index].activate();
      }
    };

    return PageControl;

  })(Spine.Controller);

  module.exports = PageControl;

}).call(this);
}, "controls/pick-list/pick-list": function(exports, require, module) {(function() {
  var ListPopup, PickList,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ListPopup = require('controls/popups/list-popup');

  PickList = (function() {
    function PickList(context, target, datasource, selectedValue) {
      this.context = context;
      this.target = target;
      this.datasource = datasource;
      this.selectedValue = selectedValue;
      this._onPickListItemSelected = bind(this._onPickListItemSelected, this);
      this.show = bind(this.show, this);
      this.target.parent().bind('tap', this.show);
      this.setValue(this.selectedValue);
    }

    PickList.prototype.show = function() {
      return this.datasource.getItems().then((function(_this) {
        return function(items) {
          var popup;
          popup = new ListPopup(_this._prepareItems(items), _this.selectedItem);
          popup.bind('onPopupItemSelected', function(selectedItem1) {
            _this.selectedItem = selectedItem1;
            _this.selectedValue = _this.selectedItem.id;
            _this.target.html(_this.selectedItem.description);
            _this._onPickListItemSelected(_this.selectedItem);
            return _this.context.dismissModalController();
          });
          return _this.context.presentModalController(popup);
        };
      })(this));
    };

    PickList.prototype._prepareItems = function(items) {
      if (!(items.some((function(_this) {
        return function(item) {
          return item.id === _this.selectedValue;
        };
      })(this)))) {
        items.push({
          id: this.selectedValue,
          description: this.selectedValue
        });
      }
      return items;
    };

    PickList.prototype.setValue = function(selectedValue) {
      this.selectedValue = selectedValue;
      return this.datasource.getItemForSelectedValue(this.selectedValue).then((function(_this) {
        return function(selectedItem1) {
          _this.selectedItem = selectedItem1;
          return _this.target.html(_this.selectedItem.description);
        };
      })(this));
    };

    PickList.prototype._onPickListItemSelected = function(selectedItem) {
      return this.context.trigger('onPickListItemSelected', selectedItem);
    };

    PickList.prototype.bind = function(eventName, event) {
      return this.context.bind(eventName, event);
    };

    return PickList;

  })();

  module.exports = PickList;

}).call(this);
}, "controls/popups/alert-popup": function(exports, require, module) {(function() {
  var AlertPopup, BasePopup, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  BasePopup = require('controls/popups/base-popup');

  AlertPopup = (function(superClass) {
    extend(AlertPopup, superClass);

    AlertPopup.prototype.className = 'popup alert single-button';

    function AlertPopup(options) {
      this._btnYesClicked = bind(this._btnYesClicked, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._renderButtons = bind(this._renderButtons, this);
      this._renderContent = bind(this._renderContent, this);
      AlertPopup.__super__.constructor.call(this, options.caption);
      this.message = options.message;
    }

    AlertPopup.prototype._renderContent = function() {
      if (this.message) {
        this.elContent.text(this.message);
      }
      if (!this.message) {
        return this.elContent.hide();
      }
    };

    AlertPopup.prototype._renderButtons = function() {
      return this.elButtonSection.html(require('views/controls/popups/partial-controls/alert-buttons')());
    };

    AlertPopup.prototype._bindEvents = function() {
      AlertPopup.__super__._bindEvents.apply(this, arguments);
      return this.elButtonSection.find('.btn.yes').bind('tap', this._btnYesClicked);
    };

    AlertPopup.prototype._btnYesClicked = function() {
      return this.trigger('yesClicked', this);
    };

    return AlertPopup;

  })(BasePopup);

  module.exports = AlertPopup;

}).call(this);
}, "controls/popups/base-popup": function(exports, require, module) {(function() {
  var BasePopup, ModalControllerModule, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ModalControllerModule = require('controls/popups/modal-controller-module');

  BasePopup = (function(superClass) {
    extend(BasePopup, superClass);

    BasePopup.include(ModalControllerModule);

    BasePopup.prototype.className = 'popup';

    BasePopup.prototype.elements = {
      '.popup-container': 'elPopup',
      '.popup-wrapper': 'elOverflow',
      'header': 'elHeader',
      '.content-container': 'elContent',
      '.buttons-section': 'elButtonSection'
    };

    function BasePopup(caption) {
      this.caption = caption;
      this.customStyleClass = bind(this.customStyleClass, this);
      this._preventDefault = bind(this._preventDefault, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._renderButtons = bind(this._renderButtons, this);
      this._renderContent = bind(this._renderContent, this);
      this._renderHead = bind(this._renderHead, this);
      this.render = bind(this.render, this);
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      BasePopup.__super__.constructor.apply(this, arguments);
    }

    BasePopup.prototype.show = function() {
      $(document.body).addClass('showing-popup');
      app.mainController.append(this);
      this.render();
      this._bindEvents();
      return this.didShow(this);
    };

    BasePopup.prototype.hide = function() {
      document.removeEventListener('backbutton', this.hide, false);
      this.willHide(this);
      this.el.remove();
      return setTimeout((function(_this) {
        return function() {
          $(document.body).removeClass('showing-popup');
          _this.didHide(_this);
          return _this.release();
        };
      })(this), 400);
    };

    BasePopup.prototype.template = function() {
      return require('views/controls/popups/base-popup')();
    };

    BasePopup.prototype.render = function() {
      this.html(this.template());
      this._renderHead();
      this._renderContent();
      this._renderButtons();
      return Locale.localize(this.el);
    };

    BasePopup.prototype._renderHead = function() {
      if (this.caption) {
        this.elHeader.text(this.caption);
      }
      if (!this.caption) {
        return this.elHeader.hide();
      }
    };

    BasePopup.prototype._renderContent = function() {};

    BasePopup.prototype._renderButtons = function() {
      return this.elButtonSection.hide();
    };

    BasePopup.prototype._bindEvents = function() {
      document.addEventListener('backbutton', this.hide, false);
      this.elPopup.bind('tap', function(event) {
        return event.stopPropagation();
      });
      this.elOverflow.bind('touchmove', this._preventDefault);
      this.elOverflow.bind('tap', (function(_this) {
        return function() {
          return _this.hide();
        };
      })(this));
      this.scrollElements = this.el.find('.scroll-container *');
      this.elScrollContent = this.el.find('.scroll-content');
      return this.elScrollContainer = this.el.find('.scroll-container');
    };

    BasePopup.prototype._preventDefault = function(event) {
      if (jQuery.inArray(event.target, this.scrollElements) === -1 || this.elScrollContent.height() === this.elScrollContainer.height()) {
        return event.preventDefault();
      }
    };

    BasePopup.prototype.customStyleClass = function(className) {
      return this.el.addClass(className);
    };

    return BasePopup;

  })(Spine.Controller);

  module.exports = BasePopup;

}).call(this);
}, "controls/popups/confirmation-popup": function(exports, require, module) {(function() {
  var AlertPopup, ConfirmationPopup, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  AlertPopup = require('controls/popups/alert-popup');

  ConfirmationPopup = (function(superClass) {
    extend(ConfirmationPopup, superClass);

    function ConfirmationPopup() {
      this._btnNoClicked = bind(this._btnNoClicked, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._renderButtons = bind(this._renderButtons, this);
      return ConfirmationPopup.__super__.constructor.apply(this, arguments);
    }

    ConfirmationPopup.prototype.className = 'popup alert confirm';

    ConfirmationPopup.prototype._renderButtons = function() {
      return this.elButtonSection.html(require('views/controls/popups/partial-controls/confirm-buttons')());
    };

    ConfirmationPopup.prototype._bindEvents = function() {
      ConfirmationPopup.__super__._bindEvents.apply(this, arguments);
      return this.elButtonSection.find('.btn.no').bind('tap', this._btnNoClicked);
    };

    ConfirmationPopup.prototype._btnNoClicked = function() {
      return this.trigger('noClicked', this);
    };

    return ConfirmationPopup;

  })(AlertPopup);

  module.exports = ConfirmationPopup;

}).call(this);
}, "controls/popups/list-popup-with-back-btn": function(exports, require, module) {(function() {
  var ListPopup, ListPopupWithBackBtn, Spine, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ListPopup = require('controls/popups/list-popup');

  Utils = require('common/utils');

  ListPopupWithBackBtn = (function(superClass) {
    extend(ListPopupWithBackBtn, superClass);

    function ListPopupWithBackBtn() {
      this.hide = bind(this.hide, this);
      this._onBackButton = bind(this._onBackButton, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._renderHead = bind(this._renderHead, this);
      return ListPopupWithBackBtn.__super__.constructor.apply(this, arguments);
    }

    ListPopupWithBackBtn.prototype._renderHead = function() {
      if (Utils.isIOS()) {
        return this.elHeader.html(require("views/controls/popups/header-with-back-button"));
      } else {
        return this.elHeader.hide();
      }
    };

    ListPopupWithBackBtn.prototype._bindEvents = function() {
      document.addEventListener('backbutton', this._onBackButton);
      ListPopupWithBackBtn.__super__._bindEvents.apply(this, arguments);
      return this.elHeader.find('.back').bind('tap', this._onBackButton);
    };

    ListPopupWithBackBtn.prototype._onBackButton = function() {
      this.trigger('backbutton', this);
      return this.hide();
    };

    ListPopupWithBackBtn.prototype.hide = function() {
      document.removeEventListener('backbutton', this._onBackButton);
      return ListPopupWithBackBtn.__super__.hide.apply(this, arguments);
    };

    return ListPopupWithBackBtn;

  })(ListPopup);

  module.exports = ListPopupWithBackBtn;

}).call(this);
}, "controls/popups/list-popup": function(exports, require, module) {(function() {
  var BasePopup, ListPopup, PopupListItem, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  BasePopup = require('controls/popups/base-popup');

  PopupListItem = require('controls/popups/partial-controls/popup-list-item');

  ListPopup = (function(superClass) {
    extend(ListPopup, superClass);

    ListPopup.prototype.className = 'popup list';

    function ListPopup(datasource, selectedItem1, caption) {
      this.datasource = datasource;
      this.selectedItem = selectedItem1 != null ? selectedItem1 : this.datasource[0];
      this.caption = caption;
      this._onPopupItemSelected = bind(this._onPopupItemSelected, this);
      this._calculatePosition = bind(this._calculatePosition, this);
      this._getSelectedItemIndex = bind(this._getSelectedItemIndex, this);
      this.render = bind(this.render, this);
      this._renderList = bind(this._renderList, this);
      this._renderContent = bind(this._renderContent, this);
      this.show = bind(this.show, this);
      ListPopup.__super__.constructor.call(this, this.caption);
    }

    ListPopup.prototype.show = function() {
      if (this.datasource && this.datasource.length > 0) {
        return ListPopup.__super__.show.apply(this, arguments);
      }
    };

    ListPopup.prototype._renderContent = function() {
      this.elContent.addClass('scroll-container');
      this.scrollList = $(document.createElement('ul'));
      this.scrollList.addClass('popup-items-list scroll-content');
      this.elContent.html(this.scrollList);
      return this._renderList();
    };

    ListPopup.prototype._renderList = function() {
      return this.datasource.forEach((function(_this) {
        return function(item) {
          var popupItem;
          popupItem = new PopupListItem(item);
          _this.scrollList.append(popupItem.el);
          popupItem.on('onPopupItemSelected', _this._onPopupItemSelected);
          popupItem.render();
          if (item.id === _this.selectedItem.id) {
            return popupItem.setItemSelected();
          }
        };
      })(this));
    };

    ListPopup.prototype.render = function() {
      ListPopup.__super__.render.apply(this, arguments);
      return this._calculatePosition();
    };

    ListPopup.prototype._getSelectedItemIndex = function() {
      return this.datasource.map((function(_this) {
        return function(el) {
          return el.id === _this.selectedItem.id;
        };
      })(this)).indexOf(true);
    };

    ListPopup.prototype._calculatePosition = function() {
      var buttonsHeight, headerHeight, popupHeight, selectedItemOrderNumber;
      popupHeight = this.elPopup.height();
      headerHeight = this.elHeader.is(':visible') ? this.elHeader.outerHeight(true) : 0;
      buttonsHeight = this.elButtonSection.is(':visible') ? this.elButtonSection.outerHeight(true) : 0;
      if (popupHeight > window.innerHeight * 0.75) {
        this.elContent.css('max-height', popupHeight - headerHeight - buttonsHeight);
      }
      selectedItemOrderNumber = this._getSelectedItemIndex();
      if (selectedItemOrderNumber !== -1) {
        return this.elContent.scrollTop(this.scrollList.children().eq(selectedItemOrderNumber).position().top);
      }
    };

    ListPopup.prototype._onPopupItemSelected = function(selectedItem) {
      return this.trigger('onPopupItemSelected', selectedItem);
    };

    return ListPopup;

  })(BasePopup);

  module.exports = ListPopup;

}).call(this);
}, "controls/popups/modal-controller-module": function(exports, require, module) {(function() {
  var ModalControllerModule, Spine;

  Spine = require('spine');

  ModalControllerModule = {
    didShow: (function(_this) {
      return function(context) {
        return context.trigger('didShow', context);
      };
    })(this),
    willHide: (function(_this) {
      return function(context) {
        return context.trigger('willHide', context);
      };
    })(this),
    didHide: (function(_this) {
      return function(context) {
        return context.trigger('didHide', context);
      };
    })(this)
  };

  module.exports = ModalControllerModule;

}).call(this);
}, "controls/popups/multiselect-popup": function(exports, require, module) {(function() {
  var ListPopup, MultiselectPopup, MultiselectPopupItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ListPopup = require('controls/popups/list-popup');

  MultiselectPopupItem = require('controls/popups/partial-controls/multiselect-popup-item');

  MultiselectPopup = (function(superClass) {
    extend(MultiselectPopup, superClass);

    MultiselectPopup.prototype.className = 'popup list single-button';

    function MultiselectPopup(datasource, selectedItems, caption, maxSelectedItemsCount, minSelectedItemsCount) {
      this.datasource = datasource;
      this.selectedItems = selectedItems != null ? selectedItems : [];
      this.caption = caption;
      this.maxSelectedItemsCount = maxSelectedItemsCount != null ? maxSelectedItemsCount : 4;
      this.minSelectedItemsCount = minSelectedItemsCount != null ? minSelectedItemsCount : 0;
      this._onDoneTap = bind(this._onDoneTap, this);
      this._renderButtons = bind(this._renderButtons, this);
      this._renderList = bind(this._renderList, this);
      this._getSelectedItemIndex = bind(this._getSelectedItemIndex, this);
      this._blockItems = bind(this._blockItems, this);
      this._onPopupItemUnselected = bind(this._onPopupItemUnselected, this);
      this._onPopupItemSelected = bind(this._onPopupItemSelected, this);
      this.isCanDeselectItem = bind(this.isCanDeselectItem, this);
      this.isCanSelectItem = bind(this.isCanSelectItem, this);
      this._onPopupItemsUpdated = bind(this._onPopupItemsUpdated, this);
      MultiselectPopup.__super__.constructor.call(this, this.datasource, this.selectedItems, this.caption);
    }

    MultiselectPopup.prototype._onPopupItemsUpdated = function() {
      this.trigger('onPopupItemsUpdated', this.selectedItems);
      return this._checkItems();
    };

    MultiselectPopup.prototype.isCanSelectItem = function() {
      return this.selectedItems.length < this.maxSelectedItemsCount;
    };

    MultiselectPopup.prototype.isCanDeselectItem = function() {
      return this.selectedItems.length > this.minSelectedItemsCount;
    };

    MultiselectPopup.prototype._onPopupItemSelected = function(item) {
      if (!_.contains(this.selectedItems, item.model)) {
        this.selectedItems.push(item.model);
      }
      return this._onPopupItemsUpdated();
    };

    MultiselectPopup.prototype._onPopupItemUnselected = function(item) {
      this.selectedItems = this.selectedItems.filter((function(_this) {
        return function(selectedItem) {
          return selectedItem !== item.model;
        };
      })(this));
      return this._onPopupItemsUpdated();
    };

    MultiselectPopup.prototype._blockItems = function(item) {
      if (!(this.selectedItems.some((function(_this) {
        return function(el) {
          return el.id === item.id;
        };
      })(this)))) {
        return item.el.addClass('blocked');
      }
    };

    MultiselectPopup.prototype._unblockItems = function() {
      if (this.isItemsBlocked) {
        this.listItems.forEach((function(_this) {
          return function(item) {
            return item.el.removeClass('blocked');
          };
        })(this));
        return this.isItemsBlocked = true;
      }
    };

    MultiselectPopup.prototype._checkItems = function() {
      if (this.isCanSelectItem()) {
        return this._unblockItems();
      } else {
        this.isItemsBlocked = true;
        return this.listItems.forEach(this._blockItems);
      }
    };

    MultiselectPopup.prototype._getSelectedItemIndex = function() {
      return this.datasource.map((function(_this) {
        return function(el) {
          return _this.selectedItem.some(function(item) {
            return item.id === el.id;
          });
        };
      })(this)).indexOf(true);
    };

    MultiselectPopup.prototype._renderList = function() {
      this.listItems = [];
      this.elContent.on('tap', function(event) {
        return event.stopPropagation();
      });
      this.datasource.forEach((function(_this) {
        return function(item) {
          var popupItem;
          popupItem = new MultiselectPopupItem(item, _this);
          _this.scrollList.append(popupItem.el);
          popupItem.on('onPopupItemSelected', _this._onPopupItemSelected);
          popupItem.on('onPopupItemUnselected', _this._onPopupItemUnselected);
          popupItem.render();
          popupItem.elInput.attr('type', 'checkbox');
          if (_.contains(_this.selectedItems, popupItem.model)) {
            popupItem.setItemSelected();
          }
          return _this.listItems.push(popupItem);
        };
      })(this));
      return this._checkItems();
    };

    MultiselectPopup.prototype._renderButtons = function() {
      this.elButtonSection.html(require('views/controls/popups/partial-controls/done-buttons')());
      this.elDoneButton = this.el.find('.btn.yes');
      return this.elDoneButton.bind('tap', this._onDoneTap);
    };

    MultiselectPopup.prototype._onDoneTap = function() {
      this.trigger('doneTap', this.selectedItems);
      return this._checkItems();
    };

    return MultiselectPopup;

  })(ListPopup);

  module.exports = MultiselectPopup;

}).call(this);
}, "controls/popups/partial-controls/multiselect-popup-item": function(exports, require, module) {(function() {
  var MultiselectPopupItem, PopupListItem,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PopupListItem = require('controls/popups/partial-controls/popup-list-item');

  MultiselectPopupItem = (function(superClass) {
    extend(MultiselectPopupItem, superClass);

    function MultiselectPopupItem(model, datasource) {
      this.model = model;
      this.datasource = datasource;
      MultiselectPopupItem.__super__.constructor.call(this, this.model);
    }

    MultiselectPopupItem.prototype.setItemUnselected = function() {
      return this.elInput.prop('checked', false);
    };

    MultiselectPopupItem.prototype._onTap = function(event) {
      event.stopPropagation();
      if (this.elInput.prop('checked') && this.datasource.isCanDeselectItem()) {
        this.setItemUnselected();
        return this.trigger("onPopupItemUnselected", this);
      } else if (this.datasource.isCanSelectItem()) {
        this.setItemSelected();
        return this.trigger("onPopupItemSelected", this);
      }
    };

    return MultiselectPopupItem;

  })(PopupListItem);

  module.exports = MultiselectPopupItem;

}).call(this);
}, "controls/popups/partial-controls/popup-list-item": function(exports, require, module) {(function() {
  var PopupListItem, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  PopupListItem = (function(superClass) {
    extend(PopupListItem, superClass);

    PopupListItem.prototype.events = {
      "tap": "_onTap"
    };

    PopupListItem.prototype.tag = 'li';

    PopupListItem.prototype.elements = {
      '.input': 'elInput'
    };

    function PopupListItem(model) {
      this.model = model;
      PopupListItem.__super__.constructor.apply(this, arguments);
    }

    PopupListItem.prototype.render = function() {
      return this.html(require('views/controls/popups/partial-controls/popup-list-item')({
        model: this.model
      }));
    };

    PopupListItem.prototype.setItemSelected = function() {
      return this.elInput.prop('checked', true);
    };

    PopupListItem.prototype._onTap = function(event) {
      event.stopPropagation();
      this.setItemSelected();
      return setTimeout((function(_this) {
        return function() {
          return _this.trigger("onPopupItemSelected", _this);
        };
      })(this), 100);
    };

    return PopupListItem;

  })(Spine.Controller);

  module.exports = PopupListItem;

}).call(this);
}, "controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell": function(exports, require, module) {(function() {
  var PatientProfilesPopupTableCell, TableCell,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableCell = require('controls/table/table-cell');

  PatientProfilesPopupTableCell = (function(superClass) {
    extend(PatientProfilesPopupTableCell, superClass);

    PatientProfilesPopupTableCell.prototype.tag = 'tr';

    PatientProfilesPopupTableCell.prototype.elements = {
      '.name': 'elName',
      '.age': 'elAge',
      '.gender': 'elGender',
      '.general-health': 'elGeneralHealth',
      '.occupation': 'elOccupation',
      '.bmi': 'elBmi',
      '.diseases': 'elDiseases'
    };

    function PatientProfilesPopupTableCell(patientProfile) {
      this.patientProfile = patientProfile;
      this._onCellTap = bind(this._onCellTap, this);
      this.bindEvents = bind(this.bindEvents, this);
      PatientProfilesPopupTableCell.__super__.constructor.apply(this, arguments);
    }

    PatientProfilesPopupTableCell.prototype.template = function() {
      return require('views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell')();
    };

    PatientProfilesPopupTableCell.prototype.render = function() {
      var diseasesNames, ref;
      PatientProfilesPopupTableCell.__super__.render.apply(this, arguments);
      this.elName.text(this.patientProfile.profileProduct.patientProfileName);
      this.elAge.text(this.patientProfile.profileProduct.age);
      this.elGender.text(this.patientProfile.profileProduct.gender);
      this.elGeneralHealth.text(this.patientProfile.profileProduct.generalHealth);
      this.elOccupation.text(this.patientProfile.profileProduct.occupation);
      this.elBmi.text(this.patientProfile.profileProduct.bmi);
      diseasesNames = (ref = this.patientProfile.patientDiseases) != null ? ref.map((function(_this) {
        return function(patientDisease) {
          return patientDisease.diseaseName;
        };
      })(this)).join(", ") : void 0;
      this.elDiseases.text(diseasesNames);
      this.bindEvents();
      return this;
    };

    PatientProfilesPopupTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    PatientProfilesPopupTableCell.prototype.setSelected = function() {
      return this.el.addClass('selected');
    };

    PatientProfilesPopupTableCell.prototype._onCellTap = function() {
      return this.trigger('cellTap', this);
    };

    return PatientProfilesPopupTableCell;

  })(TableCell);

  module.exports = PatientProfilesPopupTableCell;

}).call(this);
}, "controls/popups/patient-profiles-popup/patient-profiles-popup-table": function(exports, require, module) {(function() {
  var PatientProfilesPopupTable, TableController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/card-table');

  PatientProfilesPopupTable = (function(superClass) {
    extend(PatientProfilesPopupTable, superClass);

    function PatientProfilesPopupTable() {
      this.scrollToItemIndex = bind(this.scrollToItemIndex, this);
      return PatientProfilesPopupTable.__super__.constructor.apply(this, arguments);
    }

    PatientProfilesPopupTable.prototype.elements = {
      '.scroll-container': 'elScrollContainer',
      '.scroll-content tbody': 'elTbody'
    };

    PatientProfilesPopupTable.prototype.template = function() {
      return require('views/controls/popups/patient-profiles-popup/patient-profiles-popup-table')();
    };

    PatientProfilesPopupTable.prototype.scrollToItemIndex = function(itemIndex) {
      this.elScrollContainer.scrollTop(this.elTbody.children().eq(itemIndex).position().top);
      return window.elScrollContainer = this.elScrollContainer;
    };

    return PatientProfilesPopupTable;

  })(TableController);

  module.exports = PatientProfilesPopupTable;

}).call(this);
}, "controls/popups/patient-profiles-popup/patient-profiles-popup": function(exports, require, module) {(function() {
  var BasePopup, PatientProfilesPopup, PatientProfilesPopupTable, PatientProfilesPopupTableCell,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BasePopup = require('/controls/popups/base-popup');

  PatientProfilesPopupTable = require('controls/popups/patient-profiles-popup/patient-profiles-popup-table');

  PatientProfilesPopupTableCell = require('controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell');

  PatientProfilesPopup = (function(superClass) {
    extend(PatientProfilesPopup, superClass);

    PatientProfilesPopup.prototype.className = PatientProfilesPopup.prototype.className + " patient-profiles-popup";

    PatientProfilesPopup.prototype.elements = {
      '.scroll-container': 'elScrollContainer'
    };

    PatientProfilesPopup.prototype._noneValue = {
      isNone: true,
      patientDisease: {},
      profileProduct: {
        id: null,
        patientProfileName: Locale.value('common:defaultSelectValue'),
        age: '',
        gender: '',
        generalHealth: '',
        occupation: '',
        bmi: '',
        diseases: []
      }
    };

    function PatientProfilesPopup(patientProfiles, selectedItem) {
      this.patientProfiles = patientProfiles;
      this.selectedItem = selectedItem;
      this._scrollTableToSelectedItem = bind(this._scrollTableToSelectedItem, this);
      this._renderContent = bind(this._renderContent, this);
      PatientProfilesPopup.__super__.constructor.call(this, null);
      this.patientProfiles.unshift(this._noneValue);
      if (!this.selectedItem) {
        this.selectedItem = this._noneValue;
      }
    }

    PatientProfilesPopup.prototype._renderContent = function() {
      var profilesTable;
      profilesTable = new PatientProfilesPopupTable;
      profilesTable.datasource = this;
      this.elContent.html(profilesTable.render().el);
      return this._scrollTableToSelectedItem(profilesTable);
    };

    PatientProfilesPopup.prototype._scrollTableToSelectedItem = function(profilesTable) {
      var selectedItemIndex;
      selectedItemIndex = this.patientProfiles.map((function(_this) {
        return function(el, index) {
          return el.profileProduct.id === _this.selectedItem.profileProduct.id;
        };
      })(this)).indexOf(true);
      return profilesTable.scrollToItemIndex(selectedItemIndex);
    };

    PatientProfilesPopup.prototype.numberOfRowsForTable = function(table) {
      return this.patientProfiles.length;
    };

    PatientProfilesPopup.prototype.cellForRowAtIndexForTable = function(index, table) {
      var cell, pationProfile, ref;
      pationProfile = this.patientProfiles[index];
      cell = new PatientProfilesPopupTableCell(pationProfile);
      if (pationProfile.profileProduct.id === ((ref = this.selectedItem) != null ? ref.profileProduct.id : void 0)) {
        cell.setSelected();
      }
      cell.on('cellTap', (function(_this) {
        return function(cell) {
          return _this.trigger('didChosePatientProfile', cell.patientProfile);
        };
      })(this));
      return cell;
    };

    return PatientProfilesPopup;

  })(BasePopup);

  module.exports = PatientProfilesPopup;

}).call(this);
}, "controls/popups/pending-popup": function(exports, require, module) {(function() {
  var BasePopup, PendingPopup, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  BasePopup = require('controls/popups/base-popup');

  PendingPopup = (function(superClass) {
    extend(PendingPopup, superClass);

    function PendingPopup() {
      this._bindEvents = bind(this._bindEvents, this);
      this._renderContent = bind(this._renderContent, this);
      return PendingPopup.__super__.constructor.apply(this, arguments);
    }

    PendingPopup.prototype.className = 'popup pending';

    PendingPopup.prototype._renderContent = function() {
      return this.elContent.html(require('views/controls/popups/pending-popup')());
    };

    PendingPopup.prototype._bindEvents = function() {
      return this.elOverflow.bind('touchmove', this._preventDefault);
    };

    return PendingPopup;

  })(BasePopup);

  module.exports = PendingPopup;

}).call(this);
}, "controls/popups/promotion-note-popup": function(exports, require, module) {(function() {
  var BasePopup, PromotionNotePopup, StringFormator,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BasePopup = require('/controls/popups/base-popup');

  StringFormator = require('common/string-formator');

  PromotionNotePopup = (function(superClass) {
    extend(PromotionNotePopup, superClass);

    PromotionNotePopup.prototype.className = "promotion-note-popup popup";

    function PromotionNotePopup(note) {
      this.note = note;
      this._bindEvents = bind(this._bindEvents, this);
      this._renderContent = bind(this._renderContent, this);
      this._renderHead = bind(this._renderHead, this);
      PromotionNotePopup.__super__.constructor.apply(this, arguments);
    }

    PromotionNotePopup.prototype._headTemplate = function() {
      return require('views/controls/popups/promotion-note-popup/promotion-note-popup-header')();
    };

    PromotionNotePopup.prototype._contentTemplate = function() {
      return require('views/controls/popups/promotion-note-popup/promotion-note-popup-content')();
    };

    PromotionNotePopup.prototype._renderHead = function() {
      var ref, ref1;
      this.elHeader.html(this._headTemplate());
      this.elCloseBtn = this.elHeader.find('.cross');
      this.elNoteTitle = this.elHeader.find('.note-title');
      return this.elNoteTitle.text((ref = (ref1 = this.note) != null ? ref1.title : void 0) != null ? ref : "");
    };

    PromotionNotePopup.prototype._renderContent = function() {
      var ref;
      this.elContent.html(this._contentTemplate());
      this.elScrollContent = this.elContent.find('.scroll-content');
      return this.elScrollContent[0].innerText = ((ref = this.note) != null ? ref.body : void 0) || '';
    };

    PromotionNotePopup.prototype._bindEvents = function() {
      PromotionNotePopup.__super__._bindEvents.apply(this, arguments);
      return this.elCloseBtn.bind('tap', this.hide);
    };

    return PromotionNotePopup;

  })(BasePopup);

  module.exports = PromotionNotePopup;

}).call(this);
}, "controls/popups/promotion-popup/attachments-popup-table-cell": function(exports, require, module) {(function() {
  var AttachmentsPopupTableCell, AttachmentsTableCell,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AttachmentsTableCell = require('controllers/trade-module/promotion-details/notes-attachments/attachments-table-cell');

  AttachmentsPopupTableCell = (function(superClass) {
    extend(AttachmentsPopupTableCell, superClass);

    function AttachmentsPopupTableCell() {
      this._renderContent = bind(this._renderContent, this);
      return AttachmentsPopupTableCell.__super__.constructor.apply(this, arguments);
    }

    AttachmentsPopupTableCell.prototype.elements = {
      '.file-type': 'elFileType',
      '.name': 'elName',
      '.progress-bar-holder': 'elProgressBarHolder',
      '.check-box': 'elLoadedCheck'
    };

    AttachmentsPopupTableCell.prototype.template = function() {
      return require('views/controls/popups/promotion-popup/notes-attachments-popup-table-cell')();
    };

    AttachmentsPopupTableCell.prototype._renderContent = function() {
      var ref;
      this.html(this.template());
      this.elName.text(this.attachment.title);
      this.elFileType.text(((ref = this.attachment.title) != null ? ref.split('.').pop() : void 0) || 'file');
      return this._checkLoadState();
    };

    return AttachmentsPopupTableCell;

  })(AttachmentsTableCell);

  module.exports = AttachmentsPopupTableCell;

}).call(this);
}, "controls/popups/promotion-popup/mechanics-popup-table": function(exports, require, module) {(function() {
  var PromotionMechanicsCollection, TableCell, TableController, mechanicsPopupTable,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/table-controller');

  TableCell = require('controls/table/table-cell');

  PromotionMechanicsCollection = require('models/bll/promotion-mechanics-collection');

  mechanicsPopupTable = (function(superClass) {
    extend(mechanicsPopupTable, superClass);

    mechanicsPopupTable.prototype.className = mechanicsPopupTable.prototype.className + " mechanics-popup-table";

    function mechanicsPopupTable() {
      mechanicsPopupTable.__super__.constructor.call(this, this);
      this.mechanicsCollection = new PromotionMechanicsCollection;
      this.mechanics = [];
    }

    mechanicsPopupTable.prototype.refreshTableByPromoId = function(promoId) {
      return this.mechanicsCollection.getAllMechanicsForPromotionWithId(promoId).then((function(_this) {
        return function(mechanics) {
          _this.mechanics = mechanics;
          if (_.isEmpty(_this.mechanics)) {
            return _this._renderEmptyTable(_this.el, Locale.value('tradeModule.Tactics.NoMechanics'));
          } else {
            return _this.render().el.removeClass('empty-table');
          }
        };
      })(this));
    };

    mechanicsPopupTable.prototype._renderEmptyTable = function(tableElement, text) {
      return tableElement.addClass('empty-table').html("<p>" + text + "</p>");
    };

    mechanicsPopupTable.prototype.numberOfRowsForTable = function(table) {
      var ref, ref1;
      return (ref = (ref1 = this.mechanics) != null ? ref1.length : void 0) != null ? ref : 0;
    };

    mechanicsPopupTable.prototype.cellForRowAtIndexForTable = function(index, table) {
      return this._createTableCell(this.mechanics[index]);
    };

    mechanicsPopupTable.prototype._createTableCell = function(mechanic) {
      return new TableCell(mechanic.mechanicName);
    };

    return mechanicsPopupTable;

  })(TableController);

  module.exports = mechanicsPopupTable;

}).call(this);
}, "controls/popups/promotion-popup/notes-attachments-popup-table": function(exports, require, module) {(function() {
  var AttachmentFileManager, AttachmentLoadManager, AttachmentsManager, AttachmentsTableCell, NotesAttachmentsPopupTable, NotesTableCell, PromotionAttachment, PromotionAttachmentsCollection, PromotionNotesCollection, TableController, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/table-controller');

  AttachmentsTableCell = require('controls/popups/promotion-popup/attachments-popup-table-cell');

  NotesTableCell = require('controls/popups/promotion-popup/notes-popup-table-cell');

  PromotionNotesCollection = require('models/bll/promotion-notes-collection');

  PromotionAttachmentsCollection = require('models/bll/promotion-attachments-collection');

  PromotionAttachment = require('models/promotion-attachment');

  AttachmentLoadManager = require('common/attachment-managers/attachment-load-manager');

  AttachmentFileManager = require('common/attachment-managers/attachment-file-manager');

  AttachmentsManager = require('common/attachment-managers/attachments-manager');

  Utils = require('common/utils');

  NotesAttachmentsPopupTable = (function(superClass) {
    extend(NotesAttachmentsPopupTable, superClass);

    NotesAttachmentsPopupTable.prototype.className = NotesAttachmentsPopupTable.prototype.className + " notes-attachments-popup-table";

    function NotesAttachmentsPopupTable() {
      this._onAttachmentCellTap = bind(this._onAttachmentCellTap, this);
      this._showNote = bind(this._showNote, this);
      NotesAttachmentsPopupTable.__super__.constructor.call(this, this);
      this.promotionNotesCollection = new PromotionNotesCollection;
      this.promotionAttachmentsCollection = new PromotionAttachmentsCollection;
      this.notesAttachments = [];
    }

    NotesAttachmentsPopupTable.prototype.refreshTableByPromoId = function(promoId) {
      return $.when(this._refreshAttachments(promoId), this._refreshNotes(promoId)).then((function(_this) {
        return function(attachments, notes) {
          if (_.isEmpty(attachments) && _.isEmpty(notes)) {
            return _this._renderEmptyTable(_this.el, Locale.value('tradeModule.Notes.NoNotes'));
          } else {
            _this.notesAttachments = attachments.concat(notes);
            return _this.render().el.removeClass('empty-table');
          }
        };
      })(this));
    };

    NotesAttachmentsPopupTable.prototype._refreshAttachments = function(promoId) {
      return this.promotionAttachmentsCollection.getAllAttachmentsForPromotionWithId(promoId);
    };

    NotesAttachmentsPopupTable.prototype._refreshNotes = function(promoId) {
      return this.promotionNotesCollection.getAllNotesForPromotionWithId(promoId);
    };

    NotesAttachmentsPopupTable.prototype._renderEmptyTable = function(tableElement, text) {
      return tableElement.addClass('empty-table').html("<p>" + text + "</p>");
    };

    NotesAttachmentsPopupTable.prototype.numberOfRowsForTable = function(table) {
      var ref, ref1;
      return (ref = (ref1 = this.notesAttachments) != null ? ref1.length : void 0) != null ? ref : 0;
    };

    NotesAttachmentsPopupTable.prototype.cellForRowAtIndexForTable = function(index, table) {
      return this._createTableCell(this.notesAttachments[index]);
    };

    NotesAttachmentsPopupTable.prototype._createTableCell = function(record) {
      if (record instanceof PromotionAttachment) {
        return this._createAttachmentTableCell(record);
      } else {
        return this._createNoteTableCell(record);
      }
    };

    NotesAttachmentsPopupTable.prototype._createAttachmentTableCell = function(attachment) {
      return new AttachmentsTableCell(attachment).on('attachmentCellTap', this._onAttachmentCellTap);
    };

    NotesAttachmentsPopupTable.prototype._createNoteTableCell = function(note) {
      return new NotesTableCell(note).on('noteCellTap', this._showNote);
    };

    NotesAttachmentsPopupTable.prototype._showNote = function(noteCell) {
      return this.trigger('showNote', noteCell);
    };

    NotesAttachmentsPopupTable.prototype._onAttachmentCellTap = function(cell) {
      var attachment, filePath;
      attachment = cell.attachment;
      if (attachment.loaded) {
        filePath = AttachmentFileManager.getFilePath(attachment.body, attachment.title);
        return AttachmentsManager.open(filePath, attachment.contentType);
      } else {
        if (!Utils.deviceIsOnline()) {
          return $.fn.dpToast(Locale.value("AttachmentsPopup.Offline"));
        }
        if (!AttachmentLoadManager.getLoaderForAttachment(attachment)) {
          cell.addProgress();
          return AttachmentLoadManager.queueInvoke(attachment, {
            onStateChange: cell.onLoadStateChange,
            onSuccess: cell.onLoadSuccess,
            onFail: cell.onLoadFail
          });
        }
      }
    };

    return NotesAttachmentsPopupTable;

  })(TableController);

  module.exports = NotesAttachmentsPopupTable;

}).call(this);
}, "controls/popups/promotion-popup/notes-popup-table-cell": function(exports, require, module) {(function() {
  var NotesPopupTableCell, TableCell,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableCell = require('controls/table/table-cell');

  NotesPopupTableCell = (function(superClass) {
    extend(NotesPopupTableCell, superClass);

    NotesPopupTableCell.prototype.elements = {
      '.file-icon': 'elIcon',
      '.name': 'elName',
      '.progress-bar': 'elProgressBar',
      '.check-box': 'elLoadedCheck'
    };

    function NotesPopupTableCell(note) {
      this.note = note;
      this._onCellTap = bind(this._onCellTap, this);
      NotesPopupTableCell.__super__.constructor.call(this, {});
    }

    NotesPopupTableCell.prototype.template = function() {
      return require('views/controls/popups/promotion-popup/notes-attachments-popup-table-cell')();
    };

    NotesPopupTableCell.prototype.render = function() {
      this.html(this.template());
      this.elIcon.addClass('note');
      this.elName.text(this.note.title);
      this.elLoadedCheck.addClass('checked');
      return this;
    };

    NotesPopupTableCell.prototype.bindEvents = function() {
      return this.el.on('tap', this._onCellTap);
    };

    NotesPopupTableCell.prototype._onCellTap = function() {
      return this.trigger('noteCellTap', this);
    };

    return NotesPopupTableCell;

  })(TableCell);

  module.exports = NotesPopupTableCell;

}).call(this);
}, "controls/popups/promotion-popup/promotion-popup": function(exports, require, module) {(function() {
  var BasePopup, Iterator, MechanicsPopupTable, NotesAttachmentsPopupTable, PageControl, PromotionAccountsCollection, PromotionPopup, SegmentControl, SegmentItem, SkusPopupTable, TasksPopupTable, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BasePopup = require('/controls/popups/base-popup');

  SegmentControl = require('controls/segment-control/segment-control');

  SegmentItem = require('controls/segment-control/segment-item');

  Iterator = require('common/iterator');

  PageControl = require('controls/page-control/page-control');

  PromotionAccountsCollection = require('models/bll/promotion-accounts-collection');

  Utils = require('common/utils');

  SkusPopupTable = require('controls/popups/promotion-popup/skus-popup-table');

  MechanicsPopupTable = require('controls/popups/promotion-popup/mechanics-popup-table');

  TasksPopupTable = require('controls/popups/promotion-popup/tasks-popup-table');

  NotesAttachmentsPopupTable = require('controls/popups/promotion-popup/notes-attachments-popup-table');

  PromotionPopup = (function(superClass) {
    extend(PromotionPopup, superClass);

    PromotionPopup.prototype.tagName = 'article';

    PromotionPopup.prototype.className = PromotionPopup.prototype.className + " promotion-popup";

    function PromotionPopup(appointment) {
      this.appointment = appointment;
      this._hideNote = bind(this._hideNote, this);
      this._showNote = bind(this._showNote, this);
      this._preventDefault = bind(this._preventDefault, this);
      this._onShowNote = bind(this._onShowNote, this);
      this._bindEvents = bind(this._bindEvents, this);
      this._refreshPopup = bind(this._refreshPopup, this);
      this._segmentItemTap = bind(this._segmentItemTap, this);
      this._renderContent = bind(this._renderContent, this);
      this._renderHead = bind(this._renderHead, this);
      PromotionPopup.__super__.constructor.call(this, {});
      this.skusTable = null;
      this.mechanicsTable = null;
      this.tasksTable = null;
      this.notesAttachmentsTable = null;
    }

    PromotionPopup.prototype._renderHead = function() {
      var elMainHeader;
      elMainHeader = this.el.find('.popup-main-content-holder header');
      this.elCross = elMainHeader.find('.cross');
      return this.elUserName = elMainHeader.find('.user-name');
    };

    PromotionPopup.prototype.template = function() {
      return require('views/controls/popups/promotion-popup/promotion-popup')();
    };

    PromotionPopup.prototype._renderContent = function() {
      this._initUIElements();
      this._initSegmentation();
      return this._fetchPromotionsForOrganizationWithId(this.appointment.organizationSfId).then((function(_this) {
        return function(promotions) {
          _this._initPromotionIterator(promotions);
          _this._initPageControl(promotions);
          return _this._refreshPopup();
        };
      })(this));
    };

    PromotionPopup.prototype._initUIElements = function() {
      var generalInfo;
      this.elContent.html(this._contentTemplate());
      generalInfo = this.elContent.find('.general-info');
      this.elGeneralInfoTitle = generalInfo.find('h5');
      this.elStartDate = generalInfo.find('.start-date');
      this.elContractNumber = generalInfo.find('.contact-number');
      this.elEndDate = generalInfo.find('.end-date');
      this.elObjectives = generalInfo.find('.objectives');
      this.elDescription = generalInfo.find('.description');
      this.elSegmentHolder = this.elContent.find('.segments-holder');
      this.elFooter = this.elContent.find('footer');
      this.noteTitle = this.el.find('.note-holder h6');
      this.noteBody = this.el.find('.note-holder .note-body');
      return this.closeNote = this.el.find('.note-holder .back');
    };

    PromotionPopup.prototype._contentTemplate = function() {
      return require('views/controls/popups/promotion-popup/promotion-popup-content')();
    };

    PromotionPopup.prototype._initSegmentation = function() {
      this._initSegmentItems();
      this.segmentControl = new SegmentControl([
        new SegmentItem({
          name: 'skus',
          title: Locale.value('PromotionPopup.SKUs'),
          controller: this.skusTable
        }), new SegmentItem({
          name: 'mechanics',
          title: Locale.value('PromotionPopup.Tactics'),
          controller: this.mechanicsTable
        }), new SegmentItem({
          name: 'tasks',
          title: Locale.value('PromotionPopup.Tasks'),
          controller: this.tasksTable
        }), new SegmentItem({
          name: 'attachments',
          title: Locale.value('PromotionPopup.Attachment'),
          controller: this.notesAttachmentsTable
        })
      ]);
      this.segmentControl.bind('segmentItemTap', this._segmentItemTap);
      return this.segmentControl.el.insertBefore(this.elSegmentHolder);
    };

    PromotionPopup.prototype._initSegmentItems = function() {
      var tables;
      tables = [];
      tables.push(this.skusTable = new SkusPopupTable);
      tables.push(this.mechanicsTable = new MechanicsPopupTable);
      tables.push(this.tasksTable = new TasksPopupTable);
      tables.push(this.notesAttachmentsTable = new NotesAttachmentsPopupTable);
      return tables.forEach((function(_this) {
        return function(table) {
          return _this.elSegmentHolder.append(table.el);
        };
      })(this));
    };

    PromotionPopup.prototype._segmentItemTap = function() {
      return this.elSegmentHolder.scrollTop(0);
    };

    PromotionPopup.prototype._fetchPromotionsForOrganizationWithId = function(orgId) {
      return new PromotionAccountsCollection().getActualPromotionsForAccount(orgId, moment());
    };

    PromotionPopup.prototype._initPromotionIterator = function(promotions) {
      return this.promotionIterator = new Iterator(promotions);
    };

    PromotionPopup.prototype._initPageControl = function(promotions) {
      this.pageControl = new PageControl(promotions.length);
      this.pageControl.refreshByActivePageIndex(0);
      this.pageControl.on('pageControlItemTap', (function(_this) {
        return function(pageControlItem) {
          return _this._moveToPageAtIndex(pageControlItem.index);
        };
      })(this));
      return this.elFooter.append(this.pageControl.el);
    };

    PromotionPopup.prototype._refreshPopup = function() {
      var promotionSfId;
      this.elUserName.html(this.appointment.contactFullName());
      this._fillGenralInfo();
      promotionSfId = this.promotionIterator.currentItem().promotionSfId;
      return $.when(this.tasksTable.refreshTableByPromoId(this.promotionIterator.currentItem().id, this.mechanicsTable.refreshTableByPromoId(promotionSfId, this.skusTable.refreshTableByPromoId(promotionSfId, this.notesAttachmentsTable.refreshTableByPromoId(promotionSfId)))));
    };

    PromotionPopup.prototype._fillGenralInfo = function() {
      var currentPromo, ref, ref1, ref2, ref3, ref4, ref5;
      currentPromo = this.promotionIterator.currentItem();
      this.elGeneralInfoTitle.text((ref = currentPromo.name) != null ? ref : '');
      this.elContractNumber.text((ref1 = currentPromo.contractNumber) != null ? ref1 : '');
      this.elStartDate.text((ref2 = Utils.dotFormatDate(new Date(currentPromo.startDate))) != null ? ref2 : '');
      this.elEndDate.text((ref3 = Utils.dotFormatDate(new Date(currentPromo.endDate))) != null ? ref3 : '');
      this.elObjectives.text((ref4 = currentPromo.objectives) != null ? ref4 : '');
      return this.elDescription.text((ref5 = currentPromo.description) != null ? ref5 : '');
    };

    PromotionPopup.prototype._moveToPageAtIndex = function(index) {
      if (this.promotionIterator.currentIndex() === index) {
        return;
      }
      this.promotionIterator.setCurrentIndex(index);
      this.pageControl.refreshByActivePageIndex(index);
      return this._refreshPopup();
    };

    PromotionPopup.prototype._bindEvents = function() {
      PromotionPopup.__super__._bindEvents.apply(this, arguments);
      this.elCross.bind('tap', this.hide);
      this.closeNote.bind('tap', this._hideNote);
      this.notesAttachmentsTable.bind('showNote', this._onShowNote);
      this._initSwipeRightGesture();
      return this._initSwipeLeftGesture();
    };

    PromotionPopup.prototype._onShowNote = function(noteCell) {
      var ref, ref1;
      this.noteTitle.text(((ref = noteCell.note) != null ? ref.title : void 0) || '');
      this.noteBody[0].innerText = ((ref1 = noteCell.note) != null ? ref1.body : void 0) || '';
      return this._showNote();
    };

    PromotionPopup.prototype._preventDefault = function(event) {
      if (this.elScrollContent.height() === this.elScrollContainer.height()) {
        return event.preventDefault();
      }
    };

    PromotionPopup.prototype._initSwipeRightGesture = function() {
      return this.elContent.bind('swiperight', (function(_this) {
        return function() {
          if (!_this.promotionIterator.hasNext()) {
            return;
          }
          _this.promotionIterator.next();
          _this.pageControl.refreshByActivePageIndex(_this.promotionIterator.currentIndex());
          return _this._refreshPopup();
        };
      })(this));
    };

    PromotionPopup.prototype._initSwipeLeftGesture = function() {
      return this.elContent.bind('swipeleft', (function(_this) {
        return function() {
          if (!_this.promotionIterator.hasPrev()) {
            return;
          }
          _this.promotionIterator.prev();
          _this.pageControl.refreshByActivePageIndex(_this.promotionIterator.currentIndex());
          return _this._refreshPopup();
        };
      })(this));
    };

    PromotionPopup.prototype._showNote = function() {
      return this.el.addClass('show-note');
    };

    PromotionPopup.prototype._hideNote = function() {
      return this.el.removeClass('show-note');
    };

    return PromotionPopup;

  })(BasePopup);

  module.exports = PromotionPopup;

}).call(this);
}, "controls/popups/promotion-popup/skus-popup-table": function(exports, require, module) {(function() {
  var PromotionSkusCollection, SkusPopupTable, TableCell, TableController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/table-controller');

  TableCell = require('controls/table/table-cell');

  PromotionSkusCollection = require('models/bll/promotion-skus-collection');

  SkusPopupTable = (function(superClass) {
    extend(SkusPopupTable, superClass);

    SkusPopupTable.prototype.className = SkusPopupTable.prototype.className + " skus-popup-table";

    function SkusPopupTable() {
      SkusPopupTable.__super__.constructor.call(this, this);
      this.skusCollection = new PromotionSkusCollection;
      this.skus = [];
    }

    SkusPopupTable.prototype.refreshTableByPromoId = function(promoId) {
      return this.skusCollection.getAllSkusForPromotionWithId(promoId).then((function(_this) {
        return function(skus) {
          _this.skus = skus;
          if (_.isEmpty(_this.skus)) {
            return _this._renderEmptyTable(_this.el, Locale.value('tradeModule.Skus.NoSkus'));
          } else {
            return _this.render().el.removeClass('empty-table');
          }
        };
      })(this));
    };

    SkusPopupTable.prototype._renderEmptyTable = function(tableElement, text) {
      return tableElement.addClass('empty-table').html("<p>" + text + "</p>");
    };

    SkusPopupTable.prototype.numberOfRowsForTable = function(table) {
      var ref, ref1;
      return (ref = (ref1 = this.skus) != null ? ref1.length : void 0) != null ? ref : 0;
    };

    SkusPopupTable.prototype.cellForRowAtIndexForTable = function(index, table) {
      return this._createTableCell(this.skus[index]);
    };

    SkusPopupTable.prototype._createTableCell = function(sku) {
      return new TableCell(sku.productItemName);
    };

    return SkusPopupTable;

  })(TableController);

  module.exports = SkusPopupTable;

}).call(this);
}, "controls/popups/promotion-popup/tasks-popup-table": function(exports, require, module) {(function() {
  var PromotionTaskAccountsCollection, TableCell, TableController, TasksPopupTable,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TableController = require('controls/table/table-controller');

  TableCell = require('controls/table/table-cell');

  PromotionTaskAccountsCollection = require('models/bll/promotion-task-accounts-collection');

  TasksPopupTable = (function(superClass) {
    extend(TasksPopupTable, superClass);

    TasksPopupTable.prototype.className = TasksPopupTable.prototype.className + " tasks-popup-table";

    function TasksPopupTable() {
      TasksPopupTable.__super__.constructor.call(this, this);
      this.tasksCollection = new PromotionTaskAccountsCollection;
      this.tasks = [];
    }

    TasksPopupTable.prototype.refreshTableByPromoId = function(promoId) {
      return this.tasksCollection.getBothRelatedAndNotRelatedToSkusTasks(promoId).then((function(_this) {
        return function(tasks) {
          _this.tasks = tasks;
          if (_.isEmpty(_this.tasks)) {
            return _this._renderEmptyTable(_this.el, Locale.value('tradeModule.PromotionTasks.NoPromotionTasks'));
          } else {
            return _this.render().el.removeClass('empty-table');
          }
        };
      })(this));
    };

    TasksPopupTable.prototype._renderEmptyTable = function(tableElement, text) {
      return tableElement.addClass('empty-table').html("<p>" + text + "</p>");
    };

    TasksPopupTable.prototype.numberOfRowsForTable = function(table) {
      var ref, ref1;
      return (ref = (ref1 = this.tasks) != null ? ref1.length : void 0) != null ? ref : 0;
    };

    TasksPopupTable.prototype.cellForRowAtIndexForTable = function(index, table) {
      return this._createTableCell(this.tasks[index]);
    };

    TasksPopupTable.prototype._createTableCell = function(task) {
      return new TableCell(task.taskName);
    };

    return TasksPopupTable;

  })(TableController);

  module.exports = TasksPopupTable;

}).call(this);
}, "controls/popups/simple-popup": function(exports, require, module) {(function() {
  var BasePopup, SimplePopup,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BasePopup = require('controls/popups/base-popup');

  SimplePopup = (function(superClass) {
    extend(SimplePopup, superClass);

    SimplePopup.prototype.className = SimplePopup.prototype.className + " simple-popup";

    function SimplePopup(content) {
      this.content = content;
      this._renderContent = bind(this._renderContent, this);
      SimplePopup.__super__.constructor.call(this, '');
    }

    SimplePopup.prototype._renderContent = function() {
      return this.elContent.text(this.content);
    };

    return SimplePopup;

  })(BasePopup);

  module.exports = SimplePopup;

}).call(this);
}, "controls/popups/sync-popup": function(exports, require, module) {(function() {
  var BasePopup, ProgressBar, Spine, SyncPopup,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  BasePopup = require('controls/popups/base-popup');

  ProgressBar = require('controls/progress-bar/progress-bar');

  SyncPopup = (function(superClass) {
    extend(SyncPopup, superClass);

    SyncPopup.prototype.className = 'popup sync';

    function SyncPopup() {
      this._bindEvents = bind(this._bindEvents, this);
      this._renderContent = bind(this._renderContent, this);
      SyncPopup.__super__.constructor.call(this, Locale.value('synchronizationPopup.Title'));
      this.progressBar = new ProgressBar;
    }

    SyncPopup.prototype._renderContent = function() {
      return this.elContent.html(this.progressBar.el);
    };

    SyncPopup.prototype._bindEvents = function() {
      return this.elOverflow.bind('touchmove', this._preventDefault);
    };

    SyncPopup.prototype.updateMessage = function(message, percentage) {
      if (percentage == null) {
        percentage = 0;
      }
      this.progressBar.setValue(percentage);
      return this.elHeader.html((Locale.value('synchronizationPopup.Title')) + " " + message);
    };

    return SyncPopup;

  })(BasePopup);

  module.exports = SyncPopup;

}).call(this);
}, "controls/progress-bar/progress-bar": function(exports, require, module) {(function() {
  var ProgressBar, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  ProgressBar = (function(superClass) {
    extend(ProgressBar, superClass);

    ProgressBar.prototype.className = 'progress-bar';

    ProgressBar.prototype.elements = {
      '.progress-fill': 'elFill',
      '.progress-value': 'elValue'
    };

    ProgressBar.prototype._template = function() {
      return require('views/controls/progress-bar/progress-bar');
    };

    function ProgressBar(value1, withoutTransition) {
      this.value = value1 != null ? value1 : 0;
      if (withoutTransition == null) {
        withoutTransition = false;
      }
      this.setValue = bind(this.setValue, this);
      ProgressBar.__super__.constructor.call(this, {});
      this.render();
      this.setValue(this.value, withoutTransition);
    }

    ProgressBar.prototype.render = function() {
      return this.html(this._template());
    };

    ProgressBar.prototype.setValue = function(value, withoutTransition) {
      if (withoutTransition == null) {
        withoutTransition = false;
      }
      this.value = value;
      if (withoutTransition) {
        this.elFill.addClass('no-transition');
      }
      this.elFill.css('width', this.value + "%");
      this.elValue.html(this.value + "%");
      if (withoutTransition) {
        return this.elFill.removeClass('no-transition');
      }
    };

    return ProgressBar;

  })(Spine.Controller);

  module.exports = ProgressBar;

}).call(this);
}, "controls/search/search": function(exports, require, module) {(function() {
  var Rx, Search, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  Rx = require('rx/dist/rx.lite');

  Search = (function(superClass) {
    extend(Search, superClass);

    Search.prototype.className = "search";

    Search.prototype.elements = {
      '.placeholder': 'elPlaceholder',
      'input': 'elInput',
      'button': 'elClear'
    };

    Search.prototype.events = {
      'input input': '_checkInput',
      'tap button': '_clearSearch',
      'tap': '_stopEvent',
      'touchstart input': '_stopEvent'
    };

    function Search(placeholder) {
      this.placeholder = placeholder != null ? placeholder : Locale.value('searchView.Placeholder');
      this._clearSearch = bind(this._clearSearch, this);
      this._search = bind(this._search, this);
      this._checkInput = bind(this._checkInput, this);
      this._focusInput = bind(this._focusInput, this);
      this._blurInput = bind(this._blurInput, this);
      Search.__super__.constructor.call(this, {});
    }

    Search.prototype._template = function() {
      return require('views/search/search')();
    };

    Search.prototype.render = function() {
      this.append(this._template());
      this.elPlaceholder.html(this.placeholder);
      this._subscribeObservable();
      this.elInput.on('focus', this._focusInput);
      return this;
    };

    Search.prototype._blurInput = function(event) {
      this.elInput.blur();
      return document.removeEventListener('touchstart', this._blurInput);
    };

    Search.prototype._focusInput = function(event) {
      return document.addEventListener('touchstart', this._blurInput);
    };

    Search.prototype._checkInput = function(event) {
      return this._refreshPlaceholder(event.target.value);
    };

    Search.prototype._search = function(value) {
      if (value) {
        return this.trigger('searchChanged', value);
      } else {
        return this.trigger('searchClear');
      }
    };

    Search.prototype._clearSearch = function() {
      if (this.getValue()) {
        this.elInput.val('');
        this._refreshPlaceholder();
        return this.trigger('searchClear');
      }
    };

    Search.prototype._refreshPlaceholder = function(value) {
      if (value) {
        return this.elPlaceholder.addClass('hidden');
      } else {
        return this.elPlaceholder.removeClass('hidden');
      }
    };

    Search.prototype._subscribeObservable = function() {
      return Rx.Observable.fromEvent(this.elInput, 'input').map(function(event) {
        return event.target.value;
      }).throttle(1000).distinctUntilChanged().subscribe(this._search);
    };

    Search.prototype._stopEvent = function(event) {
      return event.stopPropagation();
    };

    Search.prototype.getValue = function() {
      return this.elInput.val();
    };

    return Search;

  })(Spine.Controller);

  module.exports = Search;

}).call(this);
}, "controls/segment-control/segment-control": function(exports, require, module) {(function() {
  var SegmentControl, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  SegmentControl = (function(superClass) {
    extend(SegmentControl, superClass);

    SegmentControl.prototype.className = 'segment-control';

    function SegmentControl(segmentItems) {
      this.resetControllers = bind(this.resetControllers, this);
      SegmentControl.__super__.constructor.apply(this, arguments);
      segmentItems.forEach((function(_this) {
        return function(segmentItem, index) {
          segmentItem.on('segmentItemTap', function(sender) {
            if (!sender.isActive()) {
              sender.active();
              return _this.trigger('segmentItemTap', sender);
            }
          });
          segmentItem.stack = _this;
          _this[segmentItem.name] = segmentItem;
          return _this.add(segmentItem.render());
        };
      })(this));
      _.first(segmentItems).active();
    }

    SegmentControl.prototype.resetControllers = function() {
      var controller, i, len, ref, results;
      ref = this.manager.controllers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        controller = ref[i];
        results.push(controller.reset());
      }
      return results;
    };

    return SegmentControl;

  })(Spine.Stack);

  module.exports = SegmentControl;

}).call(this);
}, "controls/segment-control/segment-item": function(exports, require, module) {(function() {
  var SegmentItem, Spine,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  SegmentItem = (function(superClass) {
    extend(SegmentItem, superClass);

    SegmentItem.prototype.tag = 'button';

    SegmentItem.prototype.className = 'segment-item';

    SegmentItem.prototype.events = {
      'tap': '_onSegmentItemTap'
    };

    SegmentItem.prototype.name = null;

    SegmentItem.prototype.title = null;

    SegmentItem.prototype.controller = null;

    function SegmentItem() {
      SegmentItem.__super__.constructor.apply(this, arguments);
      this.wasControllerRendered = false;
    }

    SegmentItem.prototype._onSegmentItemTap = function(event) {
      return this.trigger('segmentItemTap', this);
    };

    SegmentItem.prototype.active = function() {
      SegmentItem.__super__.active.apply(this, arguments);
      this.render();
      if (!this.wasControllerRendered) {
        this.wasControllerRendered = true;
        return this.controller.active();
      } else {
        return this.activate();
      }
    };

    SegmentItem.prototype.activate = function() {
      SegmentItem.__super__.activate.apply(this, arguments);
      return this.controller.activate();
    };

    SegmentItem.prototype.deactivate = function() {
      SegmentItem.__super__.deactivate.apply(this, arguments);
      return this.controller.deactivate();
    };

    SegmentItem.prototype.render = function() {
      this.setTitle(this.title);
      return this;
    };

    SegmentItem.prototype.setTitle = function(title) {
      this.title = title;
      return this.html(this.title);
    };

    return SegmentItem;

  })(Spine.Controller);

  module.exports = SegmentItem;

}).call(this);
}, "controls/table/card-table": function(exports, require, module) {(function() {
  var CardTableController, Spine,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  CardTableController = (function(superClass) {
    extend(CardTableController, superClass);

    CardTableController.prototype.elements = {
      '.tbody': 'elTbody'
    };

    function CardTableController(datasource) {
      this.datasource = datasource;
      this._renderTableView = bind(this._renderTableView, this);
      CardTableController.__super__.constructor.call(this, {});
    }

    CardTableController.prototype.template = function() {
      return require('views/controls/table/table-controller')();
    };

    CardTableController.prototype.render = function() {
      this.html(this.template());
      Locale.localize(this.el);
      this.refresh();
      return this;
    };

    CardTableController.prototype.refresh = function() {
      return this._renderTableView();
    };

    CardTableController.prototype._renderTableView = function() {
      var results;
      if (this._numberOfRows() <= 0) {
        return;
      }
      this.rowIndex = 0;
      results = [];
      while (this.rowIndex < this._numberOfRows()) {
        results.push(this._renderTableRow());
      }
      return results;
    };

    CardTableController.prototype._renderTableRow = function() {
      var cell;
      cell = this._cellForRowAtIndex(this.rowIndex);
      this.elTbody.append(cell.el[0]);
      cell.render();
      return ++this.rowIndex;
    };

    CardTableController.prototype._numberOfRows = function() {
      return this.datasource.numberOfRowsForTable(this);
    };

    CardTableController.prototype._cellForRowAtIndex = function(index) {
      return this.datasource.cellForRowAtIndexForTable(index, this);
    };

    return CardTableController;

  })(Spine.Controller);

  module.exports = CardTableController;

}).call(this);
}, "controls/table/table-cell": function(exports, require, module) {(function() {
  var Spine, TableCell,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TableCell = (function(superClass) {
    extend(TableCell, superClass);

    TableCell.prototype.className = 'table-cell';

    TableCell.prototype.elements = {
      '.title': 'elTitle',
      'td.cell-container': 'elContainer'
    };

    function TableCell(title) {
      this.title = title;
      TableCell.__super__.constructor.call(this, {});
    }

    TableCell.prototype.template = function() {
      return require('views/controls/table/table-cell')();
    };

    TableCell.prototype.render = function() {
      var ref;
      this.html(this.template());
      this.elTitle.html((ref = this.title) != null ? ref : '');
      return this;
    };

    TableCell.prototype.bindEvents = function() {};

    return TableCell;

  })(Spine.Controller);

  module.exports = TableCell;

}).call(this);
}, "controls/table/table-controller": function(exports, require, module) {(function() {
  var Spine, TableController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TableController = (function(superClass) {
    extend(TableController, superClass);

    TableController.prototype.className = 'tbody-holder scroll-container';

    TableController.prototype.elements = {
      '.tbody': 'elTableController'
    };

    function TableController(datasource) {
      this.datasource = datasource;
      this._renderTableView = bind(this._renderTableView, this);
      this._initializeTable = bind(this._initializeTable, this);
      TableController.__super__.constructor.call(this, {});
      infinity.config.PAGE_TO_SCREEN_RATIO = 3;
      infinity.config.SCROLL_THROTTLE = 350;
    }

    TableController.prototype.template = function() {
      return require('views/controls/table/table-controller')();
    };

    TableController.prototype.render = function() {
      this.html(this.template());
      this._initializeTable();
      this.refresh();
      return this;
    };

    TableController.prototype.refresh = function() {
      return this._renderTableView();
    };

    TableController.prototype._initializeTable = function() {
      var ref;
      this.rowIndex = 0;
      if ((ref = this.listView) != null) {
        ref.remove();
      }
      return this.listView = new infinity.ListView(this.elTableController, this.el);
    };

    TableController.prototype._renderTableView = function() {
      if (this._numberOfRows() <= 0) {
        return;
      }
      this._emptyCurrentCells();
      this.fragment = document.createDocumentFragment();
      while (this.rowIndex < this._numberOfRows()) {
        this._renderTableRow();
      }
      this._appendFragmentWithCells();
      return this._bindCellsEvents();
    };

    TableController.prototype._renderTableRow = function() {
      var cell;
      cell = this._cellForRowAtIndex(this.rowIndex);
      this.fragment.appendChild(cell.el[0]);
      cell.render();
      this.currentCells.push(cell);
      return ++this.rowIndex;
    };

    TableController.prototype._appendFragmentWithCells = function() {
      var container;
      container = document.createElement('div');
      container.appendChild(this.fragment);
      return this.listView.append($(container));
    };

    TableController.prototype._bindCellsEvents = function() {
      var cell, i, len, ref;
      ref = this.currentCells;
      for (i = 0, len = ref.length; i < len; i++) {
        cell = ref[i];
        cell.bindEvents();
      }
      return this._emptyCurrentCells();
    };

    TableController.prototype._emptyCurrentCells = function() {
      return this.currentCells = [];
    };

    TableController.prototype._numberOfRows = function() {
      return this.datasource.numberOfRowsForTable(this);
    };

    TableController.prototype._cellForRowAtIndex = function(index) {
      return this.datasource.cellForRowAtIndexForTable(index, this);
    };

    return TableController;

  })(Spine.Controller);

  module.exports = TableController;

}).call(this);
}, "controls/table/table-data-source": function(exports, require, module) {(function() {
  var TableDatasource;

  TableDatasource = (function() {
    function TableDatasource() {}

    TableDatasource.prototype.numberOfRowsForTable = function(table) {
      throw 'Should be overridden.';
    };

    TableDatasource.prototype.cellForObjectOnTable = function(object, table) {
      throw 'Should be overridden.';
    };

    TableDatasource.prototype.batchSize = function() {
      return 500;
    };

    TableDatasource.prototype.createCollection = function() {
      throw 'Should be overridden.';
    };

    TableDatasource.prototype.createTableHeaderItemsForModel = function(model) {
      throw 'Should be overridden.';
    };

    return TableDatasource;

  })();

  module.exports = TableDatasource;

}).call(this);
}, "controls/table/table-header/sorting-table-header-item": function(exports, require, module) {(function() {
  var SortingTableHeaderItem, Spine, TableHeaderItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Spine = require('spine');

  TableHeaderItem = require('controls/table/table-header/table-header-item');

  SortingTableHeaderItem = (function(superClass) {
    extend(SortingTableHeaderItem, superClass);

    SortingTableHeaderItem.prototype.className = SortingTableHeaderItem.prototype.className + " sort-filter";

    SortingTableHeaderItem.prototype.isSortable = true;

    SortingTableHeaderItem.prototype.isAsc = true;

    SortingTableHeaderItem.prototype.fields = null;

    function SortingTableHeaderItem() {
      var fields, title;
      title = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.title = title != null ? title : '';
      this.fields = fields;
      this._onTap = bind(this._onTap, this);
      SortingTableHeaderItem.__super__.constructor.apply(this, arguments);
      this.el.on('tap', this._onTap);
    }

    SortingTableHeaderItem.prototype.active = function() {
      SortingTableHeaderItem.__super__.active.apply(this, arguments);
      return this._toggleDirection(this.isAsc);
    };

    SortingTableHeaderItem.prototype.render = function() {
      this.html($(document.createElement('span')).html(this.title));
      return this;
    };

    SortingTableHeaderItem.prototype._onTap = function(event) {
      if (this.isActive()) {
        this.isAsc = !this.isAsc;
        return this._toggleDirection(this.isAsc);
      }
    };

    SortingTableHeaderItem.prototype._toggleDirection = function(isAsc) {
      if (!isAsc) {
        return this.el.addClass('desc');
      } else {
        return this.el.removeClass('desc');
      }
    };

    return SortingTableHeaderItem;

  })(TableHeaderItem);

  module.exports = SortingTableHeaderItem;

}).call(this);
}, "controls/table/table-header/table-header-item": function(exports, require, module) {(function() {
  var Spine, TableHeaderItem,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TableHeaderItem = (function(superClass) {
    extend(TableHeaderItem, superClass);

    TableHeaderItem.prototype.className = 'col';

    TableHeaderItem.prototype.title = '';

    function TableHeaderItem(title) {
      this.title = title != null ? title : '';
      TableHeaderItem.__super__.constructor.call(this, {});
      this.render();
    }

    TableHeaderItem.prototype.render = function() {
      this.html(this.title);
      return this;
    };

    return TableHeaderItem;

  })(Spine.Controller);

  module.exports = TableHeaderItem;

}).call(this);
}, "controls/table/table-header/table-headers-list": function(exports, require, module) {(function() {
  var Spine, TableHeadersList,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Spine = require('spine');

  TableHeadersList = (function(superClass) {
    extend(TableHeadersList, superClass);

    TableHeadersList.prototype.className = 'thead';

    TableHeadersList.prototype.elements = {
      '.row': 'elContainer'
    };

    TableHeadersList.prototype.activeController = null;

    function TableHeadersList(tableHeaderItems, defaultSortingHeader) {
      if (defaultSortingHeader == null) {
        defaultSortingHeader = null;
      }
      TableHeadersList.__super__.constructor.apply(this, arguments);
      this.render();
      tableHeaderItems.forEach((function(_this) {
        return function(tableHeaderItem) {
          _this.add(tableHeaderItem);
          if (tableHeaderItem.isSortable) {
            tableHeaderItem.el.on('tap', function(event) {
              return _this._onHeaderItemTap(tableHeaderItem);
            });
          }
          if (defaultSortingHeader && tableHeaderItem.title === defaultSortingHeader.title) {
            tableHeaderItem.isAsc = defaultSortingHeader.isAsc;
            return _this._activateHeader(tableHeaderItem);
          }
        };
      })(this));
    }

    TableHeadersList.prototype._onHeaderItemTap = function(headerItem) {
      return this._activateHeader(headerItem);
    };

    TableHeadersList.prototype._activateHeader = function(headerItem) {
      headerItem.active();
      this.activeController = headerItem;
      return this.trigger('headerItemTap', headerItem);
    };

    TableHeadersList.prototype.add = function(controller) {
      this.manager.add(controller);
      return this.elContainer.append(controller.el);
    };

    TableHeadersList.prototype.reset = function() {
      var ref;
      if ((ref = this.activeController) != null) {
        ref.deactivate();
      }
      return this.activeController = null;
    };

    TableHeadersList.prototype.template = function() {
      return require('views/controls/table/table-header')();
    };

    TableHeadersList.prototype.render = function() {
      this.html(this.template());
      return this;
    };

    return TableHeadersList;

  })(Spine.Stack);

  module.exports = TableHeadersList;

}).call(this);
}, "db/configuration-manager": function(exports, require, module) {(function() {
  var ConfigurationManager;

  ConfigurationManager = (function() {
    function ConfigurationManager() {}

    ConfigurationManager._configId = 1;

    ConfigurationManager._identityKey = 'id';

    ConfigurationManager._restPath = '/clmconfiguration';

    ConfigurationManager._soupName = 'Configuration';

    ConfigurationManager._indexSpec = [
      {
        path: ConfigurationManager._identityKey,
        type: 'string'
      }
    ];

    ConfigurationManager._initSoup = function() {
      return Force.smartstoreClient.soupExists(this._soupName).then((function(_this) {
        return function(soupExist) {
          if (!soupExist) {
            return Force.smartstoreClient.registerSoup(_this._soupName, _this._indexSpec);
          } else {
            return $.when();
          }
        };
      })(this));
    };

    ConfigurationManager.loadConfig = function() {
      return ConfigurationManager._initSoup().then(function() {
        return Force.forcetkClient.apexrest(ConfigurationManager._restPath, 'GET', '', {}).then(function(configurationData) {
          configurationData[ConfigurationManager._identityKey] = ConfigurationManager._configId;
          return Force.smartstoreClient.upsertSoupEntriesWithExternalId(ConfigurationManager._soupName, [configurationData], ConfigurationManager._identityKey);
        });
      });
    };

    ConfigurationManager.getConfig = function(segmentKey) {
      return ConfigurationManager._initSoup().then(function() {
        return Force.smartstoreClient.retrieveSoupEntries(ConfigurationManager._soupName, [ConfigurationManager._configId]).then(function(entities) {
          var config;
          config = entities.length ? entities[0] : null;
          if (segmentKey && config) {
            config = config[segmentKey];
          }
          return config;
        });
      });
    };

    return ConfigurationManager;

  })();

  module.exports = ConfigurationManager;

}).call(this);
}, "db/database-manager": function(exports, require, module) {(function() {
  var AlarmManager, AttachmentFileManager, Brick, BuTeamPersonProfile, CLMCallReportData, CallReport, Contact, DatabaseManager, Device, LocalImage, MarketingCycle, MarketingMessage, MechanicAdjustment, MechanicEvaluationAccount, Organization, PEAbbottAttendee, PEAttendee, PatientDisease, PharmaEvent, PhotoAdjustment, PhotoAttachment, PhotoAttachmentFileManager, PicklistManager, Presentation, PresentationFileManager, Product, ProductInPortfolio, ProductItem, ProfileProductInPortfolio, PromotionAccount, PromotionAttachment, PromotionMechanic, PromotionNote, PromotionSku, PromotionTaskAccount, Reference, Scenario, SettingsManager, SforceDataContext, Target, TargetFrequency, TaskAdjustment, Tot, User, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Utils = require('common/utils');

  BuTeamPersonProfile = require('models/bu-team-person-profile');

  CallReport = require('models/call-report');

  Contact = require('models/contact');

  MarketingCycle = require('models/marketing-cycle');

  MarketingMessage = require('models/marketing-message');

  Brick = require('models/brick');

  Organization = require('models/organization');

  PEAbbottAttendee = require('models/pe-abbott-attendee');

  PEAttendee = require('models/pe-attendee');

  PharmaEvent = require('models/pharma-event');

  Product = require('models/product');

  Reference = require('models/reference');

  TargetFrequency = require('models/target-frequency');

  Target = require('models/target');

  Tot = require('models/tot');

  User = require('models/user');

  Presentation = require('models/presentation');

  SettingsManager = require('db/settings-manager');

  PicklistManager = require('db/picklist-managers/picklist-manager');

  Device = require('models/device');

  SforceDataContext = require('models/bll/sforce-data-context');

  AlarmManager = require('common/alarm/alarm-manager');

  PresentationFileManager = require('common/presentation-managers/presentations-file-manager');

  AttachmentFileManager = require('common/attachment-managers/attachment-file-manager');

  PhotoAttachmentFileManager = require('common/attachment-managers/photo-attachment-file-manager');

  CLMCallReportData = require('models/clm-call-report-data');

  Scenario = require('models/scenario');

  PromotionAccount = require('models/promotion-account');

  PromotionTaskAccount = require('models/promotion-task-account');

  TaskAdjustment = require('models/task-adjustment');

  ProductItem = require('models/product-item');

  PromotionSku = require('models/promotion-sku');

  PromotionMechanic = require('models/promotion-mechanic');

  MechanicAdjustment = require('models/mechanic-adjustment');

  MechanicEvaluationAccount = require('models/mechanic-evaluation-account');

  PhotoAdjustment = require('models/photo-adjustment');

  PromotionNote = require('models/promotion-note');

  PromotionAttachment = require('models/promotion-attachment');

  PhotoAttachment = require('models/photo-attachment');

  LocalImage = require('models/local-image');

  ProductInPortfolio = require('models/product-in-portfolio');

  ProfileProductInPortfolio = require('models/profile-product-in-portfolio');

  PatientDisease = require('models/patient-disease');

  DatabaseManager = (function() {
    function DatabaseManager() {
      this._saveCurrentUser = bind(this._saveCurrentUser, this);
      this._isDifferentUserLoggedIn = bind(this._isDifferentUserLoggedIn, this);
      this._setupDatabase = bind(this._setupDatabase, this);
      this._clearPhotoAttachmentsStore = bind(this._clearPhotoAttachmentsStore, this);
      this._clearAttachmentsStore = bind(this._clearAttachmentsStore, this);
      this._clearPresentationsStore = bind(this._clearPresentationsStore, this);
      this._resetAlarmNotifications = bind(this._resetAlarmNotifications, this);
      this._clearPicklists = bind(this._clearPicklists, this);
      this._disablePortfolioModule = bind(this._disablePortfolioModule, this);
      this._disableTradeModule = bind(this._disableTradeModule, this);
      this._clearSettings = bind(this._clearSettings, this);
      this._createSoup = bind(this._createSoup, this);
      this._dropSoup = bind(this._dropSoup, this);
      this._clearDBSchemaModels = bind(this._clearDBSchemaModels, this);
      this.clearDatabase = bind(this.clearDatabase, this);
      this.initializeDatabase = bind(this.initializeDatabase, this);
    }

    DatabaseManager.prototype.models = [BuTeamPersonProfile, CallReport, Contact, MarketingCycle, MarketingMessage, Brick, Organization, PEAbbottAttendee, PEAttendee, PharmaEvent, Product, Reference, TargetFrequency, Target, Tot, User, Presentation, Device, CLMCallReportData, Scenario, PromotionAccount, PromotionTaskAccount, TaskAdjustment, ProductItem, PromotionSku, PromotionMechanic, MechanicAdjustment, MechanicEvaluationAccount, PhotoAdjustment, PromotionNote, PromotionAttachment, PhotoAttachment, LocalImage, ProductInPortfolio, ProfileProductInPortfolio, PatientDisease];

    DatabaseManager.prototype.initializeDatabase = function() {
      return this._isDifferentUserLoggedIn().then((function(_this) {
        return function(isDifferentUser) {
          if (isDifferentUser) {
            return _this.clearDatabase().then(_this._clearSettings).then(_this._disableTradeModule).then(_this._disablePortfolioModule);
          } else {
            return _this._setupDatabase();
          }
        };
      })(this)).then(this._saveCurrentUser);
    };

    DatabaseManager.prototype.clearDatabase = function() {
      return this._clearDBSchemaModels().then(this._clearPicklists).then(this._resetAlarmNotifications).then(this._clearPresentationsStore).then(this._clearAttachmentsStore).then(this._clearPhotoAttachmentsStore).then(SforceDataContext.cleanup);
    };

    DatabaseManager.prototype._clearDBSchemaModels = function() {
      return Utils.runSimultaneously(_(this.models).map((function(_this) {
        return function(model) {
          return _this._dropSoup(model);
        };
      })(this)));
    };

    DatabaseManager.prototype._dropSoup = function(model) {
      return Force.smartstoreClient.soupExists(model.table).then((function(_this) {
        return function(soupExists) {
          if (soupExists) {
            return Force.smartstoreClient.removeSoup(model.table);
          }
        };
      })(this)).done((function(_this) {
        return function() {
          return _this._createSoup(model);
        };
      })(this));
    };

    DatabaseManager.prototype._createSoup = function(model) {
      var cache;
      model.mapModel();
      cache = new Force.StoreCache(model.table, model.indexSpec);
      return Force.smartstoreClient.soupExists(model.table).then((function(_this) {
        return function(soupExists) {
          if (!soupExists) {
            return cache.init();
          }
        };
      })(this));
    };

    DatabaseManager.prototype._clearSettings = function() {
      return SettingsManager.clearData();
    };

    DatabaseManager.prototype._disableTradeModule = function() {
      return SettingsManager.setValueByKey('isTradeModuleEnabled', false);
    };

    DatabaseManager.prototype._disablePortfolioModule = function() {
      return SettingsManager.setValueByKey('isPortfolioSellingModuleEnabled', false);
    };

    DatabaseManager.prototype._clearPicklists = function() {
      return PicklistManager.clearData();
    };

    DatabaseManager.prototype._resetAlarmNotifications = function() {
      return AlarmManager.cancelNotification();
    };

    DatabaseManager.prototype._clearPresentationsStore = function() {
      return PresentationFileManager.wipePresentationsStore();
    };

    DatabaseManager.prototype._clearAttachmentsStore = function() {
      return AttachmentFileManager.wipeStorage();
    };

    DatabaseManager.prototype._clearPhotoAttachmentsStore = function() {
      return PhotoAttachmentFileManager.wipeStorage();
    };

    DatabaseManager.prototype._setupDatabase = function() {
      return Utils.runSimultaneously(_(this.models).map((function(_this) {
        return function(model) {
          return _this._createSoup(model);
        };
      })(this)));
    };

    DatabaseManager.prototype._isDifferentUserLoggedIn = function() {
      return SettingsManager.getValueByKey('UserId').then(function(userId) {
        return userId !== Force.userId && (userId != null);
      });
    };

    DatabaseManager.prototype._saveCurrentUser = function() {
      return SettingsManager.setValueByKey('UserId', Force.userId);
    };

    return DatabaseManager;

  })();

  module.exports = DatabaseManager;

}).call(this);
}, "db/picklist-managers/callreport-picklist-manager": function(exports, require, module) {(function() {
  var CallReport, CallReportPickListManager, PicklistDatasourceManager,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PicklistDatasourceManager = require('db/picklist-managers/picklist-datasource-manager');

  CallReport = require('models/call-report');

  CallReportPickListManager = (function(superClass) {
    extend(CallReportPickListManager, superClass);

    function CallReportPickListManager() {
      return CallReportPickListManager.__super__.constructor.apply(this, arguments);
    }

    CallReportPickListManager.prototype.targetModel = function() {
      return CallReport;
    };

    CallReportPickListManager.prototype.fieldNames = function() {
      return [CallReport.sfdc.type, CallReport.sfdc.jointVisit, CallReport.sfdc.typeOfVisit];
    };

    return CallReportPickListManager;

  })(PicklistDatasourceManager);

  module.exports = CallReportPickListManager;

}).call(this);
}, "db/picklist-managers/pe-picklist-manager": function(exports, require, module) {(function() {
  var PePicklistManager, PharmaEvent, PicklistDatasourceManager,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PicklistDatasourceManager = require('db/picklist-managers/picklist-datasource-manager');

  PharmaEvent = require('models/pharma-event');

  PePicklistManager = (function(superClass) {
    extend(PePicklistManager, superClass);

    function PePicklistManager() {
      return PePicklistManager.__super__.constructor.apply(this, arguments);
    }

    PePicklistManager.prototype.targetModel = function() {
      return PharmaEvent;
    };

    PePicklistManager.prototype.fieldNames = function() {
      return [PharmaEvent.sfdc.stage, PharmaEvent.sfdc.eventType, PharmaEvent.sfdc.status];
    };

    return PePicklistManager;

  })(PicklistDatasourceManager);

  module.exports = PePicklistManager;

}).call(this);
}, "db/picklist-managers/picklist-datasource-manager": function(exports, require, module) {(function() {
  var Locale, PicklistDatasourceManager, PicklistManager;

  PicklistManager = require('db/picklist-managers/picklist-manager');

  Locale = require('common/localization/locale');

  PicklistDatasourceManager = (function() {
    function PicklistDatasourceManager() {}

    PicklistDatasourceManager.prototype.targetModel = function() {
      throw 'Should be overridden';
    };

    PicklistDatasourceManager.prototype.fieldNames = function() {
      throw 'Should be overridden';
    };

    PicklistDatasourceManager.prototype.getPickLists = function() {
      return PicklistManager.getPicklist(this.targetModel().sfdcTable, this.fieldNames()).then(function(pickLists1) {
        this.pickLists = pickLists1;
        return this.pickLists;
      });
    };

    PicklistDatasourceManager.prototype.getPickList = function(pickListName) {
      return this.getPickLists().then(function(pickLists) {
        return pickLists[pickListName];
      });
    };

    PicklistDatasourceManager.prototype.getLabelByValue = function(pickListName, value) {
      return this.getPickList(pickListName).then(function(pickList) {
        return _(pickList).find(function(element) {
          return element.value === value;
        });
      }).then(function(element) {
        if (element) {
          return element.label || element.value;
        } else if (value === false) {
          return Locale.value('common:defaultSelectValue');
        } else {
          return value;
        }
      });
    };

    return PicklistDatasourceManager;

  })();

  module.exports = PicklistDatasourceManager;

}).call(this);
}, "db/picklist-managers/picklist-manager": function(exports, require, module) {(function() {
  var PicklistManager, Query;

  Query = require('common/query');

  PicklistManager = (function() {
    function PicklistManager() {}

    PicklistManager._restPath = '/picklist';

    PicklistManager._soupName = 'PickList';

    PicklistManager._identityKey = 'objectFieldName';

    PicklistManager._indexSpec = [
      {
        path: PicklistManager._identityKey,
        type: 'string'
      }
    ];

    PicklistManager._initSoup = function() {
      return Force.smartstoreClient.soupExists(this._soupName).then((function(_this) {
        return function(soupExist) {
          if (!soupExist) {
            return Force.smartstoreClient.registerSoup(_this._soupName, _this._indexSpec);
          } else {
            return $.when();
          }
        };
      })(this));
    };

    PicklistManager._getRequestParams = function(objectType, fieldNames) {
      var params;
      params = {
        'sobjectType': objectType,
        'pickListFieldAPINames': fieldNames
      };
      return JSON.stringify(params);
    };

    PicklistManager._composeIdentityKey = function(keyComponents) {
      if (keyComponents == null) {
        keyComponents = [];
      }
      return keyComponents.join(':');
    };

    PicklistManager._processBeforeSave = function(pickListObject) {
      return _.map(pickListObject.picklists, (function(_this) {
        return function(listItem) {
          listItem[_this._identityKey] = _this._composeIdentityKey([pickListObject['objectName'], listItem['fieldName']]);
          return listItem;
        };
      })(this));
    };

    PicklistManager._generateSearchCriterias = function(objectType, fieldNames) {
      return _.map(fieldNames, (function(_this) {
        return function(fieldName) {
          return _this._composeIdentityKey([objectType, fieldName]);
        };
      })(this));
    };

    PicklistManager._generateFetchQuery = function(objectType, fieldNames) {
      var criterias, query;
      criterias = this._generateSearchCriterias(objectType, fieldNames);
      query = new Query(this._soupName);
      query.selectFrom(this._soupName).whereIn(this._identityKey, criterias);
      return navigator.smartstore.buildSmartQuerySpec(query.toString());
    };

    PicklistManager._processResult = function(pickListCollection) {
      var result;
      result = {};
      _.each(pickListCollection['currentPageOrderedEntries'], function(group) {
        return _.each(group, function(pickListGroup) {
          return result[pickListGroup['fieldName']] = pickListGroup['picklistOptions'];
        });
      });
      return result;
    };

    PicklistManager.loadPicklist = function(objectType, fieldNames) {
      if (fieldNames == null) {
        fieldNames = [];
      }
      return PicklistManager._initSoup().then(function() {
        var fieldParams;
        fieldParams = PicklistManager._getRequestParams(objectType, fieldNames);
        return Force.forcetkClient.apexrest(PicklistManager._restPath, 'POST', fieldParams, {}).then(function(pickListObject) {
          pickListObject = PicklistManager._processBeforeSave(pickListObject);
          return Force.smartstoreClient.upsertSoupEntriesWithExternalId(PicklistManager._soupName, pickListObject, PicklistManager._identityKey);
        });
      });
    };

    PicklistManager.getPicklist = function(objectType, fieldNames) {
      if (fieldNames == null) {
        fieldNames = [];
      }
      return Force.smartstoreClient.soupExists(PicklistManager._soupName).then(function(soupExist) {
        var searchQuery;
        if (soupExist) {
          searchQuery = PicklistManager._generateFetchQuery(objectType, fieldNames);
          return Force.smartstoreClient.runSmartQuery(searchQuery).then(function(pickListCollection) {
            pickListCollection = PicklistManager._processResult(pickListCollection);
            return $.when(pickListCollection);
          });
        } else {
          return $.when([]);
        }
      });
    };

    PicklistManager.clearData = function() {
      return Force.smartstoreClient.soupExists(this._soupName).then((function(_this) {
        return function(soupExists) {
          if (soupExists) {
            return Force.smartstoreClient.removeSoup(_this._soupName);
          }
        };
      })(this)).done((function(_this) {
        return function() {
          return _this._initSoup;
        };
      })(this));
    };

    return PicklistManager;

  })();

  module.exports = PicklistManager;

}).call(this);
}, "db/picklist-managers/promotion-picklist-manager": function(exports, require, module) {(function() {
  var PicklistDatasourceManager, Promotion, PromotionPickListManager,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PicklistDatasourceManager = require('db/picklist-managers/picklist-datasource-manager');

  Promotion = (function() {
    function Promotion() {}

    Promotion.sfdcTable = 'TM_Promotion__c';

    Promotion.table = 'Promotion';

    Promotion.status = 'Status__c';

    return Promotion;

  })();

  PromotionPickListManager = (function(superClass) {
    extend(PromotionPickListManager, superClass);

    function PromotionPickListManager() {
      return PromotionPickListManager.__super__.constructor.apply(this, arguments);
    }

    PromotionPickListManager.prototype.targetModel = function() {
      return Promotion;
    };

    PromotionPickListManager.prototype.fieldNames = function() {
      return [Promotion.status];
    };

    PromotionPickListManager.prototype.getStatusLabelByValue = function(value) {
      return this.getPickLists().then((function(_this) {
        return function() {
          return _this.getLabelByValue(Promotion.status, value);
        };
      })(this));
    };

    return PromotionPickListManager;

  })(PicklistDatasourceManager);

  module.exports = PromotionPickListManager;

}).call(this);
}, "db/picklist-managers/reference-picklist-manager": function(exports, require, module) {(function() {
  var PicklistDatasourceManager, Reference, ReferencePicklistManager,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PicklistDatasourceManager = require('db/picklist-managers/picklist-datasource-manager');

  Reference = require('models/reference');

  ReferencePicklistManager = (function(superClass) {
    extend(ReferencePicklistManager, superClass);

    function ReferencePicklistManager() {
      return ReferencePicklistManager.__super__.constructor.apply(this, arguments);
    }

    ReferencePicklistManager.prototype.targetModel = function() {
      return Reference;
    };

    ReferencePicklistManager.prototype.fieldNames = function() {
      return [Reference.sfdc.status];
    };

    ReferencePicklistManager.prototype.getStatusLabelByValue = function(value) {
      return this.getPickLists().then((function(_this) {
        return function() {
          return _this.getLabelByValue(Reference.sfdc.status, value);
        };
      })(this));
    };

    return ReferencePicklistManager;

  })(PicklistDatasourceManager);

  module.exports = ReferencePicklistManager;

}).call(this);
}, "db/picklist-managers/tot-picklist-manager": function(exports, require, module) {(function() {
  var PicklistDatasourceManager, Tot, TotPicklistManager,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PicklistDatasourceManager = require('db/picklist-managers/picklist-datasource-manager');

  Tot = require('models/tot');

  TotPicklistManager = (function(superClass) {
    extend(TotPicklistManager, superClass);

    function TotPicklistManager() {
      return TotPicklistManager.__super__.constructor.apply(this, arguments);
    }

    TotPicklistManager.prototype.targetModel = function() {
      return Tot;
    };

    TotPicklistManager.prototype.fieldNames = function() {
      return [Tot.sfdc.firstQuarterEvent, Tot.sfdc.type];
    };

    return TotPicklistManager;

  })(PicklistDatasourceManager);

  module.exports = TotPicklistManager;

}).call(this);
}, "db/settings-manager": function(exports, require, module) {(function() {
  var Query, SettingsManager, Utils;

  Query = require('common/query');

  Utils = require('common/utils');

  SettingsManager = (function() {
    function SettingsManager() {}

    SettingsManager._soupName = 'Settings';

    SettingsManager._identityKey = 'key';

    SettingsManager._indexSpec = [
      {
        path: SettingsManager._identityKey,
        type: 'string'
      }
    ];

    SettingsManager._mapSetting = function(key, value) {
      var setting;
      setting = {};
      setting[this._identityKey] = key;
      setting.value = value;
      return setting;
    };

    SettingsManager._fetchByKeyQuery = function(key) {
      var query, whereCondition;
      whereCondition = {};
      whereCondition[this._identityKey] = key;
      query = new Query();
      query.selectFrom(this._soupName).where(whereCondition);
      return Force.smartstoreClient.impl.buildSmartQuerySpec(query.toString());
    };

    SettingsManager._parseResponse = function(response) {
      var entities, setting;
      entities = response.currentPageOrderedEntries.reduce((function(result, segment) {
        return result.concat(segment);
      }), []);
      setting = entities.length ? entities[0].value : null;
      return $.when(setting);
    };

    SettingsManager._initSoup = function() {
      return Force.smartstoreClient.soupExists(this._soupName).then((function(_this) {
        return function(soupExist) {
          if (!soupExist) {
            return Force.smartstoreClient.registerSoup(_this._soupName, _this._indexSpec);
          } else {
            return $.when();
          }
        };
      })(this));
    };

    SettingsManager.setValueByKey = function(key, value) {
      return SettingsManager._initSoup().then(function() {
        var setting;
        setting = SettingsManager._mapSetting(key, value);
        return Force.smartstoreClient.upsertSoupEntriesWithExternalId(SettingsManager._soupName, [setting], SettingsManager._identityKey);
      });
    };

    SettingsManager.getValueByKey = function(key) {
      return SettingsManager._initSoup().then(function() {
        var query;
        query = SettingsManager._fetchByKeyQuery(key);
        return Force.smartstoreClient.runSmartQuery(query).then(SettingsManager._parseResponse);
      });
    };

    SettingsManager.clearData = function() {
      return Force.smartstoreClient.soupExists(this._soupName).then((function(_this) {
        return function(soupExists) {
          if (soupExists) {
            return Force.smartstoreClient.removeSoup(_this._soupName);
          }
        };
      })(this)).done((function(_this) {
        return function() {
          return _this._initSoup;
        };
      })(this));
    };

    SettingsManager.getTourPlanningSettings = function() {
      return SettingsManager.getValueByKey('tourPlanningSettings').then(function(settings) {
        var defaultBreakTimeValue, defaultDuration, defaultDurationValue, defaultLunchEndValue, defaultLunchStartValue, duration;
        defaultDuration = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 90, 120, 240, 300, 480];
        defaultBreakTimeValue = (settings['defaultBreakTimeValue'] && parseInt(settings['defaultBreakTimeValue'])) || 15;
        defaultDurationValue = (settings['defaultDurationValue'] && parseInt(settings['defaultDurationValue'])) || 30;
        defaultLunchStartValue = Utils.timeFromString(settings['defaultLunchStartValue'] || '13:00');
        defaultLunchEndValue = Utils.timeFromString(settings['defaultLunchEndValue'] || '14:00');
        if (!settings['duration']) {
          duration = defaultDuration;
        } else {
          duration = settings['duration'].split(',').map(function(value) {
            return parseInt(value);
          });
          if (!duration.length) {
            duration = defaultDuration;
          }
        }
        return $.when({
          breakDuration: moment({
            minutes: defaultBreakTimeValue
          }),
          callDuration: moment({
            minutes: defaultDurationValue
          }),
          lunchTimeStart: defaultLunchStartValue,
          lunchTimeEnd: defaultLunchEndValue,
          lastVisitTimeEnd: moment({
            hours: 20,
            minutes: 0
          }),
          duration: duration
        });
      });
    };

    SettingsManager.setLastSucceededSyncDateTime = function(lastSyncDate) {
      return this.setValueByKey("lastSyncDate", lastSyncDate);
    };

    SettingsManager.getLastSucceededSyncDateTime = function(lastSyncDate) {
      return this.getValueByKey("lastSyncDate");
    };

    return SettingsManager;

  })();

  module.exports = SettingsManager;

}).call(this);
}, "db/trade-module-managers/promo-adjustment-base-manager": function(exports, require, module) {(function() {
  var PhotoAdjustmentsCollection, PromoAdjustmentBaseManager, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  Utils = require('common/utils');

  PromoAdjustmentBaseManager = (function() {
    function PromoAdjustmentBaseManager(promoAdjustment) {
      this.promoAdjustment = promoAdjustment;
      this._removePhotoEntities = bind(this._removePhotoEntities, this);
      this._resetMechanics = bind(this._resetMechanics, this);
      this._resetTaskSkus = bind(this._resetTaskSkus, this);
      this._resetTasks = bind(this._resetTasks, this);
      this._resetPhotos = bind(this._resetPhotos, this);
      this.resetChanges = bind(this.resetChanges, this);
      this._saveMechanics = bind(this._saveMechanics, this);
      this._saveTaskSkus = bind(this._saveTaskSkus, this);
      this._saveTasks = bind(this._saveTasks, this);
      this._savePhotos = bind(this._savePhotos, this);
      this.saveChanges = bind(this.saveChanges, this);
      this.runSimultaneouslyForCollection = bind(this.runSimultaneouslyForCollection, this);
      this.photos = this.promoAdjustment.photos;
      this.tasks = this.promoAdjustment.tasks;
      this.taskSkus = this.promoAdjustment.taskSkus;
      this.mechanics = this.promoAdjustment.mechanics;
      this.callReport = this.promoAdjustment.callReport;
      this.callReportLocalId = this.promoAdjustment.callReport.attributes._soupEntryId;
      this.callReportExternalId = this.promoAdjustment.callReport.id;
    }

    PromoAdjustmentBaseManager.prototype.runSimultaneouslyForCollection = function(collection, forEachItem) {
      return Utils.runSimultaneously(_.map(collection, forEachItem));
    };

    PromoAdjustmentBaseManager.prototype.saveChanges = function() {
      return this._savePhotos().then(this._saveTasks).then(this._saveTaskSkus).then(this._saveMechanics);
    };

    PromoAdjustmentBaseManager.prototype._savePhotos = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype._saveTasks = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype._saveTaskSkus = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype._saveMechanics = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype.resetChanges = function() {
      return this._resetPhotos().then(this._resetTasks).then(this._resetTaskSkus).then(this._resetMechanics);
    };

    PromoAdjustmentBaseManager.prototype._resetPhotos = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype._resetTasks = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype._resetTaskSkus = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype._resetMechanics = function() {
      return $.when();
    };

    PromoAdjustmentBaseManager.prototype._removePhotoEntities = function(photoAdjustmentsToRemove) {
      var photoAdjustmentsCollection;
      photoAdjustmentsCollection = new PhotoAdjustmentsCollection;
      return photoAdjustmentsCollection.getLocalImagesByAdjustments(photoAdjustmentsToRemove).then((function(_this) {
        return function(promotionAttachmentImages) {
          return _this.runSimultaneouslyForCollection(photoAdjustmentsToRemove, function(photoAdjustment) {
            _this.promoAdjustment.removePhoto(photoAdjustment);
            return photoAdjustmentsCollection.removePhoto(photoAdjustment, promotionAttachmentImages[photoAdjustment.id]);
          });
        };
      })(this));
    };

    return PromoAdjustmentBaseManager;

  })();

  module.exports = PromoAdjustmentBaseManager;

}).call(this);
}, "db/trade-module-managers/promo-adjustment-call-manager": function(exports, require, module) {(function() {
  var MechanicAdjustmentsCollection, MechanicEvaluationAccountsCollection, PhotoAdjustmentsCollection, PromoAdjustmentBaseManager, PromoAdjustmentCallManager, PromotionTaskAccountsCollection, TaskAdjustmentsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PromoAdjustmentBaseManager = require('db/trade-module-managers/promo-adjustment-base-manager');

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');

  MechanicAdjustmentsCollection = require('models/bll/mechanic-adjustments-collection');

  PromotionTaskAccountsCollection = require('models/bll/promotion-task-accounts-collection');

  MechanicEvaluationAccountsCollection = require('models/bll/mechanic-evaluation-accounts-collection');

  PromoAdjustmentCallManager = (function(superClass) {
    extend(PromoAdjustmentCallManager, superClass);

    function PromoAdjustmentCallManager() {
      this._resetMechanics = bind(this._resetMechanics, this);
      this._removeTasksFromAdjustmentsList = bind(this._removeTasksFromAdjustmentsList, this);
      this._resetTaskSkus = bind(this._resetTaskSkus, this);
      this._resetTasks = bind(this._resetTasks, this);
      this._resetPhotos = bind(this._resetPhotos, this);
      this._incrementActualCallReports = bind(this._incrementActualCallReports, this);
      this._clearEmptyAdjustments = bind(this._clearEmptyAdjustments, this);
      this._saveMechanics = bind(this._saveMechanics, this);
      this._saveTaskSkus = bind(this._saveTaskSkus, this);
      this._saveTasks = bind(this._saveTasks, this);
      this._savePhotos = bind(this._savePhotos, this);
      return PromoAdjustmentCallManager.__super__.constructor.apply(this, arguments);
    }

    PromoAdjustmentCallManager.prototype._savePhotos = function() {
      var photoAdjustmentsCollection;
      photoAdjustmentsCollection = new PhotoAdjustmentsCollection;
      return this.runSimultaneouslyForCollection(this.photos, (function(_this) {
        return function(photoAdjustment) {
          photoAdjustment.callReportSfId = _this.callReportLocalId;
          photoAdjustment.isModifiedInCall = false;
          return photoAdjustmentsCollection.updateEntity(photoAdjustment);
        };
      })(this));
    };

    PromoAdjustmentCallManager.prototype._saveTasks = function() {
      return this._callReportSaveTasksToAdjustmentsList(this.tasks);
    };

    PromoAdjustmentCallManager.prototype._saveTaskSkus = function() {
      return this._callReportSaveTasksToAdjustmentsList(this.taskSkus);
    };

    PromoAdjustmentCallManager.prototype._callReportSaveTasksToAdjustmentsList = function(adjustmentsList) {
      var taskAdjustmentsCollection;
      taskAdjustmentsCollection = new TaskAdjustmentsCollection;
      return this._clearEmptyAdjustments(adjustmentsList, taskAdjustmentsCollection).then((function(_this) {
        return function(adjustmentsToSave) {
          return _this.runSimultaneouslyForCollection(adjustmentsToSave, function(taskAdjustment, index) {
            taskAdjustment.isModifiedInCall = false;
            taskAdjustment.callReportSfId = _this.callReportLocalId;
            return _this._incrementActualCallReports(taskAdjustment.promotionTaskAccountSfId, new PromotionTaskAccountsCollection).then(function() {
              return taskAdjustmentsCollection.updateEntity(taskAdjustment);
            });
          });
        };
      })(this));
    };

    PromoAdjustmentCallManager.prototype._saveMechanics = function() {
      var adjustments, mechanicAdjustmentsCollection;
      adjustments = this.mechanics.map((function(_this) {
        return function(mechanic) {
          return mechanic.adjustment;
        };
      })(this));
      mechanicAdjustmentsCollection = new MechanicAdjustmentsCollection;
      return this._clearEmptyAdjustments(adjustments, mechanicAdjustmentsCollection).then((function(_this) {
        return function(adjustmentsToSave) {
          return _this.runSimultaneouslyForCollection(adjustmentsToSave, function(adjustment, index) {
            adjustment.isModifiedInCall = false;
            adjustment.callReportSfId = _this.callReportLocalId;
            return _this._incrementActualCallReports(adjustment.mechanicEvaluationAccountSfId, new MechanicEvaluationAccountsCollection).then(function() {
              return mechanicAdjustmentsCollection.updateEntity(adjustment);
            });
          });
        };
      })(this));
    };

    PromoAdjustmentCallManager.prototype._clearEmptyAdjustments = function(adjustmentsList, collection) {
      var adjustmentsToRemove, adjustmentsToSave;
      adjustmentsToRemove = [];
      adjustmentsToSave = [];
      adjustmentsList.forEach(function(adjustment) {
        if (adjustment.stringRealValue || adjustment.numberRealValue) {
          return adjustmentsToSave.push(adjustment);
        } else {
          return adjustmentsToRemove.push(adjustment);
        }
      });
      return collection.removeEntities(adjustmentsToRemove).then(function() {
        return adjustmentsToSave;
      });
    };

    PromoAdjustmentCallManager.prototype._incrementActualCallReports = function(accountId, collection) {
      return collection.fetchEntityById(accountId).then((function(_this) {
        return function(entity) {
          var ref;
          if (entity.isRecurrent) {
            entity.actualCallReports = ((ref = +entity.actualCallReports) != null ? ref : 0) + 1;
            return collection.updateEntity(entity);
          }
        };
      })(this));
    };

    PromoAdjustmentCallManager.prototype._resetPhotos = function() {
      return this._removePhotoEntities(this._adjustmentsModifiedInCallFromList(this.photos));
    };

    PromoAdjustmentCallManager.prototype._resetTasks = function() {
      return this._removeTasksFromAdjustmentsList(this._adjustmentsModifiedInCallFromList(this.tasks), this.tasks);
    };

    PromoAdjustmentCallManager.prototype._resetTaskSkus = function() {
      return this._removeTasksFromAdjustmentsList(this._adjustmentsModifiedInCallFromList(this.taskSkus), this.taskSkus);
    };

    PromoAdjustmentCallManager.prototype._adjustmentsModifiedInCallFromList = function(adjustmentsList) {
      return adjustmentsList.filter(function(adjustment) {
        return adjustment.isModifiedInCall;
      });
    };

    PromoAdjustmentCallManager.prototype._removeTasksFromAdjustmentsList = function(taskAdjustmentsToRemove, adjustmentsList) {
      var adjustmentsToRemoveFromDB;
      adjustmentsToRemoveFromDB = [];
      taskAdjustmentsToRemove.forEach((function(_this) {
        return function(adjustment) {
          _this.promoAdjustment.removeItemFromCollection(adjustment, adjustmentsList);
          if (adjustment.id) {
            return adjustmentsToRemoveFromDB.push(adjustment);
          }
        };
      })(this));
      return new TaskAdjustmentsCollection().removeEntities(adjustmentsToRemoveFromDB);
    };

    PromoAdjustmentCallManager.prototype._resetMechanics = function() {
      var adjustmentsToRemoveFromDB, mechanicsToRemove;
      mechanicsToRemove = this.mechanics.filter(function(mechanic) {
        return mechanic.adjustment.isModifiedInCall;
      });
      adjustmentsToRemoveFromDB = [];
      mechanicsToRemove.forEach((function(_this) {
        return function(mechanic) {
          _this.promoAdjustment.removeMechanicEvaluationWithAdjustment(mechanic);
          if (mechanic.adjustment.id) {
            return adjustmentsToRemoveFromDB.push(mechanic.adjustment);
          }
        };
      })(this));
      return new MechanicAdjustmentsCollection().removeEntities(adjustmentsToRemoveFromDB);
    };

    return PromoAdjustmentCallManager;

  })(PromoAdjustmentBaseManager);

  module.exports = PromoAdjustmentCallManager;

}).call(this);
}, "db/trade-module-managers/promo-adjustment-entity": function(exports, require, module) {(function() {
  var MechanicAdjustmentsCollection, MechanicEvaluationAccountsCollection, NullEvaluation, NullMechanicAdjustment, NullTaskAdjustment, PhotoAdjustmentsCollection, PromoAdjustmentEntity, PromotionMechanic, PromotionMechanicsCollection, PromotionTaskAccount, PromotionTaskAccountsCollection, TaskAdjustmentsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PromotionMechanic = require('models/promotion-mechanic');

  PromotionTaskAccount = require('models/promotion-task-account');

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');

  MechanicEvaluationAccountsCollection = require('models/bll/mechanic-evaluation-accounts-collection');

  MechanicAdjustmentsCollection = require('models/bll/mechanic-adjustments-collection');

  PromotionTaskAccountsCollection = require('models/bll/promotion-task-accounts-collection');

  PromotionMechanicsCollection = require('models/bll/promotion-mechanics-collection');

  NullEvaluation = (function() {
    function NullEvaluation() {
      this.id = null;
    }

    NullEvaluation.prototype.realValue = function() {
      return '-';
    };

    return NullEvaluation;

  })();

  NullMechanicAdjustment = (function() {
    function NullMechanicAdjustment() {
      this.realValue = '-';
    }

    return NullMechanicAdjustment;

  })();

  NullTaskAdjustment = (function() {
    function NullTaskAdjustment() {
      this.realValue = '';
      this.numberRealValue = '';
      this.stringRealValue = '';
    }

    return NullTaskAdjustment;

  })();

  PromoAdjustmentEntity = (function() {
    function PromoAdjustmentEntity() {
      this.getEvaluationsAndMechanicAdjustmentsByMechanicsAndSku = bind(this.getEvaluationsAndMechanicAdjustmentsByMechanicsAndSku, this);
      this.getTaskSkuAdjustmentsByTasksAndSku = bind(this.getTaskSkuAdjustmentsByTasksAndSku, this);
      this.getTaskAdjustmentByTaskAccountEntity = bind(this.getTaskAdjustmentByTaskAccountEntity, this);
      this.setMechanicValue = bind(this.setMechanicValue, this);
      this._areMechanicAdjustmentsFilled = bind(this._areMechanicAdjustmentsFilled, this);
      this._areSkusAdjustmentsFilled = bind(this._areSkusAdjustmentsFilled, this);
      this._areTaskAdjustmentsFilled = bind(this._areTaskAdjustmentsFilled, this);
      this._doPhotosExist = bind(this._doPhotosExist, this);
      this.areAllAdjustmentsFilled = bind(this.areAllAdjustmentsFilled, this);
      this.setTaskSkuValue = bind(this.setTaskSkuValue, this);
      this.setTaskValue = bind(this.setTaskValue, this);
      this.hasMechanics = bind(this.hasMechanics, this);
      this.removeMechanicEvaluationWithAdjustment = bind(this.removeMechanicEvaluationWithAdjustment, this);
      this.addMechanicEvaluationWithAdjustment = bind(this.addMechanicEvaluationWithAdjustment, this);
      this.hasTaskSkus = bind(this.hasTaskSkus, this);
      this.removeTaskSku = bind(this.removeTaskSku, this);
      this.addTaskSku = bind(this.addTaskSku, this);
      this.hasTasks = bind(this.hasTasks, this);
      this.removeTask = bind(this.removeTask, this);
      this.addTask = bind(this.addTask, this);
      this.removePhoto = bind(this.removePhoto, this);
      this.addPhoto = bind(this.addPhoto, this);
      this.callReport = null;
      this.promotionAccount = null;
      this.promoId = null;
      this.photos = [];
      this.tasks = [];
      this.taskSkus = [];
      this.mechanics = [];
      this.isReadOnly = false;
    }

    PromoAdjustmentEntity.prototype._addItemToCollection = function(item, collection) {
      return collection.push(item);
    };

    PromoAdjustmentEntity.prototype.removeItemFromCollection = function(item, collection) {
      return collection.splice(collection.indexOf(item), 1);
    };

    PromoAdjustmentEntity.prototype._hasCollectionAnyItems = function(collection) {
      return collection.length > 0;
    };

    PromoAdjustmentEntity.prototype.addPhoto = function(photo) {
      return this._addItemToCollection(photo, this.photos);
    };

    PromoAdjustmentEntity.prototype.removePhoto = function(photo) {
      return this.removeItemFromCollection(photo, this.photos);
    };

    PromoAdjustmentEntity.prototype.addTask = function(task) {
      return this._addItemToCollection(task, this.tasks);
    };

    PromoAdjustmentEntity.prototype.removeTask = function(task) {
      return this.removeItemFromCollection(task, this.tasks);
    };

    PromoAdjustmentEntity.prototype.hasTasks = function() {
      return this._hasCollectionAnyItems(this.tasks);
    };

    PromoAdjustmentEntity.prototype.addTaskSku = function(taskSku) {
      return this._addItemToCollection(taskSku, this.taskSkus);
    };

    PromoAdjustmentEntity.prototype.removeTaskSku = function(taskSku) {
      return this.removeItemFromCollection(taskSku, this.taskSkus);
    };

    PromoAdjustmentEntity.prototype.hasTaskSkus = function() {
      return this._hasCollectionAnyItems(this.taskSkus);
    };

    PromoAdjustmentEntity.prototype.addMechanicEvaluationWithAdjustment = function(mechanicEvaluationWithAdjustment) {
      return this._addItemToCollection(mechanicEvaluationWithAdjustment, this.mechanics);
    };

    PromoAdjustmentEntity.prototype.removeMechanicEvaluationWithAdjustment = function(mechanicEvaluationWithAdjustment) {
      return this.removeItemFromCollection(mechanicEvaluationWithAdjustment, this.mechanics);
    };

    PromoAdjustmentEntity.prototype.hasMechanics = function() {
      return this._hasCollectionAnyItems(this.mechanics);
    };

    PromoAdjustmentEntity.prototype.setTaskValue = function(taskAdjustmentId, promotionTaskAccount, value) {
      return this._saveTaskValueToAdjustmentsList(taskAdjustmentId, promotionTaskAccount, value, this.tasks);
    };

    PromoAdjustmentEntity.prototype.setTaskSkuValue = function(taskSkuAdjustmentId, promotionTaskAccount, value) {
      return this._saveTaskValueToAdjustmentsList(taskSkuAdjustmentId, promotionTaskAccount, value, this.taskSkus);
    };

    PromoAdjustmentEntity.prototype.areAllAdjustmentsFilled = function() {
      return this._areSkusAdjustmentsFilled() && this._areMechanicAdjustmentsFilled() && this._areTaskAdjustmentsFilled() && this._doPhotosExist();
    };

    PromoAdjustmentEntity.prototype._doPhotosExist = function() {
      return !_.isEmpty(this.photos);
    };

    PromoAdjustmentEntity.prototype._areTaskAdjustmentsFilled = function() {
      return this._areAdjustmentsFilled(this.tasks);
    };

    PromoAdjustmentEntity.prototype._areSkusAdjustmentsFilled = function() {
      return this._areAdjustmentsFilled(this.taskSkus);
    };

    PromoAdjustmentEntity.prototype._areMechanicAdjustmentsFilled = function() {
      return !_.isEmpty(this.mechanics) && !_.any(this.mechanics, function(mechanic) {
        return !mechanic.evaluation.isDisabled() && !mechanic.adjustment.numberRealValue && !mechanic.adjustment.stringRealValue;
      });
    };

    PromoAdjustmentEntity.prototype._areAdjustmentsFilled = function(adjustments) {
      return !_.isEmpty(adjustments) && !_.any(adjustments, this._isAdjustmentWithoutValue);
    };

    PromoAdjustmentEntity.prototype._isAdjustmentWithoutValue = function(adjustment) {
      return !adjustment.numberRealValue && !adjustment.stringRealValue;
    };

    PromoAdjustmentEntity.prototype._saveTaskValueToAdjustmentsList = function(taskAdjustmentId, promotionTaskAccount, value, adjustmentsList) {
      return adjustmentsList.forEach((function(_this) {
        return function(taskAdjustment, index) {
          if (taskAdjustment.id === taskAdjustmentId) {
            adjustmentsList[index].isModifiedInTrade = true;
            switch (promotionTaskAccount.taskType) {
              case PromotionTaskAccount.TASK_TYPE_NUMERIC:
                return adjustmentsList[index].numberRealValue = value;
              case PromotionTaskAccount.TASK_TYPE_TEXT:
              case PromotionTaskAccount.TASK_TYPE_PICKLIST:
                return adjustmentsList[index].stringRealValue = value;
            }
          }
        };
      })(this));
    };

    PromoAdjustmentEntity.prototype.setMechanicValue = function(mechanicEvaluationWithAdjustment, value) {
      mechanicEvaluationWithAdjustment.adjustment.isModifiedInTrade = true;
      switch (mechanicEvaluationWithAdjustment.evaluation.mechanicType) {
        case PromotionMechanic.MECHANIC_TYPE_NUMERIC:
          return mechanicEvaluationWithAdjustment.adjustment.numberRealValue = value;
        case PromotionMechanic.MECHANIC_TYPE_TEXT:
        case PromotionMechanic.MECHANIC_TYPE_PICKLIST:
          return mechanicEvaluationWithAdjustment.adjustment.stringRealValue = value;
      }
    };

    PromoAdjustmentEntity.prototype.getTaskAdjustmentByTaskAccountEntity = function(promotionTaskAccount) {
      return _.find(this.tasks, function(taskAdjustment) {
        return taskAdjustment.promotionTaskAccountSfId === promotionTaskAccount.id;
      }) || new NullTaskAdjustment;
    };

    PromoAdjustmentEntity.prototype.getTaskSkuAdjustmentsByTasksAndSku = function(promoTaskAccounts, promotionSku) {
      return promoTaskAccounts.map((function(_this) {
        return function(promoTaskAccount) {
          var taskSku;
          taskSku = _.find(_this.taskSkus, function(taskSku) {
            return promoTaskAccount.id === taskSku.promotionTaskAccountSfId && taskSku.productItemSfId === promotionSku.productItemSfId;
          });
          return taskSku || new NullTaskAdjustment;
        };
      })(this));
    };

    PromoAdjustmentEntity.prototype.getEvaluationsAndMechanicAdjustmentsByMechanicsAndSku = function(promotionMechanics, promotionSku) {
      return promotionMechanics.map((function(_this) {
        return function(promoMechanic) {
          var mechanic;
          mechanic = _.find(_this.mechanics, function(mechanic) {
            return mechanic.evaluation.skuPromotionSfId === promotionSku.id && mechanic.evaluation.promotionMechanicSfId === promoMechanic.id;
          });
          return mechanic || {
            evaluation: new NullEvaluation,
            adjustment: new NullMechanicAdjustment
          };
        };
      })(this));
    };

    return PromoAdjustmentEntity;

  })();

  module.exports = PromoAdjustmentEntity;

}).call(this);
}, "db/trade-module-managers/promo-adjustment-trade-manager": function(exports, require, module) {(function() {
  var MechanicAdjustmentsCollection, PhotoAdjustmentsCollection, PromoAdjustmentBaseManager, PromoAdjustmentTradeManager, TaskAdjustmentsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PromoAdjustmentBaseManager = require('db/trade-module-managers/promo-adjustment-base-manager');

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');

  MechanicAdjustmentsCollection = require('models/bll/mechanic-adjustments-collection');

  PromoAdjustmentTradeManager = (function(superClass) {
    extend(PromoAdjustmentTradeManager, superClass);

    function PromoAdjustmentTradeManager() {
      this.initializeMechanics = bind(this.initializeMechanics, this);
      this._initializeTasksForAdjustmentsList = bind(this._initializeTasksForAdjustmentsList, this);
      this.initializeTaskSkus = bind(this.initializeTaskSkus, this);
      this.initializeTasks = bind(this.initializeTasks, this);
      this._resetMechanics = bind(this._resetMechanics, this);
      this._resetTaskSkus = bind(this._resetTaskSkus, this);
      this._resetTasks = bind(this._resetTasks, this);
      this._resetPhotos = bind(this._resetPhotos, this);
      this._saveMechanics = bind(this._saveMechanics, this);
      this._saveTasksToAdjustmentsList = bind(this._saveTasksToAdjustmentsList, this);
      this._saveTaskSkus = bind(this._saveTaskSkus, this);
      this._saveTasks = bind(this._saveTasks, this);
      this._savePhotos = bind(this._savePhotos, this);
      return PromoAdjustmentTradeManager.__super__.constructor.apply(this, arguments);
    }

    PromoAdjustmentTradeManager.prototype._savePhotos = function() {
      var photoAdjustmentsCollection;
      photoAdjustmentsCollection = new PhotoAdjustmentsCollection;
      return this.runSimultaneouslyForCollection(this.photos, (function(_this) {
        return function(photoAdjustment) {
          photoAdjustment.callReportSfId = _this.callReportLocalId;
          photoAdjustment.isModifiedInTrade = false;
          return photoAdjustmentsCollection.updateEntity(photoAdjustment);
        };
      })(this));
    };

    PromoAdjustmentTradeManager.prototype._saveTasks = function() {
      return this._saveTasksToAdjustmentsList(this.tasks);
    };

    PromoAdjustmentTradeManager.prototype._saveTaskSkus = function() {
      return this._saveTasksToAdjustmentsList(this.taskSkus);
    };

    PromoAdjustmentTradeManager.prototype._saveTasksToAdjustmentsList = function(adjustmentsList) {
      var taskAdjustmentsCollection;
      taskAdjustmentsCollection = new TaskAdjustmentsCollection;
      return this.runSimultaneouslyForCollection(adjustmentsList, function(taskAdjustment, index) {
        if (!(taskAdjustment.id && taskAdjustment.isModifiedInTrade)) {
          return;
        }
        taskAdjustment.isModifiedInTrade = false;
        return taskAdjustmentsCollection.updateEntity(taskAdjustment).then((function(_this) {
          return function(entity) {
            return adjustmentsList[index] = taskAdjustmentsCollection.parseEntity(entity);
          };
        })(this));
      });
    };

    PromoAdjustmentTradeManager.prototype._saveMechanics = function() {
      var mechanicAdjustmentsCollection;
      mechanicAdjustmentsCollection = new MechanicAdjustmentsCollection;
      return this.runSimultaneouslyForCollection(this.mechanics, (function(_this) {
        return function(mechanic, index) {
          if (!(mechanic.adjustment.id && mechanic.adjustment.isModifiedInTrade)) {
            return;
          }
          mechanic.adjustment.isModifiedInTrade = false;
          return mechanicAdjustmentsCollection.updateEntity(mechanic.adjustment).then(function(entity) {
            return _this.mechanics[index].adjustment = mechanicAdjustmentsCollection.parseEntity(entity);
          });
        };
      })(this));
    };

    PromoAdjustmentTradeManager.prototype._resetPhotos = function() {
      var photoAdjustmentEntitiesToRemove;
      photoAdjustmentEntitiesToRemove = this.photos.filter(function(photoAdjustmentEntity) {
        return photoAdjustmentEntity.isModifiedInTrade;
      });
      return this._removePhotoEntities(photoAdjustmentEntitiesToRemove);
    };

    PromoAdjustmentTradeManager.prototype._resetTasks = function() {
      return this._resetTasksForAdjustmentsListWithPredicate(this.tasks, function(currentTaskAdj, sourceTaskAdj) {
        return currentTaskAdj.promotionTaskAccountSfId === sourceTaskAdj.promotionTaskAccountSfId && currentTaskAdj.promotionTaskSfId === sourceTaskAdj.promotionTaskSfId;
      });
    };

    PromoAdjustmentTradeManager.prototype._resetTaskSkus = function() {
      return this._resetTasksForAdjustmentsListWithPredicate(this.taskSkus, function(currentTaskAdj, sourceTaskAdj) {
        return currentTaskAdj.promotionTaskAccountSfId === sourceTaskAdj.promotionTaskAccountSfId && currentTaskAdj.promotionTaskSfId === sourceTaskAdj.promotionTaskSfId && currentTaskAdj.productItemSfId === sourceTaskAdj.productItemSfId;
      });
    };

    PromoAdjustmentTradeManager.prototype._resetTasksForAdjustmentsListWithPredicate = function(adjustmentsList, filterPredicate) {
      var filteredTaskAdjustments, promotionTaskAccountsIds;
      filteredTaskAdjustments = adjustmentsList.filter(function(taskAdjustment) {
        return taskAdjustment.isModifiedInTrade;
      });
      promotionTaskAccountsIds = filteredTaskAdjustments.map(function(taskAdjustment) {
        return taskAdjustment.promotionTaskAccountSfId;
      });
      return new TaskAdjustmentsCollection().getAllTaskAdjustmentsByCallReportAndTaskAccounts(this.callReport, promotionTaskAccountsIds).then(function(taskAdjustments) {
        return taskAdjustments.forEach(function(taskAdjustment) {
          return adjustmentsList.forEach(function(task, index) {
            if (filterPredicate(task, taskAdjustment)) {
              return adjustmentsList[index] = taskAdjustment;
            }
          });
        });
      });
    };

    PromoAdjustmentTradeManager.prototype._resetMechanics = function() {
      var filteredMechanics, mechanicEvaluationAccountIds;
      filteredMechanics = this.mechanics.filter((function(_this) {
        return function(mechanic) {
          return mechanic.adjustment.isModifiedInTrade;
        };
      })(this));
      mechanicEvaluationAccountIds = filteredMechanics.map(function(mechanic) {
        return mechanic.adjustment.mechanicEvaluationAccountSfId;
      });
      return new MechanicAdjustmentsCollection().getAdjustmentsByCallReportAndMechanicEvaluationAccounts(this.callReport, mechanicEvaluationAccountIds).then((function(_this) {
        return function(mechanicAdjustments) {
          return mechanicAdjustments.forEach(function(sourceMechanicAdj) {
            return _this.mechanics.forEach(function(currentMechanic, index) {
              if (currentMechanic.adjustment.mechanicEvaluationAccountSfId === sourceMechanicAdj.mechanicEvaluationAccountSfId) {
                return _this.mechanics[index].adjustment = sourceMechanicAdj;
              }
            });
          });
        };
      })(this));
    };

    PromoAdjustmentTradeManager.prototype.initializeTasks = function() {
      return this._initializeTasksForAdjustmentsList(this.tasks);
    };

    PromoAdjustmentTradeManager.prototype.initializeTaskSkus = function() {
      return this._initializeTasksForAdjustmentsList(this.taskSkus);
    };

    PromoAdjustmentTradeManager.prototype._initializeTasksForAdjustmentsList = function(adjustmentsList) {
      var taskAdjustmentsCollection;
      taskAdjustmentsCollection = new TaskAdjustmentsCollection;
      return this.runSimultaneouslyForCollection(adjustmentsList, (function(_this) {
        return function(taskAdjustment, index) {
          taskAdjustment.callReportSfId = _this.callReportLocalId;
          return taskAdjustmentsCollection.createEntity(taskAdjustment).then(function(entity) {
            return adjustmentsList[index] = taskAdjustmentsCollection.parseEntity(entity);
          });
        };
      })(this));
    };

    PromoAdjustmentTradeManager.prototype.initializeMechanics = function() {
      var mechanicAdjustmentsCollection;
      mechanicAdjustmentsCollection = new MechanicAdjustmentsCollection;
      return this.runSimultaneouslyForCollection(this.mechanics, (function(_this) {
        return function(mechanic, index) {
          mechanic.adjustment.callReportSfId = _this.callReportLocalId;
          return mechanicAdjustmentsCollection.createEntity(mechanic.adjustment).then(function(entity) {
            return _this.mechanics[index].adjustment = mechanicAdjustmentsCollection.parseEntity(entity);
          });
        };
      })(this));
    };

    return PromoAdjustmentTradeManager;

  })(PromoAdjustmentBaseManager);

  module.exports = PromoAdjustmentTradeManager;

}).call(this);
}, "db/trade-module-managers/promo-adjustments-collection": function(exports, require, module) {(function() {
  var CallPromoAdjustmentsCollection, PromoAdjustmentCallManager, PromoAdjustmentTradeManager,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PromoAdjustmentTradeManager = require('db/trade-module-managers/promo-adjustment-trade-manager');

  PromoAdjustmentCallManager = require('db/trade-module-managers/promo-adjustment-call-manager');

  CallPromoAdjustmentsCollection = (function() {
    function CallPromoAdjustmentsCollection() {
      this._getAllPromotionsIds = bind(this._getAllPromotionsIds, this);
      this._runSimultaneouslyForEachPromotionId = bind(this._runSimultaneouslyForEachPromotionId, this);
      this._applyForEachPromotionInContextOf = bind(this._applyForEachPromotionInContextOf, this);
      this._resetChangesInContextOf = bind(this._resetChangesInContextOf, this);
      this._saveChangesInContextOf = bind(this._saveChangesInContextOf, this);
      this.resetCallReportData = bind(this.resetCallReportData, this);
      this.resetTradeData = bind(this.resetTradeData, this);
      this.callReportSave = bind(this.callReportSave, this);
      this.tradeSave = bind(this.tradeSave, this);
      this.remove = bind(this.remove, this);
      this.getPromoModel = bind(this.getPromoModel, this);
      this.add = bind(this.add, this);
      this.hasPromo = bind(this.hasPromo, this);
      this.areAllPromoAdjustmentsFilled = bind(this.areAllPromoAdjustmentsFilled, this);
      this.setCallReport = bind(this.setCallReport, this);
      this.callReport = null;
      this.promoAdjustments = {};
    }

    CallPromoAdjustmentsCollection.prototype.setCallReport = function(callReport) {
      this.callReport = callReport;
    };

    CallPromoAdjustmentsCollection.prototype.areAllPromoAdjustmentsFilled = function() {
      var promoAjustmentsEntities;
      promoAjustmentsEntities = _.values(this.promoAdjustments);
      return _.every(promoAjustmentsEntities, function(promoAdjustment) {
        return promoAdjustment.areAllAdjustmentsFilled();
      });
    };

    CallPromoAdjustmentsCollection.prototype.hasPromo = function() {
      return Object.keys(this.promoAdjustments).length > 0;
    };

    CallPromoAdjustmentsCollection.prototype.add = function(promoAdjustment) {
      return this.promoAdjustments[promoAdjustment.promoId] = promoAdjustment;
    };

    CallPromoAdjustmentsCollection.prototype.getPromoModel = function(promoId) {
      return this.promoAdjustments[promoId];
    };

    CallPromoAdjustmentsCollection.prototype.remove = function(promoId) {
      return delete this.promoAdjustments[promoId];
    };

    CallPromoAdjustmentsCollection.prototype.tradeSave = function() {
      return this._saveChangesInContextOf(PromoAdjustmentTradeManager);
    };

    CallPromoAdjustmentsCollection.prototype.callReportSave = function() {
      return this._saveChangesInContextOf(PromoAdjustmentCallManager);
    };

    CallPromoAdjustmentsCollection.prototype.resetTradeData = function() {
      return this._resetChangesInContextOf(PromoAdjustmentTradeManager);
    };

    CallPromoAdjustmentsCollection.prototype.resetCallReportData = function() {
      return this._resetChangesInContextOf(PromoAdjustmentCallManager);
    };

    CallPromoAdjustmentsCollection.prototype._saveChangesInContextOf = function(context) {
      return this._applyForEachPromotionInContextOf(context, function(contextInstance) {
        return contextInstance.saveChanges();
      });
    };

    CallPromoAdjustmentsCollection.prototype._resetChangesInContextOf = function(context) {
      return this._applyForEachPromotionInContextOf(context, function(contextInstance) {
        return contextInstance.resetChanges();
      });
    };

    CallPromoAdjustmentsCollection.prototype._applyForEachPromotionInContextOf = function(context, forEach) {
      return this._runSimultaneouslyForEachPromotionId((function(_this) {
        return function(promotionId) {
          var promoAdjustmentManager;
          promoAdjustmentManager = new context(_this.promoAdjustments[promotionId]);
          return forEach(promoAdjustmentManager);
        };
      })(this));
    };

    CallPromoAdjustmentsCollection.prototype._runSimultaneouslyForEachPromotionId = function(promoStep) {
      var Utils;
      Utils = require('common/utils');
      return Utils.runSimultaneously(_.map(this._getAllPromotionsIds(), promoStep));
    };

    CallPromoAdjustmentsCollection.prototype._getAllPromotionsIds = function() {
      return Object.keys(this.promoAdjustments);
    };

    return CallPromoAdjustmentsCollection;

  })();

  module.exports = CallPromoAdjustmentsCollection;

}).call(this);
}, "index": function(exports, require, module) {(function() {
  var App, GhostClickPreventer, LockManager, Main, Pin, PinManager, ProvidePin, Spine, Touchy, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('lib/setup');

  Spine = require('spine');

  Touchy = require('common/touchy');

  GhostClickPreventer = require('common/ghost-click-preventer');

  Main = require('controllers/main');

  Pin = require('controllers/pin/pin');

  ProvidePin = require('controllers/pin/provide-pin');

  Utils = require('common/utils');

  PinManager = require('common/pin-manager');

  LockManager = require('common/lock-manager');

  App = (function(superClass) {
    extend(App, superClass);

    App.prototype.controllers = {
      main: Main,
      pin: Pin,
      providePin: ProvidePin
    };

    App.prototype.routes = {
      '/main': 'main',
      '/pin': 'pin',
      '/provide-pin': 'providePin'
    };

    App.prototype["default"] = 'main';

    function App() {
      App.__super__.constructor.apply(this, arguments);
      window.touchy = new Touchy();
      if (!Utils.isIOS()) {
        window.ghostClickPreventer = new GhostClickPreventer();
      }
      Spine.Route.setup();
      this._setDeviceType();
      this._setDeviceSize();
      LockManager.init(this);
      this._showActualScreen();
    }

    App.prototype._showActualScreen = function() {
      this.navigate('/home');
      return PinManager.isPinExists((function(_this) {
        return function(isExists) {
          if (isExists) {
            return LockManager.isLocked(function(isLocked) {
              if (isLocked) {
                return LockManager.lock();
              } else {
                LockManager.start();
                return _this.main.active();
              }
            });
          } else {
            return _this.providePin.active();
          }
        };
      })(this));
    };

    App.prototype._setDeviceType = function() {
      var typeOS;
      typeOS = Utils.isIOS() ? 'ios' : 'android';
      return $(document.body).addClass(typeOS);
    };

    App.prototype._setDeviceSize = function() {
      $(document.body).width($(window).width());
      return $(document.body).height($(window).height());
    };

    return App;

  })(Spine.Stack);

  module.exports = App;

}).call(this);
}, "lib/setup": function(exports, require, module) {(function() {
  require('json2ify');

  require('es5-shimify');

  require('gfx');

  require('spine');

  require('spine/lib/local');

  require('spine/lib/manager');

  require('spine/lib/route');

  require('spine.mobile/lib/stage');

  require('spine.mobile/lib/panel');

  require('rx/dist/rx.lite');

}).call(this);
}, "models/bll/bricks-collection": function(exports, require, module) {(function() {
  var Brick, BricksCollection, ConfigurationManager, EntitiesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Brick = require('models/brick');

  ConfigurationManager = require('db/configuration-manager');

  BricksCollection = (function(superClass) {
    extend(BricksCollection, superClass);

    function BricksCollection() {
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return BricksCollection.__super__.constructor.apply(this, arguments);
    }

    BricksCollection.prototype.model = Brick;

    BricksCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then(function(config) {
        return ConfigurationManager.getConfig('brickRecordTypeId').then(function(brickRecordTypeId) {
          config.query += " where RecordTypeId = '" + brickRecordTypeId + "'";
          return config;
        });
      });
    };

    return BricksCollection;

  })(EntitiesCollection);

  module.exports = BricksCollection;

}).call(this);
}, "models/bll/bu-team-person-profiles-collection": function(exports, require, module) {(function() {
  var BuTeamPersonProfile, BuTeamPersonProfilesCollection, EntitiesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  BuTeamPersonProfile = require('models/bu-team-person-profile');

  BuTeamPersonProfilesCollection = (function(superClass) {
    extend(BuTeamPersonProfilesCollection, superClass);

    function BuTeamPersonProfilesCollection() {
      this.fetchForUserUnitAndContacts = bind(this.fetchForUserUnitAndContacts, this);
      this.fetchForUserBU = bind(this.fetchForUserBU, this);
      return BuTeamPersonProfilesCollection.__super__.constructor.apply(this, arguments);
    }

    BuTeamPersonProfilesCollection.prototype.model = BuTeamPersonProfile;

    BuTeamPersonProfilesCollection.prototype.fetchForUserBU = function(userBU) {
      var fieldsValues;
      fieldsValues = {};
      fieldsValues[this.model.sfdc.businessUnit] = userBU;
      return this.fetchAllWhere(fieldsValues).then(this.getAllEntitiesFromResponse);
    };

    BuTeamPersonProfilesCollection.prototype.fetchForUserUnitAndContacts = function(userBU, contactIds) {
      var buCondition, query;
      buCondition = {};
      buCondition[this.model.sfdc.businessUnit] = userBU;
      query = this._fetchAllQuery().where(buCondition).and().whereIn(this.model.sfdc.organizationSfid, contactIds);
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    return BuTeamPersonProfilesCollection;

  })(EntitiesCollection);

  module.exports = BuTeamPersonProfilesCollection;

}).call(this);
}, "models/bll/call-reports-collection/appointments-collection": function(exports, require, module) {(function() {
  var AppointmentsCollection, CallReportsCollection, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');

  Utils = require('common/utils');

  Query = require('common/query');

  AppointmentsCollection = (function(superClass) {
    extend(AppointmentsCollection, superClass);

    function AppointmentsCollection() {
      this._closestQuery = bind(this._closestQuery, this);
      this.fetchClosest = bind(this.fetchClosest, this);
      this.fetchUnparsedWhere = bind(this.fetchUnparsedWhere, this);
      this.getAllAppointmentsFor = bind(this.getAllAppointmentsFor, this);
      return AppointmentsCollection.__super__.constructor.apply(this, arguments);
    }

    AppointmentsCollection.prototype._dataType = function() {
      var fieldValue;
      fieldValue = {};
      fieldValue[this.model.sfdc.type] = this.model.TYPE_APPOINTMENT;
      return fieldValue;
    };

    AppointmentsCollection.prototype.getAllAppointmentsFor = function(reference, date) {
      var endDate, endOfTodayCondition, keyValue, query, startDate, startOfTodayCondition;
      keyValue = this._dataType();
      keyValue[this.model.sfdc.contactSfid] = reference.contactSfId;
      keyValue[this.model.sfdc.organizationSfId] = reference.organizationSfId;
      startDate = Utils.originalStartOfDate(date);
      endDate = Utils.originalEndOfDate(date);
      startOfTodayCondition = {};
      startOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = startDate;
      endOfTodayCondition = {};
      endOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = endDate;
      query = new Query().selectFrom(this.model.table).where(keyValue).and().where(startOfTodayCondition, Query.GRE).and().where(endOfTodayCondition, Query.LRE);
      return this.fetchUnparsedWithQuery(query).then(this.getAllUnparsedEntitiesFromResponse);
    };

    AppointmentsCollection.prototype.fetchUnparsedWhere = function(keyValue) {
      var query;
      query = new Query().selectFrom(this.model.table).where(keyValue);
      return this.fetchUnparsedWithQuery(query);
    };

    AppointmentsCollection.prototype.fetchClosest = function() {
      return this.fetchWithQuery(this._closestQuery());
    };

    AppointmentsCollection.prototype._closestQuery = function() {
      var query, whereCondition;
      whereCondition = {};
      whereCondition[this.model.sfdc.dateTimeOfVisit] = Utils.originalDateTime(new Date);
      query = new Query;
      return query.selectFrom(this.model.table).where(this._dataType()).where(whereCondition, Query.GR).orderBy([this.model.sfdc.dateTimeOfVisit]);
    };

    return AppointmentsCollection;

  })(CallReportsCollection);

  module.exports = AppointmentsCollection;

}).call(this);
}, "models/bll/call-reports-collection/appointments-past-collection": function(exports, require, module) {(function() {
  var AppointmentsCollection, AppointmentsPastCollection, Query, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  Utils = require('common/utils');

  Query = require('common/query');

  AppointmentsPastCollection = (function(superClass) {
    extend(AppointmentsPastCollection, superClass);

    function AppointmentsPastCollection() {
      return AppointmentsPastCollection.__super__.constructor.apply(this, arguments);
    }

    AppointmentsPastCollection.prototype._fetchAllQuery = function() {
      var today, todayCondition;
      today = Utils.originalStartOfToday();
      todayCondition = {};
      todayCondition[this.model.sfdc.dateTimeOfVisit] = today;
      return AppointmentsPastCollection.__super__._fetchAllQuery.call(this).where(todayCondition, Query.LR);
    };

    return AppointmentsPastCollection;

  })(AppointmentsCollection);

  module.exports = AppointmentsPastCollection;

}).call(this);
}, "models/bll/call-reports-collection/appointments-today-collection": function(exports, require, module) {(function() {
  var AppointmentsCollection, AppointmentsTodayCollection, Query, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  Utils = require('common/utils');

  Query = require('common/query');

  AppointmentsTodayCollection = (function(superClass) {
    extend(AppointmentsTodayCollection, superClass);

    function AppointmentsTodayCollection() {
      return AppointmentsTodayCollection.__super__.constructor.apply(this, arguments);
    }

    AppointmentsTodayCollection.prototype._fetchAllQuery = function() {
      var endOfToday, endOfTodayCondition, startOfToday, startOfTodayCondition;
      startOfToday = Utils.originalStartOfToday();
      endOfToday = Utils.originalEndOfToday();
      startOfTodayCondition = {};
      startOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = startOfToday;
      endOfTodayCondition = {};
      endOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = endOfToday;
      return AppointmentsTodayCollection.__super__._fetchAllQuery.call(this).where(startOfTodayCondition, Query.GRE).and().where(endOfTodayCondition, Query.LRE);
    };

    return AppointmentsTodayCollection;

  })(AppointmentsCollection);

  module.exports = AppointmentsTodayCollection;

}).call(this);
}, "models/bll/call-reports-collection/appointments-tomorrow-collection": function(exports, require, module) {(function() {
  var AppointmentsCollection, AppointmentsTomorrowCollection, Query, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppointmentsCollection = require('models/bll/call-reports-collection/appointments-collection');

  Utils = require('common/utils');

  Query = require('common/query');

  AppointmentsTomorrowCollection = (function(superClass) {
    extend(AppointmentsTomorrowCollection, superClass);

    function AppointmentsTomorrowCollection() {
      return AppointmentsTomorrowCollection.__super__.constructor.apply(this, arguments);
    }

    AppointmentsTomorrowCollection.prototype._fetchAllQuery = function() {
      var endOfToday, endOfTodayCondition, startOfToday, startOfTodayCondition;
      startOfToday = Utils.originalStartOfTomorrow();
      endOfToday = Utils.originalEndOfTomorrow();
      startOfTodayCondition = {};
      startOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = startOfToday;
      endOfTodayCondition = {};
      endOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = endOfToday;
      return AppointmentsTomorrowCollection.__super__._fetchAllQuery.call(this).where(startOfTodayCondition, Query.GRE).and().where(endOfTodayCondition, Query.LRE);
    };

    return AppointmentsTomorrowCollection;

  })(AppointmentsCollection);

  module.exports = AppointmentsTomorrowCollection;

}).call(this);
}, "models/bll/call-reports-collection/call-reports-collection": function(exports, require, module) {(function() {
  var CallReport, CallReportsCollection, ConfigurationManager, EntitiesCollection, Query, SettingsManager, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  CallReport = require('models/call-report');

  Query = require('common/query');

  Utils = require('common/utils');

  SettingsManager = require('db/settings-manager');

  ConfigurationManager = require('db/configuration-manager');

  CallReportsCollection = (function(superClass) {
    extend(CallReportsCollection, superClass);

    CallReportsCollection.prototype.model = CallReport;

    CallReportsCollection.prototype.ALL_TYPES = 'ALL_TYPES';

    CallReportsCollection.prototype._dataType = function() {
      return this.ALL_TYPES;
    };

    CallReportsCollection.prototype._fetchAllQuery = function() {
      var dataType, query;
      query = new Query().selectFrom(this.model.table);
      dataType = this._dataType();
      if (dataType === this.ALL_TYPES) {
        return query;
      } else {
        return query.where(dataType);
      }
    };

    function CallReportsCollection() {
      this._createCallReportDataCollection = bind(this._createCallReportDataCollection, this);
      this._createMechanicAdjustmentsCollection = bind(this._createMechanicAdjustmentsCollection, this);
      this._createTaskAdjustmentsCollection = bind(this._createTaskAdjustmentsCollection, this);
      this._createPhotoAdjustmentsCollection = bind(this._createPhotoAdjustmentsCollection, this);
      this._runSimultaneouslyForCollectionByEachCallWithQueryField = bind(this._runSimultaneouslyForCollectionByEachCallWithQueryField, this);
      this._applyForTradeModuleAndEdetailingIfAnyEnabled = bind(this._applyForTradeModuleAndEdetailingIfAnyEnabled, this);
      this._updateCollectionByCallsWithQueryFields = bind(this._updateCollectionByCallsWithQueryFields, this);
      this._updateCallReportsData = bind(this._updateCallReportsData, this);
      this._updateAdjustments = bind(this._updateAdjustments, this);
      this._cleanCollectionByCallsWithQueryFields = bind(this._cleanCollectionByCallsWithQueryFields, this);
      this._cleanBrokenCallReportData = bind(this._cleanBrokenCallReportData, this);
      this._cleanBrokenAdjustments = bind(this._cleanBrokenAdjustments, this);
      this._removeEmptyProducts = bind(this._removeEmptyProducts, this);
      this.parseModel = bind(this.parseModel, this);
      this._fieldsWithExcludeProductFieldsByConfig = bind(this._fieldsWithExcludeProductFieldsByConfig, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      CallReportsCollection.__super__.constructor.apply(this, arguments);
      this.cache.noMerge = false;
      this.cache.mergeMode = Force.MERGE_MODE.MERGE_ACCEPT_YOURS;
    }

    CallReportsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          var minVisitDate;
          minVisitDate = Utils.toSalesForceDateTimeFormat(moment().subtract('months', 2));
          return _this._mapFieldsList().then(function(fields) {
            return ConfigurationManager.getConfig('callReportProductsSettings').then(function(configs) {
              return [fields, configs];
            });
          }).then(function(arg) {
            var callReportProductsSettings, fields;
            fields = arg[0], callReportProductsSettings = arg[1];
            fields = _this._fieldsWithExcludeProductFieldsByConfig(fields, callReportProductsSettings);
            config.query = "SELECT " + (fields.join(',')) + " FROM " + _this.model.sfdcTable + " ";
            config.query += "WHERE " + _this.model.sfdc.dateTimeOfVisit + " > " + minVisitDate + " AND Contact1__r.Id != Null AND Organisation__r.Id != Null";
            return config;
          });
        };
      })(this));
    };

    CallReportsCollection.prototype._fieldsWithExcludeProductFieldsByConfig = function(fields, config) {
      var fieldsToExclude, j, numberOfProducts, ref, results;
      numberOfProducts = config.numberOfPromotedProducts + 1;
      if (numberOfProducts >= this.model.MAX_PRODUCTS_NUMBER) {
        return fields;
      } else {
        fieldsToExclude = [];
        (function() {
          results = [];
          for (var j = numberOfProducts, ref = this.model.MAX_PRODUCTS_NUMBER; numberOfProducts <= ref ? j <= ref : j >= ref; numberOfProducts <= ref ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this).forEach(function(i) {
          fieldsToExclude.push("Prio_" + i + "_Product__c");
          fieldsToExclude.push("Note_for_Prio_" + i + "__c");
          fieldsToExclude.push("Prio_" + i + "_Marketing_Message_1__c");
          fieldsToExclude.push("Prio_" + i + "_Marketing_Message_2__c");
          return fieldsToExclude.push("Prio_" + i + "_Marketing_Message_3__c");
        });
        return _.difference(fields, fieldsToExclude);
      }
    };

    CallReportsCollection.prototype.parseModel = function(result) {
      var ref;
      if (result.User__r) {
        result[this.model.sfdc.userFirstName] = result.User__r.FirstName;
        result[this.model.sfdc.userLastName] = result.User__r.LastName;
      }
      if (result.Contact1__r) {
        result[this.model.sfdc.contactRecordType] = (ref = result.Contact1__r.Account) != null ? ref.RecordType.Name : void 0;
      }
      if (result.Organisation__r) {
        result[this.model.sfdc.organizationName] = result.Organisation__r.Name;
        result[this.model.sfdc.organizationCity] = result.Organisation__r.BillingCity;
        result[this.model.sfdc.organizationAddress] = result.Organisation__r.BillingStreet;
      }
      return CallReportsCollection.__super__.parseModel.call(this, result);
    };

    CallReportsCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateCallReports(records);
    };

    CallReportsCollection.prototype._updateCallReports = function(callReports) {
      var updatedCallReports;
      updatedCallReports = callReports.map(function(callReport) {
        if (callReport.Contact1__r) {
          callReport.contactFirstName = callReport.Contact1__r.FirstName;
          callReport.contactLastName = callReport.Contact1__r.LastName;
        } else {
          callReport.contactFirstName = '';
          callReport.contactLastName = '';
        }
        if (callReport.Organisation__r) {
          callReport.organizationName = callReport.Organisation__r.Name;
        }
        return callReport;
      });
      return this.cache.saveAll(updatedCallReports);
    };

    CallReportsCollection.prototype.didStartUploading = function(records) {
      var brokenCalls, callsToUpload;
      brokenCalls = [];
      callsToUpload = [];
      return this._removeEmptyProducts(records).then((function(_this) {
        return function(records) {
          var ref, ref1, splitBrokenCalls;
          splitBrokenCalls = _.groupBy(records, function(record) {
            return record.isSandbox === true;
          });
          brokenCalls = (ref = splitBrokenCalls["true"]) != null ? ref : [];
          callsToUpload = (ref1 = splitBrokenCalls["false"]) != null ? ref1 : [];
          return _this._applyForTradeModuleAndEdetailingIfAnyEnabled(brokenCalls, _this._cleanBrokenCallReportData, function(records) {
            return $.when(_this._cleanBrokenAdjustments(_this._createPhotoAdjustmentsCollection(), records), _this._cleanBrokenAdjustments(_this._createTaskAdjustmentsCollection(), records), _this._cleanBrokenAdjustments(_this._createMechanicAdjustmentsCollection(), records));
          });
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.removeEntities(brokenCalls);
        };
      })(this)).then(function() {
        return callsToUpload;
      });
    };

    CallReportsCollection.prototype._removeEmptyProducts = function(records) {
      var ProductsCollection, callReportsWithEmptyProducts, callReportsWithEmptyProductsForDelete, callReportsWithEmptyProductsForUpdate, productsCollection;
      ProductsCollection = require('models/bll/products-collection');
      productsCollection = new ProductsCollection;
      callReportsWithEmptyProducts = [];
      callReportsWithEmptyProductsForDelete = [];
      callReportsWithEmptyProductsForUpdate = [];
      return productsCollection.fetchAll().then(productsCollection.getAllEntitiesFromResponse).then((function(_this) {
        return function(products) {
          var productsMapped;
          productsMapped = products.map(function(product) {
            return product.id;
          });
          records.forEach(function(record) {
            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].forEach(function(index) {
              if ((productsMapped.indexOf(record["prio" + index + "ProductSfid"]) === -1) && record["prio" + index + "ProductSfid"]) {
                if (callReportsWithEmptyProducts.indexOf(record) === -1) {
                  return callReportsWithEmptyProducts.push(record);
                }
              }
            });
          });
          callReportsWithEmptyProducts.forEach(function(record) {
            var emptyProdCount, productsMessages, totalProdCount, updateIndexes;
            emptyProdCount = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(function(index) {
              return (productsMapped.indexOf(record["prio" + index + "ProductSfid"]) === -1) && record["prio" + index + "ProductSfid"];
            });
            totalProdCount = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(function(index) {
              return record["prio" + index + "ProductSfid"];
            });
            if (emptyProdCount.length === totalProdCount.length) {
              return callReportsWithEmptyProductsForDelete.push(record);
            } else {
              updateIndexes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(function(index) {
                return (productsMapped.indexOf(record["prio" + index + "ProductSfid"]) !== -1) && record["prio" + index + "ProductSfid"];
              });
              productsMessages = [];
              updateIndexes.forEach(function(updateIndex) {
                return productsMessages.push({
                  "prioProductSfid": record["prio" + updateIndex + "ProductSfid"],
                  "noteForPrio": record["noteForPrio" + updateIndex],
                  "prioMarketingMessage1": record["prio" + updateIndex + "MarketingMessage1"],
                  "prioMarketingMessage2": record["prio" + updateIndex + "MarketingMessage2"],
                  "prioMarketingMessage3": record["prio" + updateIndex + "MarketingMessage3"],
                  "patientProfile": record["patientProfile" + updateIndex],
                  "prioClassification": record["prio" + updateIndex + "Classification"]
                });
              });
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].forEach(function(updateIndex, index) {
                if (productsMessages[index]) {
                  record["prio" + updateIndex + "ProductSfid"] = productsMessages[index]["prioProductSfid"];
                  record["noteForPrio" + updateIndex] = productsMessages[index]["noteForPrio"];
                  record["prio" + updateIndex + "MarketingMessage1"] = productsMessages[index]["prioMarketingMessage1"];
                  record["prio" + updateIndex + "MarketingMessage2"] = productsMessages[index]["prioMarketingMessage2"];
                  record["prio" + updateIndex + "MarketingMessage3"] = productsMessages[index]["prioMarketingMessage3"];
                  record["patientProfile" + updateIndex] = productsMessages[index]["patientProfile"];
                  return record["prio" + updateIndex + "Classification"] = productsMessages[index]["prioClassification"];
                } else {
                  record["prio" + updateIndex + "ProductSfid"] = void 0;
                  record["noteForPrio" + updateIndex] = void 0;
                  record["prio" + updateIndex + "MarketingMessage1"] = void 0;
                  record["prio" + updateIndex + "MarketingMessage2"] = void 0;
                  record["prio" + updateIndex + "MarketingMessage3"] = void 0;
                  record["patientProfile" + updateIndex] = void 0;
                  return record["prio" + updateIndex + "Classification"] = void 0;
                }
              });
              return callReportsWithEmptyProductsForUpdate.push(record);
            }
          });
          return Utils.runSimultaneously(callReportsWithEmptyProductsForUpdate.map(function(record) {
            return _this.updateEntity(record);
          }));
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.removeEntities(callReportsWithEmptyProductsForDelete);
        };
      })(this)).then((function(_this) {
        return function() {
          var shouldIgnoreDeleted;
          shouldIgnoreDeleted = false;
          return _this.fetchWithQuery(new Query().selectFrom(_this.model.table).where({
            __local__: true
          }), shouldIgnoreDeleted).then(_this.getAllEntitiesFromResponse);
        };
      })(this));
    };

    CallReportsCollection.prototype._cleanBrokenAdjustments = function(collection, callReports) {
      return this._cleanCollectionByCallsWithQueryFields(collection, callReports, collection.model.sfdc.callReportSfId);
    };

    CallReportsCollection.prototype._cleanBrokenCallReportData = function(callReports) {
      var callReportDataCollection;
      callReportDataCollection = this._createCallReportDataCollection();
      return this._cleanCollectionByCallsWithQueryFields(callReportDataCollection, callReports, callReportDataCollection.model.sfdc.callReportId);
    };

    CallReportsCollection.prototype._cleanCollectionByCallsWithQueryFields = function(collection, callReports, callReportIdField) {
      return this._runSimultaneouslyForCollectionByEachCallWithQueryField(collection, callReports, callReportIdField, function(entities, _) {
        return collection.removeEntities(entities);
      });
    };

    CallReportsCollection.prototype._updateAdjustments = function(collection, callReports) {
      return this._updateCollectionByCallsWithQueryFields(collection, callReports, collection.model.sfdc.callReportSfId);
    };

    CallReportsCollection.prototype._updateCallReportsData = function(callReports) {
      var callReportDataCollection;
      callReportDataCollection = this._createCallReportDataCollection();
      return this._updateCollectionByCallsWithQueryFields(callReportDataCollection, callReports, callReportDataCollection.model.sfdc.callReportId);
    };

    CallReportsCollection.prototype._updateCollectionByCallsWithQueryFields = function(collection, callReports, callReportIdField) {
      return this._runSimultaneouslyForCollectionByEachCallWithQueryField(collection, callReports, callReportIdField, (function(_this) {
        return function(entities, callReport) {
          entities = entities.map(function(entity) {
            entity.attributes[callReportIdField] = callReport[_this.model.sfdc.id];
            return entity;
          });
          return collection.upsertEntitiesSilently(entities);
        };
      })(this));
    };

    CallReportsCollection.prototype._applyForTradeModuleAndEdetailingIfAnyEnabled = function(records, applyForEdetailing, applyForTradeModule) {
      return SettingsManager.getValueByKey('isTradeModuleEnabled').then((function(_this) {
        return function(isTradeModuleEnabled) {
          if (!isTradeModuleEnabled) {
            return $.when(records);
          } else {
            return applyForTradeModule(records);
          }
        };
      })(this)).then((function(_this) {
        return function() {
          return SettingsManager.getValueByKey('isEdetailingEnabled').then(function(isEdetailingEnabled) {
            if (isEdetailingEnabled) {
              return applyForEdetailing(records);
            }
          });
        };
      })(this));
    };

    CallReportsCollection.prototype._runSimultaneouslyForCollectionByEachCallWithQueryField = function(collection, callReports, callReportIdField, forEach) {
      return Utils.runSimultaneously(_(callReports).map((function(_this) {
        return function(callReport) {
          var queryFields;
          if (!callReport) {
            return;
          }
          queryFields = {};
          queryFields[callReportIdField] = _this._attributesFromEntity(callReport)._soupEntryId;
          return collection.fetchAllWhere(queryFields).then(collection.getAllEntitiesFromResponse).then(function(entities) {
            return forEach(entities, callReport);
          });
        };
      })(this)));
    };

    CallReportsCollection.prototype._createPhotoAdjustmentsCollection = function() {
      var PhotoAdjustmentsCollection;
      PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');
      return new PhotoAdjustmentsCollection;
    };

    CallReportsCollection.prototype._createTaskAdjustmentsCollection = function() {
      var TaskAdjustmentsCollection;
      TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');
      return new TaskAdjustmentsCollection;
    };

    CallReportsCollection.prototype._createMechanicAdjustmentsCollection = function() {
      var MechanicAdjustmentsCollection;
      MechanicAdjustmentsCollection = require('models/bll/mechanic-adjustments-collection');
      return new MechanicAdjustmentsCollection;
    };

    CallReportsCollection.prototype._createCallReportDataCollection = function() {
      var CallReportDataCollection;
      CallReportDataCollection = require('models/bll/clm-call-report-data-collection');
      return new CallReportDataCollection;
    };

    return CallReportsCollection;

  })(EntitiesCollection);

  module.exports = CallReportsCollection;

}).call(this);
}, "models/bll/call-reports-collection/calls-collection": function(exports, require, module) {(function() {
  var CallReportsCollection, CallsCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');

  CallsCollection = (function(superClass) {
    extend(CallsCollection, superClass);

    function CallsCollection() {
      return CallsCollection.__super__.constructor.apply(this, arguments);
    }

    CallsCollection.prototype._dataType = function() {
      var fieldValue;
      fieldValue = {};
      fieldValue[this.model.sfdc.type] = this.model.TYPE_ONE_TO_ONE;
      return fieldValue;
    };

    return CallsCollection;

  })(CallReportsCollection);

  module.exports = CallsCollection;

}).call(this);
}, "models/bll/call-reports-collection/calls-today-collection": function(exports, require, module) {(function() {
  var CallsCollection, CallsTodayCollection, Query, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CallsCollection = require('models/bll/call-reports-collection/calls-collection');

  Utils = require('common/utils');

  Query = require('common/query');

  CallsTodayCollection = (function(superClass) {
    extend(CallsTodayCollection, superClass);

    function CallsTodayCollection() {
      return CallsTodayCollection.__super__.constructor.apply(this, arguments);
    }

    CallsTodayCollection.prototype._fetchAllQuery = function() {
      var endOfToday, endOfTodayCondition, startOfToday, startOfTodayCondition;
      startOfToday = Utils.originalStartOfToday();
      endOfToday = Utils.originalEndOfToday();
      startOfTodayCondition = {};
      startOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = startOfToday;
      endOfTodayCondition = {};
      endOfTodayCondition[this.model.sfdc.dateTimeOfVisit] = endOfToday;
      return CallsTodayCollection.__super__._fetchAllQuery.call(this).where(startOfTodayCondition, Query.GRE).and().where(endOfTodayCondition, Query.LRE);
    };

    return CallsTodayCollection;

  })(CallsCollection);

  module.exports = CallsTodayCollection;

}).call(this);
}, "models/bll/clm-call-report-data-collection": function(exports, require, module) {(function() {
  var CLMCallReportData, CLMCallReportDataCollection, EntitiesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  CLMCallReportData = require('models/clm-call-report-data');

  CLMCallReportDataCollection = (function(superClass) {
    extend(CLMCallReportDataCollection, superClass);

    function CLMCallReportDataCollection() {
      this.didStartUploading = bind(this.didStartUploading, this);
      this.fetchAllWhere = bind(this.fetchAllWhere, this);
      return CLMCallReportDataCollection.__super__.constructor.apply(this, arguments);
    }

    CLMCallReportDataCollection.prototype.model = CLMCallReportData;

    CLMCallReportDataCollection.prototype.fetchAllWhere = function(fieldsValues, ignoreDeleted) {
      var query;
      if (ignoreDeleted == null) {
        ignoreDeleted = true;
      }
      query = this._fetchAllQuery().where(fieldsValues);
      return this.fetchWithQuery(query, ignoreDeleted);
    };

    CLMCallReportDataCollection.prototype.didStartUploading = function(entities) {
      var CallReportsCollection, сallReportsCollection;
      CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');
      сallReportsCollection = new CallReportsCollection();
      return сallReportsCollection.linkEntitiesToEntity(entities, 'callReportId');
    };

    return CLMCallReportDataCollection;

  })(EntitiesCollection);

  module.exports = CLMCallReportDataCollection;

}).call(this);
}, "models/bll/contacts-collection": function(exports, require, module) {(function() {
  var BuTeamPersonProfilesCollection, Contact, ContactsCollection, EntitiesCollection, SforceDataContext, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Contact = require('models/contact');

  SforceDataContext = require('models/bll/sforce-data-context');

  BuTeamPersonProfilesCollection = require('models/bll/bu-team-person-profiles-collection');

  Utils = require('common/utils');

  ContactsCollection = (function(superClass) {
    extend(ContactsCollection, superClass);

    function ContactsCollection() {
      this.fetchForContactIds = bind(this.fetchForContactIds, this);
      this._profilesByOrganisationIds = bind(this._profilesByOrganisationIds, this);
      this._updateContactAbbottSpecialtyAndPriority = bind(this._updateContactAbbottSpecialtyAndPriority, this);
      this._updateContactTargetFrequency = bind(this._updateContactTargetFrequency, this);
      this._updateContactAsNonTarget = bind(this._updateContactAsNonTarget, this);
      this._updateContacts = bind(this._updateContacts, this);
      this.didPageFinishDownloading = bind(this.didPageFinishDownloading, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return ContactsCollection.__super__.constructor.apply(this, arguments);
    }

    ContactsCollection.prototype.model = Contact;

    ContactsCollection.prototype.parseModel = function(result) {
      var TargetFrequenciesCollection, lastDateTargetFrequency, ref, tfsCollection;
      TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');
      result[this.model.sfdc.recordType] = (ref = result.Account) != null ? ref.RecordType.Name : void 0;
      tfsCollection = new TargetFrequenciesCollection;
      if (result.TMF1__r) {
        lastDateTargetFrequency = tfsCollection.parseModel(result.TMF1__r);
        result.lastDateTargetFrequency = lastDateTargetFrequency;
        delete result.TMF1__r;
      } else if (result.lastDateTargetFrequency) {
        result.lastDateTargetFrequency = tfsCollection.parseModel(result.lastDateTargetFrequency);
      }
      return ContactsCollection.__super__.parseModel.call(this, result);
    };

    ContactsCollection.prototype.prepareServerConfig = function(configPromise) {
      var TargetFrequenciesCollection;
      TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');
      return configPromise.then((function(_this) {
        return function(config) {
          return SforceDataContext.activeUser().then(function(activeUser) {
            return [config, activeUser];
          });
        };
      })(this)).then((function(_this) {
        return function(arg) {
          var MarketingCycle, activeUser, config, isActive, mcCurrency, mcEndDate, mcStartDate, mcr, tfsCollection, today;
          config = arg[0], activeUser = arg[1];
          MarketingCycle = require('models/marketing-cycle');
          today = Utils.currentDate();
          tfsCollection = new TargetFrequenciesCollection;
          isActive = tfsCollection.model.sfdc.isActive;
          mcr = 'Marketing_Cycle__r';
          mcStartDate = MarketingCycle.sfdc.startDate;
          mcEndDate = MarketingCycle.sfdc.endDate;
          mcCurrency = MarketingCycle.sfdc.currencyIsoCode;
          return _this._mapFieldsList().then(function(fields) {
            config.query = ("SELECT " + (fields.join(',')) + ", (SELECT " + (tfsCollection.model.sfdcFields.join(',')) + " ") + "FROM TMF1__r " + ("WHERE " + isActive + " = true AND " + mcr + "." + mcStartDate + " <= " + today + " AND " + mcr + "." + mcEndDate + " >= " + today + " AND " + mcr + "." + mcCurrency + " = '" + activeUser.currency + "') ") + ("FROM " + _this.model.sfdcTable + " ") + ("WHERE " + _this.model.sfdc.status + " = '" + _this.model.STATUS_ACTIVE + "'");
            return config;
          });
        };
      })(this));
    };

    ContactsCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateContacts(records);
    };

    ContactsCollection.prototype._updateContacts = function(contacts) {
      var contactOrganisationIds, teamCollection;
      teamCollection = new BuTeamPersonProfilesCollection;
      contactOrganisationIds = contacts.map((function(_this) {
        return function(contact) {
          return contact[_this.model.sfdc.organizationSfId];
        };
      })(this));
      return SforceDataContext.activeUser().then((function(_this) {
        return function(activeUser) {
          return teamCollection.fetchForUserUnitAndContacts(activeUser.businessUnit, contactOrganisationIds);
        };
      })(this)).then((function(_this) {
        return function(profiles) {
          return Utils.runSimultaneously(_(contacts).map(function(contact) {
            _this._updateContactAsNonTarget(contact);
            _this._updateContactTargetFrequency(contact);
            return _this._updateContactAbbottSpecialtyAndPriority(contact, _this._profilesByOrganisationIds(profiles));
          })).then(function() {
            return _this.cache.saveAll(contacts);
          });
        };
      })(this));
    };

    ContactsCollection.prototype._updateContactAsNonTarget = function(contact) {
      return contact.isTargetCustomer = false;
    };

    ContactsCollection.prototype._updateContactTargetFrequency = function(contact) {
      if (contact.TMF1__r) {
        return contact.TMF1__r = this._getTargetFrequencyInMarketingCycle(contact.TMF1__r.records);
      }
    };

    ContactsCollection.prototype._getTargetFrequencyInMarketingCycle = function(tfs) {
      var TargetFrequency, lastCallDate, lastTf;
      TargetFrequency = require('models/target-frequency');
      lastCallDate = TargetFrequency.sfdc.lastCallReportDate;
      lastTf = null;
      tfs.forEach((function(_this) {
        return function(currentTf) {
          if ((lastTf === null) || ((currentTf != null) && (lastTf[lastCallDate] != null) && lastTf[lastCallDate] < currentTf[lastCallDate])) {
            return lastTf = currentTf;
          }
        };
      })(this));
      return lastTf;
    };

    ContactsCollection.prototype._updateContactAbbottSpecialtyAndPriority = function(contact, profilesByOrgIds) {
      var profile, ref, ref1;
      profile = profilesByOrgIds[contact[this.model.sfdc.organizationSfId]];
      contact.abbottSpecialty = (ref = profile != null ? profile.specialty : void 0) != null ? ref : '';
      return contact.priority = (ref1 = profile != null ? profile.priority : void 0) != null ? ref1 : '';
    };

    ContactsCollection.prototype._profilesByOrganisationIds = function(profiles) {
      var profilesByOrgIds;
      profilesByOrgIds = {};
      profiles.forEach((function(_this) {
        return function(profile) {
          return profilesByOrgIds[profile.organizationSfid] = profile;
        };
      })(this));
      return profilesByOrgIds;
    };

    ContactsCollection.prototype.fetchForContactIds = function(contactIds) {
      var query;
      query = this._fetchAllQuery().whereIn(this.model.sfdc.id, contactIds);
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    return ContactsCollection;

  })(EntitiesCollection);

  module.exports = ContactsCollection;

}).call(this);
}, "models/bll/device-collection": function(exports, require, module) {(function() {
  var Device, DeviceCollection, DeviceManager, EntitiesCollection, SyncLogManager, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Utils = require("common/utils");

  EntitiesCollection = require('models/bll/entities-collection');

  DeviceManager = require('common/device-manager');

  SyncLogManager = require('common/log-manager');

  Device = require('models/device');

  DeviceCollection = (function(superClass) {
    extend(DeviceCollection, superClass);

    function DeviceCollection() {
      this.updateDeviceInfo = bind(this.updateDeviceInfo, this);
      this.getDevice = bind(this.getDevice, this);
      this.updateDevice = bind(this.updateDevice, this);
      this.registerDevice = bind(this.registerDevice, this);
      this._fillDeviceData = bind(this._fillDeviceData, this);
      return DeviceCollection.__super__.constructor.apply(this, arguments);
    }

    DeviceCollection.prototype.model = Device;

    DeviceCollection.prototype._fillDeviceData = function(device) {
      device.deviceId = DeviceManager.deviceId();
      device.lastSyncronisation = Utils.originalDateTime(new Date);
      device.lastUserSfid = Force.userId;
      device.model = DeviceManager.deviceModel();
      device.osVersion = DeviceManager.osVersion();
      device.version = DeviceManager.appVersion();
      device.lastDebugLog = SyncLogManager.log;
      device.erased = false;
      return $.when(device);
    };

    DeviceCollection.prototype.registerDevice = function() {
      var device;
      device = new this.model;
      return this._fillDeviceData(device).then(this.createEntity);
    };

    DeviceCollection.prototype.updateDevice = function(device) {
      return this._fillDeviceData(device).then(this.updateEntity);
    };

    DeviceCollection.prototype.getDevice = function() {
      var deviceId, whereQuery;
      deviceId = DeviceManager.deviceId();
      whereQuery = {};
      whereQuery[this.model.sfdc.deviceId] = deviceId;
      return this.fetchAllWhere(whereQuery).then((function(_this) {
        return function(response) {
          var device;
          device = response.records.length ? _this.parseEntity(response.records[0]) : null;
          return $.when(device);
        };
      })(this));
    };

    DeviceCollection.prototype.updateDeviceInfo = function() {
      return this.getDevice().then((function(_this) {
        return function(device) {
          if (!device) {
            return _this.registerDevice();
          } else {
            return _this.updateDevice(device);
          }
        };
      })(this));
    };

    return DeviceCollection;

  })(EntitiesCollection);

  module.exports = DeviceCollection;

}).call(this);
}, "models/bll/entities-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, Entity, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Query = require('common/query');

  ConfigurationManager = require('db/configuration-manager');

  Utils = require('common/utils');

  EntitiesCollection = (function(superClass) {
    extend(EntitiesCollection, superClass);

    EntitiesCollection.TYPE_WARNING = 'Warning';

    EntitiesCollection.prototype.model = Entity;

    EntitiesCollection.prototype.pageSize = 1000;

    EntitiesCollection.prototype.loadBatchSize = 10000;

    EntitiesCollection.prototype.METHOD_CREATE = 'create';

    EntitiesCollection.prototype.METHOD_UPDATE = 'update';

    EntitiesCollection.prototype.METHOD_UPSERT = 'upsert';

    EntitiesCollection.prototype.METHOD_DELETE = 'delete';

    function EntitiesCollection() {
      this.linkEntitiesToEntity = bind(this.linkEntitiesToEntity, this);
      this._isEntityParsed = bind(this._isEntityParsed, this);
      this._attributesFromEntity = bind(this._attributesFromEntity, this);
      this.removeEntities = bind(this.removeEntities, this);
      this.removeEntity = bind(this.removeEntity, this);
      this.updateEntity = bind(this.updateEntity, this);
      this.createEntity = bind(this.createEntity, this);
      this._recursiveForEachBy = bind(this._recursiveForEachBy, this);
      this.markEntityAsNotModified = bind(this.markEntityAsNotModified, this);
      this.upsertEntitiesSilently = bind(this.upsertEntitiesSilently, this);
      this.fetchAllWhereLikeAndSortBy = bind(this.fetchAllWhereLikeAndSortBy, this);
      this.fetchAllLikeAndSortBy = bind(this.fetchAllLikeAndSortBy, this);
      this.fetchAllWhereAndSortBy = bind(this.fetchAllWhereAndSortBy, this);
      this.fetchAllWhereLike = bind(this.fetchAllWhereLike, this);
      this.fetchAllLike = bind(this.fetchAllLike, this);
      this.fetchAllWhereIn = bind(this.fetchAllWhereIn, this);
      this.fetchAllWhere = bind(this.fetchAllWhere, this);
      this.fetchAllSortedBy = bind(this.fetchAllSortedBy, this);
      this.fetchAll = bind(this.fetchAll, this);
      this._fetchAllQuery = bind(this._fetchAllQuery, this);
      this.fetchEntityById = bind(this.fetchEntityById, this);
      this.fetchWithQuery = bind(this.fetchWithQuery, this);
      this.fetchUnparsedWithQuery = bind(this.fetchUnparsedWithQuery, this);
      this.parseModel = bind(this.parseModel, this);
      this.parseEntity = bind(this.parseEntity, this);
      this.parse = bind(this.parse, this);
      this._responseWithParsedRecords = bind(this._responseWithParsedRecords, this);
      this.getAllEntitiesFromResponse = bind(this.getAllEntitiesFromResponse, this);
      this.getAllUnparsedEntitiesFromResponse = bind(this.getAllUnparsedEntitiesFromResponse, this);
      this.mapAllUnparsedEntitiesFromResponse = bind(this.mapAllUnparsedEntitiesFromResponse, this);
      this.getMoreEntitiesFromResponse = bind(this.getMoreEntitiesFromResponse, this);
      this.getMoreUnparsedEntitiesFromResponse = bind(this.getMoreUnparsedEntitiesFromResponse, this);
      this.mapMoreUnparsedEntitiesFromResponse = bind(this.mapMoreUnparsedEntitiesFromResponse, this);
      this._loadNextBatchRecursively = bind(this._loadNextBatchRecursively, this);
      this.fetchRemoteObjectsFromServer = bind(this.fetchRemoteObjectsFromServer, this);
      this._syncMethodForEntity = bind(this._syncMethodForEntity, this);
      this.upsertEntityToServer = bind(this.upsertEntityToServer, this);
      this._beforeCheckExistingEntityOnServer = bind(this._beforeCheckExistingEntityOnServer, this);
      this._checkExistingEntityOnServer = bind(this._checkExistingEntityOnServer, this);
      this._updateClmToolId = bind(this._updateClmToolId, this);
      this.handleErrorForEntity = bind(this.handleErrorForEntity, this);
      this._handleEntityUploadingErrorStep = bind(this._handleEntityUploadingErrorStep, this);
      this._upsertEntitiesToServerRecursively = bind(this._upsertEntitiesToServerRecursively, this);
      this._upsertEntitiesToServer = bind(this._upsertEntitiesToServer, this);
      this._onUploadingFinished = bind(this._onUploadingFinished, this);
      this._onUploadingStarted = bind(this._onUploadingStarted, this);
      this._onPageDownloadFinished = bind(this._onPageDownloadFinished, this);
      this._onDownloadingFinished = bind(this._onDownloadingFinished, this);
      this._includedFieldForConfigs = bind(this._includedFieldForConfigs, this);
      this._hasFieldIncludeSettings = bind(this._hasFieldIncludeSettings, this);
      this._shouldExcludeFieldForConfigs = bind(this._shouldExcludeFieldForConfigs, this);
      this._mapFieldsList = bind(this._mapFieldsList, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      this.serverConfig = bind(this.serverConfig, this);
      EntitiesCollection.__super__.constructor.apply(this, arguments);
      this.cache = new Force.StoreCache(this.model.table, null);
    }


    /* SERVER */

    EntitiesCollection.prototype.serverConfig = function() {
      return this._mapFieldsList().then((function(_this) {
        return function(fields) {
          var config, soql;
          soql = "SELECT " + (fields.join(',')) + " FROM " + _this.model.sfdcTable;
          config = {
            type: 'soql',
            query: soql,
            closeCursorImmediate: false
          };
          return _this.prepareServerConfig($.when(config));
        };
      })(this));
    };

    EntitiesCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise;
    };

    EntitiesCollection.prototype._mapFieldsList = function() {
      return ConfigurationManager.getConfig().then((function(_this) {
        return function(configs) {
          return _.chain(_this.model.sfdcFields).map(function(field) {
            if (_this._shouldExcludeFieldForConfigs(field, configs)) {
              return null;
            } else if (_this._hasFieldIncludeSettings(field)) {
              return _this._includedFieldForConfigs(field, configs);
            } else if (_this.model.isToLabel[field]) {
              return "toLabel(" + field + ")";
            } else {
              return field;
            }
          }).compact().value();
        };
      })(this));
    };

    EntitiesCollection.prototype._shouldExcludeFieldForConfigs = function(field, configs) {
      var fields;
      fields = _.keys(this.model.excludableFields);
      if (_.contains(fields, field)) {
        return !configs[this.model.excludableFields[field]];
      } else {
        return false;
      }
    };

    EntitiesCollection.prototype._hasFieldIncludeSettings = function(field) {
      var fields;
      fields = _.keys(this.model.includableFields);
      return _.contains(fields, field);
    };

    EntitiesCollection.prototype._includedFieldForConfigs = function(field, configs) {
      if (configs[this.model.includableFields[field]]) {
        return field;
      } else {
        return null;
      }
    };

    EntitiesCollection.prototype._onDownloadingStarted = function() {
      this.entitiesIdsForDelete = [];
      return $.when(this.didStartDownloading());
    };

    EntitiesCollection.prototype.didStartDownloading = function() {};

    EntitiesCollection.prototype._removeUnmodifiedEntitiesNotInScope = function(recordsIds) {
      if (!recordsIds || recordsIds.length <= 0) {
        return $.when();
      } else {
        return this.fetchUnparsedWithQuery(new Query().selectFrom(this.model.table).where({
          __local__: false
        }).and().whereNotIn(this.model.sfdc.id, recordsIds)).then((function(_this) {
          return function(response) {
            return _this.getAllUnparsedEntitiesFromResponse(response);
          };
        })(this)).then(this.removeEntities);
      }
    };

    EntitiesCollection.prototype._onDownloadingFinished = function(records) {
      return this._removeUnmodifiedEntitiesNotInScope(this.entitiesIdsForDelete).then((function(_this) {
        return function() {
          _this.entitiesIdsForDelete = [];
          return $.when(_this.didFinishDownloading()).then(function() {
            return records;
          });
        };
      })(this));
    };

    EntitiesCollection.prototype._onPageDownloadFinished = function(records) {
      var entitiesIds;
      entitiesIds = records.map((function(_this) {
        return function(record) {
          return record[_this.model.sfdc.id];
        };
      })(this));
      this.entitiesIdsForDelete = this.entitiesIdsForDelete.concat(entitiesIds);
      return $.when(this.didPageFinishDownloading(records)).then(function() {
        return records;
      });
    };

    EntitiesCollection.prototype.didPageFinishDownloading = function(records) {
      return this.cache.saveAll(records);
    };

    EntitiesCollection.prototype.didFinishDownloading = function(records) {};

    EntitiesCollection.prototype._onUploadingStarted = function(entities) {
      return $.when(this.didStartUploading(entities));
    };

    EntitiesCollection.prototype.didStartUploading = function(entities) {
      return entities;
    };

    EntitiesCollection.prototype._onUploadingFinished = function(records) {
      return $.when(this.didFinishUploading(records)).then(function() {
        return records;
      });
    };

    EntitiesCollection.prototype.didFinishUploading = function(records) {};

    EntitiesCollection.prototype.sync = function(method, model, options) {
      var deferred;
      deferred = new $.Deferred();
      if (options == null) {
        options = {};
      }
      if (method === this.METHOD_UPSERT) {
        options.success = (function(_this) {
          return function(records) {
            return _this._onUploadingFinished(records).then(deferred.resolve);
          };
        })(this);
        this._upsertEntitiesToServer(options);
      } else {
        options.success = (function(_this) {
          return function(records) {
            return _this._onDownloadingFinished(records).then(deferred.resolve);
          };
        })(this);
        options.error = function(error) {
          return deferred.reject(error);
        };
        this._onDownloadingStarted().then((function(_this) {
          return function() {
            return EntitiesCollection.__super__.sync.call(_this, method, model, options);
          };
        })(this));
      }
      return deferred.promise();
    };

    EntitiesCollection.prototype._upsertEntitiesToServer = function(options) {
      var shouldIgnoreDeleted;
      shouldIgnoreDeleted = false;
      return this.fetchWithQuery(new Query().selectFrom(this.model.table).where({
        __local__: true
      }), shouldIgnoreDeleted).then(this.getAllEntitiesFromResponse).then((function(_this) {
        return function(entities) {
          return _this._onUploadingStarted(entities);
        };
      })(this)).then((function(_this) {
        return function(entities) {
          return _this._upsertEntitiesToServerRecursively(entities, options.each);
        };
      })(this)).then(options.success);
    };

    EntitiesCollection.prototype._upsertEntitiesToServerRecursively = function(entities, eachStep) {
      var recursion, syncedEntities;
      syncedEntities = [];
      recursion = (function(_this) {
        return function(entities, index) {
          if (!(index < entities.length)) {
            return $.when(syncedEntities);
          } else {
            return _this.upsertEntityToServer(entities[index]).then(function(entity, errorObj) {
              if (!errorObj) {
                syncedEntities.push(entity);
                return recursion(entities, index + 1);
              } else {
                return _this._handleEntityUploadingErrorStep(entities[index], errorObj, eachStep).then(function() {
                  entities = _.without(entities, entity);
                  return recursion(entities, index);
                });
              }
            });
          }
        };
      })(this);
      return recursion(entities, 0);
    };

    EntitiesCollection.prototype._handleEntityUploadingErrorStep = function(entity, errorObj, step) {
      var error;
      error = this._errorFromResponse(errorObj);
      return $.when(this.handleErrorForEntity(error, entity)).then((function(_this) {
        return function() {
          var errorCode;
          errorCode = error.details.errorCode;
          if (!_.contains(_this.ignoreErrorCodes(), errorCode)) {
            if (_.contains(_this.warningErrorCodes(), errorCode)) {
              error.type = EntitiesCollection.TYPE_WARNING;
            }
            if (step) {
              return step(entity, error);
            }
          }
        };
      })(this));
    };

    EntitiesCollection.prototype._errorFromResponse = function(response) {
      var error, errors;
      error = response;
      if (!_.isObject(response)) {
        errors = JSON.parse(response);
        error = _.isArray(errors) ? _.first(errors) : errors;
      }
      return new Force.Error(error);
    };

    EntitiesCollection.prototype.handleErrorForEntity = function(error, entity) {
      if (error.details.errorCode === 'ENTITY_IS_DELETED') {
        return this.removeEntity(entity);
      }
    };

    EntitiesCollection.prototype.ignoreErrorCodes = function() {
      return ['ENTITY_IS_DELETED'];
    };

    EntitiesCollection.prototype.warningErrorCodes = function() {
      return [];
    };

    EntitiesCollection.prototype._updateClmToolId = function(entity, isForce) {
      if ((!entity.clmToolId) || isForce) {
        entity.clmToolId = Utils.generateUID();
        return this.updateEntity(entity).then(this.parseEntity);
      } else {
        return $.when(entity);
      }
    };

    EntitiesCollection.prototype._checkExistingEntityOnServer = function(method, entity, options) {
      if ((options.fieldlist.indexOf("CLM_Tool_Id__c") !== -1) && (method !== this.METHOD_DELETE)) {
        return this._updateClmToolId(entity).then((function(_this) {
          return function(record) {
            var onSuccess;
            onSuccess = function(response) {
              if (response.totalSize) {
                record.id = response.records[0][_this.model.sfdc.id];
                record.attributes = _.extend(record.attributes, {
                  __local__: false,
                  __locally_created__: false,
                  __locally_updated__: false,
                  __locally_deleted__: false
                });
                return options.success(record);
              } else {
                return record.sync(method, record, options);
              }
            };
            return Force.forcetkClient.query("SELECT Id FROM " + _this.model.sfdcTable + " WHERE " + _this.model.sfdc.clmToolId + " = '" + record.clmToolId + "'").then(onSuccess, options.error);
          };
        })(this));
      } else {
        return entity.sync(method, entity, options);
      }
    };

    EntitiesCollection.prototype._beforeCheckExistingEntityOnServer = function(entity, method) {
      if (method === this.METHOD_UPDATE) {
        return this._updateClmToolId(entity, true);
      } else {
        return $.when(true);
      }
    };

    EntitiesCollection.prototype.upsertEntityToServer = function(entity) {
      var deferred, method, options;
      deferred = new $.Deferred();
      method = this._syncMethodForEntity(entity);
      options = {};
      options.cache = null;
      options.cacheForOriginals = null;
      options.cacheMode = Force.CACHE_MODE.SERVER_ONLY;
      options.mergeMode = Force.MERGE_MODE.OVERWRITE;
      options.fieldlist = this.model.uploadableFields;
      options.success = (function(_this) {
        return function(record) {
          var promise;
          promise = (function() {
            switch (method) {
              case this.METHOD_CREATE:
                return this.updateEntity(record, false);
              case this.METHOD_UPDATE:
                return this.updateEntity(record, false);
              case this.METHOD_DELETE:
                return this.removeEntity(record, false);
            }
          }).call(_this);
          return promise.then(function(record) {
            return deferred.resolve(record, null);
          });
        };
      })(this);
      options.error = function(jqXHR, textStatus, errorThrown) {
        return deferred.resolve(entity, jqXHR);
      };
      this._beforeCheckExistingEntityOnServer(entity, method).then((function(_this) {
        return function() {
          return _this._checkExistingEntityOnServer(method, entity, options);
        };
      })(this));
      return deferred.promise();
    };

    EntitiesCollection.prototype._syncMethodForEntity = function(entity) {
      var attributes;
      attributes = entity.attributes;
      if (attributes.__locally_deleted__) {
        return this.METHOD_DELETE;
      } else if (attributes.__locally_created__) {
        return this.METHOD_CREATE;
      } else if (attributes.__locally_updated__ && !attributes.__locally_deleted__) {
        return this.METHOD_UPDATE;
      }
    };

    EntitiesCollection.prototype.fetchRemoteObjectsFromServer = function(config) {
      return Force.fetchSObjectsFromServer(config).then(this._loadNextBatchRecursively);
    };

    EntitiesCollection.prototype._loadNextBatchRecursively = function(response) {
      if (response.hasMore()) {
        return response.getMore(this.loadBatchSize).then(this._onPageDownloadFinished).then((function(_this) {
          return function() {
            return _this._loadNextBatchRecursively(response);
          };
        })(this));
      } else {
        return response.closeCursor().then((function(_this) {
          return function() {
            return _this._onPageDownloadFinished(response.records);
          };
        })(this)).then((function(_this) {
          return function() {
            return response;
          };
        })(this));
      }
    };


    /* CACHE */

    EntitiesCollection.prototype.mapMoreUnparsedEntitiesFromResponse = function(response, step) {
      if (step == null) {
        step = function(response, records) {
          return response;
        };
      }
      if (!response.hasMore()) {
        return $.when(response);
      } else {
        return response.getMore().then((function(_this) {
          return function(records) {
            return step(response, records);
          };
        })(this));
      }
    };

    EntitiesCollection.prototype.getMoreUnparsedEntitiesFromResponse = function(response) {
      return this.mapMoreUnparsedEntitiesFromResponse(response);
    };

    EntitiesCollection.prototype.getMoreEntitiesFromResponse = function(response) {
      return this.mapMoreUnparsedEntitiesFromResponse(response, this._responseWithParsedRecords);
    };

    EntitiesCollection.prototype.mapAllUnparsedEntitiesFromResponse = function(response, step) {
      var recursion;
      if (step == null) {
        step = function(response, records) {
          return response;
        };
      }
      recursion = function(response, step) {
        if (!response.hasMore()) {
          return response.records;
        } else {
          return response.getMore().then(function(records) {
            return $.when(step(response, records));
          }).then(function() {
            return recursion(response, step);
          });
        }
      };
      return $.when(step(response, response.records)).then(function() {
        return recursion(response, step);
      });
    };

    EntitiesCollection.prototype.getAllUnparsedEntitiesFromResponse = function(response) {
      return this.mapAllUnparsedEntitiesFromResponse(response);
    };

    EntitiesCollection.prototype.getAllEntitiesFromResponse = function(response) {
      return this.mapAllUnparsedEntitiesFromResponse(response, this._responseWithParsedRecords);
    };

    EntitiesCollection.prototype._responseWithParsedRecords = function(response, records) {
      var length;
      records = this.parse(records);
      length = response.records.length;
      response.records.splice.apply(response.records, [length - records.length, records.length].concat(records));
      return response;
    };

    EntitiesCollection.prototype.parse = function(records, options) {
      return records.map((function(_this) {
        return function(result) {
          return _this.parseEntity(result, options);
        };
      })(this));
    };

    EntitiesCollection.prototype.parseEntity = function(record, options) {
      var sobject;
      if (this._isEntityParsed(record)) {
        return record;
      } else {
        sobject = this.parseModel(record);
        sobject.sobjectType = this.model.sfdcTable;
        return sobject;
      }
    };

    EntitiesCollection.prototype.parseModel = function(result) {
      return new this.model(result);
    };

    EntitiesCollection.prototype.fetchUnparsedWithQuery = function(query, ignoreDeleted) {
      var smartSql;
      if (ignoreDeleted == null) {
        ignoreDeleted = true;
      }
      smartSql = this._createSmartSqlQuery(query, this.model.table, this.pageSize);
      return this.fetchRemoteObjectsFromCache(this.cache, smartSql, ignoreDeleted);
    };

    EntitiesCollection.prototype.fetchWithQuery = function(query, ignoreDeleted) {
      if (ignoreDeleted == null) {
        ignoreDeleted = true;
      }
      return this.fetchUnparsedWithQuery(query, ignoreDeleted).then((function(_this) {
        return function(response) {
          response.records = _this.parse(response.records);
          return response;
        };
      })(this));
    };

    EntitiesCollection.prototype._createSmartSqlQuery = function(query, soup, pageSize) {
      query = query.toString();
      return {
        queryType: 'smart',
        soupName: soup,
        smartSql: query,
        pageSize: pageSize
      };
    };

    EntitiesCollection.prototype.fetchEntityById = function(id) {
      var idFieldValue, query;
      idFieldValue = {};
      idFieldValue[this.model.sfdc.id] = id;
      query = new Query().selectFrom(this.model.table).where(idFieldValue);
      return this.fetchWithQuery(query).then((function(_this) {
        return function(response) {
          var record;
          record = _this.getEntityFromResponse(response);
          response.closeCursor();
          return record;
        };
      })(this));
    };

    EntitiesCollection.prototype.getEntityFromResponse = function(response) {
      var ref;
      return (ref = _.first(response.records)) != null ? ref : null;
    };

    EntitiesCollection.prototype._fetchAllQuery = function() {
      return new Query().selectFrom(this.model.table);
    };

    EntitiesCollection.prototype.fetchAll = function() {
      var query;
      query = this._fetchAllQuery();
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllSortedBy = function(fields, isAsc) {
      var order, query;
      order = isAsc ? Query.ASC : Query.DESC;
      query = this._fetchAllQuery().orderBy(fields, order);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllWhere = function(fieldsValues) {
      var query;
      query = this._fetchAllQuery().where(fieldsValues);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllWhereIn = function(field, values) {
      var query;
      query = this._fetchAllQuery().whereIn(field, values);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllLike = function(fieldsValues) {
      var query;
      query = this._fetchAllQuery().whereLike(fieldsValues);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllWhereLike = function(whereFieldsValues, likeFieldsValues) {
      var query;
      query = this._fetchAllQuery().where(whereFieldsValues).and().whereLike(likeFieldsValues);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllWhereAndSortBy = function(fieldsValues, sortFields, isAsc) {
      var order, query;
      order = isAsc ? Query.ASC : Query.DESC;
      query = this._fetchAllQuery().where(fieldsValues).orderBy(sortFields, order);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllLikeAndSortBy = function(fieldsValues, sortFields, isAsc) {
      var order, query;
      order = isAsc ? Query.ASC : Query.DESC;
      query = this._fetchAllQuery().whereLike(fieldsValues).orderBy(sortFields, order);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.fetchAllWhereLikeAndSortBy = function(whereFieldsValues, likeFieldsValues, sortFields, isAsc) {
      var order, query;
      order = isAsc ? Query.ASC : Query.DESC;
      query = this._fetchAllQuery().where(whereFieldsValues).and().whereLike(likeFieldsValues).orderBy(sortFields, order);
      return this.fetchWithQuery(query);
    };

    EntitiesCollection.prototype.upsertEntitiesSilently = function(entities) {
      return this._recursiveForEachBy(entities, this.pageSize, (function(_this) {
        return function(entitiesBatch) {
          return Force.smartstoreClient.upsertSoupEntries(_this.model.table, entitiesBatch);
        };
      })(this));
    };

    EntitiesCollection.prototype.markEntityAsNotModified = function(entity) {
      var nonModifiedValues;
      nonModifiedValues = {
        __local__: false,
        __locally_created__: false,
        __locally_updated__: false,
        __locally_deleted__: false
      };
      if (this._isEntityParsed(entity)) {
        entity.attributes = _.extend(entity.attributes, nonModifiedValues);
      } else {
        entity = _.extend(entity, nonModifiedValues);
      }
      return Force.smartstoreClient.upsertSoupEntries(this.model.table, [entity]);
    };

    EntitiesCollection.prototype._recursiveForEachBy = function(collection, stepBy, callback, index) {
      var nextIndex;
      if (index == null) {
        index = 0;
      }
      if (index >= collection.length) {
        return $.when();
      } else {
        nextIndex = index + stepBy;
        return $.when(callback(collection.slice(index, nextIndex))).then((function(_this) {
          return function() {
            return _this._recursiveForEachBy(collection, stepBy, callback, nextIndex);
          };
        })(this));
      }
    };

    EntitiesCollection.prototype.createEntity = function(entity, localAction) {
      var attributes;
      if (localAction == null) {
        localAction = true;
      }
      attributes = this._attributesFromEntity(entity);
      return Force.syncRemoteObjectWithCache(this.METHOD_CREATE, attributes[this.model.sfdc.id], attributes, null, this.cache, localAction);
    };

    EntitiesCollection.prototype.updateEntity = function(entity, localAction) {
      var attributes;
      if (localAction == null) {
        localAction = true;
      }
      attributes = this._attributesFromEntity(entity);
      return Force.syncRemoteObjectWithCache(this.METHOD_UPDATE, attributes[this.model.sfdc.id], attributes, null, this.cache, localAction);
    };

    EntitiesCollection.prototype.removeEntity = function(entity, localAction) {
      var attributes;
      if (localAction == null) {
        localAction = true;
      }
      attributes = this._attributesFromEntity(entity);
      return Force.syncRemoteObjectWithCache(this.METHOD_DELETE, attributes[this.model.sfdc.id], null, null, this.cache, localAction);
    };

    EntitiesCollection.prototype.removeEntities = function(entities) {
      return Force.smartstoreClient.removeFromSoup(this.model.table, entities.map((function(_this) {
        return function(entity) {
          return _this._attributesFromEntity(entity)._soupEntryId;
        };
      })(this)));
    };

    EntitiesCollection.prototype._attributesFromEntity = function(entity) {
      if (this._isEntityParsed(entity)) {
        return entity.attributes;
      } else {
        return entity;
      }
    };

    EntitiesCollection.prototype._isEntityParsed = function(entity) {
      return entity != null ? entity.hasOwnProperty('cid') : void 0;
    };

    EntitiesCollection.prototype.linkEntitiesToEntity = function(entities, field) {
      var soupEntryIds;
      soupEntryIds = _.uniq(entities.map((function(_this) {
        return function(entity) {
          return entity[field];
        };
      })(this)));
      return this.fetchAllWhereIn("_soupEntryId", soupEntryIds).then(this.getAllEntitiesFromResponse).then((function(_this) {
        return function(records) {
          var entitiesMap;
          entitiesMap = {};
          records.forEach(function(record) {
            return entitiesMap[record.attributes._soupEntryId] = record.id;
          });
          entities = entities.map(function(entity) {
            if (!entity.attributes.__locally_deleted__) {
              if (entitiesMap[entity[field]]) {
                entity[field] = entitiesMap[entity[field]];
              }
            }
            return entity;
          });
          return entities;
        };
      })(this));
    };

    return EntitiesCollection;

  })(Force.SObjectCollection);

  module.exports = EntitiesCollection;

}).call(this);
}, "models/bll/local-images-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, ImageProcessor, LocalImage, LocalImagesCollection, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  ImageProcessor = require('common/image-processor/image-processor');

  LocalImage = require('models/local-image');

  Query = require('common/query');

  Utils = require('common/utils');

  LocalImagesCollection = (function(superClass) {
    extend(LocalImagesCollection, superClass);

    function LocalImagesCollection() {
      this._removePhotoImagesForLocalImages = bind(this._removePhotoImagesForLocalImages, this);
      this.removeEntities = bind(this.removeEntities, this);
      this._removePhotoImageForLocalImage = bind(this._removePhotoImageForLocalImage, this);
      this.removeEntity = bind(this.removeEntity, this);
      this.getAllLocalImagesForAttachments = bind(this.getAllLocalImagesForAttachments, this);
      return LocalImagesCollection.__super__.constructor.apply(this, arguments);
    }

    LocalImagesCollection.prototype.model = LocalImage;

    LocalImagesCollection.prototype.getAllLocalImagesForAttachments = function(attachments) {
      return this.fetchAllWhereIn('parentId', attachments.map((function(_this) {
        return function(attachment) {
          return _this._attributesFromEntity(attachment)._soupEntryId;
        };
      })(this))).then(this.getAllEntitiesFromResponse);
    };

    LocalImagesCollection.prototype.removeEntity = function(entity, localAction) {
      if (localAction == null) {
        localAction = true;
      }
      return this._removePhotoImageForLocalImage(entity).then((function(_this) {
        return function() {
          return LocalImagesCollection.__super__.removeEntity.call(_this, entity, localAction);
        };
      })(this));
    };

    LocalImagesCollection.prototype._removePhotoImageForLocalImage = function(localImage, imageProcessor) {
      if (imageProcessor == null) {
        imageProcessor = new ImageProcessor;
      }
      return imageProcessor.remove(localImage.path).then(function() {
        return imageProcessor.removeThumb(localImage.thumbnailPath);
      });
    };

    LocalImagesCollection.prototype.removeEntities = function(entities) {
      return this._removePhotoImagesForLocalImages(entities).then((function(_this) {
        return function() {
          return LocalImagesCollection.__super__.removeEntities.call(_this, entities);
        };
      })(this));
    };

    LocalImagesCollection.prototype._removePhotoImagesForLocalImages = function(entities) {
      var imageProcessor, recursion;
      imageProcessor = new ImageProcessor;
      recursion = (function(_this) {
        return function(entities, index) {
          if (!(index < entities.length)) {
            return $.when(entities);
          } else {
            return _this._removePhotoImageForLocalImage(entities[index], imageProcessor).then(function() {
              return recursion(entities, ++index);
            });
          }
        };
      })(this);
      return recursion(entities, 0);
    };

    return LocalImagesCollection;

  })(EntitiesCollection);

  module.exports = LocalImagesCollection;

}).call(this);
}, "models/bll/marketing-cycles-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, MarketingCycle, MarketingCyclesCollection, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  MarketingCycle = require('models/marketing-cycle');

  Utils = require('common/utils');

  Query = require('common/query');

  MarketingCyclesCollection = (function(superClass) {
    extend(MarketingCyclesCollection, superClass);

    function MarketingCyclesCollection() {
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return MarketingCyclesCollection.__super__.constructor.apply(this, arguments);
    }

    MarketingCyclesCollection.prototype.model = MarketingCycle;

    MarketingCyclesCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          var SforceDataContext;
          SforceDataContext = require('models/bll/sforce-data-context');
          return SforceDataContext.activeUser().then(function(currentUser) {
            var today;
            today = Utils.currentDate();
            config.query += " where " + _this.model.sfdc.startDate + " <= " + today + " and " + _this.model.sfdc.endDate + " >= " + today + " and " + _this.model.sfdc.currencyIsoCode + " = '" + currentUser.currency + "'";
            return config;
          });
        };
      })(this));
    };

    MarketingCyclesCollection.prototype.fetchByDateAndCurrency = function(date, currency) {
      var currencyValue, endDateValue, query, startDateValue;
      startDateValue = {};
      endDateValue = {};
      currencyValue = {};
      startDateValue[this.model.sfdc.startDate] = date;
      endDateValue[this.model.sfdc.endDate] = date;
      currencyValue[this.model.sfdc.currencyIsoCode] = currency;
      query = new Query().selectFrom(this.model.table).where(startDateValue, Query.LRE).and().where(endDateValue, Query.GRE).and().where(currencyValue).limit(1);
      return this.fetchWithQuery(query).then(this.getEntityFromResponse);
    };

    return MarketingCyclesCollection;

  })(EntitiesCollection);

  module.exports = MarketingCyclesCollection;

}).call(this);
}, "models/bll/marketing-messages-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, MarketingMessage, MarketingMessagesCollection, SforceDataContext, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  MarketingMessage = require('models/marketing-message');

  SforceDataContext = require('models/bll/sforce-data-context');

  Utils = require('common/utils');

  MarketingMessagesCollection = (function(superClass) {
    extend(MarketingMessagesCollection, superClass);

    function MarketingMessagesCollection() {
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return MarketingMessagesCollection.__super__.constructor.apply(this, arguments);
    }

    MarketingMessagesCollection.prototype.model = MarketingMessage;

    MarketingMessagesCollection.prototype.prepareServerConfig = function(configPromise) {
      var config;
      config = null;
      return configPromise.then((function(_this) {
        return function(config) {
          return SforceDataContext.activeUser().then(function(currentUser) {
            config.query += " where " + _this.model.sfdc.status + " = true and " + _this.model.sfdc.currencyIsoCode + " = '" + currentUser.currency + "'";
            return config;
          });
        };
      })(this));
    };

    return MarketingMessagesCollection;

  })(EntitiesCollection);

  module.exports = MarketingMessagesCollection;

}).call(this);
}, "models/bll/mechanic-adjustments-collection": function(exports, require, module) {(function() {
  var CallreportFilterSFQueryBuilder, ConfigurationManager, EntitiesCollection, MechanicAdjustment, MechanicAdjustmentsCollection, PromotionFilterSFQueryBuilder, Query,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  MechanicAdjustment = require('models/mechanic-adjustment');

  Query = require('common/query');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  CallreportFilterSFQueryBuilder = require('common/sf-query-builders/callreport-filter-sf-query-builder');

  MechanicAdjustmentsCollection = (function(superClass) {
    extend(MechanicAdjustmentsCollection, superClass);

    function MechanicAdjustmentsCollection() {
      this.getAdjustmentsByCallReport = bind(this.getAdjustmentsByCallReport, this);
      this.getAdjustmentsByCallReportAndMechanicEvaluationAccounts = bind(this.getAdjustmentsByCallReportAndMechanicEvaluationAccounts, this);
      this.getAdjustmentsForMechanicEvaluationsWidthIds = bind(this.getAdjustmentsForMechanicEvaluationsWidthIds, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return MechanicAdjustmentsCollection.__super__.constructor.apply(this, arguments);
    }

    MechanicAdjustmentsCollection.prototype.model = MechanicAdjustment;

    MechanicAdjustmentsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('MechanicEvaluation_Account__r.PromotionAccount__r.Promotion__r', clmConfig);
            config.query += ' AND';
            config.query += CallreportFilterSFQueryBuilder.buildWhereFilter('CallReport__r', true);
            return config;
          });
        };
      })(this));
    };

    MechanicAdjustmentsCollection.prototype.getAdjustmentsForMechanicEvaluationsWidthIds = function(evaluationSfIds) {
      return this.fetchAllWhereIn(this.model.sfdc.mechanicEvaluationAccountSfId, evaluationSfIds).then(this.getAllEntitiesFromResponse);
    };

    MechanicAdjustmentsCollection.prototype.getAdjustmentsByCallReportAndMechanicEvaluationAccounts = function(callReport, evaluationsSfIds) {
      var query;
      query = new Query().selectFrom(this.model.table).whereIn(this.model.sfdc.callReportSfId, [callReport.id, this._attributesFromEntity(callReport)._soupEntryId]).and().whereIn(this.model.sfdc.mechanicEvaluationAccountSfId, evaluationsSfIds);
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    MechanicAdjustmentsCollection.prototype.getAdjustmentsByCallReport = function(callReport) {
      var callReportIdValue;
      callReportIdValue = {};
      callReportIdValue[this.model.sfdc.callReportSfId] = this._attributesFromEntity(callReport)._soupEntryId;
      return this.fetchAllWhere(callReportIdValue).then(this.getAllEntitiesFromResponse);
    };

    MechanicAdjustmentsCollection.prototype.didStartUploading = function(records) {
      var adjustmentsToUpload, brokenAdjustments, ref, ref1, splitBrokenAdjustments;
      splitBrokenAdjustments = _.groupBy(records, function(record) {
        return (record.isModifiedInTrade === true) || (record.isModifiedInCall === true);
      });
      brokenAdjustments = (ref = splitBrokenAdjustments["true"]) != null ? ref : [];
      adjustmentsToUpload = (ref1 = splitBrokenAdjustments["false"]) != null ? ref1 : [];
      return this.removeEntities(brokenAdjustments).then(function() {
        return adjustmentsToUpload;
      }).then((function(_this) {
        return function(entities) {
          var CallReportsCollection, сallReportsCollection;
          CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');
          сallReportsCollection = new CallReportsCollection();
          return сallReportsCollection.linkEntitiesToEntity(entities, 'callReportSfId');
        };
      })(this));
    };

    return MechanicAdjustmentsCollection;

  })(EntitiesCollection);

  module.exports = MechanicAdjustmentsCollection;

}).call(this);
}, "models/bll/mechanic-evaluation-accounts-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, MechanicEvaluationAccount, MechanicEvaluationAccountsCollection, PromotionFilterSFQueryBuilder, Query,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  MechanicEvaluationAccount = require('models/mechanic-evaluation-account');

  Query = require('common/query');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  MechanicEvaluationAccountsCollection = (function(superClass) {
    extend(MechanicEvaluationAccountsCollection, superClass);

    function MechanicEvaluationAccountsCollection() {
      this.getAllEvaluationsForPromoMechanics = bind(this.getAllEvaluationsForPromoMechanics, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return MechanicEvaluationAccountsCollection.__super__.constructor.apply(this, arguments);
    }

    MechanicEvaluationAccountsCollection.prototype.model = MechanicEvaluationAccount;

    MechanicEvaluationAccountsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('PromotionAccount__r.Promotion__r', clmConfig);
            return config;
          });
        };
      })(this));
    };

    MechanicEvaluationAccountsCollection.prototype.getAllEvaluationsForPromoMechanics = function(promoAccount, mechanics) {
      var promoAccountValue, query;
      promoAccountValue = {};
      promoAccountValue[this.model.sfdc.promotionAccountSfId] = promoAccount.id;
      query = new Query().selectFrom(this.model.table).whereIn('promotionMechanicSfId', mechanics.map(function(mechanic) {
        return mechanic.id;
      })).and().where(promoAccountValue).and().where({
        globalPriority: promoAccount.globalPriority
      });
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    MechanicEvaluationAccountsCollection.prototype.parseModel = function(result) {
      result[this.model.sfdc.externalId] = result.MechanicEvaluation__r.ExternalId__c;
      result[this.model.sfdc.isUsed] = result.MechanicEvaluation__r.isUsed__c;
      result[this.model.sfdc.mechanicName] = result.MechanicEvaluation__r.MechanicName__c;
      result[this.model.sfdc.mechanicType] = result.MechanicEvaluation__r.MechanicType__c;
      result[this.model.sfdc.numberEtalonValue] = result.MechanicEvaluation__r.NumberEtalonValue__c;
      result[this.model.sfdc.promotionEndDate] = result.MechanicEvaluation__r.PromotionEndDate__c;
      result[this.model.sfdc.promotionName] = result.MechanicEvaluation__r.Promotion_Name__c;
      result[this.model.sfdc.promotionStartDate] = result.MechanicEvaluation__r.PromotionStartDate__c;
      result[this.model.sfdc.skuName] = result.MechanicEvaluation__r.SkuName__c;
      result[this.model.sfdc.stringEtalonValue] = result.MechanicEvaluation__r.StringEtalonValue__c;
      result[this.model.sfdc.promotionMechanicPicklistValues] = result.MechanicEvaluation__r.MechanicPromotion__r.Mechanic__r.Picklist__c;
      return MechanicEvaluationAccountsCollection.__super__.parseModel.call(this, result);
    };

    MechanicEvaluationAccountsCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateMechanicEvaluationAccounts(records);
    };

    MechanicEvaluationAccountsCollection.prototype._updateMechanicEvaluationAccounts = function(mechanicEvaluations) {
      var updatedMechanicEvaluations;
      updatedMechanicEvaluations = mechanicEvaluations.map(function(mechanicEvaluation) {
        var ref;
        mechanicEvaluation.organizationSfId = (ref = mechanicEvaluation.PromotionAccount__r) != null ? ref.Account__c : void 0;
        if (mechanicEvaluation.MechanicEvaluation__r) {
          mechanicEvaluation.promotionMechanicSfId = mechanicEvaluation.MechanicEvaluation__r.MechanicPromotion__c;
          mechanicEvaluation.skuPromotionSfId = mechanicEvaluation.MechanicEvaluation__r.SkuPromotion__c;
          mechanicEvaluation.globalPriority = mechanicEvaluation.MechanicEvaluation__r.GlobalPriority__c;
        }
        return mechanicEvaluation;
      });
      return this.cache.saveAll(updatedMechanicEvaluations);
    };

    return MechanicEvaluationAccountsCollection;

  })(EntitiesCollection);

  module.exports = MechanicEvaluationAccountsCollection;

}).call(this);
}, "models/bll/organizations-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, Organization, OrganizationsCollection, Query,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Organization = require('models/organization');

  Query = require('common/query');

  ConfigurationManager = require('db/configuration-manager');

  OrganizationsCollection = (function(superClass) {
    extend(OrganizationsCollection, superClass);

    function OrganizationsCollection() {
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return OrganizationsCollection.__super__.constructor.apply(this, arguments);
    }

    OrganizationsCollection.prototype.model = Organization;

    OrganizationsCollection.prototype.parseModel = function(result) {
      var ref;
      result[this.model.sfdc.recordType] = (ref = result.RecordType) != null ? ref.Name : void 0;
      return OrganizationsCollection.__super__.parseModel.call(this, result);
    };

    OrganizationsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig('brickRecordTypeId').then(function(brickRecordTypeId) {
            config.query += " where RecordTypeId <> '" + brickRecordTypeId + "'";
            return config;
          });
        };
      })(this));
    };

    OrganizationsCollection.prototype._fetchAllQuery = function() {
      var fieldValue;
      fieldValue = {};
      fieldValue[this.model.sfdc.isPersonAccount] = false;
      return new Query().selectFrom(this.model.table).where(fieldValue);
    };

    return OrganizationsCollection;

  })(EntitiesCollection);

  module.exports = OrganizationsCollection;

}).call(this);
}, "models/bll/patient-diseases-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, PatientDisease, PatientDiseasesCollection, ProfileProductInPortfoliosCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PatientDisease = require('models/patient-disease');

  ProfileProductInPortfoliosCollection = require('models/bll/profile-product-in-portfolios-collection');

  PatientDiseasesCollection = (function(superClass) {
    extend(PatientDiseasesCollection, superClass);

    function PatientDiseasesCollection() {
      this.fetchByPatientProfileId = bind(this.fetchByPatientProfileId, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PatientDiseasesCollection.__super__.constructor.apply(this, arguments);
    }

    PatientDiseasesCollection.prototype.model = PatientDisease;

    PatientDiseasesCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          var profileProductInPortfoliosCollection;
          profileProductInPortfoliosCollection = new ProfileProductInPortfoliosCollection;
          return profileProductInPortfoliosCollection.fetchAll().then(profileProductInPortfoliosCollection.getAllEntitiesFromResponse).then(function(profileProductInPortfolios) {
            var patientProfileIds;
            patientProfileIds = profileProductInPortfolios.map(function(profileProductInPortfolio) {
              return "'" + profileProductInPortfolio.patientProfileSfId + "'";
            });
            if (_.isEmpty(patientProfileIds)) {
              patientProfileIds = null;
            }
            config.query += " WHERE " + _this.model.sfdc.patientProfileSfId + " IN (" + (patientProfileIds != null ? patientProfileIds : 'Null') + ")";
            return config;
          });
        };
      })(this));
    };

    PatientDiseasesCollection.prototype.fetchByPatientProfileId = function(patientProfileId) {
      var keyValue;
      keyValue = {};
      keyValue[this.model.sfdc.patientProfileSfId] = patientProfileId;
      return this.fetchAllWhere(keyValue).then(this.getAllEntitiesFromResponse);
    };

    return PatientDiseasesCollection;

  })(EntitiesCollection);

  module.exports = PatientDiseasesCollection;

}).call(this);
}, "models/bll/pe-abbott-attendees-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, PEAbbottAttendee, PEAbbottAttendeesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PEAbbottAttendee = require('models/pe-abbott-attendee');

  PEAbbottAttendeesCollection = (function(superClass) {
    extend(PEAbbottAttendeesCollection, superClass);

    function PEAbbottAttendeesCollection() {
      this.fetchAllWhere = bind(this.fetchAllWhere, this);
      return PEAbbottAttendeesCollection.__super__.constructor.apply(this, arguments);
    }

    PEAbbottAttendeesCollection.prototype.model = PEAbbottAttendee;

    PEAbbottAttendeesCollection.prototype.fetchAllWhere = function(fieldsValues, ignoreDeleted) {
      var query;
      if (ignoreDeleted == null) {
        ignoreDeleted = true;
      }
      query = this._fetchAllQuery().where(fieldsValues);
      return this.fetchWithQuery(query, ignoreDeleted);
    };

    PEAbbottAttendeesCollection.prototype.didStartUploading = function(records) {
      var PharmaEventsCollection, pharmaEventsCollection;
      PharmaEventsCollection = require('models/bll/pharma-events-collection');
      pharmaEventsCollection = new PharmaEventsCollection();
      return pharmaEventsCollection.linkEntitiesToEntity(records, 'pharmaEventSfId');
    };

    return PEAbbottAttendeesCollection;

  })(EntitiesCollection);

  module.exports = PEAbbottAttendeesCollection;

}).call(this);
}, "models/bll/pe-attendees-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, PEAttendee, PEAttendeesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PEAttendee = require('models/pe-attendee');

  PEAttendeesCollection = (function(superClass) {
    extend(PEAttendeesCollection, superClass);

    function PEAttendeesCollection() {
      this.fetchAllWhere = bind(this.fetchAllWhere, this);
      return PEAttendeesCollection.__super__.constructor.apply(this, arguments);
    }

    PEAttendeesCollection.prototype.model = PEAttendee;

    PEAttendeesCollection.prototype.fetchAllWhere = function(fieldsValues, ignoreDeleted) {
      var query;
      if (ignoreDeleted == null) {
        ignoreDeleted = true;
      }
      query = this._fetchAllQuery().where(fieldsValues);
      return this.fetchWithQuery(query, ignoreDeleted);
    };

    PEAttendeesCollection.prototype.didStartUploading = function(records) {
      var PharmaEventsCollection, pharmaEventsCollection;
      PharmaEventsCollection = require('models/bll/pharma-events-collection');
      pharmaEventsCollection = new PharmaEventsCollection();
      return pharmaEventsCollection.linkEntitiesToEntity(records, 'pharmaEventSfId');
    };

    return PEAttendeesCollection;

  })(EntitiesCollection);

  module.exports = PEAttendeesCollection;

}).call(this);
}, "models/bll/pharma-events-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, PharmaEvent, PharmaEventsCollection, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PharmaEvent = require('models/pharma-event');

  Utils = require('common/utils');

  Query = require('common/query');

  PharmaEventsCollection = (function(superClass) {
    extend(PharmaEventsCollection, superClass);

    PharmaEventsCollection.prototype.model = PharmaEvent;

    function PharmaEventsCollection() {
      this._removeEmptyProducts = bind(this._removeEmptyProducts, this);
      this.didStartUploading = bind(this.didStartUploading, this);
      PharmaEventsCollection.__super__.constructor.apply(this, arguments);
      this.cache.noMerge = false;
      this.cache.mergeMode = Force.MERGE_MODE.MERGE_ACCEPT_YOURS;
    }

    PharmaEventsCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateOwner(records);
    };

    PharmaEventsCollection.prototype._updateOwner = function(pharmaEvents) {
      var updatedPharmaEvents;
      updatedPharmaEvents = pharmaEvents.map(function(pharmaEvent) {
        if (pharmaEvent.Owner) {
          pharmaEvent.ownerFirstName = pharmaEvent.Owner.FirstName;
          pharmaEvent.ownerLastName = pharmaEvent.Owner.LastName;
        } else {
          pharmaEvent.ownerFirstName = '';
          pharmaEvent.ownerLastName = '';
        }
        return pharmaEvent;
      });
      return this.cache.saveAll(updatedPharmaEvents);
    };

    PharmaEventsCollection.prototype.didStartUploading = function(records) {
      return this._removeEmptyProducts(records);
    };

    PharmaEventsCollection.prototype._removeEmptyProducts = function(records) {
      var ProductsCollection, peWithEmptyProducts, peWithEmptyProductsForDelete, peWithEmptyProductsForUpdate, productsCollection;
      ProductsCollection = require('models/bll/products-collection');
      productsCollection = new ProductsCollection;
      peWithEmptyProducts = [];
      peWithEmptyProductsForDelete = [];
      peWithEmptyProductsForUpdate = [];
      return productsCollection.fetchAll().then(productsCollection.getAllEntitiesFromResponse).then((function(_this) {
        return function(products) {
          var productsMapped;
          productsMapped = products.map(function(product) {
            return product.id;
          });
          records.forEach(function(record) {
            return [1, 2, 3, 4].forEach(function(index) {
              if ((productsMapped.indexOf(record["productPrio" + index + "SfId"]) === -1) && record["productPrio" + index + "SfId"]) {
                if (peWithEmptyProducts.indexOf(record) === -1) {
                  return peWithEmptyProducts.push(record);
                }
              }
            });
          });
          peWithEmptyProducts.forEach(function(record) {
            var emptyProdCount, productsMessages, totalProdCount, updateIndexes;
            emptyProdCount = [1, 2, 3, 4].filter(function(index) {
              return (productsMapped.indexOf(record["productPrio" + index + "SfId"]) === -1) && record["productPrio" + index + "SfId"];
            });
            totalProdCount = [1, 2, 3, 4].filter(function(index) {
              return record["productPrio" + index + "SfId"];
            });
            if (emptyProdCount.length === totalProdCount.length) {
              return peWithEmptyProductsForDelete.push(record);
            } else {
              updateIndexes = [1, 2, 3, 4].filter(function(index) {
                return (productsMapped.indexOf(record["productPrio" + index + "SfId"]) !== -1) && record["productPrio" + index + "SfId"];
              });
              productsMessages = [];
              updateIndexes.forEach(function(index) {
                return productsMessages.push({
                  "prioProductSfid": record["productPrio" + index + "SfId"]
                });
              });
              [1, 2, 3, 4].forEach(function(updateIndex, index) {
                if (productsMessages[index]) {
                  return record["productPrio" + updateIndex + "SfId"] = productsMessages[index]["prioProductSfid"];
                } else {
                  return record["productPrio" + updateIndex + "SfId"] = void 0;
                }
              });
              return peWithEmptyProductsForUpdate.push(record);
            }
          });
          return Utils.runSimultaneously(peWithEmptyProductsForUpdate.map(function(record) {
            return _this.updateEntity(record);
          }));
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.removeEntities(peWithEmptyProductsForDelete);
        };
      })(this)).then((function(_this) {
        return function() {
          var shouldIgnoreDeleted;
          shouldIgnoreDeleted = false;
          return _this.fetchWithQuery(new Query().selectFrom(_this.model.table).where({
            __local__: true
          }), shouldIgnoreDeleted).then(_this.getAllEntitiesFromResponse);
        };
      })(this));
    };

    return PharmaEventsCollection;

  })(EntitiesCollection);

  module.exports = PharmaEventsCollection;

}).call(this);
}, "models/bll/photo-adjustments-collection": function(exports, require, module) {(function() {
  var CallreportFilterSFQueryBuilder, ConfigurationManager, EntitiesCollection, ImageProcessor, PhotoAdjustment, PhotoAdjustmentsCollection, PromotionAttachment, PromotionFilterSFQueryBuilder, Query,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PhotoAdjustment = require('models/photo-adjustment');

  PromotionAttachment = require('models/promotion-attachment');

  ImageProcessor = require('common/image-processor/image-processor');

  Query = require('common/query');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  CallreportFilterSFQueryBuilder = require('common/sf-query-builders/callreport-filter-sf-query-builder');

  PhotoAdjustmentsCollection = (function(superClass) {
    extend(PhotoAdjustmentsCollection, superClass);

    function PhotoAdjustmentsCollection() {
      this.removeEntities = bind(this.removeEntities, this);
      this._updatePhotoAttachments = bind(this._updatePhotoAttachments, this);
      this.didFinishUploading = bind(this.didFinishUploading, this);
      this._createLocalImagesCollection = bind(this._createLocalImagesCollection, this);
      this._createPhotoAttachmentsCollection = bind(this._createPhotoAttachmentsCollection, this);
      this.removePhoto = bind(this.removePhoto, this);
      this.saveDownloadedImageWithThumbnail = bind(this.saveDownloadedImageWithThumbnail, this);
      this._createLocalImage = bind(this._createLocalImage, this);
      this._createPhotoAttachment = bind(this._createPhotoAttachment, this);
      this._saveThumbnailForImageWithPath = bind(this._saveThumbnailForImageWithPath, this);
      this._saveImageWithThumbnail = bind(this._saveImageWithThumbnail, this);
      this.addPhoto = bind(this.addPhoto, this);
      this.getLocalImagesByAdjustments = bind(this.getLocalImagesByAdjustments, this);
      this.getAttachmentByPhotoAdjustmentId = bind(this.getAttachmentByPhotoAdjustmentId, this);
      this.getAdjustmentsByCallReport = bind(this.getAdjustmentsByCallReport, this);
      this.getEntitiesForCallReportAndPromotion = bind(this.getEntitiesForCallReportAndPromotion, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PhotoAdjustmentsCollection.__super__.constructor.apply(this, arguments);
    }

    PhotoAdjustmentsCollection.prototype.model = PhotoAdjustment;

    PhotoAdjustmentsCollection.prototype.PHOTO_MAX_WIDTH = 1280;

    PhotoAdjustmentsCollection.prototype.PHOTO_MAX_HEIGHT = 1024;

    PhotoAdjustmentsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('Promotion__r', clmConfig);
            config.query += ' AND';
            config.query += CallreportFilterSFQueryBuilder.buildWhereFilter('CallReport__r', true);
            return config;
          });
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype.getEntitiesForCallReportAndPromotion = function(callReport, promotionId) {
      var promoQuery, query;
      promoQuery = {};
      promoQuery[this.model.sfdc.promotionSfId] = promotionId;
      query = new Query().selectFrom(this.model.table).where(promoQuery).and().whereIn(this.model.sfdc.callReportSfId, [callReport.id, this._attributesFromEntity(callReport)._soupEntryId]);
      return this.fetchUnparsedWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    PhotoAdjustmentsCollection.prototype.getAdjustmentsByCallReport = function(callReport) {
      var callReportIdValue;
      callReportIdValue = {};
      callReportIdValue[this.model.sfdc.callReportSfId] = this._attributesFromEntity(callReport)._soupEntryId;
      return this.fetchAllWhere(callReportIdValue).then(this.getAllEntitiesFromResponse);
    };

    PhotoAdjustmentsCollection.prototype.getAttachmentByPhotoAdjustmentId = function(photoAdjustmentId) {
      var photoAttachmentsCollection, promotionIdValue;
      photoAttachmentsCollection = this._createPhotoAttachmentsCollection();
      promotionIdValue = {};
      promotionIdValue[photoAttachmentsCollection.model.sfdc.parentId] = photoAdjustmentId;
      return photoAttachmentsCollection.fetchAllWhere(promotionIdValue).then(photoAttachmentsCollection.getEntityFromResponse);
    };

    PhotoAdjustmentsCollection.prototype.getLocalImagesByAdjustments = function(photoAdjustmentsArray) {
      var adjustmentsIds, photoAttachmentsCollection;
      photoAttachmentsCollection = this._createPhotoAttachmentsCollection();
      adjustmentsIds = photoAdjustmentsArray.map(function(photoAdjustment) {
        return photoAdjustment.id;
      });
      return photoAttachmentsCollection.fetchAllWhereIn(PromotionAttachment.sfdc.parentId, adjustmentsIds).then(photoAttachmentsCollection.getAllEntitiesFromResponse).then((function(_this) {
        return function(promotionAttachments) {
          return _this._createLocalImagesCollection().getAllLocalImagesForAttachments(promotionAttachments).then(function(localImages) {
            var promotionAttachmentsImages;
            promotionAttachmentsImages = {};
            localImages.forEach(function(localImage) {
              var photoAttachment;
              photoAttachment = _.find(promotionAttachments, function(promotionAttachment) {
                return _this._attributesFromEntity(promotionAttachment)._soupEntryId === localImage.parentId;
              });
              return promotionAttachmentsImages[photoAttachment.parentId] = localImage;
            });
            return promotionAttachmentsImages;
          });
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype.addPhoto = function(photoAdjustment, tmpPhotoUrl) {
      return this._saveImageWithThumbnail(tmpPhotoUrl).then((function(_this) {
        return function(arg) {
          var photoUrl, thumbUrl;
          photoUrl = arg[0], thumbUrl = arg[1];
          return _this.createEntity(photoAdjustment).then(_this._createPhotoAttachment).then(function(photoAttachment) {
            return _this._createLocalImage(photoAttachment, photoUrl, thumbUrl);
          }).then(function(image) {
            return [_this.parseEntity(photoAdjustment), image];
          });
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype._saveImageWithThumbnail = function(imageUrl) {
      var imageProcessor;
      imageProcessor = new ImageProcessor;
      return imageProcessor.save(imageUrl).then((function(_this) {
        return function(imageFile) {
          return _this._saveThumbnailForImageWithPath(imageFile.fullPath).then(function(thumbPath) {
            return [imageFile.fullPath, thumbPath];
          });
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype._saveThumbnailForImageWithPath = function(imagePath) {
      var imageProcessor;
      imageProcessor = new ImageProcessor;
      return imageProcessor.resize(imagePath).then((function(_this) {
        return function(base64ThumbData) {
          var fileParts, thumbPath;
          thumbPath = ImageProcessor.getThumbnailPath(imagePath);
          fileParts = thumbPath.split('/');
          return imageProcessor.saveFromBase64(base64ThumbData.imageData, {
            filename: fileParts.pop(),
            directory: fileParts.join('/')
          }).then(function() {
            return thumbPath;
          });
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype._createPhotoAttachment = function(photoAdjustment) {
      var photoAttachment;
      photoAttachment = {};
      photoAttachment.localParentId = this._attributesFromEntity(photoAdjustment)._soupEntryId;
      photoAttachment[PromotionAttachment.sfdc.parentId] = photoAdjustment[this.model.sfdc.id];
      photoAttachment[PromotionAttachment.sfdc.contentType] = 'image/jpeg';
      photoAttachment[PromotionAttachment.sfdc.title] = 'Photo';
      return this._createPhotoAttachmentsCollection().createEntity(photoAttachment);
    };

    PhotoAdjustmentsCollection.prototype._createLocalImage = function(photoAttachment, photoUrl, thumbUrl) {
      var image;
      image = {};
      image.path = photoUrl;
      image.thumbnailPath = thumbUrl;
      image.parentId = this._attributesFromEntity(photoAttachment)._soupEntryId;
      return this._createLocalImagesCollection().createEntity(image);
    };

    PhotoAdjustmentsCollection.prototype.saveDownloadedImageWithThumbnail = function(photoAttachment, imagePath) {
      return this._saveThumbnailForImageWithPath(imagePath).then((function(_this) {
        return function(thumbPath) {
          return _this._createLocalImage(photoAttachment, imagePath, thumbPath);
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype.removePhoto = function(photoAdjustment, image) {
      return this.getAttachmentByPhotoAdjustmentId(photoAdjustment.id).then(this._createPhotoAttachmentsCollection().removeEntity).then((function(_this) {
        return function() {
          return _this._createLocalImagesCollection().removeEntity(image, true);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.removeEntity(photoAdjustment);
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype._createPhotoAttachmentsCollection = function() {
      var PhotoAttachmentsCollection;
      PhotoAttachmentsCollection = require('models/bll/photo-attachments-collection');
      return new PhotoAttachmentsCollection;
    };

    PhotoAdjustmentsCollection.prototype._createLocalImagesCollection = function() {
      var LocalImagesCollection;
      LocalImagesCollection = require('models/bll/local-images-collection');
      return new LocalImagesCollection;
    };

    PhotoAdjustmentsCollection.prototype.didStartUploading = function(records) {
      var adjustmentsToUpload, brokenAdjustments, ref, ref1, splitBrokenAdjustments;
      splitBrokenAdjustments = _.groupBy(records, function(record) {
        return (record.isModifiedInTrade === true) || (record.isModifiedInCall === true);
      });
      brokenAdjustments = (ref = splitBrokenAdjustments["true"]) != null ? ref : [];
      adjustmentsToUpload = (ref1 = splitBrokenAdjustments["false"]) != null ? ref1 : [];
      return this.removeEntities(brokenAdjustments).then(function() {
        return adjustmentsToUpload;
      }).then((function(_this) {
        return function(entities) {
          var CallReportsCollection, сallReportsCollection;
          CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');
          сallReportsCollection = new CallReportsCollection();
          return сallReportsCollection.linkEntitiesToEntity(entities, 'callReportSfId');
        };
      })(this));
    };

    PhotoAdjustmentsCollection.prototype.didFinishUploading = function(records) {
      return this._updatePhotoAttachments(records);
    };

    PhotoAdjustmentsCollection.prototype._updatePhotoAttachments = function(photoAdjustments) {
      var photoAttachmentsCollection;
      photoAttachmentsCollection = this._createPhotoAttachmentsCollection();
      return photoAttachmentsCollection.getAllAttachmentsForAdjustments(photoAdjustments).then((function(_this) {
        return function(photoAttachments) {
          return photoAttachments.map(function(photoAttachment) {
            var photoAdjustment;
            photoAdjustment = _.find(photoAdjustments, function(photoAdjustment) {
              return photoAdjustment._soupEntryId === photoAttachment.localParentId;
            });
            photoAttachment.parentId = photoAdjustment[_this.model.sfdc.id];
            return photoAttachment;
          });
        };
      })(this)).then(photoAttachmentsCollection.upsertEntitiesSilently);
    };

    PhotoAdjustmentsCollection.prototype.removeEntities = function(entities) {
      var photoAttachmentsCollection;
      photoAttachmentsCollection = this._createPhotoAttachmentsCollection();
      return photoAttachmentsCollection.getAllAttachmentsForAdjustments(entities).then(photoAttachmentsCollection.removeEntities).then((function(_this) {
        return function() {
          return PhotoAdjustmentsCollection.__super__.removeEntities.call(_this, entities);
        };
      })(this));
    };

    return PhotoAdjustmentsCollection;

  })(EntitiesCollection);

  module.exports = PhotoAdjustmentsCollection;

}).call(this);
}, "models/bll/photo-attachments-collection": function(exports, require, module) {(function() {
  var CallreportFilterSFQueryBuilder, ConfigurationManager, EntitiesCollection, ImageProcessor, PhotoAdjustment, PhotoAttachment, PhotoAttachmentsCollection, PromotionFilterSFQueryBuilder,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PhotoAttachment = require('models/photo-attachment');

  PhotoAdjustment = require('models/photo-adjustment');

  ImageProcessor = require('common/image-processor/image-processor');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  CallreportFilterSFQueryBuilder = require('common/sf-query-builders/callreport-filter-sf-query-builder');

  PhotoAttachmentsCollection = (function(superClass) {
    extend(PhotoAttachmentsCollection, superClass);

    function PhotoAttachmentsCollection() {
      this.removeEntities = bind(this.removeEntities, this);
      this._createLocalImagesCollection = bind(this._createLocalImagesCollection, this);
      this._recursivePhotoUpdate = bind(this._recursivePhotoUpdate, this);
      this._prepareAttachmentsBody = bind(this._prepareAttachmentsBody, this);
      this.didStartUploading = bind(this.didStartUploading, this);
      this.getLocalImageByPhotoAttachmentId = bind(this.getLocalImageByPhotoAttachmentId, this);
      this.getAllAttachmentsForAdjustments = bind(this.getAllAttachmentsForAdjustments, this);
      this.getAllAttachmentsForPromotionWithId = bind(this.getAllAttachmentsForPromotionWithId, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PhotoAttachmentsCollection.__super__.constructor.apply(this, arguments);
    }

    PhotoAttachmentsCollection.prototype.model = PhotoAttachment;

    PhotoAttachmentsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += " WHERE " + _this.model.sfdc.parentId + " IN (SELECT " + PhotoAdjustment.sfdc.id + " FROM " + PhotoAdjustment.sfdcTable;
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('Promotion__r', clmConfig);
            config.query += ' AND';
            config.query += CallreportFilterSFQueryBuilder.buildWhereFilter('CallReport__r', true);
            config.query += ')';
            return config;
          });
        };
      })(this));
    };

    PhotoAttachmentsCollection.prototype.getAllAttachmentsForPromotionWithId = function(promotionId) {
      var promotionIdValue;
      promotionIdValue = {};
      promotionIdValue[this.model.sfdc.parentId] = promotionId;
      return this.fetchAllWhere(promotionIdValue).then(this.getAllEntitiesFromResponse);
    };

    PhotoAttachmentsCollection.prototype.getAllAttachmentsForAdjustments = function(adjustments) {
      return this.fetchAllWhereIn('localParentId', adjustments.map((function(_this) {
        return function(adjustment) {
          return _this._attributesFromEntity(adjustment)._soupEntryId;
        };
      })(this))).then(this.getAllEntitiesFromResponse);
    };

    PhotoAttachmentsCollection.prototype.getLocalImageByPhotoAttachmentId = function(photoAttachmentId) {
      var localImagesCollection;
      localImagesCollection = this._createLocalImagesCollection();
      return localImagesCollection.fetchAllWhere({
        parentId: photoAttachmentId
      }).then(localImagesCollection.getEntityFromResponse);
    };

    PhotoAttachmentsCollection.prototype.didStartUploading = function(photoAttachments) {
      var PhotoAdjustmentsCollection, attachmentsIds, photoAdjustmentsCollection;
      PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');
      photoAdjustmentsCollection = new PhotoAdjustmentsCollection();
      attachmentsIds = photoAttachments.map((function(_this) {
        return function(photoAttachment) {
          return photoAttachment.localParentId;
        };
      })(this));
      return photoAdjustmentsCollection.fetchAllWhereIn('_soupEntryId', attachmentsIds).then(photoAdjustmentsCollection.getAllEntitiesFromResponse).then((function(_this) {
        return function(photoAdjustments) {
          var entities, photoAdjustmentsMap;
          photoAdjustmentsMap = {};
          photoAdjustments.forEach(function(photoAdjustment) {
            return photoAdjustmentsMap[photoAdjustment.attributes._soupEntryId] = photoAdjustment.id;
          });
          entities = photoAttachments.map(function(entity) {
            entity.parentId = photoAdjustmentsMap[entity.localParentId];
            return entity;
          });
          return entities.filter(function(entity) {
            return entity.parentId;
          });
        };
      })(this)).then(this._prepareAttachmentsBody);
    };

    PhotoAttachmentsCollection.prototype._prepareAttachmentsBody = function(photoAttachments) {
      if (_.isEmpty(photoAttachments)) {
        return $.when(photoAttachments);
      } else {
        return this._createLocalImagesCollection().getAllLocalImagesForAttachments(photoAttachments).then((function(_this) {
          return function(localImages) {
            return _this._recursivePhotoUpdate(photoAttachments, localImages);
          };
        })(this)).then(function() {
          return photoAttachments;
        });
      }
    };

    PhotoAttachmentsCollection.prototype._recursivePhotoUpdate = function(photoAttachments, localImages) {
      var imageProcessor, recursion;
      imageProcessor = new ImageProcessor;
      recursion = (function(_this) {
        return function(entities, localImages, index) {
          var localImage;
          if (!(index < entities.length)) {
            return $.when(entities);
          } else {
            localImage = _.find(localImages, function(image) {
              return image.parentId === _this._attributesFromEntity(entities[index])._soupEntryId;
            });
            return imageProcessor.read(localImage.path).then(function(base64) {
              entities[index].body = base64.replace("data:image/jpeg;base64,", "");
              return recursion(entities, localImages, ++index);
            });
          }
        };
      })(this);
      return recursion(photoAttachments, localImages, 0);
    };

    PhotoAttachmentsCollection.prototype._createLocalImagesCollection = function() {
      var LocalImagesCollection;
      LocalImagesCollection = require('models/bll/local-images-collection');
      return new LocalImagesCollection;
    };

    PhotoAttachmentsCollection.prototype.removeEntities = function(entities) {
      var imagesCollection;
      imagesCollection = this._createLocalImagesCollection();
      return imagesCollection.getAllLocalImagesForAttachments(entities).then(imagesCollection.removeEntities).then((function(_this) {
        return function() {
          return PhotoAttachmentsCollection.__super__.removeEntities.call(_this, entities);
        };
      })(this));
    };

    return PhotoAttachmentsCollection;

  })(EntitiesCollection);

  module.exports = PhotoAttachmentsCollection;

}).call(this);
}, "models/bll/presentations-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, Presentation, PresentationsCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Presentation = require('models/presentation');

  PresentationsCollection = (function(superClass) {
    extend(PresentationsCollection, superClass);

    PresentationsCollection.prototype.model = Presentation;

    function PresentationsCollection() {
      PresentationsCollection.__super__.constructor.apply(this, arguments);
      this.cache.noMerge = false;
      this.cache.mergeMode = Force.MERGE_MODE.MERGE_ACCEPT_THEIRS;
    }

    PresentationsCollection.prototype.parseModel = function(result) {
      if (result.iconName == null) {
        result.iconName = "icon.png";
      }
      if (result.iconPath == null) {
        result.iconPath = "img/media/" + result.iconName;
      }
      return PresentationsCollection.__super__.parseModel.call(this, result);
    };

    PresentationsCollection.prototype.fetchAllLoaded = function() {
      return this.fetchAll().then((function(_this) {
        return function(response) {
          return $.when(_this.parse(response.records));
        };
      })(this));
    };

    return PresentationsCollection;

  })(EntitiesCollection);

  module.exports = PresentationsCollection;

}).call(this);
}, "models/bll/product-in-portfolios-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, ProductInPortfolio, ProductInPortfoliosCollection, SforceDataContext, TargetsCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  ProductInPortfolio = require('models/product-in-portfolio');

  SforceDataContext = require('models/bll/sforce-data-context');

  TargetsCollection = require('models/bll/targets-collection');

  Utils = require('common/utils');

  ProductInPortfoliosCollection = (function(superClass) {
    extend(ProductInPortfoliosCollection, superClass);

    function ProductInPortfoliosCollection() {
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return ProductInPortfoliosCollection.__super__.constructor.apply(this, arguments);
    }

    ProductInPortfoliosCollection.prototype.model = ProductInPortfolio;

    ProductInPortfoliosCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return SforceDataContext.activeUser().then(function(user) {
            return new TargetsCollection().getTargetByUser(user);
          }).then(function(target) {
            config.query += " " + ("WHERE " + _this.model.sfdc.portfolioSfId + " IN ") + "(SELECT ProductPortfolio__c " + "FROM ProductPortfolioAssignment__c " + ("WHERE Target__c = '" + target.id + "') ");
            return config;
          });
        };
      })(this));
    };

    return ProductInPortfoliosCollection;

  })(EntitiesCollection);

  module.exports = ProductInPortfoliosCollection;

}).call(this);
}, "models/bll/product-items-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, ProductItem, ProductItemsCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  ProductItem = require('models/product-item');

  ProductItemsCollection = (function(superClass) {
    extend(ProductItemsCollection, superClass);

    function ProductItemsCollection() {
      return ProductItemsCollection.__super__.constructor.apply(this, arguments);
    }

    ProductItemsCollection.prototype.model = ProductItem;

    return ProductItemsCollection;

  })(EntitiesCollection);

  module.exports = ProductItemsCollection;

}).call(this);
}, "models/bll/products-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, Product, ProductsCollection, Query, SforceDataContext,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Product = require('models/product');

  SforceDataContext = require('models/bll/sforce-data-context');

  Query = require('common/query');

  ProductsCollection = (function(superClass) {
    extend(ProductsCollection, superClass);

    function ProductsCollection() {
      this.getProductsByIds = bind(this.getProductsByIds, this);
      this.getPromotedProducts = bind(this.getPromotedProducts, this);
      this.didStartDownloading = bind(this.didStartDownloading, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return ProductsCollection.__super__.constructor.apply(this, arguments);
    }

    ProductsCollection.prototype.model = Product;

    ProductsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          config.query += " WHERE Local_Type__c = '" + _this.model.TYPE_LOCAL + "'";
          return config;
        };
      })(this));
    };

    ProductsCollection.prototype.didStartDownloading = function() {
      return this.fetchAll().then(this.getAllEntitiesFromResponse).then(this.removeEntities);
    };

    ProductsCollection.prototype.getPromotedProducts = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(activeUser) {
          var atcClassArray;
          atcClassArray = activeUser.pinCode.split(' ');
          return _this.fetchAllWhereIn(_this.model.sfdc.atcClass, atcClassArray).then(function(response) {
            return response.records;
          });
        };
      })(this));
    };

    ProductsCollection.prototype.getProductsByIds = function(productsIds) {
      return this.fetchAllWhereIn(this.model.sfdc.id, productsIds).then((function(_this) {
        return function(response) {
          return response.records;
        };
      })(this));
    };

    return ProductsCollection;

  })(EntitiesCollection);

  module.exports = ProductsCollection;

}).call(this);
}, "models/bll/profile-product-in-portfolios-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, ProductInPortfoliosCollection, ProfileProductInPortfolio, ProfileProductInPortfoliosCollection, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  ProfileProductInPortfolio = require('models/profile-product-in-portfolio');

  ProductInPortfoliosCollection = require('models/bll/product-in-portfolios-collection');

  Utils = require('common/utils');

  Query = require('common/query');

  ProfileProductInPortfoliosCollection = (function(superClass) {
    extend(ProfileProductInPortfoliosCollection, superClass);

    function ProfileProductInPortfoliosCollection() {
      this.fetchPortfolioProfilesByDate = bind(this.fetchPortfolioProfilesByDate, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return ProfileProductInPortfoliosCollection.__super__.constructor.apply(this, arguments);
    }

    ProfileProductInPortfoliosCollection.prototype.model = ProfileProductInPortfolio;

    ProfileProductInPortfoliosCollection.prototype.parseModel = function(result) {
      var ref;
      result[this.model.sfdc.productSfId] = (ref = result.Product_in_Porfolio__r) != null ? ref.Pharma_Product__c : void 0;
      if (result.Patient_Profile__r) {
        result[this.model.sfdc.patientProfileName] = result.Patient_Profile__r.Name;
        result[this.model.sfdc.age] = result.Patient_Profile__r.Age__c;
        result[this.model.sfdc.gender] = result.Patient_Profile__r.Gender__c;
        result[this.model.sfdc.generalHealth] = result.Patient_Profile__r.General_Health__c;
        result[this.model.sfdc.occupation] = result.Patient_Profile__r.Occupation_Social__c;
        result[this.model.sfdc.bmi] = result.Patient_Profile__r.BMI__c;
      }
      return ProfileProductInPortfoliosCollection.__super__.parseModel.call(this, result);
    };

    ProfileProductInPortfoliosCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          var productInPortfoliosCollection;
          productInPortfoliosCollection = new ProductInPortfoliosCollection;
          return productInPortfoliosCollection.fetchAll().then(productInPortfoliosCollection.getAllEntitiesFromResponse).then(function(productInPortfolios) {
            var productInPortfolioIds;
            productInPortfolioIds = productInPortfolios.map(function(productInPortfolio) {
              return "'" + productInPortfolio.id + "'";
            });
            if (_.isEmpty(productInPortfolioIds)) {
              productInPortfolioIds = null;
            }
            config.query += " WHERE " + _this.model.sfdc.productInPortfolioSfId + " IN (" + (productInPortfolioIds != null ? productInPortfolioIds : 'Null') + ")";
            return config;
          });
        };
      })(this));
    };

    ProfileProductInPortfoliosCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateProfileProductInPortfolios(records);
    };

    ProfileProductInPortfoliosCollection.prototype._updateProfileProductInPortfolios = function(portfolioProfiles) {
      var updatedPortfolioProfiles;
      updatedPortfolioProfiles = portfolioProfiles.map(function(portfolioProfile) {
        if (portfolioProfile.Product_in_Porfolio__r) {
          portfolioProfile.portfolioStartDate = portfolioProfile.Product_in_Porfolio__r.Start_Date__c;
          portfolioProfile.portfolioEndDate = portfolioProfile.Product_in_Porfolio__r.End_Date__c;
        }
        return portfolioProfile;
      });
      return this.cache.saveAll(updatedPortfolioProfiles);
    };

    ProfileProductInPortfoliosCollection.prototype.fetchPortfolioProfilesByDate = function(date) {
      var endDateValue, query, startDateValue;
      startDateValue = {
        portfolioStartDate: date
      };
      endDateValue = {
        portfolioEndDate: date
      };
      query = new Query().selectFrom(this.model.table).where(startDateValue, Query.LRE).and().where(endDateValue, Query.GRE);
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    return ProfileProductInPortfoliosCollection;

  })(EntitiesCollection);

  module.exports = ProfileProductInPortfoliosCollection;

}).call(this);
}, "models/bll/promotion-accounts-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, PromotionAccount, PromotionAccountsCollection, PromotionFilterSFQueryBuilder, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PromotionAccount = require('models/promotion-account');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  Utils = require('common/utils');

  Query = require('common/query');

  PromotionAccountsCollection = (function(superClass) {
    extend(PromotionAccountsCollection, superClass);

    function PromotionAccountsCollection() {
      this.getActualPromotionsForAccount = bind(this.getActualPromotionsForAccount, this);
      this.getAllPromotionsForAccount = bind(this.getAllPromotionsForAccount, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PromotionAccountsCollection.__super__.constructor.apply(this, arguments);
    }

    PromotionAccountsCollection.prototype.model = PromotionAccount;

    PromotionAccountsCollection.prototype.parseModel = function(result) {
      result[this.model.sfdc.name] = result.Promotion__r.Name;
      result[this.model.sfdc.numberOfPharmacies] = result.Promotion__r.NumberOfPharmacies__c;
      result[this.model.sfdc.contractNumber] = result.Promotion__r.ContractNumber__c;
      result[this.model.sfdc.description] = result.Promotion__r.Description__c;
      result[this.model.sfdc.objectives] = result.Promotion__r.Objectives__c;
      result[this.model.sfdc.status] = result.Promotion__r.Status__c;
      result[this.model.sfdc.recordType] = result.Promotion__r.RecordType.Name;
      result[this.model.sfdc.recordTypeId] = result.Promotion__r.RecordType.Id;
      return PromotionAccountsCollection.__super__.parseModel.call(this, result);
    };

    PromotionAccountsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('Promotion__r', clmConfig);
            return config;
          });
        };
      })(this));
    };

    PromotionAccountsCollection.prototype.getAllPromotionsForAccount = function(accountId) {
      var accountIdValue;
      accountIdValue = {};
      accountIdValue[this.model.sfdc.accountSfId] = accountId;
      return this.fetchAllWhere(accountIdValue).then(this.getAllEntitiesFromResponse);
    };

    PromotionAccountsCollection.prototype.getActualPromotionsForAccount = function(accountId, date) {
      var accountValue, endDateValue, query, startDateValue;
      accountValue = {};
      startDateValue = {};
      endDateValue = {};
      accountValue[this.model.sfdc.accountSfId] = accountId;
      startDateValue.startDate = Utils.currentDate(date);
      endDateValue.endDate = Utils.currentDate(date);
      query = new Query().selectFrom(this.model.table).where(accountValue, Query.EQ).and().where(startDateValue, Query.LRE).and().where(endDateValue, Query.GRE);
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    PromotionAccountsCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateAccounts(records);
    };

    PromotionAccountsCollection.prototype._updateAccounts = function(accounts) {
      var updatedAccount;
      updatedAccount = accounts.map(function(account) {
        var ref, ref1;
        account.promotionTaskSfId = (ref = account.PromotionTask_Account__r) != null ? ref.Promotion_Task__c : void 0;
        account.globalPriority = (ref1 = account.Account__r) != null ? ref1.GlobalPriority__c : void 0;
        account.startDate = account.Promotion__r.PromotionStartDate__c;
        account.endDate = account.Promotion__r.PromotionEndDate__c;
        return account;
      });
      return this.cache.saveAll(updatedAccount);
    };

    return PromotionAccountsCollection;

  })(EntitiesCollection);

  module.exports = PromotionAccountsCollection;

}).call(this);
}, "models/bll/promotion-attachments-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, ImageProcessor, PromotionAttachment, PromotionAttachmentsCollection, PromotionFilterSFQueryBuilder,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PromotionAttachment = require('models/promotion-attachment');

  ImageProcessor = require('common/image-processor/image-processor');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  PromotionAttachmentsCollection = (function(superClass) {
    extend(PromotionAttachmentsCollection, superClass);

    function PromotionAttachmentsCollection() {
      this.getAllAttachmentsForPromotionWithId = bind(this.getAllAttachmentsForPromotionWithId, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PromotionAttachmentsCollection.__super__.constructor.apply(this, arguments);
    }

    PromotionAttachmentsCollection.prototype.model = PromotionAttachment;

    PromotionAttachmentsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += " WHERE " + _this.model.sfdc.parentId + " IN (SELECT Id FROM TM_Promotion__c";
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('', clmConfig);
            config.query += ')';
            return config;
          });
        };
      })(this));
    };

    PromotionAttachmentsCollection.prototype.parseModel = function(result) {
      var ref;
      result[this.model.sfdc.attachedByName] = (ref = result.CreatedBy) != null ? ref.Name : void 0;
      return PromotionAttachmentsCollection.__super__.parseModel.call(this, result);
    };

    PromotionAttachmentsCollection.prototype.getAllAttachmentsForPromotionWithId = function(promotionId) {
      var promotionIdValue;
      promotionIdValue = {};
      promotionIdValue[this.model.sfdc.parentId] = promotionId;
      return this.fetchAllWhere(promotionIdValue).then(this.getAllEntitiesFromResponse);
    };

    return PromotionAttachmentsCollection;

  })(EntitiesCollection);

  module.exports = PromotionAttachmentsCollection;

}).call(this);
}, "models/bll/promotion-mechanics-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, PromotionFilterSFQueryBuilder, PromotionMechanic, PromotionMechanicsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PromotionMechanic = require('models/promotion-mechanic');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  PromotionMechanicsCollection = (function(superClass) {
    extend(PromotionMechanicsCollection, superClass);

    function PromotionMechanicsCollection() {
      this.getAllMechanicsForPromotionWithId = bind(this.getAllMechanicsForPromotionWithId, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PromotionMechanicsCollection.__super__.constructor.apply(this, arguments);
    }

    PromotionMechanicsCollection.prototype.model = PromotionMechanic;

    PromotionMechanicsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('Promotion__r', clmConfig);
            return config;
          });
        };
      })(this));
    };

    PromotionMechanicsCollection.prototype.parseModel = function(result) {
      result[this.model.sfdc.mechanicRecordType] = result.Mechanic__r.RecordType.Name;
      result[this.model.sfdc.mechanicPicklistValues] = result.Mechanic__r.Picklist__c;
      return PromotionMechanicsCollection.__super__.parseModel.call(this, result);
    };

    PromotionMechanicsCollection.prototype.getAllMechanicsForPromotionWithId = function(promoId) {
      var promoIdValue;
      promoIdValue = {};
      promoIdValue[this.model.sfdc.promotionSfId] = promoId;
      return this.fetchAllWhere(promoIdValue).then(this.getAllEntitiesFromResponse);
    };

    return PromotionMechanicsCollection;

  })(EntitiesCollection);

  module.exports = PromotionMechanicsCollection;

}).call(this);
}, "models/bll/promotion-notes-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, PromotionFilterSFQueryBuilder, PromotionNote, PromotionNotesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PromotionNote = require('models/promotion-note');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  PromotionNotesCollection = (function(superClass) {
    extend(PromotionNotesCollection, superClass);

    function PromotionNotesCollection() {
      this.getAllNotesForPromotionWithId = bind(this.getAllNotesForPromotionWithId, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PromotionNotesCollection.__super__.constructor.apply(this, arguments);
    }

    PromotionNotesCollection.prototype.model = PromotionNote;

    PromotionNotesCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += " WHERE " + _this.model.sfdc.parentId + " IN (SELECT Id FROM TM_Promotion__c";
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('', clmConfig);
            config.query += ')';
            return config;
          });
        };
      })(this));
    };

    PromotionNotesCollection.prototype.parseModel = function(result) {
      var ref;
      result[this.model.sfdc.attachedByName] = (ref = result.CreatedBy) != null ? ref.Name : void 0;
      return PromotionNotesCollection.__super__.parseModel.call(this, result);
    };

    PromotionNotesCollection.prototype.getAllNotesForPromotionWithId = function(promotionId) {
      var promotionIdValue;
      promotionIdValue = {};
      promotionIdValue[this.model.sfdc.parentId] = promotionId;
      return this.fetchAllWhere(promotionIdValue).then(this.getAllEntitiesFromResponse);
    };

    return PromotionNotesCollection;

  })(EntitiesCollection);

  module.exports = PromotionNotesCollection;

}).call(this);
}, "models/bll/promotion-skus-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, PromotionFilterSFQueryBuilder, PromotionSku, PromotionSkusCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PromotionSku = require('models/promotion-sku');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  PromotionSkusCollection = (function(superClass) {
    extend(PromotionSkusCollection, superClass);

    function PromotionSkusCollection() {
      this.getAllSkusForPromotionWithId = bind(this.getAllSkusForPromotionWithId, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PromotionSkusCollection.__super__.constructor.apply(this, arguments);
    }

    PromotionSkusCollection.prototype.model = PromotionSku;

    PromotionSkusCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('Promotion__r', clmConfig);
            return config;
          });
        };
      })(this));
    };

    PromotionSkusCollection.prototype.parseModel = function(result) {
      result[this.model.sfdc.productItemName] = result.SKU__r.Name;
      return PromotionSkusCollection.__super__.parseModel.call(this, result);
    };

    PromotionSkusCollection.prototype.getAllSkusForPromotionWithId = function(promoId) {
      var promoIdValue;
      promoIdValue = {};
      promoIdValue[this.model.sfdc.promotionSfId] = promoId;
      return this.fetchAllWhere(promoIdValue).then(this.getAllEntitiesFromResponse);
    };

    return PromotionSkusCollection;

  })(EntitiesCollection);

  module.exports = PromotionSkusCollection;

}).call(this);
}, "models/bll/promotion-task-accounts-collection": function(exports, require, module) {(function() {
  var ConfigurationManager, EntitiesCollection, PromotionFilterSFQueryBuilder, PromotionTaskAccount, PromotionTaskAccountsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  PromotionTaskAccount = require('models/promotion-task-account');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  PromotionTaskAccountsCollection = (function(superClass) {
    extend(PromotionTaskAccountsCollection, superClass);

    function PromotionTaskAccountsCollection() {
      this._getAllTasksForPromotionWithIdAndAreRelatedToSKUs = bind(this._getAllTasksForPromotionWithIdAndAreRelatedToSKUs, this);
      this.getAllTasksRelatedToSKUsForPromotionAccountWithId = bind(this.getAllTasksRelatedToSKUsForPromotionAccountWithId, this);
      this.getAllTasksForPromotionAccountWithId = bind(this.getAllTasksForPromotionAccountWithId, this);
      this.getBothRelatedAndNotRelatedToSkusTasks = bind(this.getBothRelatedAndNotRelatedToSkusTasks, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return PromotionTaskAccountsCollection.__super__.constructor.apply(this, arguments);
    }

    PromotionTaskAccountsCollection.prototype.model = PromotionTaskAccount;

    PromotionTaskAccountsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('PromotionAccount__r.Promotion__r', clmConfig);
            return config;
          });
        };
      })(this));
    };

    PromotionTaskAccountsCollection.prototype.parseModel = function(result) {
      result[this.model.sfdc.promotionEndDate] = result.Promotion_Task__r.PromotionEndDate__c;
      result[this.model.sfdc.promotionName] = result.Promotion_Task__r.PromotionName__c;
      result[this.model.sfdc.promotionStartDate] = result.Promotion_Task__r.PromotionStartDate__c;
      result[this.model.sfdc.taskSfId] = result.Promotion_Task__r.Task__c;
      result[this.model.sfdc.taskName] = result.Promotion_Task__r.TaskName__c;
      result[this.model.sfdc.taskType] = result.Promotion_Task__r.TaskType__c;
      result[this.model.sfdc.taskRecordType] = result.Promotion_Task__r.Task__r.RecordType.Name;
      result[this.model.sfdc.taskPicklistValues] = result.Promotion_Task__r.Task__r.Picklist__c;
      return PromotionTaskAccountsCollection.__super__.parseModel.call(this, result);
    };

    PromotionTaskAccountsCollection.prototype.getBothRelatedAndNotRelatedToSkusTasks = function(promoAccountId) {
      var promoIdValue;
      promoIdValue = {};
      promoIdValue[this.model.sfdc.promotionAccountSfId] = promoAccountId;
      return this.fetchAllWhere(promoIdValue).then(this.getAllEntitiesFromResponse);
    };

    PromotionTaskAccountsCollection.prototype.getAllTasksForPromotionAccountWithId = function(promoAccountId) {
      return this._getAllTasksForPromotionWithIdAndAreRelatedToSKUs(promoAccountId, false);
    };

    PromotionTaskAccountsCollection.prototype.getAllTasksRelatedToSKUsForPromotionAccountWithId = function(promoAccountId) {
      return this._getAllTasksForPromotionWithIdAndAreRelatedToSKUs(promoAccountId, true);
    };

    PromotionTaskAccountsCollection.prototype._getAllTasksForPromotionWithIdAndAreRelatedToSKUs = function(promoAccountId, areRelated) {
      var promoIdValue;
      promoIdValue = {};
      promoIdValue[this.model.sfdc.promotionAccountSfId] = promoAccountId;
      promoIdValue.relatedToSku = areRelated;
      return this.fetchAllWhere(promoIdValue).then(this.getAllEntitiesFromResponse);
    };

    PromotionTaskAccountsCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateTaskAccounts(records);
    };

    PromotionTaskAccountsCollection.prototype._updateTaskAccounts = function(taskAccounts) {
      var updatedTaskAccounts;
      updatedTaskAccounts = taskAccounts.map(function(taskAccount) {
        var ref, ref1;
        taskAccount.promotionSfId = (ref = taskAccount.PromotionAccount__r) != null ? ref.Promotion__c : void 0;
        taskAccount.relatedToSku = (ref1 = taskAccount.Promotion_Task__r) != null ? ref1.RelatedToSKU__c : void 0;
        return taskAccount;
      });
      return this.cache.saveAll(updatedTaskAccounts);
    };

    return PromotionTaskAccountsCollection;

  })(EntitiesCollection);

  module.exports = PromotionTaskAccountsCollection;

}).call(this);
}, "models/bll/references/non-target-references-collection": function(exports, require, module) {(function() {
  var NonTargetReferencesCollection, ReferencesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ReferencesCollection = require('models/bll/references/references-collection');

  NonTargetReferencesCollection = (function(superClass) {
    extend(NonTargetReferencesCollection, superClass);

    function NonTargetReferencesCollection() {
      this.count = bind(this.count, this);
      return NonTargetReferencesCollection.__super__.constructor.apply(this, arguments);
    }

    NonTargetReferencesCollection.prototype._fetchAllQuery = function() {
      return this._queryWithTargetFilter(false);
    };

    NonTargetReferencesCollection.prototype.count = function() {
      return this._countWithTargetFilter(false);
    };

    return NonTargetReferencesCollection;

  })(ReferencesCollection);

  module.exports = NonTargetReferencesCollection;

}).call(this);
}, "models/bll/references/references-collection": function(exports, require, module) {(function() {
  var Contact, ContactsCollection, EntitiesCollection, Query, Reference, ReferencesCollection, TargetFrequenciesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Reference = require('models/reference');

  Contact = require('models/contact');

  Query = require('common/query');

  ContactsCollection = require('models/bll/contacts-collection');

  TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');

  ReferencesCollection = (function(superClass) {
    extend(ReferencesCollection, superClass);

    function ReferencesCollection() {
      this._updateReferencesByContactsIdsForContacts = bind(this._updateReferencesByContactsIdsForContacts, this);
      this._referencesByContactIds = bind(this._referencesByContactIds, this);
      this._countWithTargetFilter = bind(this._countWithTargetFilter, this);
      this._queryFromRefsWithTargetFilter = bind(this._queryFromRefsWithTargetFilter, this);
      this._queryWithTargetFilter = bind(this._queryWithTargetFilter, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return ReferencesCollection.__super__.constructor.apply(this, arguments);
    }

    ReferencesCollection.prototype.model = Reference;

    ReferencesCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          config.query += " WHERE Customer__r.Id != Null AND Organisation__r.Id != Null AND Customer__r." + Contact.sfdc.status + " = '" + Contact.STATUS_ACTIVE + "'";
          return config;
        };
      })(this));
    };

    ReferencesCollection.prototype.parseModel = function(result) {
      var ref;
      result[this.model.sfdc.organizationName] = result.Organisation__r.Name;
      result[this.model.sfdc.organizationCity] = result.Organisation__r.BillingCity;
      result[this.model.sfdc.organizationAddress] = result.Organisation__r.BillingStreet;
      result[this.model.sfdc.organizationBrick] = result.Organisation__r.Brick__c;
      result[this.model.sfdc.contactRecordType] = (ref = result.Customer__r.Account) != null ? ref.RecordType.Name : void 0;
      result[this.model.sfdc.contactFirstName] = result.Customer__r.FirstName;
      result[this.model.sfdc.contactLastName] = result.Customer__r.LastName;
      if (result.priority == null) {
        result.priority = '';
      }
      if (result.abbottSpecialty == null) {
        result.abbottSpecialty = '';
      }
      if (result.atCalls == null) {
        result.atCalls = '';
      }
      if (result.lastCall == null) {
        result.lastCall = '';
      }
      return ReferencesCollection.__super__.parseModel.call(this, result);
    };

    ReferencesCollection.prototype._queryWithTargetFilter = function(isTarget) {
      var query, references;
      references = this.model.table;
      query = new Query(references);
      return query.customQuery(("SELECT {" + references + ":" + Query.ALL + "} ") + this._queryFromRefsWithTargetFilter(isTarget).toString());
    };

    ReferencesCollection.prototype._queryFromRefsWithTargetFilter = function(isTarget) {
      var contacts, contactsId, query, references, refsContactId;
      contacts = Contact.table;
      contactsId = Contact.sfdc.id;
      references = this.model.table;
      refsContactId = this.model.sfdc.contactSfId;
      query = new Query(references);
      return query.customQuery(("FROM {" + references + "}, {" + contacts + "} ") + ("WHERE {" + references + ":" + refsContactId + "} = {" + contacts + ":" + contactsId + "} ") + ("AND {" + contacts + ":isTargetCustomer} = " + (query.valueOf(isTarget))));
    };

    ReferencesCollection.prototype._countWithTargetFilter = function(isTarget) {
      var query, querySpec, references;
      references = this.model.table;
      query = new Query(references);
      query.customQuery("SELECT COUNT(*) " + this._queryFromRefsWithTargetFilter(isTarget).toString());
      querySpec = Force.smartstoreClient.impl.buildSmartQuerySpec(query.toString(), 1);
      return Force.smartstoreClient.runSmartQuery(querySpec).then(function(count) {
        return _.chain(count.currentPageOrderedEntries).flatten().first().value();
      });
    };

    ReferencesCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateAtCalls(records);
    };

    ReferencesCollection.prototype._updateAtCalls = function(references) {
      var contactsCollection, refsByContactIds;
      refsByContactIds = this._referencesByContactIds(references);
      contactsCollection = new ContactsCollection;
      return contactsCollection.fetchForContactIds(Object.keys(refsByContactIds)).then((function(_this) {
        return function(contacts) {
          return _this._updateReferencesByContactsIdsForContacts(refsByContactIds, contacts);
        };
      })(this));
    };

    ReferencesCollection.prototype._referencesByContactIds = function(references) {
      var refsByContactIds;
      refsByContactIds = {};
      references.forEach((function(_this) {
        return function(reference) {
          var contactId;
          contactId = reference[_this.model.sfdc.contactSfId];
          if (!refsByContactIds[contactId]) {
            refsByContactIds[contactId] = [];
          }
          return refsByContactIds[contactId].push(reference);
        };
      })(this));
      return refsByContactIds;
    };

    ReferencesCollection.prototype._updateReferencesByContactsIdsForContacts = function(refsByContactIds, contacts) {
      var leftRefsIds, updatedReferences;
      updatedReferences = [];
      contacts.forEach((function(_this) {
        return function(contact) {
          var references;
          references = refsByContactIds[contact.id];
          if (references && references.length) {
            references.forEach(function(reference) {
              var updatedReference;
              updatedReference = _this._updateAtCallForReference(reference, contact);
              updatedReference = _this._updatePriorityForReference(updatedReference, contact);
              updatedReference = _this._updateAbbottSpecialtyForReference(updatedReference, contact);
              return updatedReferences.push(updatedReference);
            });
          }
          return delete refsByContactIds[contact.id];
        };
      })(this));
      leftRefsIds = Object.keys(refsByContactIds);
      updatedReferences = leftRefsIds.reduce((function(container, refId) {
        return container.concat(refsByContactIds[refId]);
      }), updatedReferences);
      return this.cache.saveAll(updatedReferences);
    };

    ReferencesCollection.prototype._updateAtCallForReference = function(reference, contact) {
      var lastDateTargetFrequency;
      if (contact != null ? contact.lastDateTargetFrequency : void 0) {
        lastDateTargetFrequency = contact.lastDateTargetFrequency;
        reference.atCalls = lastDateTargetFrequency.atCalls();
        reference.lastCall = lastDateTargetFrequency.lastCall();
      } else {
        reference.atCalls = '';
        reference.lastCall = '';
      }
      return reference;
    };

    ReferencesCollection.prototype._updatePriorityForReference = function(reference, contact) {
      if (contact != null ? contact.priority : void 0) {
        reference.priority = contact.priority;
      }
      return reference;
    };

    ReferencesCollection.prototype._updateAbbottSpecialtyForReference = function(reference, contact) {
      if (contact != null ? contact.abbottSpecialty : void 0) {
        reference.abbottSpecialty = contact.abbottSpecialty;
      }
      return reference;
    };

    return ReferencesCollection;

  })(EntitiesCollection);

  module.exports = ReferencesCollection;

}).call(this);
}, "models/bll/references/target-references-collection": function(exports, require, module) {(function() {
  var ReferencesCollection, TargetReferencesCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ReferencesCollection = require('models/bll/references/references-collection');

  TargetReferencesCollection = (function(superClass) {
    extend(TargetReferencesCollection, superClass);

    function TargetReferencesCollection() {
      this.count = bind(this.count, this);
      return TargetReferencesCollection.__super__.constructor.apply(this, arguments);
    }

    TargetReferencesCollection.prototype._fetchAllQuery = function() {
      return this._queryWithTargetFilter(true);
    };

    TargetReferencesCollection.prototype.count = function() {
      return this._countWithTargetFilter(true);
    };

    return TargetReferencesCollection;

  })(ReferencesCollection);

  module.exports = TargetReferencesCollection;

}).call(this);
}, "models/bll/scenarios-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, Scenario, ScenariosCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Scenario = require('models/scenario');

  ScenariosCollection = (function(superClass) {
    extend(ScenariosCollection, superClass);

    function ScenariosCollection() {
      return ScenariosCollection.__super__.constructor.apply(this, arguments);
    }

    ScenariosCollection.prototype.model = Scenario;

    return ScenariosCollection;

  })(EntitiesCollection);

  module.exports = ScenariosCollection;

}).call(this);
}, "models/bll/sforce-data-context": function(exports, require, module) {(function() {
  var AlarmManager, MarketingCyclesCollection, SFOAuthPlugin, SforceDataContext, UsersCollection, Utils;

  UsersCollection = require('models/bll/users-collection');

  MarketingCyclesCollection = require('models/bll/marketing-cycles-collection');

  Utils = require('common/utils');

  AlarmManager = require('common/alarm/alarm-manager');

  SFOAuthPlugin = cordova.require('salesforce/plugin/oauth');

  SforceDataContext = (function() {
    function SforceDataContext() {}

    SforceDataContext.usersCollection = new UsersCollection;

    SforceDataContext.mcsCollection = new MarketingCyclesCollection;

    SforceDataContext._activeUser = null;

    SforceDataContext._activeTarget = null;

    SforceDataContext._currentCycle = null;

    SforceDataContext.cleanup = function() {
      SforceDataContext._activeUser = null;
      SforceDataContext._currentCycle = null;
      return SforceDataContext._activeTarget = null;
    };

    SforceDataContext.activeUser = function() {
      if (SforceDataContext._activeUser != null) {
        return $.when(SforceDataContext._activeUser);
      } else {
        return SforceDataContext.usersCollection.loadActiveUser().then(function(_activeUser) {
          SforceDataContext._activeUser = _activeUser;
          return SforceDataContext._activeUser;
        });
      }
    };

    SforceDataContext.reloadActiveUser = function() {
      SforceDataContext._activeUser = null;
      return SforceDataContext.activeUser();
    };

    SforceDataContext.currentMarketingCycle = function() {
      var today;
      if (!SforceDataContext._currentCycle) {
        today = Utils.currentDate();
        return SforceDataContext.activeUser().then(function(activeUser) {
          return SforceDataContext.mcsCollection.fetchByDateAndCurrency(today, activeUser.currency);
        }).then(function(_currentCycle) {
          SforceDataContext._currentCycle = _currentCycle;
          return SforceDataContext._currentCycle;
        });
      } else {
        return $.when(SforceDataContext._currentCycle);
      }
    };

    SforceDataContext.getAuthCredentials = function() {
      var deferred;
      deferred = new $.Deferred;
      cordova.require("salesforce/plugin/oauth").getAuthCredentials(deferred.resolve, deferred.reject);
      return deferred.promise();
    };

    SforceDataContext.logout = function() {
      AlarmManager.cancelNotification();
      return SFOAuthPlugin.logout();
    };

    return SforceDataContext;

  })();

  module.exports = SforceDataContext;

}).call(this);
}, "models/bll/target-frequencies-collection": function(exports, require, module) {(function() {
  var ContactsCollection, EntitiesCollection, MarketingCyclesCollection, Query, SforceDataContext, TargetFrequenciesCollection, TargetFrequency, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  ContactsCollection = require('models/bll/contacts-collection');

  MarketingCyclesCollection = require('models/bll/marketing-cycles-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  TargetFrequency = require('models/target-frequency');

  Query = require('common/query');

  Utils = require('common/utils');

  TargetFrequenciesCollection = (function(superClass) {
    extend(TargetFrequenciesCollection, superClass);

    function TargetFrequenciesCollection() {
      this._updateContactPriorities = bind(this._updateContactPriorities, this);
      this._updateContactAsTarget = bind(this._updateContactAsTarget, this);
      this._filterTargetFrequenciesByMedrep = bind(this._filterTargetFrequenciesByMedrep, this);
      this._targetFrequenciesByCustomerIds = bind(this._targetFrequenciesByCustomerIds, this);
      this._queryForCurrentMCTFsContacts = bind(this._queryForCurrentMCTFsContacts, this);
      this._updateTargetContacts = bind(this._updateTargetContacts, this);
      this.didPageFinishDownloading = bind(this.didPageFinishDownloading, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return TargetFrequenciesCollection.__super__.constructor.apply(this, arguments);
    }

    TargetFrequenciesCollection.prototype.model = TargetFrequency;

    TargetFrequenciesCollection.prototype.parseModel = function(result) {
      var ref;
      if ((ref = result.Target__r) != null ? ref.MedRep__r : void 0) {
        result[this.model.sfdc.medrepId] = result.Target__r.MedRep__r.Id;
        result[this.model.sfdc.medrepFirstName] = result.Target__r.MedRep__r.FirstName;
        result[this.model.sfdc.medrepLastName] = result.Target__r.MedRep__r.LastName;
      }
      return TargetFrequenciesCollection.__super__.parseModel.call(this, result);
    };

    TargetFrequenciesCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return SforceDataContext.activeUser().then(function(currentUser) {
            return [config, currentUser];
          });
        };
      })(this)).then((function(_this) {
        return function(arg) {
          var config, currentUser, mcCurrency, mcEndDate, mcStartDate, mcr, mcsCollection, today;
          config = arg[0], currentUser = arg[1];
          today = Utils.currentDate();
          mcsCollection = new MarketingCyclesCollection;
          mcr = 'Marketing_Cycle__r';
          mcStartDate = mcsCollection.model.sfdc.startDate;
          mcEndDate = mcsCollection.model.sfdc.endDate;
          mcCurrency = mcsCollection.model.sfdc.currencyIsoCode;
          config.query += " where " + _this.model.sfdc.isActive + " = true and " + mcr + "." + mcStartDate + " <= " + today + " and " + mcr + "." + mcEndDate + " >= " + today + " and " + mcr + "." + mcCurrency + " = '" + currentUser.currency + "'";
          return config;
        };
      })(this));
    };

    TargetFrequenciesCollection.prototype.didPageFinishDownloading = function(records) {
      return TargetFrequenciesCollection.__super__.didPageFinishDownloading.call(this, records).then((function(_this) {
        return function() {
          return _this._updateTargetContacts(records);
        };
      })(this));
    };

    TargetFrequenciesCollection.prototype._updateTargetContacts = function(targetFrequencies) {
      return this.fetchUnparsedWithQuery(this._queryForCurrentMCTFsContacts()).then(this.getAllUnparsedEntitiesFromResponse).then((function(_this) {
        return function(contacts) {
          return SforceDataContext.activeUser().then(function(activeUser) {
            return [contacts, activeUser];
          });
        };
      })(this)).then((function(_this) {
        return function(arg) {
          var activeUser, contacts, contactsCollection, tfsByCustomerIds, updatedContacts;
          contacts = arg[0], activeUser = arg[1];
          tfsByCustomerIds = _this._targetFrequenciesByCustomerIds(_this._filterTargetFrequenciesByMedrep(targetFrequencies, activeUser));
          contactsCollection = new ContactsCollection;
          updatedContacts = contacts.map(function(contact) {
            _this._updateContactAsTarget(contact);
            _this._updateContactPriorities(contact, tfsByCustomerIds);
            return contact;
          });
          return contactsCollection.upsertEntitiesSilently(updatedContacts);
        };
      })(this));
    };

    TargetFrequenciesCollection.prototype._queryForCurrentMCTFsContacts = function() {
      var contacts, contactsCollection, contactsId, mcEndDate, mcStartDate, mcs, mcsCollection, mcsId, query, tfs, tfsCustomerId, tfsMCId, today;
      contactsCollection = new ContactsCollection;
      mcsCollection = new MarketingCyclesCollection;
      contacts = contactsCollection.model.table;
      mcs = mcsCollection.model.table;
      tfs = this.model.table;
      contactsId = contactsCollection.model.sfdc.id;
      mcsId = mcsCollection.model.sfdc.id;
      tfsCustomerId = this.model.sfdc.customerSfId;
      tfsMCId = this.model.sfdc.marketingCycleSfId;
      mcStartDate = mcsCollection.model.sfdc.startDate;
      mcEndDate = mcsCollection.model.sfdc.endDate;
      today = Utils.currentDate();
      query = new Query(this.model.table);
      return query.customQuery(("SELECT {" + contacts + ":" + Query.ALL + "} ") + ("FROM {" + contacts + "}, {" + tfs + "}, {" + mcs + "} ") + ("WHERE {" + tfs + ":" + tfsCustomerId + "} = {" + contacts + ":" + contactsId + "} ") + ("AND {" + tfs + ":" + tfsMCId + "} = {" + mcs + ":" + mcsId + "} AND {" + mcs + ":" + mcStartDate + "} <= " + (query.valueOf(today)) + " AND {" + mcs + ":" + mcEndDate + "} >= " + (query.valueOf(today))));
    };

    TargetFrequenciesCollection.prototype._targetFrequenciesByCustomerIds = function(tfs) {
      var tfsByCustomerIds;
      tfsByCustomerIds = {};
      tfs.forEach((function(_this) {
        return function(tf) {
          return tfsByCustomerIds[tf[_this.model.sfdc.customerSfId]] = tf;
        };
      })(this));
      return tfsByCustomerIds;
    };

    TargetFrequenciesCollection.prototype._filterTargetFrequenciesByMedrep = function(tfs, medrep) {
      return _(tfs).filter((function(_this) {
        return function(tf) {
          return tf[_this.model.sfdc.medrepId] === medrep.id;
        };
      })(this));
    };

    TargetFrequenciesCollection.prototype._updateContactAsTarget = function(contact) {
      return contact.isTargetCustomer = true;
    };

    TargetFrequenciesCollection.prototype._updateContactPriorities = function(contact, tfsByCustomerIds) {
      var tf;
      tf = tfsByCustomerIds[contact[this.model.sfdc.id]];
      if (tf) {
        return contact.priority = tf[this.model.sfdc.priority];
      }
    };

    return TargetFrequenciesCollection;

  })(EntitiesCollection);

  module.exports = TargetFrequenciesCollection;

}).call(this);
}, "models/bll/targets-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, Target, TargetsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Target = require('models/target');

  TargetsCollection = (function(superClass) {
    extend(TargetsCollection, superClass);

    function TargetsCollection() {
      this.getTargetByUser = bind(this.getTargetByUser, this);
      return TargetsCollection.__super__.constructor.apply(this, arguments);
    }

    TargetsCollection.prototype.model = Target;

    TargetsCollection.prototype.getTargetByUser = function(user) {
      var userValue;
      userValue = {};
      userValue[this.model.sfdc.medrepSfId] = user.id;
      return this.fetchAllWhere(userValue).then(this.getEntityFromResponse);
    };

    return TargetsCollection;

  })(EntitiesCollection);

  module.exports = TargetsCollection;

}).call(this);
}, "models/bll/task-adjustments-collection": function(exports, require, module) {(function() {
  var CallreportFilterSFQueryBuilder, ConfigurationManager, EntitiesCollection, PromotionFilterSFQueryBuilder, Query, TaskAdjustment, TaskAdjustmentsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  TaskAdjustment = require('models/task-adjustment');

  Query = require('common/query');

  ConfigurationManager = require('db/configuration-manager');

  PromotionFilterSFQueryBuilder = require('common/sf-query-builders/promotion-filter-sf-query-builder');

  CallreportFilterSFQueryBuilder = require('common/sf-query-builders/callreport-filter-sf-query-builder');

  TaskAdjustmentsCollection = (function(superClass) {
    extend(TaskAdjustmentsCollection, superClass);

    function TaskAdjustmentsCollection() {
      this.getAdjustmentsByCallReport = bind(this.getAdjustmentsByCallReport, this);
      this.getAllTaskAdjustmentsByCallReportAndTaskAccounts = bind(this.getAllTaskAdjustmentsByCallReportAndTaskAccounts, this);
      this.getAllTaskAdjustmentsBySkusAndTasks = bind(this.getAllTaskAdjustmentsBySkusAndTasks, this);
      this.prepareServerConfig = bind(this.prepareServerConfig, this);
      return TaskAdjustmentsCollection.__super__.constructor.apply(this, arguments);
    }

    TaskAdjustmentsCollection.prototype.model = TaskAdjustment;

    TaskAdjustmentsCollection.prototype.prepareServerConfig = function(configPromise) {
      return configPromise.then((function(_this) {
        return function(config) {
          return ConfigurationManager.getConfig().then(function(clmConfig) {
            config.query += PromotionFilterSFQueryBuilder.buildWhereFilter('PromotionTask_Account__r.PromotionAccount__r.Promotion__r', clmConfig);
            config.query += ' AND';
            config.query += CallreportFilterSFQueryBuilder.buildWhereFilter('CallReport__r', true);
            return config;
          });
        };
      })(this));
    };

    TaskAdjustmentsCollection.prototype.getAllTaskAdjustmentsBySkusAndTasks = function(skus, tasks) {
      var query, skuProductIds, taskIds;
      skuProductIds = skus.map(function(sku) {
        return sku.productItemSfId;
      });
      taskIds = tasks.map(function(task) {
        return task.promotionTaskSfId;
      });
      query = this._fetchAllQuery().whereIn(this.model.sfdc.productItemSfId, skuProductIds).and().whereIn('promotionTaskSfId', taskIds);
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    TaskAdjustmentsCollection.prototype.getAllTaskAdjustmentsByCallReportAndTaskAccounts = function(callReport, promotionTaskAccountSfIds) {
      var query;
      query = new Query().selectFrom(this.model.table).whereIn(this.model.sfdc.callReportSfId, [callReport.id, this._attributesFromEntity(callReport)._soupEntryId]).and().whereIn(this.model.sfdc.promotionTaskAccountSfId, promotionTaskAccountSfIds);
      return this.fetchWithQuery(query).then(this.getAllEntitiesFromResponse);
    };

    TaskAdjustmentsCollection.prototype.getAdjustmentsByCallReport = function(callReport) {
      var callReportIdValue;
      callReportIdValue = {};
      callReportIdValue[this.model.sfdc.callReportSfId] = this._attributesFromEntity(callReport)._soupEntryId;
      return this.fetchAllWhere(callReportIdValue).then(this.getAllEntitiesFromResponse);
    };

    TaskAdjustmentsCollection.prototype.didStartUploading = function(records) {
      var adjustmentsToUpload, brokenAdjustments, ref, ref1, splitBrokenAdjustments;
      splitBrokenAdjustments = _.groupBy(records, function(record) {
        return (record.isModifiedInTrade === true) || (record.isModifiedInCall === true);
      });
      brokenAdjustments = (ref = splitBrokenAdjustments["true"]) != null ? ref : [];
      adjustmentsToUpload = (ref1 = splitBrokenAdjustments["false"]) != null ? ref1 : [];
      return this.removeEntities(brokenAdjustments).then(function() {
        return adjustmentsToUpload;
      }).then((function(_this) {
        return function(entities) {
          var CallReportsCollection, сallReportsCollection;
          CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');
          сallReportsCollection = new CallReportsCollection();
          return сallReportsCollection.linkEntitiesToEntity(entities, 'callReportSfId');
        };
      })(this));
    };

    TaskAdjustmentsCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateTasksAdjustments(records);
    };

    TaskAdjustmentsCollection.prototype._updateTasksAdjustments = function(taskAdjustments) {
      var updatedTaskAdjustments;
      updatedTaskAdjustments = taskAdjustments.map(function(taskAdjustment) {
        var ref, ref1;
        taskAdjustment.promotionTaskSfId = (ref = (ref1 = taskAdjustment.PromotionTask_Account__r) != null ? ref1.Promotion_Task__c : void 0) != null ? ref : '';
        return taskAdjustment;
      });
      return this.cache.saveAll(updatedTaskAdjustments);
    };

    return TaskAdjustmentsCollection;

  })(EntitiesCollection);

  module.exports = TaskAdjustmentsCollection;

}).call(this);
}, "models/bll/tots-collection/tots-closed-collection": function(exports, require, module) {(function() {
  var TotsClosedCollection, TotsCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TotsCollection = require('models/bll/tots-collection/tots-collection');

  TotsClosedCollection = (function(superClass) {
    extend(TotsClosedCollection, superClass);

    function TotsClosedCollection() {
      return TotsClosedCollection.__super__.constructor.apply(this, arguments);
    }

    TotsClosedCollection.prototype._dataType = function() {
      var fieldValue;
      fieldValue = {};
      fieldValue[this.model.sfdc.type] = this.model.TYPE_CLOSED;
      return fieldValue;
    };

    return TotsClosedCollection;

  })(TotsCollection);

  module.exports = TotsClosedCollection;

}).call(this);
}, "models/bll/tots-collection/tots-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, Query, Tot, TotsCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  Tot = require('models/tot');

  Query = require('common/query');

  TotsCollection = (function(superClass) {
    extend(TotsCollection, superClass);

    TotsCollection.prototype.model = Tot;

    TotsCollection.prototype.ALL_TYPES = 'ALL_TYPES';

    function TotsCollection() {
      this.handleErrorForEntity = bind(this.handleErrorForEntity, this);
      TotsCollection.__super__.constructor.apply(this, arguments);
      this.cache.noMerge = false;
    }

    TotsCollection.prototype.parseModel = function(result) {
      if (result.Owner) {
        result[this.model.sfdc.userFirstName] = result.Owner.FirstName;
        result[this.model.sfdc.userLastName] = result.Owner.LastName;
      }
      return TotsCollection.__super__.parseModel.call(this, result);
    };

    TotsCollection.prototype._dataType = function() {
      return this.ALL_TYPES;
    };

    TotsCollection.prototype._fetchAllQuery = function() {
      var dataType, query;
      query = new Query().selectFrom(this.model.table);
      dataType = this._dataType();
      if (dataType === this.ALL_TYPES) {
        return query;
      } else {
        return query.where(dataType);
      }
    };

    TotsCollection.prototype.warningErrorCodes = function() {
      return _.union(TotsCollection.__super__.warningErrorCodes.apply(this, arguments), ['ENTITY_IS_LOCKED']);
    };

    TotsCollection.prototype.handleErrorForEntity = function(error, entity) {
      return $.when(TotsCollection.__super__.handleErrorForEntity.call(this, error, entity)).then((function(_this) {
        return function() {
          if (entity && error.details.errorCode === 'ENTITY_IS_LOCKED') {
            return _this.markEntityAsNotModified(entity);
          }
        };
      })(this));
    };

    return TotsCollection;

  })(EntitiesCollection);

  module.exports = TotsCollection;

}).call(this);
}, "models/bll/tots-collection/tots-open-collection": function(exports, require, module) {(function() {
  var TotsCollection, TotsOpenCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TotsCollection = require('models/bll/tots-collection/tots-collection');

  TotsOpenCollection = (function(superClass) {
    extend(TotsOpenCollection, superClass);

    function TotsOpenCollection() {
      return TotsOpenCollection.__super__.constructor.apply(this, arguments);
    }

    TotsOpenCollection.prototype._dataType = function() {
      var fieldValue;
      fieldValue = {};
      fieldValue[this.model.sfdc.type] = this.model.TYPE_OPEN;
      return fieldValue;
    };

    return TotsOpenCollection;

  })(TotsCollection);

  module.exports = TotsOpenCollection;

}).call(this);
}, "models/bll/tots-collection/tots-submit-collection": function(exports, require, module) {(function() {
  var TotsCollection, TotsSubmitCollection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TotsCollection = require('models/bll/tots-collection/tots-collection');

  TotsSubmitCollection = (function(superClass) {
    extend(TotsSubmitCollection, superClass);

    function TotsSubmitCollection() {
      return TotsSubmitCollection.__super__.constructor.apply(this, arguments);
    }

    TotsSubmitCollection.prototype._dataType = function() {
      var fieldValue;
      fieldValue = {};
      fieldValue[this.model.sfdc.type] = this.model.TYPE_SUBMIT;
      return fieldValue;
    };

    return TotsSubmitCollection;

  })(TotsCollection);

  module.exports = TotsSubmitCollection;

}).call(this);
}, "models/bll/tour-planning-collection/target-tour-planning-collection": function(exports, require, module) {(function() {
  var TargetReferencesCollection, TargetTourPlanningCollection, TourPlanningEntity,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TourPlanningEntity = require('models/tour-planning-entity');

  TargetReferencesCollection = require('models/bll/references/target-references-collection');

  TargetTourPlanningCollection = (function(superClass) {
    extend(TargetTourPlanningCollection, superClass);

    function TargetTourPlanningCollection() {
      return TargetTourPlanningCollection.__super__.constructor.apply(this, arguments);
    }

    TargetTourPlanningCollection.prototype.model = TourPlanningEntity;

    TargetTourPlanningCollection.prototype._fetchAllQuery = function() {
      var isStatusActive;
      isStatusActive = {};
      isStatusActive[this.model.sfdc.status] = this.model.STATUS_ACTIVE;
      return TargetTourPlanningCollection.__super__._fetchAllQuery.call(this).where(isStatusActive);
    };

    return TargetTourPlanningCollection;

  })(TargetReferencesCollection);

  module.exports = TargetTourPlanningCollection;

}).call(this);
}, "models/bll/tour-planning-collection/tour-planning-collection": function(exports, require, module) {(function() {
  var Query, ReferencesCollection, TargetFrequenciesCollection, TourPlanningCollection, TourPlanningEntity,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TourPlanningEntity = require('models/tour-planning-entity');

  ReferencesCollection = require('models/bll/references/references-collection');

  TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');

  Query = require('common/query');

  TourPlanningCollection = (function(superClass) {
    extend(TourPlanningCollection, superClass);

    function TourPlanningCollection() {
      return TourPlanningCollection.__super__.constructor.apply(this, arguments);
    }

    TourPlanningCollection.prototype.model = TourPlanningEntity;

    TourPlanningCollection.prototype._fetchByBricksForUserQuery = function(brickIds, userId) {
      var query, references, refsContactId, refsOrgBrickId, refsStatus, tfs, tfsCollection, tfsContactId, tfsMedrepId;
      tfsCollection = new TargetFrequenciesCollection;
      tfs = tfsCollection.model.table;
      tfsContactId = tfsCollection.model.sfdc.customerSfId;
      tfsMedrepId = tfsCollection.model.sfdc.medrepId;
      references = this.model.table;
      refsContactId = this.model.sfdc.contactSfId;
      refsOrgBrickId = this.model.sfdc.organizationBrick;
      refsStatus = this.model.sfdc.status;
      query = new Query(this.model.table);
      brickIds = brickIds.map((function(_this) {
        return function(brickId) {
          return query.valueOf(brickId);
        };
      })(this)).join(', ');
      return query.customQuery(("SELECT {" + references + ":" + Query.ALL + "} FROM {" + references + "}, {" + tfs + "} ") + ("WHERE {" + references + ":" + refsContactId + "} = {" + tfs + ":" + tfsContactId + "} ") + ("AND {" + references + ":" + refsOrgBrickId + "} in (" + brickIds + ") ") + ("AND {" + references + ":" + refsStatus + "} = " + (query.valueOf(this.model.STATUS_ACTIVE)) + " ") + ("AND {" + tfs + ":" + tfsMedrepId + "} = " + (query.valueOf(userId))));
    };

    TourPlanningCollection.prototype.fetchAllByBrickIdsForUser = function(brickIds, userId) {
      return this.fetchWithQuery(this._fetchByBricksForUserQuery(brickIds, userId).orderBy([this.model.sfdc.contactFirstName], Query.ASC));
    };

    TourPlanningCollection.prototype.fetchAllByBrickIdsForUserSortedBy = function(bricksId, userId, fields, isAsc) {
      var order, query;
      order = isAsc ? Query.ASC : Query.DESC;
      query = this._fetchByBricksForUserQuery(bricksId, userId).orderBy(fields, order);
      return this.fetchWithQuery(query);
    };

    return TourPlanningCollection;

  })(ReferencesCollection);

  module.exports = TourPlanningCollection;

}).call(this);
}, "models/bll/users-collection": function(exports, require, module) {(function() {
  var EntitiesCollection, User, UsersCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EntitiesCollection = require('models/bll/entities-collection');

  User = require('models/user');

  UsersCollection = (function(superClass) {
    extend(UsersCollection, superClass);

    function UsersCollection() {
      this._fetchAllQuery = bind(this._fetchAllQuery, this);
      return UsersCollection.__super__.constructor.apply(this, arguments);
    }

    UsersCollection.prototype.model = User;

    UsersCollection.prototype.didPageFinishDownloading = function(records) {
      return this._updateActiveUser(records);
    };

    UsersCollection.prototype._updateActiveUser = function(users) {
      users = users.map((function(_this) {
        return function(user) {
          var isCurrentUser;
          isCurrentUser = user[_this.model.sfdc.id].indexOf(Force.userId) === 0;
          return _.extend({
            isCurrentUser: isCurrentUser
          }, user);
        };
      })(this));
      return this.cache.saveAll(users).then(function(users) {
        return require('models/bll/sforce-data-context').reloadActiveUser();
      });
    };

    UsersCollection.prototype._fetchAllQuery = function() {
      var activeUser;
      activeUser = {};
      activeUser[this.model.sfdc.isActive] = true;
      return UsersCollection.__super__._fetchAllQuery.call(this).where(activeUser);
    };

    UsersCollection.prototype.loadActiveUser = function() {
      var Utils;
      Utils = require('common/utils');
      if (Utils.isIOS()) {
        return this.fetchAllWhere({
          isCurrentUser: true
        }).then((function(_this) {
          return function(response) {
            return _this.getEntityFromResponse(response);
          };
        })(this));
      } else {
        return this.fetchEntityById(Force.userId);
      }
    };

    return UsersCollection;

  })(EntitiesCollection);

  module.exports = UsersCollection;

}).call(this);
}, "models/brick": function(exports, require, module) {(function() {
  var Brick, Entity,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Brick = (function(superClass) {
    extend(Brick, superClass);

    function Brick() {
      return Brick.__super__.constructor.apply(this, arguments);
    }

    Brick.table = 'Brick';

    Brick.sfdcTable = 'Account';

    Brick.description = 'Brick';

    Brick.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'name',
          sfdc: 'Name',
          indexWithType: 'string'
        }, {
          local: 'shortDescription',
          sfdc: 'Short_Description__c'
        }
      ];
    };

    return Brick;

  })(Entity);

  module.exports = Brick;

}).call(this);
}, "models/bu-team-person-profile": function(exports, require, module) {(function() {
  var BuTeamPersonProfile, Entity,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  BuTeamPersonProfile = (function(superClass) {
    extend(BuTeamPersonProfile, superClass);

    function BuTeamPersonProfile() {
      return BuTeamPersonProfile.__super__.constructor.apply(this, arguments);
    }

    BuTeamPersonProfile.table = 'BuTeamPersonProfile';

    BuTeamPersonProfile.sfdcTable = 'BU_Team_Person_Profile__c';

    BuTeamPersonProfile.description = 'Bu Team Person Profile';

    BuTeamPersonProfile.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'organizationSfid',
          sfdc: 'Account__c',
          indexWithType: 'string'
        }, {
          local: 'businessUnit',
          sfdc: 'Business_Unit__c',
          indexWithType: 'string'
        }, {
          local: 'priority',
          sfdc: 'Priority__c'
        }, {
          local: 'specialty',
          sfdc: 'Specialty__c',
          toLabel: true
        }
      ];
    };

    return BuTeamPersonProfile;

  })(Entity);

  module.exports = BuTeamPersonProfile;

}).call(this);
}, "models/call-report": function(exports, require, module) {(function() {
  var CallReport, Entity,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  CallReport = (function(superClass) {
    extend(CallReport, superClass);

    function CallReport() {
      this.getContact = bind(this.getContact, this);
      this.getSpecialty = bind(this.getSpecialty, this);
      this.getIsTargetCustomer = bind(this.getIsTargetCustomer, this);
      this.getJointVisitUser = bind(this.getJointVisitUser, this);
      this.organizationNameAndAddress = bind(this.organizationNameAndAddress, this);
      this.contactFullName = bind(this.contactFullName, this);
      this.userFullName = bind(this.userFullName, this);
      return CallReport.__super__.constructor.apply(this, arguments);
    }

    CallReport.table = 'CallReport';

    CallReport.sfdcTable = 'Call_Report__c';

    CallReport.description = 'Call Report';

    CallReport.TYPE_APPOINTMENT = 'Appointment';

    CallReport.TYPE_ONE_TO_ONE = '1:1';

    CallReport.PORTFOLIO_PRESENTATION_REMINDER_YES = 'Yes';

    CallReport.PORTFOLIO_PRESENTATION_REMINDER_NO = 'No';

    CallReport.MESSAGES_IN_PRODUCT_NUMBER = 3;

    CallReport.MAX_PRODUCTS_NUMBER = 10;

    CallReport.prototype.specialty = null;

    CallReport.prototype.targetFrequency = null;

    CallReport.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'organizationSfId',
          sfdc: 'Organisation__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'contactSfid',
          sfdc: 'Contact1__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'dateTimeOfVisit',
          sfdc: 'Date_Time__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'dateOfVisit',
          sfdc: 'Date__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'createdFromMobile',
          sfdc: 'Created_from_Mobile__c',
          upload: true
        }, {
          local: 'createdOffline',
          sfdc: 'Created_Offline__c',
          upload: true
        }, {
          local: 'isTargetCall',
          sfdc: 'Is_Target_Call__c'
        }, {
          local: 'type',
          sfdc: 'Type__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'recordTypeId',
          sfdc: 'RecordTypeId',
          upload: true
        }, {
          local: 'duration',
          sfdc: 'Duration__c',
          upload: true
        }, {
          local: 'targetPriority',
          sfdc: 'Target_Priority__c'
        }, {
          local: 'jointVisit',
          sfdc: 'Joint_Visit__c',
          upload: true
        }, {
          local: 'jointVisitUserSfid',
          sfdc: 'Joint_Visit_User__c',
          upload: true
        }, {
          local: 'userSfid',
          sfdc: 'User__c',
          upload: true
        }, {
          local: 'generalComments',
          sfdc: 'GeneralComments__c',
          upload: true
        }, {
          local: 'nextCallObjective',
          sfdc: 'Next_Call_Objective__c',
          upload: true
        }, {
          local: 'promotionalItemsPrio1',
          sfdc: 'Promotional_Items_Prio_1__c',
          upload: true
        }, {
          local: 'prio1ProductSfid',
          sfdc: 'Prio_1_Product__c',
          upload: true
        }, {
          local: 'noteForPrio1',
          sfdc: 'Note_for_Prio_1__c',
          upload: true
        }, {
          local: 'prio1MarketingMessage1',
          sfdc: 'Prio_1_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio1MarketingMessage2',
          sfdc: 'Prio_1_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio1MarketingMessage3',
          sfdc: 'Prio_1_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile1',
          sfdc: 'Patient_Profile_1__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio1Classification',
          sfdc: 'Prio1_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'promotionalItemsPrio2',
          sfdc: 'Promotional_Items_Prio_2__c',
          upload: true
        }, {
          local: 'prio2ProductSfid',
          sfdc: 'Prio_2_Product__c',
          upload: true
        }, {
          local: 'noteForPrio2',
          sfdc: 'Note_for_Prio_2__c',
          upload: true
        }, {
          local: 'prio2MarketingMessage1',
          sfdc: 'Prio_2_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio2MarketingMessage2',
          sfdc: 'Prio_2_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio2MarketingMessage3',
          sfdc: 'Prio_2_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile2',
          sfdc: 'Patient_Profile_2__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio2Classification',
          sfdc: 'Prio2_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'promotionalItemsPrio3',
          sfdc: 'Promotional_Items_Prio_3__c',
          upload: true
        }, {
          local: 'prio3ProductSfid',
          sfdc: 'Prio_3_Product__c',
          upload: true
        }, {
          local: 'noteForPrio3',
          sfdc: 'Note_for_Prio_3__c',
          upload: true
        }, {
          local: 'prio3MarketingMessage1',
          sfdc: 'Prio_3_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio3MarketingMessage2',
          sfdc: 'Prio_3_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio3MarketingMessage3',
          sfdc: 'Prio_3_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile3',
          sfdc: 'Patient_Profile_3__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio3Classification',
          sfdc: 'Prio3_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'promotionalItemsPrio4',
          sfdc: 'Promotional_Items_Prio_4__c',
          upload: true
        }, {
          local: 'prio4ProductSfid',
          sfdc: 'Prio_4_Product__c',
          upload: true
        }, {
          local: 'noteForPrio4',
          sfdc: 'Note_for_Prio_4__c',
          upload: true
        }, {
          local: 'prio4MarketingMessage1',
          sfdc: 'Prio_4_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio4MarketingMessage2',
          sfdc: 'Prio_4_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio4MarketingMessage3',
          sfdc: 'Prio_4_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile4',
          sfdc: 'Patient_Profile_4__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio4Classification',
          sfdc: 'Prio4_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'promotionalItemsPrio5',
          sfdc: 'Promotional_Items_Prio_5__c',
          upload: true
        }, {
          local: 'prio5ProductSfid',
          sfdc: 'Prio_5_Product__c',
          upload: true
        }, {
          local: 'noteForPrio5',
          sfdc: 'Note_for_Prio_5__c',
          upload: true
        }, {
          local: 'prio5MarketingMessage1',
          sfdc: 'Prio_5_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio5MarketingMessage2',
          sfdc: 'Prio_5_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio5MarketingMessage3',
          sfdc: 'Prio_5_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile5',
          sfdc: 'Patient_Profile_5__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio5Classification',
          sfdc: 'Prio5_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'promotionalItemsPrio6',
          sfdc: 'Promotional_Items_Prio_6__c',
          upload: true
        }, {
          local: 'prio6ProductSfid',
          sfdc: 'Prio_6_Product__c',
          upload: true
        }, {
          local: 'noteForPrio6',
          sfdc: 'Note_for_Prio_6__c',
          upload: true
        }, {
          local: 'prio6MarketingMessage1',
          sfdc: 'Prio_6_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio6MarketingMessage2',
          sfdc: 'Prio_6_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio6MarketingMessage3',
          sfdc: 'Prio_6_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile6',
          sfdc: 'Patient_Profile_6__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio6Classification',
          sfdc: 'Prio6_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio7ProductSfid',
          sfdc: 'Prio_7_Product__c',
          upload: true
        }, {
          local: 'noteForPrio7',
          sfdc: 'Note_for_Prio_7__c',
          upload: true
        }, {
          local: 'prio7MarketingMessage1',
          sfdc: 'Prio_7_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio7MarketingMessage2',
          sfdc: 'Prio_7_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio7MarketingMessage3',
          sfdc: 'Prio_7_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile7',
          sfdc: 'Patient_Profile_7__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio7Classification',
          sfdc: 'Prio7_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio8ProductSfid',
          sfdc: 'Prio_8_Product__c',
          upload: true
        }, {
          local: 'noteForPrio8',
          sfdc: 'Note_for_Prio_8__c',
          upload: true
        }, {
          local: 'prio8MarketingMessage1',
          sfdc: 'Prio_8_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio8MarketingMessage2',
          sfdc: 'Prio_8_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio8MarketingMessage3',
          sfdc: 'Prio_8_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile8',
          sfdc: 'Patient_Profile_8__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio8Classification',
          sfdc: 'Prio8_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio9ProductSfid',
          sfdc: 'Prio_9_Product__c',
          upload: true
        }, {
          local: 'noteForPrio9',
          sfdc: 'Note_for_Prio_9__c',
          upload: true
        }, {
          local: 'prio9MarketingMessage1',
          sfdc: 'Prio_9_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio9MarketingMessage2',
          sfdc: 'Prio_9_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio9MarketingMessage3',
          sfdc: 'Prio_9_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile9',
          sfdc: 'Patient_Profile_9__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio9Classification',
          sfdc: 'Prio9_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio10ProductSfid',
          sfdc: 'Prio_10_Product__c',
          upload: true
        }, {
          local: 'noteForPrio10',
          sfdc: 'Note_for_Prio_10__c',
          upload: true
        }, {
          local: 'prio10MarketingMessage1',
          sfdc: 'Prio_10_Marketing_Message_1__c',
          upload: true
        }, {
          local: 'prio10MarketingMessage2',
          sfdc: 'Prio_10_Marketing_Message_2__c',
          upload: true
        }, {
          local: 'prio10MarketingMessage3',
          sfdc: 'Prio_10_Marketing_Message_3__c',
          upload: true
        }, {
          local: 'patientProfile10',
          sfdc: 'Patient_Profile_10__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'prio10Classification',
          sfdc: 'Prio10_Classification__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'signature',
          sfdc: 'Signature__c',
          upload: true
        }, {
          local: 'signatureDate',
          sfdc: 'Signature_taken__c',
          upload: true
        }, {
          local: 'callWithIPad',
          sfdc: 'CallWithIPad__c',
          upload: true
        }, {
          local: 'realCallDuration',
          sfdc: 'RealCallDuration__c',
          upload: true
        }, {
          local: 'patientSupportProgram',
          sfdc: 'Patient_Support_Program__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'portfolioFeedback',
          sfdc: 'Portfolio_Feedback__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'patientSupportProgramComments',
          sfdc: 'Patient_Support_Program_Comments__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'fullPortfolioPresentationReminder',
          sfdc: 'Full_Portfolio_Presentation_Reminder__c',
          upload: true,
          include: 'isPortfolioSellingModuleEnabled'
        }, {
          local: 'userFirstName',
          sfdc: 'User__r.FirstName'
        }, {
          local: 'userLastName',
          sfdc: 'User__r.LastName'
        }, {
          local: 'remoteContactFirstName',
          sfdc: 'Contact1__r.FirstName'
        }, {
          local: 'remoteContactLastName',
          sfdc: 'Contact1__r.LastName'
        }, {
          local: 'contactRecordType',
          sfdc: 'Contact1__r.Account.RecordType.Name'
        }, {
          local: 'contactFirstName',
          indexWithType: 'string',
          search: true
        }, {
          local: 'contactLastName',
          indexWithType: 'string',
          search: true
        }, {
          local: 'remoteOrganizationName',
          sfdc: 'Organisation__r.Name'
        }, {
          local: 'organizationName',
          indexWithType: 'string',
          search: true
        }, {
          local: 'organizationCity',
          sfdc: 'Organisation__r.BillingCity'
        }, {
          local: 'organizationAddress',
          sfdc: 'Organisation__r.BillingStreet'
        }, {
          local: 'atCalls',
          indexWithType: 'string'
        }, {
          local: 'typeOfVisit',
          sfdc: 'Type_of_visit__c',
          upload: true
        }, {
          local: 'isSandbox',
          indexWithType: 'string'
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    CallReport.prototype.userFullName = function() {
      var ref, ref1;
      return ((ref = this.userLastName) != null ? ref : '') + " " + ((ref1 = this.userFirstName) != null ? ref1 : '');
    };

    CallReport.prototype.contactFullName = function() {
      var ref, ref1;
      return ((ref = this.contactLastName) != null ? ref : '') + " " + ((ref1 = this.contactFirstName) != null ? ref1 : '');
    };

    CallReport.prototype.organizationNameAndAddress = function() {
      var ref, ref1, ref2;
      return ((ref = this.organizationName) != null ? ref : '') + " <br/> " + ((ref1 = this.organizationAddress) != null ? ref1 : '') + " " + ((ref2 = this.organizationCity) != null ? ref2 : '');
    };

    CallReport.prototype.getJointVisitUser = function() {
      var UsersCollection;
      if (this.jointVisitUser) {
        return $.when(this.jointVisitUser);
      } else {
        UsersCollection = require('models/bll/users-collection');
        return new UsersCollection().fetchEntityById(this.jointVisitUserSfid).then((function(_this) {
          return function(jointVisitUser) {
            _this.jointVisitUser = jointVisitUser;
            return _this.jointVisitUser;
          };
        })(this));
      }
    };

    CallReport.prototype.getIsTargetCustomer = function() {
      var ContactsCollection;
      if (this.isTargetCustomer) {
        return $.when(this.isTargetCustomer);
      } else {
        ContactsCollection = require('models/bll/contacts-collection');
        return new ContactsCollection().fetchEntityById(this.contactSfid).then((function(_this) {
          return function(contact) {
            return contact.targetCustomer();
          };
        })(this));
      }
    };

    CallReport.prototype.getSpecialty = function() {
      if (this.specialty) {
        return $.when(this.specialty);
      } else {
        return this.getContact().then((function(_this) {
          return function() {
            var ref, ref1;
            return _this.specialty = (ref = (ref1 = _this.contact) != null ? ref1.abbottSpecialty : void 0) != null ? ref : null;
          };
        })(this));
      }
    };

    CallReport.prototype.getContact = function() {
      var ContactsCollection, contactsCollection;
      if (this.contact) {
        return $.when(this.contact);
      } else {
        ContactsCollection = require('models/bll/contacts-collection');
        contactsCollection = new ContactsCollection;
        return contactsCollection.fetchEntityById(this.contactSfid).then((function(_this) {
          return function(contact1) {
            _this.contact = contact1;
            return _this.contact;
          };
        })(this));
      }
    };

    return CallReport;

  })(Entity);

  module.exports = CallReport;

}).call(this);
}, "models/clm-call-report-data": function(exports, require, module) {(function() {
  var CLMCallReportData, Entity,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  CLMCallReportData = (function(superClass) {
    extend(CLMCallReportData, superClass);

    function CLMCallReportData() {
      return CLMCallReportData.__super__.constructor.apply(this, arguments);
    }

    CLMCallReportData.table = 'CLMCallReportData';

    CLMCallReportData.sfdcTable = 'Clm_CallReportData__c';

    CLMCallReportData.description = 'CLM Call Report Data';

    CLMCallReportData.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'kpiSrcJson',
          sfdc: 'KpiSrcJson__c',
          upload: true
        }, {
          local: 'timeOnPresentation',
          sfdc: 'TimeOnPresentation__c',
          upload: true
        }, {
          local: 'timeOnSlides',
          sfdc: 'TimeOnSlides__c',
          upload: true
        }, {
          local: 'callReportId',
          sfdc: 'CallReport__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'productId',
          sfdc: 'Product__c',
          upload: true
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    return CLMCallReportData;

  })(Entity);

  module.exports = CLMCallReportData;

}).call(this);
}, "models/contact": function(exports, require, module) {(function() {
  var BuTeamPersonProfilesCollection, Contact, Entity, Query, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Query = require('common/query');

  BuTeamPersonProfilesCollection = require('models/bll/bu-team-person-profiles-collection');

  Utils = require('common/utils');

  Contact = (function(superClass) {
    extend(Contact, superClass);

    function Contact() {
      this._getActivitiesByStartEndDate = bind(this._getActivitiesByStartEndDate, this);
      this.getActivitiesInMarketingCycle = bind(this.getActivitiesInMarketingCycle, this);
      return Contact.__super__.constructor.apply(this, arguments);
    }

    Contact.table = 'Contact';

    Contact.sfdcTable = 'Contact';

    Contact.description = 'Contact';

    Contact.STATUS_ACTIVE = 'Active';

    Contact.prototype.organization = null;

    Contact.prototype.references = null;

    Contact.prototype.activities = null;

    Contact.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'firstName',
          sfdc: 'FirstName',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'lastName',
          sfdc: 'LastName',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'jobTitle',
          sfdc: 'C_Job_Title__c',
          toLabel: true
        }, {
          local: 'recordType',
          sfdc: 'Account.RecordType.Name'
        }, {
          local: 'status',
          sfdc: 'Account.Status__c'
        }, {
          local: 'organizationSfId',
          sfdc: 'AccountId'
        }, {
          local: 'gender',
          sfdc: 'Gender__c'
        }, {
          local: 'yearOfGraduation',
          sfdc: 'Year_of_Graduation__c'
        }, {
          local: 'mobilePhone',
          sfdc: 'MobilePhone'
        }, {
          local: 'homePhone',
          sfdc: 'HomePhone'
        }, {
          local: 'email',
          sfdc: 'Email'
        }, {
          local: 'kol',
          sfdc: 'KOL__c'
        }, {
          local: 'description',
          sfdc: 'Description'
        }, {
          local: 'priority'
        }, {
          local: 'isTargetCustomer',
          indexWithType: 'string'
        }, {
          local: 'lastDateTargetFrequency'
        }, {
          local: 'abbottSpecialty',
          indexWithType: 'string',
          search: true
        }
      ];
    };

    Contact.prototype.fullName = function() {
      var ref, ref1;
      return ((ref = this.lastName) != null ? ref : '') + " " + ((ref1 = this.firstName) != null ? ref1 : '');
    };

    Contact.prototype.targetCustomer = function() {
      if (this.isTargetCustomer) {
        return 'yes';
      } else {
        return 'no';
      }
    };

    Contact.prototype.getOrganization = function() {
      var OrganizationsCollection, collection;
      if (this.organization) {
        return $.when(this.organization);
      } else {
        OrganizationsCollection = require('models/bll/organizations-collection');
        collection = new OrganizationsCollection;
        return collection.fetchEntityById(this.organizationSfId).then((function(_this) {
          return function(organization) {
            _this.organization = organization;
            return _this.organization;
          };
        })(this));
      }
    };

    Contact.prototype.getReferences = function() {
      var ReferencesCollection, collection, fieldsWithValues;
      if (this.references) {
        return $.when(this.references);
      } else {
        ReferencesCollection = require('models/bll/references/references-collection');
        collection = new ReferencesCollection;
        fieldsWithValues = {};
        fieldsWithValues[collection.model.sfdc.contactSfId] = this.id;
        return collection.fetchAllWhere(fieldsWithValues).then(collection.getAllEntitiesFromResponse).then((function(_this) {
          return function(references) {
            _this.references = references;
            return _this.references;
          };
        })(this));
      }
    };

    Contact.prototype.getActivitiesInMarketingCycle = function(marketingCycle) {
      var ConfigurationManager;
      ConfigurationManager = require('db/configuration-manager');
      return ConfigurationManager.getConfig('numberOfMonthsForCalls').then((function(_this) {
        return function(numberOfMonthsForCalls) {
          if (numberOfMonthsForCalls === 0) {
            return _this._getActivitiesByStartEndDate(marketingCycle.startDate, marketingCycle.endDate);
          } else {
            return _this._getActivitiesByStartEndDate(moment().add(-numberOfMonthsForCalls, 'month'), moment());
          }
        };
      })(this));
    };

    Contact.prototype._getActivitiesByStartEndDate = function(startDate, endDate) {
      var CallReportsCollection, collection, contactValue, endDateValue, query, startDateValue;
      CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');
      collection = new CallReportsCollection;
      contactValue = {};
      startDateValue = {};
      endDateValue = {};
      contactValue[collection.model.sfdc.contactSfid] = this.id;
      startDateValue[collection.model.sfdc.dateTimeOfVisit] = Utils.originalStartOfDate(startDate);
      endDateValue[collection.model.sfdc.dateTimeOfVisit] = Utils.originalEndOfDate(endDate);
      query = new Query().selectFrom(collection.model.table).where(contactValue).and().where(startDateValue, Query.GRE).and().where(endDateValue, Query.LRE).orderBy([collection.model.sfdc.dateTimeOfVisit]);
      return collection.fetchWithQuery(query).then(collection.getAllEntitiesFromResponse);
    };

    Contact.prototype.getActivities = function() {
      var CallReportsCollection, collection, fieldsWithValues;
      if (this.activities) {
        return $.when(this.activities);
      } else {
        CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');
        collection = new CallReportsCollection;
        fieldsWithValues = {};
        fieldsWithValues[collection.model.sfdc.contactSfid] = this.id;
        return collection.fetchAllWhere(fieldsWithValues).then(collection.getAllEntitiesFromResponse).then((function(_this) {
          return function(activities) {
            _this.activities = activities;
            return _this.activities;
          };
        })(this));
      }
    };

    return Contact;

  })(Entity);

  module.exports = Contact;

}).call(this);
}, "models/device": function(exports, require, module) {(function() {
  var Device, Entity, Query,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Query = require('common/query');

  Device = (function(superClass) {
    extend(Device, superClass);

    function Device() {
      return Device.__super__.constructor.apply(this, arguments);
    }

    Device.table = 'Device';

    Device.sfdcTable = 'Mobile_Devices__c';

    Device.description = 'Device';

    Device.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'deviceId',
          sfdc: 'Device_ID__c',
          indexWithType: 'string',
          search: true,
          upload: true
        }, {
          local: 'erased',
          sfdc: 'Erased__c',
          upload: true
        }, {
          local: 'requestErase',
          sfdc: 'Request_Erase__c'
        }, {
          local: 'lastSyncronisation',
          sfdc: 'Last_Syncronization__c',
          upload: true
        }, {
          local: 'lastUserSfid',
          sfdc: 'Last_User__c',
          upload: true
        }, {
          local: 'model',
          sfdc: 'Model__c',
          upload: true
        }, {
          local: 'osVersion',
          sfdc: 'OS_Version__c',
          upload: true
        }, {
          local: 'version',
          sfdc: 'Version__c',
          upload: true
        }, {
          local: 'lastDebugLog',
          sfdc: 'Last_Debug_Log__c',
          upload: true
        }
      ];
    };

    return Device;

  })(Entity);

  module.exports = Device;

}).call(this);
}, "models/entity": function(exports, require, module) {(function() {
  var Entity,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Function.prototype.getter = function(prop, get) {
    return Object.defineProperty(this.prototype, prop, {
      get: get,
      configurable: true
    });
  };

  Function.prototype.setter = function(prop, set) {
    return Object.defineProperty(this.prototype, prop, {
      set: set,
      configurable: true
    });
  };

  Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity() {
      this.fieldlist = bind(this.fieldlist, this);
      return Entity.__super__.constructor.apply(this, arguments);
    }

    Entity.table = '';

    Entity.sfdcTable = '';

    Entity.description = 'Entity';

    Entity.sfdc = null;

    Entity.isToLabel = null;

    Entity.indexSpec = null;

    Entity.searchFields = null;

    Entity.sfdcFields = null;

    Entity.uploadableFields = null;

    Entity.excludableFields = null;

    Entity.includableFields = null;

    Entity.prototype.fieldlist = function(method) {
      return this.constructor.sfdcFields;
    };

    Entity.mapModel = function() {
      var field, i, len, ref;
      ref = this.schema();
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        this._mapField(field);
      }
      this._generateSfdcFields(this.schema());
      this._generateSfdcPropertiesByLocal(this.schema());
      this._generateIndexSpec(this.schema());
      this._generateSearchFields(this.schema());
      this._generateIsToLabel(this.schema());
      this._generateUploadableFields(this.schema());
      this._generateExcludableFields(this.schema());
      return this._generateIncludableFields(this.schema());
    };

    Entity._mapField = function(field) {
      return this._generateProperty(field);
    };

    Entity._generateSfdcFields = function(schema) {
      return this.sfdcFields != null ? this.sfdcFields : this.sfdcFields = schema.filter(function(field) {
        return field.hasOwnProperty('sfdc');
      }).map(function(field) {
        return field.sfdc;
      });
    };

    Entity._generateProperty = function(field) {
      this.getter(field.local, function() {
        var ref;
        if (field.hasOwnProperty('sfdc')) {
          return (ref = this.attributes[field.sfdc]) != null ? ref : this[field.sfdc];
        } else {
          return this.attributes[field.local];
        }
      });
      return this.setter(field.local, function(val) {
        if (field.hasOwnProperty('sfdc')) {
          return this.attributes[field.sfdc] = val;
        } else {
          return this.attributes[field.local] = val;
        }
      });
    };

    Entity._generateSfdcPropertiesByLocal = function(schema) {
      if (!this.sfdc) {
        this.sfdc = {};
        return schema.forEach((function(_this) {
          return function(field) {
            if (field.hasOwnProperty('sfdc')) {
              return _this.sfdc[field.local] = field.sfdc;
            }
          };
        })(this));
      }
    };

    Entity._generateIndexSpec = function(schema) {
      return this.indexSpec != null ? this.indexSpec : this.indexSpec = schema.filter(function(field) {
        return field.hasOwnProperty('indexWithType');
      }).map((function(_this) {
        return function(field) {
          return {
            'path': _this._valueOfField(field),
            'type': field.indexWithType
          };
        };
      })(this));
    };

    Entity._generateSearchFields = function(schema) {
      return this.searchFields != null ? this.searchFields : this.searchFields = schema.filter(function(field) {
        return field.hasOwnProperty('search') && field.search === true;
      }).map((function(_this) {
        return function(field) {
          return _this._valueOfField(field);
        };
      })(this));
    };

    Entity._valueOfField = function(field) {
      if (field.hasOwnProperty('sfdc')) {
        return field.sfdc;
      } else {
        return field.local;
      }
    };

    Entity._generateIsToLabel = function(schema) {
      if (this.isToLabel == null) {
        this.isToLabel = {};
        return schema.forEach((function(_this) {
          return function(field) {
            return _this.isToLabel[field.sfdc] = field.hasOwnProperty('toLabel') && field.toLabel === true;
          };
        })(this));
      }
    };

    Entity._generateUploadableFields = function(schema) {
      return this.uploadableFields != null ? this.uploadableFields : this.uploadableFields = schema.filter(function(field) {
        return field.hasOwnProperty('upload') && field.upload === true;
      }).map((function(_this) {
        return function(field) {
          return _this._valueOfField(field);
        };
      })(this));
    };

    Entity._generateExcludableFields = function(schema) {
      var fields;
      if (this.excludableFields == null) {
        this.excludableFields = {};
      }
      fields = schema.filter(function(field) {
        return field.hasOwnProperty('exclude') && field.exclude;
      });
      return fields != null ? fields.forEach((function(_this) {
        return function(field) {
          return _this.excludableFields[_this._valueOfField(field)] = field.exclude;
        };
      })(this)) : void 0;
    };

    Entity._generateIncludableFields = function(schema) {
      var fields;
      if (this.includableFields == null) {
        this.includableFields = {};
      }
      fields = schema.filter(function(field) {
        return field.hasOwnProperty('include') && field.include;
      });
      return fields != null ? fields.forEach((function(_this) {
        return function(field) {
          return _this.includableFields[_this._valueOfField(field)] = field.include;
        };
      })(this)) : void 0;
    };

    return Entity;

  })(Force.SObject);

  module.exports = Entity;

}).call(this);
}, "models/local-image": function(exports, require, module) {(function() {
  var Entity, LocalImage,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  LocalImage = (function(superClass) {
    extend(LocalImage, superClass);

    function LocalImage() {
      return LocalImage.__super__.constructor.apply(this, arguments);
    }

    LocalImage.table = 'LocalImage';

    LocalImage.sfdcTable = 'LocalImage';

    LocalImage.description = 'Local Image';

    LocalImage.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'parentId',
          indexWithType: 'string'
        }, {
          local: 'path'
        }, {
          local: 'thumbnailPath'
        }
      ];
    };

    return LocalImage;

  })(Entity);

  module.exports = LocalImage;

}).call(this);
}, "models/marketing-cycle": function(exports, require, module) {(function() {
  var Entity, MarketingCycle,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  MarketingCycle = (function(superClass) {
    extend(MarketingCycle, superClass);

    function MarketingCycle() {
      return MarketingCycle.__super__.constructor.apply(this, arguments);
    }

    MarketingCycle.table = 'MarketingCycle';

    MarketingCycle.sfdcTable = 'Marketing_Cycle__c';

    MarketingCycle.description = 'Marketing Cycle';

    MarketingCycle.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'planingCycleName',
          sfdc: 'Name'
        }, {
          local: 'cycleName',
          sfdc: 'Marketing_Cycle_Name__c'
        }, {
          local: 'startDate',
          sfdc: 'Start_Date__c',
          indexWithType: 'string'
        }, {
          local: 'endDate',
          sfdc: 'End_Date__c',
          indexWithType: 'string'
        }, {
          local: 'currencyIsoCode',
          sfdc: 'CurrencyIsoCode',
          indexWithType: 'string'
        }
      ];
    };

    return MarketingCycle;

  })(Entity);

  module.exports = MarketingCycle;

}).call(this);
}, "models/marketing-message": function(exports, require, module) {(function() {
  var Entity, MarketingMessage,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  MarketingMessage = (function(superClass) {
    extend(MarketingMessage, superClass);

    function MarketingMessage() {
      return MarketingMessage.__super__.constructor.apply(this, arguments);
    }

    MarketingMessage.table = 'MarketingMessage';

    MarketingMessage.sfdcTable = 'Pharma_Product_Messages__c';

    MarketingMessage.description = 'Marketing Message';

    MarketingMessage.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'name',
          sfdc: 'Name'
        }, {
          local: 'produtSfId',
          sfdc: 'Pharma_Product__c'
        }, {
          local: 'status',
          sfdc: 'Status__c'
        }, {
          local: 'currencyIsoCode',
          sfdc: 'CurrencyIsoCode'
        }
      ];
    };

    return MarketingMessage;

  })(Entity);

  module.exports = MarketingMessage;

}).call(this);
}, "models/mechanic-adjustment": function(exports, require, module) {(function() {
  var Entity, MechanicAdjustment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  MechanicAdjustment = (function(superClass) {
    extend(MechanicAdjustment, superClass);

    function MechanicAdjustment() {
      return MechanicAdjustment.__super__.constructor.apply(this, arguments);
    }

    MechanicAdjustment.table = 'MechanicAdjustment';

    MechanicAdjustment.sfdcTable = 'TM_MechanicAdjustment__c';

    MechanicAdjustment.description = 'Mechanic Adjustment';

    MechanicAdjustment.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'callReportSfId',
          sfdc: 'CallReport__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'mechanicEvaluationAccountSfId',
          sfdc: 'MechanicEvaluation_Account__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'mechanicType',
          sfdc: 'MechanicType__c'
        }, {
          local: 'numberRealValue',
          sfdc: 'NumberRealValue__c',
          upload: true
        }, {
          local: 'realValue ',
          sfdc: 'RealValue__c'
        }, {
          local: 'status',
          sfdc: 'Status__c'
        }, {
          local: 'stringRealValue',
          sfdc: 'StringRealValue__c',
          upload: true
        }, {
          local: 'isModifiedInTrade'
        }, {
          local: 'isModifiedInCall'
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    return MechanicAdjustment;

  })(Entity);

  module.exports = MechanicAdjustment;

}).call(this);
}, "models/mechanic-evaluation-account": function(exports, require, module) {(function() {
  var Entity, MechanicEvaluationAccount, PromotionMechanic,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PromotionMechanic = require('models/promotion-mechanic');

  MechanicEvaluationAccount = (function(superClass) {
    extend(MechanicEvaluationAccount, superClass);

    function MechanicEvaluationAccount() {
      this.isDisabled = bind(this.isDisabled, this);
      this.realValue = bind(this.realValue, this);
      return MechanicEvaluationAccount.__super__.constructor.apply(this, arguments);
    }

    MechanicEvaluationAccount.table = 'MechanicEvaluationAccount';

    MechanicEvaluationAccount.sfdcTable = 'MechanicEvaluation_Account__c';

    MechanicEvaluationAccount.description = 'Mechanic Evaluation Account';

    MechanicEvaluationAccount.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'numberOfActualRepeats',
          sfdc: 'Actual_Repeats__c'
        }, {
          local: 'isRecurrent',
          sfdc: 'IsRecurrent__c'
        }, {
          local: 'actualCallReports',
          sfdc: 'Actual_CallReports__c'
        }, {
          local: 'plannedRecurrency',
          sfdc: 'PlannedRecurrency__c'
        }, {
          local: 'remoteOrganizationSfId',
          sfdc: 'PromotionAccount__r.Account__c'
        }, {
          local: 'promotionAccountSfId',
          sfdc: 'PromotionAccount__c',
          indexWithType: 'string'
        }, {
          local: 'externalId',
          sfdc: 'ExternalId__c'
        }, {
          local: 'mechanicEvaluationSfId',
          sfdc: 'MechanicEvaluation__c'
        }, {
          local: 'externalId',
          sfdc: 'MechanicEvaluation__r.ExternalId__c'
        }, {
          local: 'isUsed',
          sfdc: 'MechanicEvaluation__r.isUsed__c'
        }, {
          local: 'mechanicName',
          sfdc: 'MechanicEvaluation__r.MechanicName__c'
        }, {
          local: 'mechanicType',
          sfdc: 'MechanicEvaluation__r.MechanicType__c'
        }, {
          local: 'numberEtalonValue',
          sfdc: 'MechanicEvaluation__r.NumberEtalonValue__c'
        }, {
          local: 'promotionEndDate',
          sfdc: 'MechanicEvaluation__r.PromotionEndDate__c'
        }, {
          local: 'promotionName',
          sfdc: 'MechanicEvaluation__r.Promotion_Name__c'
        }, {
          local: 'promotionStartDate',
          sfdc: 'MechanicEvaluation__r.PromotionStartDate__c'
        }, {
          local: 'skuName',
          sfdc: 'MechanicEvaluation__r.SkuName__c'
        }, {
          local: 'remoteSkuPromotionSfId',
          sfdc: 'MechanicEvaluation__r.SkuPromotion__c'
        }, {
          local: 'stringEtalonValue',
          sfdc: 'MechanicEvaluation__r.StringEtalonValue__c'
        }, {
          local: 'remotePromotionMechanicSfId',
          sfdc: 'MechanicEvaluation__r.MechanicPromotion__c'
        }, {
          local: 'remoteGlobalPriority',
          sfdc: 'MechanicEvaluation__r.GlobalPriority__c'
        }, {
          local: 'promotionMechanicPicklistValues',
          sfdc: 'MechanicEvaluation__r.MechanicPromotion__r.Mechanic__r.Picklist__c'
        }, {
          local: 'organizationSfId',
          indexWithType: 'string'
        }, {
          local: 'promotionMechanicSfId',
          indexWithType: 'string'
        }, {
          local: 'globalPriority',
          indexWithType: 'string'
        }, {
          local: 'skuPromotionSfId',
          indexWithType: 'string'
        }
      ];
    };

    MechanicEvaluationAccount.prototype.realValue = function() {
      switch (this.mechanicType) {
        case PromotionMechanic.MECHANIC_TYPE_NUMERIC:
          return this.numberEtalonValue;
        case PromotionMechanic.MECHANIC_TYPE_TEXT:
        case PromotionMechanic.MECHANIC_TYPE_PICKLIST:
          return this.stringEtalonValue;
      }
    };

    MechanicEvaluationAccount.prototype.isDisabled = function() {
      return this.isRecurrent && (this.plannedRecurrency <= this.actualCallReports);
    };

    return MechanicEvaluationAccount;

  })(Entity);

  module.exports = MechanicEvaluationAccount;

}).call(this);
}, "models/organization": function(exports, require, module) {(function() {
  var CallReportsCollection, ContactsCollection, Entity, Organization, Query, ReferencesCollection, TargetReferencesCollection, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  ReferencesCollection = require('models/bll/references/references-collection');

  TargetReferencesCollection = require('models/bll/references/target-references-collection');

  CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');

  ContactsCollection = require('models/bll/contacts-collection');

  Query = require('common/query');

  Utils = require('common/utils');

  Organization = (function(superClass) {
    extend(Organization, superClass);

    function Organization() {
      this.hasAnyTargetReferences = bind(this.hasAnyTargetReferences, this);
      this.getTargetReferences = bind(this.getTargetReferences, this);
      this.getActivities = bind(this.getActivities, this);
      this._getActivitiesByStartEndDate = bind(this._getActivitiesByStartEndDate, this);
      this.getActivitiesInMarketingCycle = bind(this.getActivitiesInMarketingCycle, this);
      return Organization.__super__.constructor.apply(this, arguments);
    }

    Organization.table = 'Organization';

    Organization.sfdcTable = 'Account';

    Organization.description = 'Organization';

    Organization.prototype.references = null;

    Organization.prototype.targetReferences = null;

    Organization.prototype.activities = null;

    Organization.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'name',
          sfdc: 'Name',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'brickSfId',
          sfdc: 'Brick__c'
        }, {
          local: 'status',
          sfdc: 'Status__c'
        }, {
          local: 'recordType',
          sfdc: 'RecordType.Name',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'country',
          sfdc: 'BillingCountry',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'city',
          sfdc: 'BillingCity',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'address',
          sfdc: 'BillingStreet',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'postalCode',
          sfdc: 'BillingPostalCode'
        }, {
          local: 'phone',
          sfdc: 'Phone',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'specialty1',
          sfdc: 'C_Specialty_1__c',
          indexWithType: 'string',
          toLabel: true,
          search: true
        }, {
          local: 'specialty2',
          sfdc: 'C_Specialty_2__c',
          toLabel: true
        }, {
          local: 'isPersonAccount',
          sfdc: 'IsPersonAccount',
          indexWithType: 'string'
        }, {
          local: 'juridicGroup',
          sfdc: 'C_Juridic_Group__c',
          toLabel: true,
          include: 'isJuridicGroupEnabled'
        }, {
          local: 'globalPriority',
          sfdc: 'GlobalPriority__c',
          search: true,
          indexWithType: 'string',
          exclude: 'isTradeModuleEnabled'
        }
      ];
    };

    Organization.prototype.nameAndAddress = function() {
      var ref;
      return ((ref = this.name) != null ? ref : '') + " <br/> " + (this.fullAddress());
    };

    Organization.prototype.fullAddress = function() {
      var ref, ref1;
      return ((ref = this.address) != null ? ref : '') + " " + ((ref1 = this.city) != null ? ref1 : '');
    };

    Organization.prototype.getReferences = function() {
      var collection, fieldsWithValues;
      if (this.references) {
        return $.when(this.references);
      } else {
        collection = new ReferencesCollection;
        fieldsWithValues = {};
        fieldsWithValues[collection.model.sfdc.organizationSfId] = this.id;
        return collection.fetchAllWhere(fieldsWithValues).then((function(_this) {
          return function(response) {
            return collection.getAllEntitiesFromResponse(response);
          };
        })(this)).then((function(_this) {
          return function(references) {
            _this.references = references;
            return _this.references;
          };
        })(this));
      }
    };

    Organization.prototype.getActivitiesInMarketingCycle = function(marketingCycle) {
      var ConfigurationManager;
      ConfigurationManager = require('db/configuration-manager');
      return ConfigurationManager.getConfig('numberOfMonthsForCalls').then((function(_this) {
        return function(numberOfMonthsForCalls) {
          if (numberOfMonthsForCalls === 0) {
            return _this._getActivitiesByStartEndDate(marketingCycle.startDate, marketingCycle.endDate);
          } else {
            return _this._getActivitiesByStartEndDate(moment().add(-numberOfMonthsForCalls, 'month'), moment());
          }
        };
      })(this));
    };

    Organization.prototype._getActivitiesByStartEndDate = function(startDate, endDate) {
      var collection, endDateValue, organisationValue, query, startDateValue;
      collection = new CallReportsCollection;
      organisationValue = {};
      startDateValue = {};
      endDateValue = {};
      organisationValue[collection.model.sfdc.organizationSfId] = this.id;
      startDateValue[collection.model.sfdc.dateTimeOfVisit] = Utils.originalStartOfDate(startDate);
      endDateValue[collection.model.sfdc.dateTimeOfVisit] = Utils.originalEndOfDate(endDate);
      query = new Query().selectFrom(collection.model.table).where(organisationValue).and().where(startDateValue, Query.GRE).and().where(endDateValue, Query.LRE).orderBy([collection.model.sfdc.dateTimeOfVisit]);
      return collection.fetchWithQuery(query).then(collection.getAllEntitiesFromResponse);
    };

    Organization.prototype.getActivities = function() {
      var collection, fieldsWithValues;
      if (this.activities) {
        return $.when(this.activities);
      } else {
        collection = new CallReportsCollection;
        fieldsWithValues = {};
        fieldsWithValues[collection.model.sfdc.organizationSfId] = this.id;
        return collection.fetchAllWhere(fieldsWithValues).then((function(_this) {
          return function(response) {
            return collection.getAllEntitiesFromResponse(response);
          };
        })(this)).then((function(_this) {
          return function(activities) {
            _this.activities = activities;
            return _this.activities;
          };
        })(this));
      }
    };

    Organization.prototype.getTargetReferences = function() {
      var collection, organisationValue;
      if (this.targetReferences) {
        return $.when(this.targetReferences);
      } else {
        collection = new TargetReferencesCollection;
        organisationValue = {};
        organisationValue[collection.model.sfdc.organizationSfId] = this.id;
        return collection.fetchAllWhere(organisationValue).then(collection.getAllEntitiesFromResponse).then((function(_this) {
          return function(targetReferences) {
            _this.targetReferences = targetReferences;
            return _this.targetReferences;
          };
        })(this));
      }
    };

    Organization.prototype.hasAnyTargetReferences = function() {
      return this.getTargetReferences().then((function(_this) {
        return function(targetReferences) {
          var ref;
          _this.targetReferences = targetReferences;
          return ((ref = _this.targetReferences) != null ? ref.length : void 0) > 0;
        };
      })(this));
    };

    return Organization;

  })(Entity);

  module.exports = Organization;

}).call(this);
}, "models/patient-disease": function(exports, require, module) {(function() {
  var Entity, PatientDisease,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PatientDisease = (function(superClass) {
    extend(PatientDisease, superClass);

    function PatientDisease() {
      return PatientDisease.__super__.constructor.apply(this, arguments);
    }

    PatientDisease.table = 'PatientDisease';

    PatientDisease.sfdcTable = 'Patient_Disease__c';

    PatientDisease.description = 'Patient Disease';

    PatientDisease.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'diseaseSfId',
          sfdc: 'Disease__c'
        }, {
          local: 'diseaseName',
          sfdc: 'DiseaseName__c'
        }, {
          local: 'patientProfileSfId',
          sfdc: 'Patient_Profile__c',
          indexWithType: 'string'
        }
      ];
    };

    return PatientDisease;

  })(Entity);

  module.exports = PatientDisease;

}).call(this);
}, "models/pe-abbott-attendee": function(exports, require, module) {(function() {
  var Entity, PEAbbottAttendee,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PEAbbottAttendee = (function(superClass) {
    extend(PEAbbottAttendee, superClass);

    function PEAbbottAttendee() {
      return PEAbbottAttendee.__super__.constructor.apply(this, arguments);
    }

    PEAbbottAttendee.table = 'PEAbbottAttendee';

    PEAbbottAttendee.sfdcTable = 'Pharma_Event_Abbott_Attendees__c';

    PEAbbottAttendee.description = 'PE Abbott Attendee';

    PEAbbottAttendee.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'pharmaEventSfId',
          sfdc: 'Pharma_Event__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'attendeeSfId',
          sfdc: 'AbbottAttendeeName__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    return PEAbbottAttendee;

  })(Entity);

  module.exports = PEAbbottAttendee;

}).call(this);
}, "models/pe-attendee": function(exports, require, module) {(function() {
  var Entity, PEAttendee,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PEAttendee = (function(superClass) {
    extend(PEAttendee, superClass);

    function PEAttendee() {
      return PEAttendee.__super__.constructor.apply(this, arguments);
    }

    PEAttendee.table = 'PEAttendee';

    PEAttendee.sfdcTable = 'Event_Attendee__c';

    PEAttendee.description = 'PE Attendee';

    PEAttendee.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'pharmaEventSfId',
          sfdc: 'Pharma_Event__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'attendeeSfId',
          sfdc: 'Attendee__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    return PEAttendee;

  })(Entity);

  module.exports = PEAttendee;

}).call(this);
}, "models/pharma-event": function(exports, require, module) {(function() {
  var Entity, PEAbbottAttendeesCollection, PEAttendeesCollection, PharmaEvent, SforceDataContext, UsersCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PEAttendeesCollection = require('models/bll/pe-attendees-collection');

  PEAbbottAttendeesCollection = require('models/bll/pe-abbott-attendees-collection');

  UsersCollection = require('models/bll/users-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  PharmaEvent = (function(superClass) {
    extend(PharmaEvent, superClass);

    function PharmaEvent() {
      this.isEditable = bind(this.isEditable, this);
      this.fetchNotDeletedPEAbbottAttendees = bind(this.fetchNotDeletedPEAbbottAttendees, this);
      this.fetchNotDeletedPEAttendees = bind(this.fetchNotDeletedPEAttendees, this);
      this.fetchAllPEAbbottAttendees = bind(this.fetchAllPEAbbottAttendees, this);
      this.fetchAllPEAttendees = bind(this.fetchAllPEAttendees, this);
      this.getOwner = bind(this.getOwner, this);
      this._fetchNotDeletedAttendees = bind(this._fetchNotDeletedAttendees, this);
      this._fetchAttendees = bind(this._fetchAttendees, this);
      this.ownerFullName = bind(this.ownerFullName, this);
      return PharmaEvent.__super__.constructor.apply(this, arguments);
    }

    PharmaEvent.table = 'PharmaEvent';

    PharmaEvent.sfdcTable = 'Events__c';

    PharmaEvent.description = 'Pharma Event';

    PharmaEvent.peAttendeesCollection = new PEAttendeesCollection;

    PharmaEvent.peAbbottAttendeesCollection = new PEAbbottAttendeesCollection;

    PharmaEvent.usersCollection = new UsersCollection;

    PharmaEvent.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'ownerSfid',
          sfdc: 'OwnerId',
          upload: true
        }, {
          local: 'createdOffline',
          sfdc: 'Created_Offline__c',
          upload: true
        }, {
          local: 'remoteOwnerFirstName',
          sfdc: 'Owner.FirstName'
        }, {
          local: 'remoteOwnerLastName',
          sfdc: 'Owner.LastName'
        }, {
          local: 'ownerFirstName',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'ownerLastName',
          search: true,
          indexWithType: 'string'
        }, {
          local: 'eventName',
          sfdc: 'Name',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'eventType',
          sfdc: 'Type_of_Event__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'location',
          sfdc: 'Location__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'startDate',
          sfdc: 'Start_Date__c',
          upload: true,
          indexWithType: 'string'
        }, {
          local: 'endDate',
          sfdc: 'End_Date__c',
          upload: true
        }, {
          local: 'stage',
          sfdc: 'Stage__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'status',
          sfdc: 'Status__c',
          upload: true,
          search: true,
          indexWithType: 'string'
        }, {
          local: 'businessUnit',
          sfdc: 'Business_Unit__c',
          upload: true
        }, {
          local: 'objectives',
          sfdc: 'Objectives__c',
          upload: true
        }, {
          local: 'agenda',
          sfdc: 'Agenda__c',
          upload: true
        }, {
          local: 'speakers',
          sfdc: 'Speaker_s__c',
          upload: true
        }, {
          local: 'evaluation',
          sfdc: 'Evaluation__c',
          upload: true
        }, {
          local: 'productPrio1SfId',
          sfdc: 'Product_Prio1__c',
          upload: true
        }, {
          local: 'productPrio2SfId',
          sfdc: 'Product_Prio2__c',
          upload: true
        }, {
          local: 'productPrio3SfId',
          sfdc: 'Product_Prio3__c',
          upload: true
        }, {
          local: 'productPrio4SfId',
          sfdc: 'Product_Prio_4__c',
          upload: true
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    PharmaEvent.prototype._user = null;

    PharmaEvent.prototype.ownerFullName = function() {
      var ref, ref1;
      return ((ref = this.ownerLastName) != null ? ref : '') + " " + ((ref1 = this.ownerFirstName) != null ? ref1 : '');
    };

    PharmaEvent.prototype._relatedCriteria = function(model, field) {
      var relationCriteria, relationField;
      relationField = model.sfdc[field];
      relationCriteria = {};
      relationCriteria[relationField] = this.id;
      return relationCriteria;
    };

    PharmaEvent.prototype._relatedPEAttendeesCriteria = function() {
      return this._relatedCriteria(PharmaEvent.peAttendeesCollection.model, 'pharmaEventSfId');
    };

    PharmaEvent.prototype._relatedPEAbbottAttendeesCriteria = function() {
      return this._relatedCriteria(PharmaEvent.peAbbottAttendeesCollection.model, 'pharmaEventSfId');
    };

    PharmaEvent.prototype._fetchAttendees = function(collection, criteria) {
      return collection.fetchAllWhere(criteria, false);
    };

    PharmaEvent.prototype._fetchNotDeletedAttendees = function(collection, criteria) {
      return collection.fetchAllWhere(criteria);
    };

    PharmaEvent.prototype.getOwner = function() {
      if (this._user) {
        return $.when(this._user);
      } else {
        return PharmaEvent.usersCollection.fetchEntityById(this.ownerSfid).then((function(_this) {
          return function(_user) {
            _this._user = _user;
            return _this._user;
          };
        })(this));
      }
    };

    PharmaEvent.prototype.fetchAllPEAttendees = function() {
      return this._fetchAttendees(PharmaEvent.peAttendeesCollection, this._relatedPEAttendeesCriteria());
    };

    PharmaEvent.prototype.fetchAllPEAbbottAttendees = function() {
      return this._fetchAttendees(PharmaEvent.peAbbottAttendeesCollection, this._relatedPEAbbottAttendeesCriteria());
    };

    PharmaEvent.prototype.fetchNotDeletedPEAttendees = function() {
      return this._fetchNotDeletedAttendees(PharmaEvent.peAttendeesCollection, this._relatedPEAttendeesCriteria());
    };

    PharmaEvent.prototype.fetchNotDeletedPEAbbottAttendees = function() {
      return this._fetchNotDeletedAttendees(PharmaEvent.peAbbottAttendeesCollection, this._relatedPEAbbottAttendeesCriteria());
    };

    PharmaEvent.prototype.isEditable = function() {
      return SforceDataContext.activeUser().then((function(_this) {
        return function(activeUser) {
          return _this.ownerSfid === activeUser.id;
        };
      })(this));
    };

    return PharmaEvent;

  })(Entity);

  module.exports = PharmaEvent;

}).call(this);
}, "models/photo-adjustment": function(exports, require, module) {(function() {
  var Entity, PhotoAdjustment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PhotoAdjustment = (function(superClass) {
    extend(PhotoAdjustment, superClass);

    function PhotoAdjustment() {
      return PhotoAdjustment.__super__.constructor.apply(this, arguments);
    }

    PhotoAdjustment.table = 'PhotoAdjustment';

    PhotoAdjustment.sfdcTable = 'TM_PhotoAdjustment__c';

    PhotoAdjustment.description = 'Photo Adjustment';

    PhotoAdjustment.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'callReportSfId',
          sfdc: 'CallReport__c',
          upload: true,
          indexWithType: 'string'
        }, {
          local: 'promotionSfId',
          sfdc: 'Promotion__c',
          upload: true,
          indexWithType: 'string'
        }, {
          local: 'isModifiedInTrade'
        }, {
          local: 'isModifiedInCall'
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    return PhotoAdjustment;

  })(Entity);

  module.exports = PhotoAdjustment;

}).call(this);
}, "models/photo-attachment": function(exports, require, module) {(function() {
  var Entity, PhotoAttachment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PhotoAttachment = (function(superClass) {
    extend(PhotoAttachment, superClass);

    function PhotoAttachment() {
      return PhotoAttachment.__super__.constructor.apply(this, arguments);
    }

    PhotoAttachment.table = 'PhotoAttachment';

    PhotoAttachment.sfdcTable = 'Attachment';

    PhotoAttachment.description = 'Photo Attachment';

    PhotoAttachment.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'body',
          sfdc: 'Body',
          upload: true
        }, {
          local: 'bodyLength',
          sfdc: 'BodyLength'
        }, {
          local: 'contentType',
          sfdc: 'ContentType',
          upload: true
        }, {
          local: 'description',
          sfdc: 'Description'
        }, {
          local: 'isPrivate',
          sfdc: 'IsPrivate'
        }, {
          local: 'title',
          sfdc: 'Name',
          upload: true
        }, {
          local: 'ownerId',
          sfdc: 'OwnerId'
        }, {
          local: 'parentId',
          sfdc: 'ParentId',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'lastModify',
          sfdc: 'LastModifiedDate'
        }, {
          local: 'localParentId',
          indexWithType: 'string'
        }
      ];
    };

    return PhotoAttachment;

  })(Entity);

  module.exports = PhotoAttachment;

}).call(this);
}, "models/presentation": function(exports, require, module) {(function() {
  var Entity, Presentation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Presentation = (function(superClass) {
    extend(Presentation, superClass);

    function Presentation() {
      return Presentation.__super__.constructor.apply(this, arguments);
    }

    Presentation.table = 'Presentation';

    Presentation.sfdcTable = 'Presentation__c';

    Presentation.description = 'Presentation';

    Presentation.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'name',
          sfdc: 'Name'
        }, {
          local: 'description',
          sfdc: 'Description__c'
        }, {
          local: 'availableVersion',
          sfdc: 'Version__c'
        }, {
          local: 'url',
          sfdc: 'DownloadUrl__c'
        }, {
          local: 'iconName'
        }, {
          local: 'iconPath'
        }, {
          local: 'currentVersion',
          indexWithType: 'string'
        }
      ];
    };

    Presentation.prototype.wasDownloaded = function() {
      return this.currentVersion > 0;
    };

    Presentation.prototype.hasUpdate = function() {
      return this.availableVersion > this.currentVersion;
    };

    return Presentation;

  })(Entity);

  module.exports = Presentation;

}).call(this);
}, "models/product-in-portfolio": function(exports, require, module) {(function() {
  var Entity, ProductInPortfolio,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  ProductInPortfolio = (function(superClass) {
    extend(ProductInPortfolio, superClass);

    function ProductInPortfolio() {
      return ProductInPortfolio.__super__.constructor.apply(this, arguments);
    }

    ProductInPortfolio.table = 'ProductInPortfolio';

    ProductInPortfolio.sfdcTable = 'Product_in_Porfolio__c';

    ProductInPortfolio.description = 'Product In Portfolio';

    ProductInPortfolio.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'productSfId',
          sfdc: 'Pharma_Product__c'
        }, {
          local: 'portfolioSfId',
          sfdc: 'Product_Portfolio__c'
        }, {
          local: 'startDate',
          sfdc: 'Start_Date__c'
        }, {
          local: 'endDate',
          sfdc: 'End_Date__c'
        }, {
          local: 'brandName',
          sfdc: 'Global_Brand_Name__c'
        }
      ];
    };

    return ProductInPortfolio;

  })(Entity);

  module.exports = ProductInPortfolio;

}).call(this);
}, "models/product-item": function(exports, require, module) {(function() {
  var Entity, ProductItem,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  ProductItem = (function(superClass) {
    extend(ProductItem, superClass);

    function ProductItem() {
      return ProductItem.__super__.constructor.apply(this, arguments);
    }

    ProductItem.table = 'ProductItem';

    ProductItem.sfdcTable = 'Product_Items__c';

    ProductItem.description = 'Product Item';

    ProductItem.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'description',
          sfdc: 'Description__c'
        }, {
          local: 'imsSkuCode',
          sfdc: 'IMS_sku_code__c'
        }, {
          local: 'parallelImport',
          sfdc: 'Parallel_Import__c'
        }, {
          local: 'productBrandName',
          sfdc: 'Product_Brand_Name__c'
        }, {
          local: 'productDetailCode',
          sfdc: 'Product_Detail_Code__c'
        }, {
          local: 'productTypeDetect',
          sfdc: 'Product_Type_detect__c'
        }
      ];
    };

    return ProductItem;

  })(Entity);

  module.exports = ProductItem;

}).call(this);
}, "models/product": function(exports, require, module) {(function() {
  var Entity, Product,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Product = (function(superClass) {
    extend(Product, superClass);

    function Product() {
      return Product.__super__.constructor.apply(this, arguments);
    }

    Product.table = 'Product';

    Product.sfdcTable = 'Pharma_Product__c';

    Product.description = 'Product';

    Product.TYPE_LOCAL = 'Local';

    Product.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'name',
          sfdc: 'Name'
        }, {
          local: 'atcClass',
          sfdc: 'ATC_Class__c',
          indexWithType: 'string'
        }, {
          local: 'presentationId',
          sfdc: 'Presentation__c'
        }
      ];
    };

    return Product;

  })(Entity);

  module.exports = Product;

}).call(this);
}, "models/profile-product-in-portfolio": function(exports, require, module) {(function() {
  var Entity, ProfileProductInPortfolio,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  ProfileProductInPortfolio = (function(superClass) {
    extend(ProfileProductInPortfolio, superClass);

    function ProfileProductInPortfolio() {
      return ProfileProductInPortfolio.__super__.constructor.apply(this, arguments);
    }

    ProfileProductInPortfolio.table = 'ProfileProductInPortfolio';

    ProfileProductInPortfolio.sfdcTable = 'Products_on_Patient_Profile__c';

    ProfileProductInPortfolio.description = 'Profile Product In Portfolio';

    ProfileProductInPortfolio.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'patientProfileSfId',
          sfdc: 'Patient_Profile__c'
        }, {
          local: 'portfolioName',
          sfdc: 'PortfolioName__c'
        }, {
          local: 'productName',
          sfdc: 'Product__c'
        }, {
          local: 'productInPortfolioSfId',
          sfdc: 'Product_in_Porfolio__c'
        }, {
          local: 'productSfId',
          sfdc: 'Product_in_Porfolio__r.Pharma_Product__c'
        }, {
          local: 'patientProfileName',
          sfdc: 'Patient_Profile__r.Name'
        }, {
          local: 'age',
          sfdc: 'Patient_Profile__r.Age__c'
        }, {
          local: 'gender',
          sfdc: 'Patient_Profile__r.Gender__c'
        }, {
          local: 'generalHealth',
          sfdc: 'Patient_Profile__r.General_Health__c'
        }, {
          local: 'occupation',
          sfdc: 'Patient_Profile__r.Occupation_Social__c'
        }, {
          local: 'bmi',
          sfdc: 'Patient_Profile__r.BMI__c'
        }, {
          local: 'remotePortfolioStartDate',
          sfdc: 'Product_in_Porfolio__r.Start_Date__c'
        }, {
          local: 'remotePortfolioEndDate',
          sfdc: 'Product_in_Porfolio__r.End_Date__c'
        }, {
          local: 'portfolioStartDate',
          indexWithType: 'string'
        }, {
          local: 'portfolioEndDate',
          indexWithType: 'string'
        }
      ];
    };

    return ProfileProductInPortfolio;

  })(Entity);

  module.exports = ProfileProductInPortfolio;

}).call(this);
}, "models/promotion-account": function(exports, require, module) {(function() {
  var Entity, PromotionAccount,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PromotionAccount = (function(superClass) {
    extend(PromotionAccount, superClass);

    function PromotionAccount() {
      this.getPromotionStatus = bind(this.getPromotionStatus, this);
      return PromotionAccount.__super__.constructor.apply(this, arguments);
    }

    PromotionAccount.table = 'PromotionAccount';

    PromotionAccount.sfdcTable = 'TM_PromotionAccount__c';

    PromotionAccount.description = 'Promotion Account';

    PromotionAccount.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'accountSfId',
          sfdc: 'Account__c',
          indexWithType: 'string'
        }, {
          local: 'remoteGlobalPriority',
          sfdc: 'Account__r.GlobalPriority__c'
        }, {
          local: 'promotionSfId',
          sfdc: 'Promotion__c',
          indexWithType: 'string'
        }, {
          local: 'uniqueSfId',
          sfdc: 'Unique_Id__c'
        }, {
          local: 'name',
          sfdc: 'Promotion__r.Name'
        }, {
          local: 'numberOfPharmacies',
          sfdc: 'Promotion__r.NumberOfPharmacies__c'
        }, {
          local: 'contractNumber',
          sfdc: 'Promotion__r.ContractNumber__c'
        }, {
          local: 'description',
          sfdc: 'Promotion__r.Description__c'
        }, {
          local: 'objectives',
          sfdc: 'Promotion__r.Objectives__c'
        }, {
          local: 'remoteStartDate',
          sfdc: 'Promotion__r.PromotionStartDate__c'
        }, {
          local: 'remoteEndDate',
          sfdc: 'Promotion__r.PromotionEndDate__c'
        }, {
          local: 'status',
          sfdc: 'Promotion__r.Status__c'
        }, {
          local: 'recordType',
          sfdc: 'Promotion__r.RecordType.Name'
        }, {
          local: 'recordTypeId',
          sfdc: 'Promotion__r.RecordType.Id'
        }, {
          local: 'startDate',
          indexWithType: 'string'
        }, {
          local: 'endDate',
          indexWithType: 'string'
        }, {
          local: 'globalPriority',
          indexWithType: 'string'
        }
      ];
    };

    PromotionAccount.prototype.getPromotionStatus = function() {
      var PromotionPicklistManager;
      PromotionPicklistManager = require('db/picklist-managers/promotion-picklist-manager');
      return new PromotionPicklistManager().getStatusLabelByValue(this.status);
    };

    return PromotionAccount;

  })(Entity);

  module.exports = PromotionAccount;

}).call(this);
}, "models/promotion-attachment": function(exports, require, module) {(function() {
  var Entity, PromotionAttachment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PromotionAttachment = (function(superClass) {
    extend(PromotionAttachment, superClass);

    function PromotionAttachment() {
      return PromotionAttachment.__super__.constructor.apply(this, arguments);
    }

    PromotionAttachment.table = 'PromotionAttachment';

    PromotionAttachment.sfdcTable = 'Attachment';

    PromotionAttachment.description = 'Promotion Attachment';

    PromotionAttachment.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'body',
          sfdc: 'Body'
        }, {
          local: 'bodyLength',
          sfdc: 'BodyLength'
        }, {
          local: 'contentType',
          sfdc: 'ContentType'
        }, {
          local: 'description',
          sfdc: 'Description'
        }, {
          local: 'isPrivate',
          sfdc: 'IsPrivate'
        }, {
          local: 'title',
          sfdc: 'Name'
        }, {
          local: 'ownerId',
          sfdc: 'OwnerId'
        }, {
          local: 'attachedByName',
          sfdc: 'CreatedBy.Name'
        }, {
          local: 'parentId',
          sfdc: 'ParentId',
          indexWithType: 'string'
        }, {
          local: 'lastModify',
          sfdc: 'LastModifiedDate'
        }, {
          local: 'localParentId',
          indexWithType: 'string'
        }
      ];
    };

    return PromotionAttachment;

  })(Entity);

  module.exports = PromotionAttachment;

}).call(this);
}, "models/promotion-mechanic": function(exports, require, module) {(function() {
  var Entity, PromotionMechanic,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PromotionMechanic = (function(superClass) {
    extend(PromotionMechanic, superClass);

    function PromotionMechanic() {
      return PromotionMechanic.__super__.constructor.apply(this, arguments);
    }

    PromotionMechanic.table = 'PromotionMechanic';

    PromotionMechanic.sfdcTable = 'TM_MechanicPromotion__c';

    PromotionMechanic.description = 'Promotion Mechanic';

    PromotionMechanic.MECHANIC_TYPE_NUMERIC = 'Numeric_Mechanic';

    PromotionMechanic.MECHANIC_TYPE_PICKLIST = 'Picklist_Mechanic';

    PromotionMechanic.MECHANIC_TYPE_TEXT = 'Text_Mechanic';

    PromotionMechanic.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'numberOfPlannedRepeats',
          sfdc: 'PlannedRecurrency__c'
        }, {
          local: 'isRecurrent',
          sfdc: 'IsRecurrent__c'
        }, {
          local: 'mechanicSfId',
          sfdc: 'Mechanic__c'
        }, {
          local: 'mechanicName',
          sfdc: 'MechanicName__c'
        }, {
          local: 'mechanicType',
          sfdc: 'MechanicType__c'
        }, {
          local: 'mechanicRecordType',
          sfdc: 'Mechanic__r.RecordType.Name'
        }, {
          local: 'mechanicPicklistValues',
          sfdc: 'Mechanic__r.Picklist__c'
        }, {
          local: 'promotionSfId',
          sfdc: 'Promotion__c',
          indexWithType: 'string'
        }
      ];
    };

    return PromotionMechanic;

  })(Entity);

  module.exports = PromotionMechanic;

}).call(this);
}, "models/promotion-note": function(exports, require, module) {(function() {
  var Entity, PromotionNote,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PromotionNote = (function(superClass) {
    extend(PromotionNote, superClass);

    function PromotionNote() {
      return PromotionNote.__super__.constructor.apply(this, arguments);
    }

    PromotionNote.table = 'PromotionNote';

    PromotionNote.sfdcTable = 'Note';

    PromotionNote.description = 'Promotion Note';

    PromotionNote.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'body',
          sfdc: 'Body'
        }, {
          local: 'isDeleted',
          sfdc: 'IsDeleted'
        }, {
          local: 'isPrivate',
          sfdc: 'IsPrivate'
        }, {
          local: 'ownerId',
          sfdc: 'OwnerId'
        }, {
          local: 'attachedByName',
          sfdc: 'CreatedBy.Name'
        }, {
          local: 'parentId',
          sfdc: 'ParentId',
          indexWithType: 'string'
        }, {
          local: 'title',
          sfdc: 'Title'
        }, {
          local: 'lastModify',
          sfdc: 'LastModifiedDate'
        }
      ];
    };

    return PromotionNote;

  })(Entity);

  module.exports = PromotionNote;

}).call(this);
}, "models/promotion-sku": function(exports, require, module) {(function() {
  var Entity, PromotionSku,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PromotionSku = (function(superClass) {
    extend(PromotionSku, superClass);

    function PromotionSku() {
      return PromotionSku.__super__.constructor.apply(this, arguments);
    }

    PromotionSku.table = 'PromotionSku';

    PromotionSku.sfdcTable = 'TM_Sku_Promotion__c';

    PromotionSku.description = 'Promotion SKU';

    PromotionSku.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'name',
          sfdc: 'Name'
        }, {
          local: 'productItemSfId',
          sfdc: 'SKU__c',
          indexWithType: 'string'
        }, {
          local: 'productItemName',
          sfdc: 'SKU__r.Name'
        }, {
          local: 'promotionSfId',
          sfdc: 'Promotion__c',
          indexWithType: 'string'
        }
      ];
    };

    return PromotionSku;

  })(Entity);

  module.exports = PromotionSku;

}).call(this);
}, "models/promotion-task-account": function(exports, require, module) {(function() {
  var Entity, PromotionTaskAccount,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  PromotionTaskAccount = (function(superClass) {
    extend(PromotionTaskAccount, superClass);

    function PromotionTaskAccount() {
      return PromotionTaskAccount.__super__.constructor.apply(this, arguments);
    }

    PromotionTaskAccount.table = 'PromotionTaskAccount';

    PromotionTaskAccount.sfdcTable = 'TM_PromotionTask_Account__c';

    PromotionTaskAccount.description = 'Promotion Task Account';

    PromotionTaskAccount.TASK_TYPE_NUMERIC = 'Numeric_Task';

    PromotionTaskAccount.TASK_TYPE_PICKLIST = 'Picklist_Task';

    PromotionTaskAccount.TASK_TYPE_TEXT = 'Text_Task';

    PromotionTaskAccount.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'numberOfActualRepeats',
          sfdc: 'Actual_Repeats__c'
        }, {
          local: 'isRecurrent',
          sfdc: 'IsRecurrent__c'
        }, {
          local: 'actualCallReports',
          sfdc: 'Actual_CallReports__c'
        }, {
          local: 'plannedRecurrency',
          sfdc: 'PlannedRecurrency__c'
        }, {
          local: 'promotionAccountSfId',
          sfdc: 'PromotionAccount__c',
          indexWithType: 'string'
        }, {
          local: 'promotionTaskSfId',
          sfdc: 'Promotion_Task__c'
        }, {
          local: 'remotePromotionSfId',
          sfdc: 'PromotionAccount__r.Promotion__c'
        }, {
          local: 'promotionEndDate',
          sfdc: 'Promotion_Task__r.PromotionEndDate__c'
        }, {
          local: 'promotionName',
          sfdc: 'Promotion_Task__r.PromotionName__c'
        }, {
          local: 'promotionStartDate',
          sfdc: 'Promotion_Task__r.PromotionStartDate__c'
        }, {
          local: 'remoteRelatedToSku',
          sfdc: 'Promotion_Task__r.RelatedToSKU__c'
        }, {
          local: 'taskSfId',
          sfdc: 'Promotion_Task__r.Task__c'
        }, {
          local: 'taskRecordType',
          sfdc: 'Promotion_Task__r.Task__r.RecordType.Name'
        }, {
          local: 'taskPicklistValues',
          sfdc: 'Promotion_Task__r.Task__r.Picklist__c'
        }, {
          local: 'taskName',
          sfdc: 'Promotion_Task__r.TaskName__c'
        }, {
          local: 'taskType',
          sfdc: 'Promotion_Task__r.TaskType__c'
        }, {
          local: 'promotionSfId',
          indexWithType: 'string'
        }, {
          local: 'relatedToSku',
          indexWithType: 'string'
        }
      ];
    };

    return PromotionTaskAccount;

  })(Entity);

  module.exports = PromotionTaskAccount;

}).call(this);
}, "models/reference": function(exports, require, module) {(function() {
  var Entity, Reference,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Reference = (function(superClass) {
    extend(Reference, superClass);

    function Reference() {
      return Reference.__super__.constructor.apply(this, arguments);
    }

    Reference.table = 'Reference';

    Reference.sfdcTable = 'Reference__c';

    Reference.description = 'Reference';

    Reference.STATUS_ACTIVE = '3';

    Reference.prototype.contact = null;

    Reference.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'contactSfId',
          sfdc: 'Customer__c',
          indexWithType: 'string'
        }, {
          local: 'organizationSfId',
          sfdc: 'Organisation__c',
          indexWithType: 'string'
        }, {
          local: 'contactRecordType',
          sfdc: 'Customer__r.Account.RecordType.Name',
          indexWithType: 'string',
          search: true
        }, {
          local: 'isPrimary',
          sfdc: 'Primary__c'
        }, {
          local: 'status',
          sfdc: 'C_Status_Reference__c',
          indexWithType: 'string'
        }, {
          local: 'organizationName',
          sfdc: 'Organisation__r.Name',
          indexWithType: 'string',
          search: true
        }, {
          local: 'organizationCity',
          sfdc: 'Organisation__r.BillingCity',
          indexWithType: 'string',
          search: true
        }, {
          local: 'organizationPhone',
          sfdc: 'Organisation__r.Phone',
          indexWithType: 'string',
          search: true
        }, {
          local: 'organizationCountry',
          sfdc: 'Organisation__r.BillingCountry',
          indexWithType: 'string',
          search: true
        }, {
          local: 'organizationAddress',
          sfdc: 'Organisation__r.BillingStreet',
          indexWithType: 'string',
          search: true
        }, {
          local: 'organizationBrick',
          sfdc: 'Organisation__r.Brick__c',
          indexWithType: 'string'
        }, {
          local: 'contactFirstName',
          sfdc: 'Customer__r.FirstName',
          indexWithType: 'string',
          search: true
        }, {
          local: 'contactLastName',
          sfdc: 'Customer__r.LastName',
          indexWithType: 'string',
          search: true
        }, {
          local: 'priority',
          indexWithType: 'string',
          search: true
        }, {
          local: 'abbottSpecialty',
          indexWithType: 'string',
          search: true
        }, {
          local: 'atCalls',
          indexWithType: 'string'
        }, {
          local: 'lastCall',
          indexWithType: 'string'
        }
      ];
    };

    Reference.prototype.organizationNameAndAddress = function() {
      var ref, ref1, ref2;
      return ((ref = this.organizationName) != null ? ref : '') + " <br/> " + ((ref1 = this.organizationAddress) != null ? ref1 : '') + " " + ((ref2 = this.organizationCity) != null ? ref2 : '');
    };

    Reference.prototype.contactFullName = function() {
      var ref, ref1;
      return ((ref = this.contactLastName) != null ? ref : '') + " " + ((ref1 = this.contactFirstName) != null ? ref1 : '');
    };

    Reference.prototype.isActive = function() {
      return this.status === Reference.STATUS_ACTIVE;
    };

    Reference.prototype.getStatus = function() {
      var ReferencePicklistManager;
      ReferencePicklistManager = require('db/picklist-managers/reference-picklist-manager');
      return new ReferencePicklistManager().getStatusLabelByValue(this.status);
    };

    Reference.prototype.getContact = function() {
      var ContactsCollection, contactsCollection;
      if (!this.contact) {
        ContactsCollection = require('models/bll/contacts-collection');
        contactsCollection = new ContactsCollection;
        return contactsCollection.fetchEntityById(this.contactSfId);
      } else {
        return $.when(this.contact);
      }
    };

    return Reference;

  })(Entity);

  module.exports = Reference;

}).call(this);
}, "models/scenario": function(exports, require, module) {(function() {
  var Entity, Scenario,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Scenario = (function(superClass) {
    extend(Scenario, superClass);

    function Scenario() {
      return Scenario.__super__.constructor.apply(this, arguments);
    }

    Scenario.table = 'Scenario';

    Scenario.description = 'Scenario';

    Scenario.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'name',
          indexWithType: 'string'
        }, {
          local: 'structure'
        }
      ];
    };

    return Scenario;

  })(Entity);

  module.exports = Scenario;

}).call(this);
}, "models/target-frequency": function(exports, require, module) {(function() {
  var Entity, TargetFrequency, Utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Utils = require('common/utils');

  TargetFrequency = (function(superClass) {
    extend(TargetFrequency, superClass);

    function TargetFrequency() {
      return TargetFrequency.__super__.constructor.apply(this, arguments);
    }

    TargetFrequency.table = 'TargetFrequency';

    TargetFrequency.sfdcTable = 'TF__c';

    TargetFrequency.description = 'Target Frequency';

    TargetFrequency.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'marketingCycleSfId',
          sfdc: 'Marketing_Cycle__c',
          indexWithType: 'string'
        }, {
          local: 'targetSfId',
          sfdc: 'Target__c'
        }, {
          local: 'customerSfId',
          sfdc: 'Customer__c',
          indexWithType: 'string'
        }, {
          local: 'isActive',
          sfdc: 'Active_TMF__c'
        }, {
          local: 'actualCallsCount',
          sfdc: 'Actual_Calls__c'
        }, {
          local: 'mcTargetFrequency',
          sfdc: 'MC_Target_Frequency_c__c'
        }, {
          local: 'isPharmacist',
          sfdc: 'IsPharmacist__c'
        }, {
          local: 'priority',
          sfdc: 'Priority__c'
        }, {
          local: 'targetCycleFrequency',
          sfdc: 'Target_Cycle_Frequency__c'
        }, {
          local: 'lastCallReportDate',
          sfdc: 'Last_Call_Report_Date__c',
          indexWithType: 'string'
        }, {
          local: 'medrepId',
          sfdc: 'Target__r.MedRep__r.Id',
          indexWithType: 'string'
        }, {
          local: 'medrepFirstName',
          sfdc: 'Target__r.MedRep__r.FirstName'
        }, {
          local: 'medrepLastName',
          sfdc: 'Target__r.MedRep__r.LastName'
        }
      ];
    };

    TargetFrequency.prototype.lastCallReportDateFormated = function() {
      if (this.lastCallReportDate) {
        return Utils.dotFormatDate(this.lastCallReportDate);
      } else {
        return '';
      }
    };

    TargetFrequency.prototype.medrepFullName = function() {
      var ref, ref1;
      return ((ref = this.medrepLastName) != null ? ref : '') + " " + ((ref1 = this.medrepFirstName) != null ? ref1 : '');
    };

    TargetFrequency.prototype.atCalls = function() {
      var ref, ref1;
      return ((ref = this.actualCallsCount) != null ? ref : 0) + "/" + ((ref1 = this.targetCycleFrequency) != null ? ref1 : 0);
    };

    TargetFrequency.prototype.lastCall = function() {
      var lastCall;
      lastCall = this.lastCallReportDateFormated();
      if (lastCall) {
        return lastCall + " <br/> " + (this.medrepFullName());
      }
    };

    return TargetFrequency;

  })(Entity);

  module.exports = TargetFrequency;

}).call(this);
}, "models/target": function(exports, require, module) {(function() {
  var Entity, Target,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Target = (function(superClass) {
    extend(Target, superClass);

    function Target() {
      return Target.__super__.constructor.apply(this, arguments);
    }

    Target.table = 'Target';

    Target.sfdcTable = 'Target__c';

    Target.description = 'Target';

    Target.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'medrepSfId',
          sfdc: 'MedRep__c',
          indexWithType: 'string'
        }, {
          local: 'medrepBusinessUnit',
          sfdc: 'MedRep__r.Business_Unit__c'
        }
      ];
    };

    return Target;

  })(Entity);

  module.exports = Target;

}).call(this);
}, "models/task-adjustment": function(exports, require, module) {(function() {
  var Entity, TaskAdjustment,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  TaskAdjustment = (function(superClass) {
    extend(TaskAdjustment, superClass);

    function TaskAdjustment() {
      return TaskAdjustment.__super__.constructor.apply(this, arguments);
    }

    TaskAdjustment.table = 'TaskAdjustment';

    TaskAdjustment.sfdcTable = 'TM_TaskAdjustment__c';

    TaskAdjustment.description = 'Task Adjustment';

    TaskAdjustment.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'callReportSfId',
          sfdc: 'CallReport__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'numberRealValue',
          sfdc: 'NumberRealValue__c',
          upload: true
        }, {
          local: 'productItemSfId',
          sfdc: 'SKU__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'stringRealValue',
          sfdc: 'StringRealValue__c',
          upload: true
        }, {
          local: 'remotePromotionTaskSfId',
          sfdc: 'PromotionTask_Account__r.Promotion_Task__c'
        }, {
          local: 'promotionTaskAccountSfId',
          sfdc: 'PromotionTask_Account__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'promotionTaskSfId',
          indexWithType: 'string'
        }, {
          local: 'isModifiedInTrade'
        }, {
          local: 'isModifiedInCall'
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    return TaskAdjustment;

  })(Entity);

  module.exports = TaskAdjustment;

}).call(this);
}, "models/tot": function(exports, require, module) {(function() {
  var Entity, Tot,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  Tot = (function(superClass) {
    extend(Tot, superClass);

    function Tot() {
      return Tot.__super__.constructor.apply(this, arguments);
    }

    Tot.table = 'Tot';

    Tot.sfdcTable = 'Time_off_Territory__c';

    Tot.description = 'Time-Off-Territory';

    Tot.TYPE_OPEN = 'Open';

    Tot.TYPE_NONE = 'None';

    Tot.TYPE_CLOSED = 'Closed';

    Tot.TYPE_SUBMIT = 'Submit';

    Tot.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'userSfId',
          sfdc: 'OwnerId',
          upload: true
        }, {
          local: 'createdOffline',
          sfdc: 'Created_Offline__c',
          upload: true
        }, {
          local: 'userLastName',
          sfdc: 'Owner.LastName'
        }, {
          local: 'userFirstName',
          sfdc: 'Owner.FirstName'
        }, {
          local: 'allDay',
          sfdc: 'All_Day__c',
          upload: true
        }, {
          local: 'startDate',
          sfdc: 'Start_Date__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'endDate',
          sfdc: 'End_Date__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'firstQuarterEvent',
          sfdc: 'Type_First_Quarter__c',
          indexWithType: 'string',
          search: true,
          upload: true
        }, {
          local: 'secondQuarterEvent',
          sfdc: 'Type_Second_Quarter__c',
          indexWithType: 'string',
          search: true,
          upload: true
        }, {
          local: 'thirdQuarterEvent',
          sfdc: 'Type_Third_Quarter__c',
          indexWithType: 'string',
          search: true,
          upload: true
        }, {
          local: 'fourthQuarterEvent',
          sfdc: 'Type_Fourth_Quarter__c',
          indexWithType: 'string',
          search: true,
          upload: true
        }, {
          local: 'type',
          sfdc: 'Type__c',
          indexWithType: 'string',
          upload: true
        }, {
          local: 'description',
          sfdc: 'Description__c',
          indexWithType: 'string',
          search: true,
          upload: true
        }, {
          local: 'isSubmittedForApproval',
          sfdc: 'IsSubmittedForApproval__c',
          indexWithType: 'string'
        }, {
          local: 'clmToolId',
          sfdc: 'CLM_Tool_Id__c',
          upload: true
        }
      ];
    };

    Tot.prototype.userFullName = function() {
      var ref, ref1;
      return ((ref = this.userLastName) != null ? ref : '') + " " + ((ref1 = this.userFirstName) != null ? ref1 : '');
    };

    return Tot;

  })(Entity);

  module.exports = Tot;

}).call(this);
}, "models/tour-planning-entity": function(exports, require, module) {(function() {
  var Reference, TourPlanningEntity,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Reference = require('models/reference');

  TourPlanningEntity = (function(superClass) {
    extend(TourPlanningEntity, superClass);

    TourPlanningEntity.description = 'Tour planning entity';

    TourPlanningEntity.prototype.visitOrderNumber = 0;

    TourPlanningEntity.prototype.visitStartTime = null;

    TourPlanningEntity.prototype.visitEndTime = null;

    TourPlanningEntity.prototype.isChecked = false;

    function TourPlanningEntity() {
      TourPlanningEntity.__super__.constructor.apply(this, arguments);
    }

    return TourPlanningEntity;

  })(Reference);

  module.exports = TourPlanningEntity;

}).call(this);
}, "models/user": function(exports, require, module) {(function() {
  var Entity, User,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Entity = require('models/entity');

  User = (function(superClass) {
    extend(User, superClass);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.table = 'User';

    User.sfdcTable = 'User';

    User.description = 'User';

    User.schema = function() {
      return [
        {
          local: 'id',
          sfdc: 'Id'
        }, {
          local: 'email',
          sfdc: 'Email',
          indexWithType: 'string',
          search: true
        }, {
          local: 'firstName',
          sfdc: 'FirstName',
          indexWithType: 'string',
          search: true
        }, {
          local: 'lastName',
          sfdc: 'LastName',
          indexWithType: 'string',
          search: true
        }, {
          local: 'currency',
          sfdc: 'DefaultCurrencyIsoCode'
        }, {
          local: 'businessUnit',
          sfdc: 'Business_Unit__c'
        }, {
          local: 'callReportValidationExcempted',
          sfdc: 'Is_Exempted_in_Call_Report_Validation__c'
        }, {
          local: 'pinCode',
          sfdc: 'ATC_Class__c',
          indexWithType: 'string'
        }, {
          local: 'isActive',
          sfdc: 'IsActive',
          indexWithType: 'string'
        }, {
          local: 'DayOff1',
          sfdc: 'Day_Off_1__c'
        }, {
          local: 'DayOff2',
          sfdc: 'Day_Off_2__c'
        }, {
          local: 'isCurrentUser',
          indexWithType: 'string'
        }, {
          local: 'atcClass'
        }, {
          local: 'isLocked'
        }, {
          local: 'pinAttemptsCnt'
        }
      ];
    };

    User.prototype.fullName = function() {
      var ref, ref1;
      return ((ref = this.lastName) != null ? ref : '') + " " + ((ref1 = this.firstName) != null ? ref1 : '');
    };

    User.prototype.getDayOffByIndex = function(index) {
      var days;
      days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      return days[index];
    };

    return User;

  })(Entity);

  module.exports = User;

}).call(this);
}, "sfdc/sfdc-initializer": function(exports, require, module) {(function() {
  var SfdcInitializer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SfdcInitializer = (function() {
    function SfdcInitializer(successCB, errorCB) {
      this.successCB = successCB;
      this.errorCB = errorCB;
      this._getAuthCredentialsError = bind(this._getAuthCredentialsError, this);
      this._getAuthCredentialsSuccess = bind(this._getAuthCredentialsSuccess, this);
      this._salesforceSessionRefreshed = bind(this._salesforceSessionRefreshed, this);
    }

    SfdcInitializer.prototype.setupSalesforceCredentials = function() {
      cordova.require("salesforce/plugin/oauth").getAuthCredentials(this._getAuthCredentialsSuccess, this._getAuthCredentialsError);
      return document.addEventListener("salesforceSessionRefresh", this._salesforceSessionRefreshed, false);
    };

    SfdcInitializer.prototype._salesforceSessionRefreshed = function(creds) {
      return Force.init(creds, apiVersion, null, cordova.require("salesforce/plugin/oauth").forcetkRefresh);
    };

    SfdcInitializer.prototype._getAuthCredentialsSuccess = function(creds) {
      console.log("Auth Success: " + (JSON.stringify(creds)));
      this._salesforceSessionRefreshed(creds);
      return this.successCB(creds);
    };

    SfdcInitializer.prototype._getAuthCredentialsError = function(error) {
      console.log("Auth Error: " + (JSON.stringify(error)));
      return this.errorCB(error);
    };

    return SfdcInitializer;

  })();

  module.exports = SfdcInitializer;

}).call(this);
}, "sfdc/synchronisation/sync-manager": function(exports, require, module) {(function() {
  var AlarmManager, BricksCollection, BuTeamPersonProfilesCollection, CLMCallReportDataCollection, CallReportPicklistManager, CallReportsCollection, ConfigurationManager, ContactsCollection, DatabaseManager, DeviceCollection, EntitiesCollection, MarketingCyclesCollection, MarketingMessagesCollection, MechanicAdjustmentsCollection, MechanicEvaluationAccountsCollection, OrganizationsCollection, PEAbbottAttendeesCollection, PEAttendeesCollection, PatientDiseasesCollection, PharmaEventPicklistManager, PharmaEventsCollection, PhotoAdjustmentsCollection, PhotoAttachmentsCollection, PicklistManager, PresentationsCollection, ProductInPortfoliosCollection, ProductItemsCollection, ProductsCollection, ProfileProductInPortfoliosCollection, PromotionAccountsCollection, PromotionAttachmentsCollection, PromotionMechanicsCollection, PromotionNotesCollection, PromotionPicklistManager, PromotionSkusCollection, PromotionTaskAccountsCollection, ReferencePicklistManager, ReferencesCollection, SettingsManager, SforceDataContext, SyncLogManager, SyncManager, TargetFrequenciesCollection, TargetsCollection, TaskAdjustmentsCollection, TotPicklistManager, TotsCollection, UsersCollection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EntitiesCollection = require('models/bll/entities-collection');

  SforceDataContext = require('models/bll/sforce-data-context');

  BricksCollection = require('models/bll/bricks-collection');

  BuTeamPersonProfilesCollection = require('models/bll/bu-team-person-profiles-collection');

  CallReportsCollection = require('models/bll/call-reports-collection/call-reports-collection');

  ContactsCollection = require('models/bll/contacts-collection');

  MarketingCyclesCollection = require('models/bll/marketing-cycles-collection');

  MarketingMessagesCollection = require('models/bll/marketing-messages-collection');

  OrganizationsCollection = require('models/bll/organizations-collection');

  PEAbbottAttendeesCollection = require('models/bll/pe-abbott-attendees-collection');

  PEAttendeesCollection = require('models/bll/pe-attendees-collection');

  PharmaEventsCollection = require('models/bll/pharma-events-collection');

  ProductsCollection = require('models/bll/products-collection');

  ReferencesCollection = require('models/bll/references/references-collection');

  TargetFrequenciesCollection = require('models/bll/target-frequencies-collection');

  TargetsCollection = require('models/bll/targets-collection');

  TotsCollection = require('models/bll/tots-collection/tots-collection');

  UsersCollection = require('models/bll/users-collection');

  DeviceCollection = require('models/bll/device-collection');

  PresentationsCollection = require('models/bll/presentations-collection');

  CLMCallReportDataCollection = require('models/bll/clm-call-report-data-collection');

  PromotionAccountsCollection = require('models/bll/promotion-accounts-collection');

  PromotionTaskAccountsCollection = require('models/bll/promotion-task-accounts-collection');

  TaskAdjustmentsCollection = require('models/bll/task-adjustments-collection');

  ProductItemsCollection = require('models/bll/product-items-collection');

  PromotionSkusCollection = require('models/bll/promotion-skus-collection');

  PromotionMechanicsCollection = require('models/bll/promotion-mechanics-collection');

  MechanicAdjustmentsCollection = require('models/bll/mechanic-adjustments-collection');

  MechanicEvaluationAccountsCollection = require('models/bll/mechanic-evaluation-accounts-collection');

  PromotionNotesCollection = require('models/bll/promotion-notes-collection');

  PromotionAttachmentsCollection = require('models/bll/promotion-attachments-collection');

  PhotoAttachmentsCollection = require('models/bll/photo-attachments-collection');

  PhotoAdjustmentsCollection = require('models/bll/photo-adjustments-collection');

  ProductInPortfoliosCollection = require('models/bll/product-in-portfolios-collection');

  ProfileProductInPortfoliosCollection = require('models/bll/profile-product-in-portfolios-collection');

  PatientDiseasesCollection = require('models/bll/patient-diseases-collection');

  PicklistManager = require('db/picklist-managers/picklist-manager');

  CallReportPicklistManager = require('db/picklist-managers/callreport-picklist-manager');

  TotPicklistManager = require('db/picklist-managers/tot-picklist-manager');

  ReferencePicklistManager = require('db/picklist-managers/reference-picklist-manager');

  PharmaEventPicklistManager = require('db/picklist-managers/pe-picklist-manager');

  PromotionPicklistManager = require('db/picklist-managers/promotion-picklist-manager');

  DatabaseManager = require('db/database-manager');

  ConfigurationManager = require('db/configuration-manager');

  SyncLogManager = require('common/log-manager');

  AlarmManager = require('common/alarm/alarm-manager');

  SettingsManager = require('db/settings-manager');

  SyncManager = (function() {
    function SyncManager() {
      this._processConfiguration = bind(this._processConfiguration, this);
      this._onSynchronisationFailed = bind(this._onSynchronisationFailed, this);
      this._setLastSucceededSyncronisationDateTime = bind(this._setLastSucceededSyncronisationDateTime, this);
      this._onSynchronisationSucceeded = bind(this._onSynchronisationSucceeded, this);
      this._appendSuccessPicklistDownloadSyncLog = bind(this._appendSuccessPicklistDownloadSyncLog, this);
      this._downloadConfigurationData = bind(this._downloadConfigurationData, this);
      this._onEntityUpload = bind(this._onEntityUpload, this);
      this._uploadEntitiesForCollection = bind(this._uploadEntitiesForCollection, this);
      this._downloadEntitiesForCollection = bind(this._downloadEntitiesForCollection, this);
      this.makeSync = bind(this.makeSync, this);
      this._eraseDeviceAndLogout = bind(this._eraseDeviceAndLogout, this);
      this._downloadDeviceAndCheckErase = bind(this._downloadDeviceAndCheckErase, this);
      this.startLoading = bind(this.startLoading, this);
    }

    SyncManager.prototype.STEPS_COUNT = 51;

    SyncManager.prototype.startLoading = function(statusCB) {
      this.statusCB = statusCB;
      SyncLogManager.initLog();
      this._stepIndex = 0;
      this.deviceCollection = new DeviceCollection;
      return this._downloadDeviceAndCheckErase();
    };

    SyncManager.prototype._downloadDeviceAndCheckErase = function() {
      this._updateStatus(Locale.value('synchronizationPopup.LogMessage.CheckDevice'));
      return this.deviceCollection.serverConfig().then((function(_this) {
        return function(config) {
          return _this.deviceCollection.sync('read', null, {
            config: config,
            cache: _this.deviceCollection.cache
          });
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.deviceCollection.getDevice();
        };
      })(this)).then((function(_this) {
        return function(device) {
          if (device && device.requestErase) {
            return _this._eraseDeviceAndLogout(device);
          } else {
            return _this.makeSync();
          }
        };
      })(this));
    };

    SyncManager.prototype._eraseDeviceAndLogout = function(device) {
      device.erased = true;
      return this.deviceCollection.updateEntity(device).then((function(_this) {
        return function() {
          return _this.deviceCollection.serverConfig();
        };
      })(this)).then((function(_this) {
        return function(config) {
          return _this.deviceCollection.sync('upsert', null, {
            config: config,
            cache: _this.deviceCollection.cache,
            each: _this._onEntityUpload
          });
        };
      })(this)).then((function(_this) {
        return function() {
          return new DatabaseManager().clearDatabase().then(function() {
            return SforceDataContext.logout();
          });
        };
      })(this));
    };

    SyncManager.prototype.makeSync = function() {
      var isEdetailingEnabled, isPortfolioSellingEnabled, isTradeModuleEnabled;
      isEdetailingEnabled = null;
      isTradeModuleEnabled = null;
      isPortfolioSellingEnabled = null;
      SforceDataContext.cleanup();
      return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.SyncStart', {
        count: SyncLogManager._stepIndexKey
      })).then(this._downloadConfigurationData).then(this._processConfiguration).then((function(_this) {
        return function() {
          return SettingsManager.getValueByKey('isEdetailingEnabled').then(function(isEnabled) {
            return isEdetailingEnabled = isEnabled;
          });
        };
      })(this)).then((function(_this) {
        return function() {
          return SettingsManager.getValueByKey('isTradeModuleEnabled').then(function(isEnabled) {
            return isTradeModuleEnabled = isEnabled;
          });
        };
      })(this)).then((function(_this) {
        return function() {
          return SettingsManager.getValueByKey('isPortfolioSellingModuleEnabled').then(function(isEnabled) {
            return isPortfolioSellingEnabled = isEnabled;
          });
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new UsersCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          if (isEdetailingEnabled) {
            return _this._downloadEntitiesForCollection(new CLMCallReportDataCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new TargetsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new MarketingCyclesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new MarketingMessagesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new BricksCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new OrganizationsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new BuTeamPersonProfilesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new ContactsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new ReferencesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new ProductsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._uploadEntitiesForCollection(new CallReportsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new CallReportsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          if (isEdetailingEnabled) {
            return _this._uploadEntitiesForCollection(new CLMCallReportDataCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._uploadEntitiesForCollection(new PharmaEventsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new PharmaEventsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._uploadEntitiesForCollection(new PEAbbottAttendeesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new PEAbbottAttendeesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._uploadEntitiesForCollection(new PEAttendeesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new PEAttendeesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._uploadEntitiesForCollection(new TotsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new TotsCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadEntitiesForCollection(new TargetFrequenciesCollection);
        };
      })(this)).then((function(_this) {
        return function() {
          if (isEdetailingEnabled) {
            return _this._downloadEntitiesForCollection(new PresentationsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PromotionAccountsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._uploadEntitiesForCollection(new TaskAdjustmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new TaskAdjustmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PromotionTaskAccountsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new ProductItemsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PromotionSkusCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PromotionMechanicsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._uploadEntitiesForCollection(new MechanicAdjustmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new MechanicAdjustmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new MechanicEvaluationAccountsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._uploadEntitiesForCollection(new PhotoAdjustmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PhotoAdjustmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._uploadEntitiesForCollection(new PhotoAttachmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PhotoAttachmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PromotionAttachmentsCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadEntitiesForCollection(new PromotionNotesCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isPortfolioSellingEnabled) {
            return _this._downloadEntitiesForCollection(new ProductInPortfoliosCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isPortfolioSellingEnabled) {
            return _this._downloadEntitiesForCollection(new ProfileProductInPortfoliosCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (isPortfolioSellingEnabled) {
            return _this._downloadEntitiesForCollection(new PatientDiseasesCollection);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadPicklistWithDatasource(new TotPicklistManager);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadPicklistWithDatasource(new CallReportPicklistManager);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadPicklistWithDatasource(new ReferencePicklistManager);
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._downloadPicklistWithDatasource(new PharmaEventPicklistManager);
        };
      })(this)).then((function(_this) {
        return function() {
          if (isTradeModuleEnabled) {
            return _this._downloadPicklistWithDatasource(new PromotionPicklistManager);
          } else {
            return _this._skipStep();
          }
        };
      })(this)).then(this._onSynchronisationSucceeded).fail(this._onSynchronisationFailed);
    };

    SyncManager.prototype._skipStep = function() {
      --this.STEPS_COUNT;
      return $.when();
    };

    SyncManager.prototype._downloadEntitiesForCollection = function(collection) {
      this._updateStatus(Locale.value('synchronizationPopup.Table.' + collection.model.table));
      return collection.serverConfig().then(function(config) {
        return collection.sync('read', null, {
          config: config,
          cache: collection.cache
        });
      }).done(function(response) {
        return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.DownloadOk', {
          name: Locale.value('synchronizationPopup.Table.' + collection.model.table),
          count: response.totalSize
        }));
      }).fail(function(error) {
        return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.DownloadFail', {
          name: Locale.value('synchronizationPopup.Table.' + collection.model.table)
        }));
      });
    };

    SyncManager.prototype._uploadEntitiesForCollection = function(collection) {
      this._updateStatus(Locale.value('synchronizationPopup.Uploading') + " " + Locale.value('synchronizationPopup.Table.' + collection.model.table));
      return collection.serverConfig().then((function(_this) {
        return function(config) {
          return collection.sync('upsert', null, {
            config: config,
            cache: collection.cache,
            each: _this._onEntityUpload
          });
        };
      })(this)).then(function(records) {
        var ref;
        return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.UploadOk', {
          name: Locale.value('synchronizationPopup.Table.' + collection.model.table),
          count: (ref = records != null ? records.length : void 0) != null ? ref : 0
        }));
      });
    };

    SyncManager.prototype._onEntityUpload = function(entity, error) {
      var errorParams, warningParams;
      if (!error) {
        return;
      }
      if (error.type === EntitiesCollection.TYPE_WARNING) {
        warningParams = {
          type: entity.sobjectType,
          entity: entity.id,
          message: error.details.message,
          code: error.details.errorCode
        };
        return SyncLogManager.appendWarning(Locale.value('synchronizationPopup.LogMessage.WarningUploading', warningParams));
      } else {
        errorParams = {
          type: entity.sobjectType,
          entity: entity.id,
          message: error.details.message,
          code: error.details.errorCode
        };
        return SyncLogManager.appendError(Locale.value('synchronizationPopup.LogMessage.ErrorUploading', errorParams));
      }
    };

    SyncManager.prototype._updateStatus = function(status) {
      this.statusCB(status, Math.round((this._stepIndex / (this.STEPS_COUNT - 1)) * 100));
      if (this._stepIndex < this.STEPS_COUNT - 1) {
        return ++this._stepIndex;
      }
    };

    SyncManager.prototype._downloadConfigurationData = function() {
      this._updateStatus(Locale.value('synchronizationPopup.Configuration'));
      return ConfigurationManager.loadConfig().then(function(records) {
        return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.DownloadOk', {
          name: Locale.value('synchronizationPopup.Configuration'),
          count: ''
        }));
      });
    };

    SyncManager.prototype._downloadPicklistWithDatasource = function(datasource) {
      this._updateStatus(Locale.value('synchronizationPopup.Table.' + datasource.targetModel().table) + " " + Locale.value('synchronizationPopup.PickList'));
      return PicklistManager.loadPicklist(datasource.targetModel().sfdcTable, datasource.fieldNames()).done((function(_this) {
        return function(records) {
          return _this._appendSuccessPicklistDownloadSyncLog(datasource.targetModel().table, records.length);
        };
      })(this)).fail(function(error) {
        return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.DownloadFail', {
          name: Locale.value('synchronizationPopup.Table.' + datasource.targetModel().table)
        }));
      });
    };

    SyncManager.prototype._appendSuccessPicklistDownloadSyncLog = function(picklistEntityTableName, recordsCount) {
      var picklistName;
      picklistName = Locale.value('synchronizationPopup.Table.' + picklistEntityTableName) + " " + Locale.value('synchronizationPopup.PickList');
      return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.DownloadOk', {
        name: picklistName,
        count: recordsCount
      }));
    };

    SyncManager.prototype._onSynchronisationSucceeded = function() {
      SyncLogManager.updateStepsCount(this._stepIndex - 1);
      return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.Success')).then((function(_this) {
        return function() {
          return _this.deviceCollection.updateDeviceInfo();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._setLastSucceededSyncronisationDateTime();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._uploadEntitiesForCollection(_this.deviceCollection);
        };
      })(this)).then(function() {
        return AlarmManager.scheduleNextVisits();
      });
    };

    SyncManager.prototype._setLastSucceededSyncronisationDateTime = function() {
      return this.deviceCollection.getDevice().then((function(_this) {
        return function(device) {
          return SettingsManager.setLastSucceededSyncDateTime(device.lastSyncronisation);
        };
      })(this));
    };

    SyncManager.prototype._onSynchronisationFailed = function(error) {
      console.log(JSON.stringify(error));
      SyncLogManager.updateStepsCount(this._stepIndex - 1);
      return SyncLogManager.appendError(error).then(function() {
        return SyncLogManager.appendInfoLog(Locale.value('synchronizationPopup.LogMessage.Error'));
      }).then((function(_this) {
        return function() {
          return _this.deviceCollection.updateDeviceInfo();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this._uploadEntitiesForCollection(_this.deviceCollection);
        };
      })(this));
    };

    SyncManager.prototype._processConfiguration = function() {
      return ConfigurationManager.getConfig('isDynamicAgendaEnabled').then(function(value) {
        return SettingsManager.setValueByKey('isDynamicAgendaEnabled', value);
      }).then(function() {
        return ConfigurationManager.getConfig('isEdetailingEnabled');
      }).then(function(value) {
        return SettingsManager.setValueByKey('isEdetailingEnabled', value);
      }).then(function() {
        return ConfigurationManager.getConfig('isJuridicGroupEnabled');
      }).then(function(value) {
        return SettingsManager.setValueByKey('isJuridicGroupEnabled', value);
      }).then(function() {
        return ConfigurationManager.getConfig('tourPlanningSettings');
      }).then(function(value) {
        return SettingsManager.setValueByKey('tourPlanningSettings', value);
      });
    };

    return SyncManager;

  })();

  module.exports = SyncManager;

}).call(this);
}, "views/activities/activities": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/activities.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/activities.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/activities.jade" ));
buf.push("<div class=\"tables-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tables-holder");
}
};}, "views/activities/appointments/appointments-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"ellipsis date-time\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"col v-centered hyperlink appointments-contact-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"ellipsis customer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"ellipsis specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"ellipsis priority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"col v-centered hyperlink appointments-organization-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"ellipsis organization\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"ellipsis user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table-cell.jade" ));
buf.push("<div class=\"ellipsis at-calls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered.h-centered\n    .ellipsis.date-time\n.col.v-centered.hyperlink.appointments-contact-cell\n    .ellipsis.customer\n.col.v-centered\n    .ellipsis.specialty\n.col.v-centered.h-centered\n    .ellipsis.priority\n.col.v-centered.hyperlink.appointments-organization-cell\n    .ellipsis.organization\n.col.v-centered\n    .ellipsis.user\n.col.v-centered.h-centered\n    .ellipsis.at-calls");
}
};}, "views/activities/appointments/appointments-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-table.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}, "views/activities/appointments/appointments-today-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"ellipsis date-time\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered hyperlink appointments-contact-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"ellipsis customer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"ellipsis specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"ellipsis priority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered hyperlink appointments-organization-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"ellipsis organization\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"ellipsis user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"ellipsis at-calls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered promotions-info hidden\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/appointments/appointments-today-table-cell.jade" ));
buf.push("<div class=\"bit-button info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered.h-centered\n    .ellipsis.date-time\n.col.v-centered.hyperlink.appointments-contact-cell\n    .ellipsis.customer\n.col.v-centered\n    .ellipsis.specialty\n.col.v-centered.h-centered\n    .ellipsis.priority\n.col.v-centered.hyperlink.appointments-organization-cell\n    .ellipsis.organization\n.col.v-centered\n    .ellipsis.user\n.col.v-centered.h-centered\n    .ellipsis.at-calls\n.col.v-centered.h-centered.promotions-info.hidden\n    .bit-button.info");
}
};}, "views/activities/calls/calls-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"ellipsis date-time\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"col v-centered hyperlink calls-contact-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"ellipsis customer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"ellipsis specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"ellipsis priority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"ellipsis user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table-cell.jade" ));
buf.push("<div class=\"ellipsis at-calls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "div.col.v-centered.h-centered\n    div.ellipsis.date-time\ndiv.col.v-centered.hyperlink.calls-contact-cell\n    div.ellipsis.customer\ndiv.col.v-centered\n    div.ellipsis.specialty\ndiv.col.v-centered.h-centered\n    div.ellipsis.priority\ndiv.col.v-centered\n    div.ellipsis.user\ndiv.col.v-centered.h-centered\n    div.ellipsis.at-calls");
}
};}, "views/activities/calls/calls-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/calls/calls-table.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}, "views/activities/pharma-events/pharma-events-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"ellipsis status\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"ellipsis owner\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"ellipsis event-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"ellipsis type-of-event\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"ellipsis stage\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"ellipsis start-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table-cell.jade" ));
buf.push("<div class=\"ellipsis location\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered.h-centered\n    .ellipsis.status\n.col.v-centered\n    .ellipsis.owner\n.col.v-centered\n    .ellipsis.event-name\n.col.v-centered.h-centered\n    .ellipsis.type-of-event\n.col.v-centered\n    .ellipsis.stage\n.col.v-centered.h-centered\n    .ellipsis.start-date\n.col.v-centered\n    .ellipsis.location");
}
};}, "views/activities/pharma-events/pharma-events-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/activities/pharma-events/pharma-events-table.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}, "views/agenda/scenario-details-general": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details-general.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details-general.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details-general.jade" ));
buf.push("<div class=\"scenario-name-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details-general.jade" ));
buf.push("<p class=\"name-caption\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, jade_debug[0].filename ));
buf.push("Name:");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details-general.jade" ));
buf.push("<input type=\"text\" class=\"text-field-block presentation-name\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details-general.jade" ));
buf.push("<div class=\"select-btn selected-presentation\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, jade_debug[0].filename ));
buf.push("None");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".scenario-name-wrapper\n  p.name-caption Name:\n  input.text-field-block.presentation-name(type=\"text\")\n.select-btn.selected-presentation None");
}
};}, "views/agenda/scenario-details": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details.jade" ));
buf.push("<div class=\"scenarios-side-view\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-details.jade" ));
buf.push("<div class=\"scenarios-grid-view-wrapper scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".scenarios-side-view\n.scenarios-grid-view-wrapper.scroll-container");
}
};}, "views/agenda/scenario-sidebar-group": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-sidebar-group.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-sidebar-group.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-sidebar-group.jade" ));
buf.push("<h3 class=\"group-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h3>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenario-sidebar-group.jade" ));
buf.push("<ul class=\"slides-list\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</ul>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "h3.group-name\nul.slides-list");
}
};}, "views/agenda/scenarios-grid-view-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
buf.push("<div class=\"scenarios-grid-view-cell-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
buf.push("<div class=\"scenarios-grid-view-cell-title-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
buf.push("<div class=\"scenarios-grid-view-cell-title ellipsis\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
buf.push("<div class=\"scenarios-grid-view-cell-icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
buf.push("<div class=\"scenarios-grid-view-cell-remove\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
buf.push("<div class=\"scenarios-grid-view-cell-name-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-grid-view-cell.jade" ));
buf.push("<div class=\"scenarios-grid-view-cell-name ellipsis\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".scenarios-grid-view-cell-content\n  .scenarios-grid-view-cell-title-wrapper\n    .scenarios-grid-view-cell-title.ellipsis\n  .scenarios-grid-view-cell-icon\n    .scenarios-grid-view-cell-remove\n  .scenarios-grid-view-cell-name-wrapper\n    .scenarios-grid-view-cell-name.ellipsis");
}
};}, "views/agenda/scenarios-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
buf.push("<div class=\"cell-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
buf.push("<div class=\"ellipsis name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
buf.push("<div class=\"col h-centered v-centered openContainer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
buf.push("<div data-i18n=\"common:buttons.Open\" class=\"ctrl-btn open centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
buf.push("<div class=\"col h-centered v-centered delete-btn-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/scenarios-table-cell.jade" ));
buf.push("<div data-i18n=\"common:buttons.DeleteBtn\" class=\"ctrl-btn delete centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".cell-wrapper\n\t.col.v-centered\n\t\t.ellipsis.name\n\t.col.h-centered.v-centered.openContainer\n\t\t.ctrl-btn.open.centered(data-i18n=\"common:buttons.Open\")\n\t.col.h-centered.v-centered.delete-btn-wrapper\n\t\t.ctrl-btn.delete.centered(data-i18n=\"common:buttons.DeleteBtn\")");
}
};}, "views/agenda/sidebar-slide-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/sidebar-slide-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/sidebar-slide-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/sidebar-slide-cell.jade" ));
buf.push("<figure class=\"slide-thumb\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</figure>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/agenda/sidebar-slide-cell.jade" ));
buf.push("<p class=\"slide-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "figure.slide-thumb\np.slide-name");
}
};}, "views/appointment-card/appointment-card": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"wrapper flex-element\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"columns with-separator\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Customer\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-cell value appointments-card-customer hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Organization\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-cell value appointments-card-organization hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.JointVisit\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<button class=\"select-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"appointments-card-joint-visit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.JointVisitUser\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.JointVisitUserPlaceholder\" class=\"info-cell text-field-block appointments-card-joint-visit-user placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Specialty\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-cell value appointments-card-speciality\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.User\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-cell value appointments-card-user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row appointments-card-date-time-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.DateTime\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-cell value appointments-card-date-time bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-row appointments-card-duration-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Duration\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"info-cell value appointments-card-duration bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 33, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<div class=\"comment-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 34, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<h2 data-i18n=\"card.GeneralInfoFields.CallComments\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/appointment-card/appointment-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]commentView.Placeholder\" disabled=\"disabled\" class=\"call-comments text-area\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element\n  .scroll-content\n    .general-info\n      .columns.with-separator\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Customer\")\n            .info-cell.value.appointments-card-customer.hyperlink\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Organization\")\n            .info-cell.value.appointments-card-organization.hyperlink\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.JointVisit\")\n            .info-cell.value\n              button.select-btn\n                span.appointments-card-joint-visit(data-i18n=\"common:defaultSelectValue\")\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.JointVisitUser\")\n            .info-cell.text-field-block.appointments-card-joint-visit-user.placeholder(data-i18n=\"card.GeneralInfoFields.JointVisitUserPlaceholder\")\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Specialty\")\n            .info-cell.value.appointments-card-speciality\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.User\")\n            .info-cell.value.appointments-card-user\n          .info-row.appointments-card-date-time-wrapper\n            .info-cell(data-i18n=\"card.GeneralInfoFields.DateTime\")\n            .info-cell.value.appointments-card-date-time.bit-button-pseudo.calendar\n          .info-row.appointments-card-duration-wrapper\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Duration\")\n            .info-cell.value.appointments-card-duration.bit-button-pseudo.calendar\n      .comment-block\n        h2.blue-header(data-i18n=\"card.GeneralInfoFields.CallComments\")\n        textarea.call-comments.text-area(rows=\"1\",data-i18n=\"[data-placeholder]commentView.Placeholder\",disabled=true)");
}
};}, "views/attendees/attendees-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ));
buf.push("<input type=\"checkbox\" class=\"check-box\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ));
buf.push("<div class=\"ellipsis specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ));
buf.push("<div class=\"col hyperlink v-centered contact-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table-cell.jade" ));
buf.push("<div class=\"ellipsis contact\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered.h-centered\n    input.check-box(type='checkbox')\n.col.v-centered\n    .ellipsis.specialty\n.col.hyperlink.v-centered.contact-cell\n    .ellipsis.contact");
}
};}, "views/attendees/attendees-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/attendees/attendees-table.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}, "views/call-report-card/call-report-card-products-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<tr class=\"product-general-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"call-report-card-control-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"call-report-card-expand-btn-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<button class=\"call-report-card-expand-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<button class=\"call-report-card-product-list-btn select-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<textarea rows=\"1\" data-placehoder=\"&amp;nbsp;\" class=\"call-report-card-product-comment text-field-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<tr class=\"product-expand-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"td-content-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"product-expand-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"product-message-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<p data-i18n=\"card.CallReport.Product.MarketingMessage1\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<p data-i18n=\"card.CallReport.Product.MarketingMessage2\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<p data-i18n=\"card.CallReport.Product.MarketingMessage3\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"product-promotion-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<p data-i18n=\"card.CallReport.Product.PromotionalItem\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"td-content-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"product-expand-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"product-message-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<button class=\"call-report-card-message-list-btn select-btn message-1\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<button class=\"call-report-card-message-list-btn select-btn message-2\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<button class=\"call-report-card-message-list-btn select-btn message-3\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<div class=\"product-promotion-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table-cell.jade" ));
buf.push("<input type=\"checkbox\" class=\"promotion-item check-box\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "tr.product-general-block\n  td\n    .call-report-card-control-wrapper\n      .call-report-card-expand-btn-wrapper\n        button.call-report-card-expand-btn\n      button.call-report-card-product-list-btn.select-btn\n  td\n    textarea.call-report-card-product-comment.text-field-block(rows=\"1\",data-placehoder='&nbsp;')\ntr.product-expand-block\n  td\n    .td-content-wrapper\n      .product-expand-wrapper\n        .product-message-block\n          p(data-i18n=\"card.CallReport.Product.MarketingMessage1\")\n          p(data-i18n=\"card.CallReport.Product.MarketingMessage2\")\n          p(data-i18n=\"card.CallReport.Product.MarketingMessage3\")\n        .product-promotion-item\n          p(data-i18n=\"card.CallReport.Product.PromotionalItem\")\n  td\n    .td-content-wrapper\n      .product-expand-wrapper\n        .product-message-block\n          button.call-report-card-message-list-btn.select-btn.message-1\n          button.call-report-card-message-list-btn.select-btn.message-2\n          button.call-report-card-message-list-btn.select-btn.message-3\n        .product-promotion-item\n          input(type=\"checkbox\").promotion-item.check-box");
}
};}, "views/call-report-card/call-report-card-products-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
buf.push("<tr>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
buf.push("<th data-i18n=\"common:names.ProductDiscussed\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-products-table.jade" ));
buf.push("<th data-i18n=\"common:names.NotesForProducts\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "colgroup\n  col\n  col\nthead\n  tr\n    th(data-i18n=\"common:names.ProductDiscussed\")\n    th(data-i18n=\"common:names.NotesForProducts\")");
}
};}, "views/call-report-card/call-report-card-view": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"wrapper flex-element\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"columns with-separator\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row call-report-card-date-time-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.DateTime\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-date-time calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Organization\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-organization hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Customer\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-customer hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Specialty\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-speciality\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Type\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.User\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.TargetCustomer\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-target-customer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.CallReport.GeneralInfoFields.TargetPriority\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-target-prority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.JointVisit\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 33, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-joint-visit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 34, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.JointVisitUser\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 36, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-joint-visit-user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 37, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row signature-taken\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 38, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.SignatureTaken\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 39, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-signature-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 40, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-row type-of-visit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 41, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.TypeOfVisit\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 42, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"info-cell value call-report-card-type-of-visit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 43, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"comments-group\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 44, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"comment-block left\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 45, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<h2 data-i18n=\"card.GeneralInfoFields.CallComments\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 46, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 47, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 48, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<p class=\"call-comments\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 49, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"comment-block right\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 50, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<h2 data-i18n=\"card.GeneralInfoFields.NextCallObjectives\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 51, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 52, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 53, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card-view.jade" ));
buf.push("<p class=\"call-objectives\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element\n  .scroll-content\n    .general-info\n      .columns.with-separator\n        .column\n          .info-row.call-report-card-date-time-wrapper\n            .info-cell(data-i18n=\"card.GeneralInfoFields.DateTime\")\n            .info-cell.value.call-report-card-date-time.calendar\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Organization\")\n            .info-cell.value.call-report-card-organization.hyperlink\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Customer\")\n            .info-cell.value.call-report-card-customer.hyperlink\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Specialty\")\n            .info-cell.value.call-report-card-speciality\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Type\")\n            .info-cell.value.call-report-card-type\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.User\")\n            .info-cell.value.call-report-card-user\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.TargetCustomer\")\n            .info-cell.value.call-report-card-target-customer\n          .info-row\n            .info-cell(data-i18n=\"card.CallReport.GeneralInfoFields.TargetPriority\")\n            .info-cell.value.call-report-card-target-prority\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.JointVisit\")\n            .info-cell.value.call-report-card-joint-visit\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.JointVisitUser\")\n            .info-cell.value.call-report-card-joint-visit-user\n          .info-row.signature-taken\n            .info-cell(data-i18n=\"card.GeneralInfoFields.SignatureTaken\")\n            .info-cell.value.call-report-card-signature-date\n          .info-row.type-of-visit\n            .info-cell(data-i18n=\"card.GeneralInfoFields.TypeOfVisit\")\n            .info-cell.value.call-report-card-type-of-visit\n      .comments-group\n        .comment-block.left\n          h2.blue-header(data-i18n=\"card.GeneralInfoFields.CallComments\")\n          .scroll-container\n            .scroll-content\n              p.call-comments\n        .comment-block.right\n          h2.blue-header(data-i18n=\"card.GeneralInfoFields.NextCallObjectives\")\n          .scroll-container\n            .scroll-content\n              p.call-objectives");
}
};}, "views/call-report-card/call-report-card": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"wrapper flex-element\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"columns with-separator\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Customer\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value call-report-card-customer hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Organization\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value call-report-card-organization hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.JointVisit\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<button class=\"select-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"call-report-card-joint-visit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.JointVisitUser\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div rows=\"1\" data-i18n=\"card.GeneralInfoFields.JointVisitUserPlaceholder\" class=\"info-cell text-field-block call-report-card-joint-visit-user placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row type-of-visit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.TypeOfVisit\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<button class=\"select-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"call-report-card-type-of-visit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Specialty\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value call-report-card-speciality\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.User\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value call-report-card-user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row call-report-card-date-time-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 33, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.DateTime\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 34, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value call-report-card-date-time bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row call-report-card-duration-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 36, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Duration\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 37, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value call-report-card-duration bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 38, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-row signature\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 39, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Signature\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 40, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 41, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<img class=\"call-report-card-signature\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 42, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"comments-group\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 43, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"comment-block left\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 44, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<h2 data-i18n=\"card.GeneralInfoFields.CallComments\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 45, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<textarea data-i18n=\"[data-placeholder]commentView.Placeholder\" class=\"call-comments text-area\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 46, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<div class=\"comment-block right\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 47, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<h2 data-i18n=\"card.GeneralInfoFields.NextCallObjectives\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 48, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/call-report-card.jade" ));
buf.push("<textarea data-i18n=\"[data-placeholder]commentView.Placeholder\" class=\"call-objectives text-area\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element\n  .scroll-content\n    .general-info\n      .columns.with-separator\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Customer\")\n            .info-cell.value.call-report-card-customer.hyperlink\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Organization\")\n            .info-cell.value.call-report-card-organization.hyperlink\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.JointVisit\")\n            .info-cell.value\n              button.select-btn\n                span.call-report-card-joint-visit(data-i18n=\"common:defaultSelectValue\")\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.JointVisitUser\")\n            .info-cell.text-field-block.call-report-card-joint-visit-user.placeholder(rows=\"1\",data-i18n=\"card.GeneralInfoFields.JointVisitUserPlaceholder\")\n          .info-row.type-of-visit\n            .info-cell(data-i18n=\"card.GeneralInfoFields.TypeOfVisit\")\n            .info-cell.value\n              button.select-btn\n                span.call-report-card-type-of-visit(data-i18n=\"common:defaultSelectValue\")\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Specialty\")\n            .info-cell.value.call-report-card-speciality\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.User\")\n            .info-cell.value.call-report-card-user\n          .info-row.call-report-card-date-time-wrapper\n            .info-cell(data-i18n=\"card.GeneralInfoFields.DateTime\")\n            .info-cell.value.call-report-card-date-time.bit-button-pseudo.calendar\n          .info-row.call-report-card-duration-wrapper\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Duration\")\n            .info-cell.value.call-report-card-duration.bit-button-pseudo.calendar\n          .info-row.signature\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Signature\")\n            .info-cell.value\n              img.call-report-card-signature\n      .comments-group\n        .comment-block.left\n          h2.blue-header(data-i18n=\"card.GeneralInfoFields.CallComments\")\n          textarea.call-comments.text-area(data-i18n=\"[data-placeholder]commentView.Placeholder\")\n        .comment-block.right\n          h2.blue-header(data-i18n=\"card.GeneralInfoFields.NextCallObjectives\")\n          textarea.call-objectives.text-area(data-i18n=\"[data-placeholder]commentView.Placeholder\")");
}
};}, "views/call-report-card/portfolio/portfolio": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ));
buf.push("<div class=\"top-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ));
buf.push("<h2 data-i18n=\"card.CallReport.Portfolio.PatientProfilesTitle\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ));
buf.push("<button class=\"full-screen-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ));
buf.push("<button class=\"full-screen-icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/portfolio.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".top-panel\n  h2(data-i18n=\"card.CallReport.Portfolio.PatientProfilesTitle\")\n  button.full-screen-btn\n  button.full-screen-icon\n.scroll-container\n  .scroll-content\n\n");
}
};}, "views/call-report-card/portfolio/profile-item": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<button class=\"select-btn expand-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<p class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<strong class=\"profile-title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</strong>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<strong>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, jade_debug[0].filename ));
buf.push("&#32;-&#32;");
jade_debug.shift();
jade_debug.shift();
buf.push("</strong>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<strong class=\"product-title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</strong>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<div class=\"table-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<table class=\"profile-table\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<tr class=\"general-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<div class=\"call-report-card-control-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<button data-i18n=\"card.CallReport.Portfolio.ChoosePatientProfile\" class=\"call-report-card-patient-profile-list-btn select-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<button data-i18n=\"card.CallReport.Portfolio.ChooseProduct\" class=\"select-btn choose-product\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<tr class=\"expand-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<div class=\"call-report-card-contact-info-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span data-i18n=\"card.CallReport.Portfolio.GeneralInfo.Age\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span class=\"call-report-card-contact-info-age\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span data-i18n=\"card.CallReport.Portfolio.GeneralInfo.Gender\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span class=\"call-report-card-contact-info-gender\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span data-i18n=\"card.CallReport.Portfolio.GeneralInfo.GeneralHealth\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span class=\"call-report-card-contact-info-general-health\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span data-i18n=\"card.CallReport.Portfolio.GeneralInfo.OccupationSocialEnvironment\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span class=\"call-report-card-contact-info-occupation\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 33, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span data-i18n=\"card.CallReport.Portfolio.GeneralInfo.BodyMassIndex\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 34, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span class=\"call-report-card-contact-info-bmi\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 36, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span data-i18n=\"card.CallReport.Portfolio.GeneralInfo.Diseases\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 37, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span class=\"call-report-card-contact-info-diseases\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 38, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 39, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<div class=\"product-message-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 40, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<button data-i18n=\"card.CallReport.Portfolio.Classification\" class=\"select-btn call-report-card-classification\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 41, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.CallReport.Portfolio.NoteForProduct\" readonly=\"readonly\" class=\"call-report-card-product-comment text-field-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 42, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<button data-i18n=\"card.CallReport.Product.MarketingMessage1\" class=\"call-report-card-message-list-btn select-btn message-1\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 43, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<button data-i18n=\"card.CallReport.Product.MarketingMessage2\" class=\"call-report-card-message-list-btn select-btn message-2\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 44, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<button data-i18n=\"card.CallReport.Product.MarketingMessage3\" class=\"call-report-card-message-list-btn select-btn message-3\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 45, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<div class=\"product-promotion-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 46, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<span data-i18n=\"card.CallReport.Portfolio.PromotionItem\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 47, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/profile-item.jade" ));
buf.push("<input type=\"checkbox\" class=\"promotion-item check-box\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "button.select-btn.expand-btn\n  p.title\n    strong.profile-title\n    strong &#32;-&#32;\n    strong.product-title\n.table-wrapper\n  table.profile-table\n    colgroup\n      col\n      col\n    tr.general-block\n      td\n        .call-report-card-control-wrapper\n          button.call-report-card-patient-profile-list-btn.select-btn(data-i18n=\"card.CallReport.Portfolio.ChoosePatientProfile\")\n      td\n        button.select-btn.choose-product(data-i18n=\"card.CallReport.Portfolio.ChooseProduct\")\n    tr.expand-block\n      td\n        .call-report-card-contact-info-wrapper\n          p\n            span(data-i18n=\"card.CallReport.Portfolio.GeneralInfo.Age\")\n            span.call-report-card-contact-info-age\n          p\n            span(data-i18n=\"card.CallReport.Portfolio.GeneralInfo.Gender\")\n            span.call-report-card-contact-info-gender\n          p\n            span(data-i18n=\"card.CallReport.Portfolio.GeneralInfo.GeneralHealth\")\n            span.call-report-card-contact-info-general-health\n          p\n            span(data-i18n=\"card.CallReport.Portfolio.GeneralInfo.OccupationSocialEnvironment\")\n            span.call-report-card-contact-info-occupation\n          p\n            span(data-i18n=\"card.CallReport.Portfolio.GeneralInfo.BodyMassIndex\")\n            span.call-report-card-contact-info-bmi\n          p\n            span(data-i18n=\"card.CallReport.Portfolio.GeneralInfo.Diseases\")\n            span.call-report-card-contact-info-diseases\n      td\n        .product-message-block\n          button.select-btn.call-report-card-classification(data-i18n=\"card.CallReport.Portfolio.Classification\")\n          textarea.call-report-card-product-comment.text-field-block(rows=\"1\",data-i18n=\"[data-placeholder]card.CallReport.Portfolio.NoteForProduct\",readonly)\n          button.call-report-card-message-list-btn.select-btn.message-1(data-i18n=\"card.CallReport.Product.MarketingMessage1\")\n          button.call-report-card-message-list-btn.select-btn.message-2(data-i18n=\"card.CallReport.Product.MarketingMessage2\")\n          button.call-report-card-message-list-btn.select-btn.message-3(data-i18n=\"card.CallReport.Product.MarketingMessage3\")\n        .product-promotion-item\n          span(data-i18n=\"card.CallReport.Portfolio.PromotionItem\")\n          input(type=\"checkbox\").promotion-item.check-box");
}
};}, "views/call-report-card/portfolio/summary": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"top-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<h2 data-i18n=\"card.CallReport.Portfolio.SummaryTitle\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"portfolio-presentation\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"columns\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div data-i18n=\"card.CallReport.Portfolio.FullPortfolioReminder\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<button class=\"select-btn full-portfolio-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div data-i18n=\"card.CallReport.Portfolio.PatientSupportProgram\" class=\"info-cell support-program\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<input type=\"checkbox\" class=\"check-box\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"comments-group\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"comment-block left\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<h2 data-i18n=\"card.CallReport.Portfolio.PortfolioFeedback\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<textarea data-i18n=\"[data-placeholder]card.CallReport.Portfolio.TypeFeedback\" class=\"portfolio-feedback text-area\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<div class=\"comment-block right\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<h2 data-i18n=\"card.CallReport.Portfolio.PatientSupport\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/call-report-card/portfolio/summary.jade" ));
buf.push("<textarea data-i18n=\"[data-placeholder]commentView.Placeholder\" class=\"patient-support text-area\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".top-panel\n  h2(data-i18n=\"card.CallReport.Portfolio.SummaryTitle\")\n.content\n  .portfolio-presentation\n    .general-info\n      .columns\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.CallReport.Portfolio.FullPortfolioReminder\")\n            .info-cell.value\n              button.select-btn.full-portfolio-btn\n                span(data-i18n=\"common:defaultSelectValue\")\n        .column\n          .info-row\n            .info-cell.support-program(data-i18n=\"card.CallReport.Portfolio.PatientSupportProgram\")\n            .info-cell.value\n              input.check-box(type='checkbox')\n  .comments-group\n    .comment-block.left\n      h2.blue-header(data-i18n=\"card.CallReport.Portfolio.PortfolioFeedback\")\n      textarea.portfolio-feedback.text-area(data-i18n=\"[data-placeholder]card.CallReport.Portfolio.TypeFeedback\")\n    .comment-block.right\n      h2.blue-header(data-i18n=\"card.CallReport.Portfolio.PatientSupport\")\n      textarea.patient-support.text-area(data-i18n=\"[data-placeholder]commentView.Placeholder\")\n\n\n");
}
};}, "views/comment/comment": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ));
buf.push("<div data-i18n=\"commentView.Placeholder\" class=\"placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ));
buf.push("<textarea align=\"top\" rows=\"1\" class=\"input\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ));
buf.push("<div class=\"btnCancel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ));
buf.push("<span data-i18n=\"common:buttons.CancelBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ));
buf.push("<div class=\"btnDone\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/comment/comment.jade" ));
buf.push("<span data-i18n=\"common:buttons.DoneBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".placeholder(data-i18n=\"commentView.Placeholder\")\ntextarea(class=\"input\",align=\"top\",rows=\"1\")\n\n.btnCancel\n   span(data-i18n=\"common:buttons.CancelBtn\")\n\n.btnDone\n   span(data-i18n=\"common:buttons.DoneBtn\")\n\n\n\n\n");
}
};}, "views/contact-card/contact-card-activities-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis time\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis next-call\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "td\n  div.ellipsis.type\ntd\n  div.ellipsis.date\ntd\n  div.ellipsis.time\ntd\n  div.ellipsis.user\ntd\n  div.ellipsis.next-call");
}
};}, "views/contact-card/contact-card-activities-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<table class=\"card-table activity\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<tr>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.Type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.Date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.Time\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.User\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.NextCallObjectives\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-activities-table.jade" ));
buf.push("<tbody>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</tbody>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "table.card-table.activity\n  colgroup\n    col\n    col\n    col\n    col\n    col\n  thead\n    tr\n      th(data-i18n=\"common:names.Type\")\n      th(data-i18n=\"common:names.Date\")\n      th(data-i18n=\"common:names.Time\")\n      th(data-i18n=\"common:names.User\")\n      th(data-i18n=\"common:names.NextCallObjectives\")\n  tbody");
}
};}, "views/contact-card/contact-card-references-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<td class=\"status\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<td class=\"primary\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<div class=\"check-box centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<td class=\"appt\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<div class=\"bit-button clock centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<td class=\"call-report\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<div class=\"bit-button phone centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table-cell.jade" ));
buf.push("<div class=\"ellipsis organization hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "td.status\ntd.primary\n  .check-box.centered\ntd.appt\n  .bit-button.clock.centered\ntd.call-report\n  .bit-button.phone.centered\ntd\n  div.ellipsis.organization.hyperlink");
}
};}, "views/contact-card/contact-card-references-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<table class=\"card-table references\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<tr>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.Status\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.Primary\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.Appt\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.CallReport\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.Organization\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card-references-table.jade" ));
buf.push("<tbody>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</tbody>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "table.card-table.references\n  colgroup\n    col\n    col\n    col\n    col\n    col\n  thead\n    tr\n      th(data-i18n=\"common:names.Status\")\n      th(data-i18n=\"common:names.Primary\")\n      th(data-i18n=\"common:names.Appt\")\n      th(data-i18n=\"common:names.CallReport\")\n      th(data-i18n=\"common:names.Organization\")\n  tbody\n");
}
};}, "views/contact-card/contact-card": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"wrapper flex-element\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"columns\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Name\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-full-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Status\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-status\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.TargetCustomer\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-target-customer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Type\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-record-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.Contact.GeneralInfoFields.AbbottSpecialty\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-abbott-specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Priority\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-priority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Specialty\" class=\"info-cell break-before\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.Contact.GeneralInfoFields.MobilePhone\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-mobile-phone\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.Contact.GeneralInfoFields.Email\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 33, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-email\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 34, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div data-i18n=\"card.Contact.GeneralInfoFields.KOL\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 36, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"info-cell value contact-card-kol\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 37, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"comment-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 38, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<h2 data-i18n=\"card.GeneralInfoFields.Description\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 39, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<textarea class=\"text-area contact-card-description disabled\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 41, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"references-table-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 42, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<h2 data-i18n=\"card.ReferencesTableTitle\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 43, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"references-table-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 45, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"activities-table-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 46, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<h2 data-i18n=\"card.InFieldActivitiesTableTitle\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 47, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contact-card/contact-card.jade" ));
buf.push("<div class=\"activities-table-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element\n  .scroll-content\n    .general-info\n      .columns\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Name\")\n            .info-cell.value.contact-card-full-name\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Status\")\n            .info-cell.value.contact-card-status\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.TargetCustomer\")\n            .info-cell.value.contact-card-target-customer\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Type\")\n            .info-cell.value.contact-card-record-type\n          .info-row\n            .info-cell(data-i18n=\"card.Contact.GeneralInfoFields.AbbottSpecialty\")\n            .info-cell.value.contact-card-abbott-specialty\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Priority\")\n            .info-cell.value.contact-card-priority\n          .info-row\n            .info-cell.break-before(data-i18n=\"card.GeneralInfoFields.Specialty\")\n            .info-cell.value.contact-card-specialty\n          .info-row\n            .info-cell(data-i18n=\"card.Contact.GeneralInfoFields.MobilePhone\")\n            .info-cell.value.contact-card-mobile-phone\n          .info-row\n            .info-cell(data-i18n=\"card.Contact.GeneralInfoFields.Email\")\n            .info-cell.value.contact-card-email\n          .info-row\n            .info-cell(data-i18n=\"card.Contact.GeneralInfoFields.KOL\")\n            .info-cell.value.contact-card-kol\n      .comment-block\n        h2.blue-header(data-i18n=\"card.GeneralInfoFields.Description\")\n        textarea.text-area.contact-card-description.disabled\n\n    .references-table-wrapper\n      h2.blue-header(data-i18n=\"card.ReferencesTableTitle\")\n      .references-table-container\n\n    .activities-table-wrapper\n      h2.blue-header(data-i18n=\"card.InFieldActivitiesTableTitle\")\n      .activities-table-container");
}
};}, "views/contacts/contacts-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"ellipsis contact\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"ellipsis priority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"ellipsis specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"ellipsis at-calls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"ellipsis last-call\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col contact-organization-cell hyperlink v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"ellipsis organization\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col appt h-centered v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"bit-button clock centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"col call-report h-centered v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/contacts/contacts-table-cell.jade" ));
buf.push("<div class=\"bit-button phone centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered\n  .ellipsis.contact\n.col.v-centered.h-centered\n  .ellipsis.priority\n.col.v-centered\n  .ellipsis.specialty\n.col.v-centered.h-centered\n  .ellipsis.at-calls\n.col.v-centered.h-centered\n  .ellipsis.last-call\n.col.contact-organization-cell.hyperlink.v-centered\n  .ellipsis.organization\n.col.appt.h-centered.v-centered\n  .bit-button.clock.centered\n.col.call-report.h-centered.v-centered\n  .bit-button.phone.centered");
}
};}, "views/controls/bottom-menu/bottom-menu": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<li data-action=\"alarm\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<div class=\"alarm\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<span data-i18n=\"homeMenu.Alarm\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<li data-action=\"helpdesk\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<div class=\"helpdesk\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<span data-i18n=\"homeMenu.Helpdesk\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<li data-action=\"language\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<div class=\"language\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<span data-i18n=\"homeMenu.Language\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<li data-action=\"dynamicAgenda\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<div class=\"dynamicAgenda\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<span data-i18n=\"homeMenu.DynamicAgenda\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<li data-action=\"lock\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<div class=\"lock\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<span data-i18n=\"homeMenu.Lock\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<li data-action=\"logout\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<div class=\"logout\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/bottom-menu/bottom-menu.jade" ));
buf.push("<span data-i18n=\"homeMenu.Logout\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "li(data-action='alarm')\n\t.alarm\n\tspan(data-i18n=\"homeMenu.Alarm\")\nli(data-action='helpdesk')\n\t.helpdesk\n\tspan(data-i18n=\"homeMenu.Helpdesk\")\nli(data-action='language')\n\t.language\n\tspan(data-i18n=\"homeMenu.Language\")\nli(data-action='dynamicAgenda')\n\t.dynamicAgenda\n\tspan(data-i18n=\"homeMenu.DynamicAgenda\")\nli(data-action='lock')\n\t.lock\n\tspan(data-i18n=\"homeMenu.Lock\")\nli(data-action='logout')\n\t.logout\n\tspan(data-i18n=\"homeMenu.Logout\")");
}
};}, "views/controls/header/base-header": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/base-header.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/base-header.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/base-header.jade" ));
buf.push("<div class=\"left-controls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/base-header.jade" ));
buf.push("<h1 class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, jade_debug[0].filename ));
buf.push("Title");
jade_debug.shift();
jade_debug.shift();
buf.push("</h1>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/base-header.jade" ));
buf.push("<div class=\"right-controls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".left-controls\nh1.title Title\n.right-controls");
}
};}, "views/controls/header/header": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/header.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/header.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/header.jade" ));
buf.push("<div data-i18n=\"common:buttons.Back\" class=\"back\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/header.jade" ));
buf.push("<div class=\"left-controls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/header.jade" ));
buf.push("<h1 class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, jade_debug[0].filename ));
buf.push("Title");
jade_debug.shift();
jade_debug.shift();
buf.push("</h1>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header/header.jade" ));
buf.push("<div class=\"right-controls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".back(data-i18n=\"common:buttons.Back\")\n.left-controls\nh1.title Title\n.right-controls");
}
};}, "views/controls/header-controls/header-date-time-control": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header-controls/header-date-time-control.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header-controls/header-date-time-control.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header-controls/header-date-time-control.jade" ));
buf.push("<div class=\"header-date-time-title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header-controls/header-date-time-control.jade" ));
buf.push("<div class=\"header-date-time-value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/header-controls/header-date-time-control.jade" ));
buf.push("<div class=\"header-date-time-calendar bit-button calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".header-date-time-title\n.header-date-time-value\n.header-date-time-calendar.bit-button.calendar");
}
};}, "views/controls/popups/base-popup": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/base-popup.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/base-popup.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/base-popup.jade" ));
buf.push("<div class=\"popup-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/base-popup.jade" ));
buf.push("<div class=\"popup-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/base-popup.jade" ));
buf.push("<header>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</header>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/base-popup.jade" ));
buf.push("<div class=\"content-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/base-popup.jade" ));
buf.push("<div class=\"buttons-section\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".popup-wrapper\n  .popup-container\n    header\n    .content-container\n    .buttons-section\n");
}
};}, "views/controls/popups/header-with-back-button": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/header-with-back-button.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/header-with-back-button.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/header-with-back-button.jade" ));
buf.push("<div data-i18n=\"common:buttons.Back\" class=\"back\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".back(data-i18n=\"common:buttons.Back\")");
}
};}, "views/controls/popups/partial-controls/alert-buttons": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/alert-buttons.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/alert-buttons.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/alert-buttons.jade" ));
buf.push("<div class=\"btn yes\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/alert-buttons.jade" ));
buf.push("<span data-i18n=\"common:buttons.OkBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".btn.yes\n  span(data-i18n=\"common:buttons.OkBtn\")");
}
};}, "views/controls/popups/partial-controls/confirm-buttons": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/confirm-buttons.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/confirm-buttons.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/confirm-buttons.jade" ));
buf.push("<div class=\"btn yes\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/confirm-buttons.jade" ));
buf.push("<span data-i18n=\"common:buttons.YesBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/confirm-buttons.jade" ));
buf.push("<div class=\"btn no\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/confirm-buttons.jade" ));
buf.push("<span data-i18n=\"common:buttons.NoBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".btn.yes\n  span(data-i18n=\"common:buttons.YesBtn\")\n.btn.no\n  span(data-i18n=\"common:buttons.NoBtn\")\n");
}
};}, "views/controls/popups/partial-controls/done-buttons": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/done-buttons.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/done-buttons.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/done-buttons.jade" ));
buf.push("<div class=\"btn yes\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/done-buttons.jade" ));
buf.push("<span data-i18n=\"common:buttons.DoneBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".btn.yes\n  span(data-i18n=\"common:buttons.DoneBtn\")");
}
};}, "views/controls/popups/partial-controls/popup-list-item": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/popup-list-item.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (model) {
jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/popup-list-item.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/popup-list-item.jade" ));
buf.push("<label" + (jade.attr("for", '' + (model.id) + '', true, false)) + ">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 1, jade_debug[0].filename ));
buf.push("" + (jade.escape((jade_interp = model.description) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</label>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/partial-controls/popup-list-item.jade" ));
buf.push("<input" + (jade.attr("id", '' + (model.id) + '', true, false)) + " type=\"radio\" name=\"items\" class=\"input check-box\"/>");
jade_debug.shift();
jade_debug.shift();}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "label(for='#{model.id}') #{model.description}\ninput.input.check-box(id='#{model.id}', type='radio', name='items')");
}
};}, "views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
buf.push("<td class=\"name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
buf.push("<td class=\"age\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
buf.push("<td class=\"gender\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
buf.push("<td class=\"general-health\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
buf.push("<td class=\"occupation\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
buf.push("<td class=\"bmi\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table-cell.jade" ));
buf.push("<td class=\"diseases\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "td.name\ntd.age\ntd.gender\ntd.general-health\ntd.occupation\ntd.bmi\ntd.diseases");
}
};}, "views/controls/popups/patient-profiles-popup/patient-profiles-popup-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<table class=\"card-table header-table\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<tr>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<th data-i18n=\"patientProfilePopup.Header.Name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<th data-i18n=\"patientProfilePopup.Header.Age\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<th data-i18n=\"patientProfilePopup.Header.Gender\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<th data-i18n=\"patientProfilePopup.Header.GeneralHealth\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<th data-i18n=\"patientProfilePopup.Header.Occupation\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<th data-i18n=\"patientProfilePopup.Header.BMI\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<th data-i18n=\"patientProfilePopup.Header.Diseases\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<table class=\"card-table body-table\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/patient-profiles-popup/patient-profiles-popup-table.jade" ));
buf.push("<tbody>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</tbody>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "table.card-table.header-table\n  colgroup\n    col\n    col\n    col\n    col\n    col\n    col\n    col\n  thead\n    tr\n      th(data-i18n=\"patientProfilePopup.Header.Name\")\n      th(data-i18n=\"patientProfilePopup.Header.Age\")\n      th(data-i18n=\"patientProfilePopup.Header.Gender\")\n      th(data-i18n=\"patientProfilePopup.Header.GeneralHealth\")\n      th(data-i18n=\"patientProfilePopup.Header.Occupation\")\n      th(data-i18n=\"patientProfilePopup.Header.BMI\")\n      th(data-i18n=\"patientProfilePopup.Header.Diseases\")\n.scroll-container\n  .scroll-content\n    table.card-table.body-table\n      colgroup\n        col\n        col\n        col\n        col\n        col\n        col\n        col\n      tbody");
}
};}, "views/controls/popups/pending-popup": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/pending-popup.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/pending-popup.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/pending-popup.jade" ));
buf.push("<div class=\"spin\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/pending-popup.jade" ));
buf.push("<p data-i18n=\"pendingPopup.PleaseWaitMessage\" class=\"wait\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".spin\np.wait(data-i18n=\"pendingPopup.PleaseWaitMessage\")\n");
}
};}, "views/controls/popups/promotion-note-popup/promotion-note-popup-content": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-content.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-content.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-content.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-content.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".scroll-container\n  .scroll-content");
}
};}, "views/controls/popups/promotion-note-popup/promotion-note-popup-header": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-header.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-header.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-header.jade" ));
buf.push("<h3 class=\"note-title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h3>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-note-popup/promotion-note-popup-header.jade" ));
buf.push("<button class=\"cross\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "h3.note-title\nbutton.cross");
}
};}, "views/controls/popups/promotion-popup/notes-attachments-popup-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<div class=\"cell-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<div class=\"file-icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<p class=\"file-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, jade_debug[0].filename ));
buf.push("file");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<div class=\"cell-container name-bar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<p class=\"name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<div class=\"progress-bar-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<div class=\"cell-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/notes-attachments-popup-table-cell.jade" ));
buf.push("<div class=\"check-box\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".cell-container\n\t.file-icon\n\t\tp.file-type file\n.cell-container.name-bar\n\tp.name\n\t.progress-bar-holder\n.cell-container\n\t.check-box");
}
};}, "views/controls/popups/promotion-popup/promotion-popup-content": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<h5>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h5>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dl>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dt data-i18n=\"common:names.StartDate\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</dt>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dd class=\"start-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</dd>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dt data-i18n=\"common:names.EndDate\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</dt>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dd class=\"end-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</dd>");
jade_debug.shift();
jade_debug.shift();
buf.push("</dl>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dl>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dt data-i18n=\"common:names.Contract\" class=\"contact\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</dt>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dd class=\"lage-column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<span class=\"contact-number\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</dd>");
jade_debug.shift();
jade_debug.shift();
buf.push("</dl>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dl>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dt data-i18n=\"common:names.Objectives\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</dt>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dd class=\"lage-column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<span class=\"objectives\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</dd>");
jade_debug.shift();
jade_debug.shift();
buf.push("</dl>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dl>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dt data-i18n=\"common:names.Description\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</dt>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<dd class=\"lage-column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<span class=\"description\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</dd>");
jade_debug.shift();
jade_debug.shift();
buf.push("</dl>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<div class=\"segments-holder scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup-content.jade" ));
buf.push("<footer>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</footer>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".general-info\n  h5\n  dl\n    dt(data-i18n=\"common:names.StartDate\")\n    dd.start-date\n    dt(data-i18n=\"common:names.EndDate\")\n    dd.end-date\n  dl\n    dt.contact(data-i18n=\"common:names.Contract\")\n    dd.lage-column\n      span.contact-number\n  dl\n    dt(data-i18n=\"common:names.Objectives\")\n    dd.lage-column\n      span.objectives\n  dl\n    dt(data-i18n=\"common:names.Description\")\n    dd.lage-column\n      span.description\n\n.segments-holder.scroll-container\n\nfooter");
}
};}, "views/controls/popups/promotion-popup/promotion-popup": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"popup-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"popup-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"popup-content-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"popup-main-content-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<header>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<h3>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<span class=\"user-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<span>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, jade_debug[0].filename ));
buf.push("&nbsp;-&nbsp;");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<span data-i18n=\"PromotionPopup.Header\" class=\"promo\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</h3>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<button class=\"cross\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</header>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"content-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"buttons-section\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"note-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<header>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<button data-i18n=\"common:buttons.Back\" class=\"back\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<h6>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h6>");
jade_debug.shift();
jade_debug.shift();
buf.push("</header>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/popups/promotion-popup/promotion-popup.jade" ));
buf.push("<p class=\"note-body scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".popup-wrapper\n  .popup-container\n    .popup-content-holder\n      .popup-main-content-holder\n        header\n          h3\n            span.user-name\n            span &nbsp;-&nbsp;\n            span.promo(data-i18n=\"PromotionPopup.Header\")\n          button.cross\n        .content-container\n        .buttons-section\n\n      .note-holder\n        header\n          button.back(data-i18n=\"common:buttons.Back\")\n          h6\n        .scroll-container\n          p.note-body.scroll-content");
}
};}, "views/controls/progress-bar/progress-bar": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/progress-bar/progress-bar.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/progress-bar/progress-bar.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/progress-bar/progress-bar.jade" ));
buf.push("<div class=\"progress-fill-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/progress-bar/progress-bar.jade" ));
buf.push("<div class=\"progress-fill\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/progress-bar/progress-bar.jade" ));
buf.push("<div class=\"progress-value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".progress-fill-wrapper\n  .progress-fill\n.progress-value");
}
};}, "views/controls/table/table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-cell.jade" ));
buf.push("<div class=\"cell-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-cell.jade" ));
buf.push("<div class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".cell-container\n\t.title");
}
};}, "views/controls/table/table-controller": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-controller.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-controller.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-controller.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}, "views/controls/table/table-header": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-header.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-header.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/controls/table/table-header.jade" ));
buf.push("<div class=\"row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".row");
}
};}, "views/helpdesk/device-info": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (device) {
jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<div class=\"device-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<div class=\"info-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p data-i18n=\"helpdesk.InfoPanel.DeviceId\" class=\"cell caption\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p class=\"cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, jade_debug[0].filename ));
buf.push("" + (jade.escape((jade_interp = device.id) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<div class=\"info-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p data-i18n=\"helpdesk.InfoPanel.Version\" class=\"cell caption\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p class=\"cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, jade_debug[0].filename ));
buf.push("" + (jade.escape((jade_interp = device.appVersion) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<div class=\"info-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p data-i18n=\"helpdesk.OSVersion\" class=\"cell caption\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p class=\"cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, jade_debug[0].filename ));
buf.push("" + (jade.escape((jade_interp = device.osVersion) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<div class=\"info-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p data-i18n=\"helpdesk.InfoPanel.Model\" class=\"cell caption\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/device-info.jade" ));
buf.push("<p class=\"cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, jade_debug[0].filename ));
buf.push("" + (jade.escape((jade_interp = device.model) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();}.call(this,"device" in locals_for_with?locals_for_with.device:typeof device!=="undefined"?device:undefined));;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".device-info\n\t.info-item\n\t\tp.cell.caption(data-i18n=\"helpdesk.InfoPanel.DeviceId\")\n\t\tp.cell.value #{device.id}\n\t.info-item\n\t\tp.cell.caption(data-i18n=\"helpdesk.InfoPanel.Version\")\n\t\tp.cell.value #{device.appVersion}\n\t.info-item\n\t\tp.cell.caption(data-i18n=\"helpdesk.OSVersion\")\n\t\tp.cell.value #{device.osVersion}\n\t.info-item\n\t\tp.cell.caption(data-i18n=\"helpdesk.InfoPanel.Model\")\n\t\tp.cell.value #{device.model}");
}
};}, "views/helpdesk/helpdesk": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"wrapper flex-element\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"helpdesk-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"actions-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"action call\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<p data-i18n=\"helpdesk.CallCenter\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<p data-i18n=\"helpdesk.PhoneNumber\" class=\"phone-number\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"action view-log\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div data-i18n=\"helpdesk.ViewLastLog\" class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"action send-log\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div data-i18n=\"helpdesk.SendLogToSupport\" class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"action clear-data\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div data-i18n=\"helpdesk.ClearDatabase\" class=\"title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"main-area\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/helpdesk.jade" ));
buf.push("<div class=\"data-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element\n\t.helpdesk-container\n\t\t.actions-panel\n\t\t\t.action.call\n\t\t\t\t.icon\n\t\t\t\t.title\n\t\t\t\t\tp(data-i18n=\"helpdesk.CallCenter\")\n\t\t\t\t\tp.phone-number(data-i18n=\"helpdesk.PhoneNumber\")\n\t\t\t.action.view-log\n\t\t\t\t.icon\n\t\t\t\t.title(data-i18n=\"helpdesk.ViewLastLog\")\n\t\t\t.action.send-log\n\t\t\t\t.icon\n\t\t\t\t.title(data-i18n=\"helpdesk.SendLogToSupport\")\n\t\t\t.action.clear-data\n\t\t\t\t.icon\n\t\t\t\t.title(data-i18n=\"helpdesk.ClearDatabase\")\n\t\t.main-area\n\t\t\t.data-container\n");
}
};}, "views/helpdesk/view-log": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/view-log.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (logData) {
jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/view-log.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/view-log.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/helpdesk/view-log.jade" ));
buf.push("<p class=\"log-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, jade_debug[0].filename ));
buf.push("" + (((jade_interp = logData) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();}.call(this,"logData" in locals_for_with?locals_for_with.logData:typeof logData!=="undefined"?logData:undefined));;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".scroll-container\n  p.log-content !{logData}");
}
};}, "views/home": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<header>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<img src=\"img/home/new/logo.png\" class=\"logo\"/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<h1 data-i18n=\"home.Title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h1>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span class=\"last-sync-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<button class=\"sync\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</header>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<nav>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<ul>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<li>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<a class=\"contacts\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span data-i18n=\"home.Contacts\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</a>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<a class=\"tour-planning\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span data-i18n=\"home.TourPlanning\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</a>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<li>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<a class=\"activities\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span data-i18n=\"home.Activities\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</a>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<a class=\"tots\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span data-i18n=\"home.TimeOffTerritory\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</a>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<li>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<a class=\"media\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span data-i18n=\"home.Media\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</a>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<a class=\"organizations\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span data-i18n=\"home.Organizations\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</a>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<li class=\"hidden\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<a class=\"dinamic-agenda\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</a>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.shift();
buf.push("</ul>");
jade_debug.shift();
jade_debug.shift();
buf.push("</nav>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<footer>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<ul class=\"closest-calls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<li class=\"first\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<p class=\"name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span class=\"day bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 33, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span class=\"time bit-button-pseudo\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<li class=\"second\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 36, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<p class=\"name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 37, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 38, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span class=\"day bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 39, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span class=\"time bit-button-pseudo\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.shift();
buf.push("</ul>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 41, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<div class=\"info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 42, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<div class=\"icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 43, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/home.jade" ));
buf.push("<span data-i18n=\"home.Info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</footer>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "header\n  img.logo(src=\"img/home/new/logo.png\")\n  h1(data-i18n=\"home.Title\")\n  span(class=\"last-sync-date\")\n  button.sync\n\nnav\n  ul\n    li\n      a.contacts\n        span(data-i18n=\"home.Contacts\")\n      a.tour-planning\n        span(data-i18n=\"home.TourPlanning\")\n    li\n      a.activities\n        span(data-i18n=\"home.Activities\")\n      a.tots\n        span(data-i18n=\"home.TimeOffTerritory\")\n    li\n      a.media\n        span(data-i18n=\"home.Media\")\n      a.organizations\n        span(data-i18n=\"home.Organizations\")\n    li.hidden\n      a.dinamic-agenda\n\nfooter\n  ul.closest-calls\n    li.first\n      p.name\n      p\n        span.day.bit-button-pseudo.calendar\n        span.time.bit-button-pseudo\n\n    li.second\n      p.name\n      p\n        span.day.bit-button-pseudo.calendar\n        span.time.bit-button-pseudo\n\n  div.info\n    .icon\n    span(data-i18n=\"home.Info\")\n");
}
};}, "views/media/media-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (presentation) {
jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<img" + (jade.attr("src", '' + (presentation.iconPath) + '', true, false)) + " class=\"icon\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<div class=\"general col h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<p class=\"pr-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, jade_debug[0].filename ));
buf.push("" + (jade.escape((jade_interp = presentation.name) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<p class=\"pr-version\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, jade_debug[0].filename ));
buf.push("Version &#32;");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<span class=\"currentVersion\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, jade_debug[0].filename ));
buf.push("" + (jade.escape((jade_interp = presentation.currentVersion) == null ? '' : jade_interp)) + "");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<span>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, jade_debug[0].filename ));
buf.push("&#32; is downloaded");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<div class=\"progress col h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<p class=\"progress-bar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<div class=\"size col h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<div>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<span class=\"current-size\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, jade_debug[0].filename ));
buf.push("0");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<span>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, jade_debug[0].filename ));
buf.push("&#32; Mb of &#32;");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<span class=\"total-size\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, jade_debug[0].filename ));
buf.push("total");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<span>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, jade_debug[0].filename ));
buf.push("&#32; Mb");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/media/media-table-cell.jade" ));
buf.push("<div class=\"col v-centered buttons-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();}.call(this,"presentation" in locals_for_with?locals_for_with.presentation:typeof presentation!=="undefined"?presentation:undefined));;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered.h-centered\n    img.icon(src='#{presentation.iconPath}')\n.general.col.h-centered\n  p.pr-name #{presentation.name}\n  p.pr-version Version &#32;\n    span.currentVersion #{presentation.currentVersion}\n    span &#32; is downloaded\n.progress.col.h-centered\n  p.progress-bar\n.size.col.h-centered\n  div\n    span.current-size 0\n    span &#32; Mb of &#32;\n    span.total-size total\n    span &#32; Mb\n.col.v-centered.buttons-panel\n\n\n");
}
};}, "views/organization-card/organization-card-activities-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis time\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis customer hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table-cell.jade" ));
buf.push("<div class=\"ellipsis next-call\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "td\n  div.ellipsis.type\ntd\n  div.ellipsis.date\ntd\n  div.ellipsis.time\ntd\n  div.ellipsis.customer.hyperlink\ntd\n  div.ellipsis.user\ntd\n  div.ellipsis.next-call");
}
};}, "views/organization-card/organization-card-activities-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<table class=\"card-table activity\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.Type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.Date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.Time\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.Customer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.User\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<th data-i18n=\"common:names.NextCallObjectives\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-activities-table.jade" ));
buf.push("<tbody>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</tbody>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "table.card-table.activity\n    colgroup\n        col\n        col\n        col\n        col\n        col\n        col\n    thead\n        th(data-i18n=\"common:names.Type\")\n        th(data-i18n=\"common:names.Date\")\n        th(data-i18n=\"common:names.Time\")\n        th(data-i18n=\"common:names.Customer\")\n        th(data-i18n=\"common:names.User\")\n        th(data-i18n=\"common:names.NextCallObjectives\")\n    tbody");
}
};}, "views/organization-card/organization-card-references-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<td class=\"primary\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<div class=\"check-box centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<td class=\"appt\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<div class=\"bit-button clock centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<td class=\"call-report\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<div class=\"bit-button phone centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table-cell.jade" ));
buf.push("<div class=\"ellipsis customer hyperlink\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "td.primary\n  .check-box.centered\ntd.appt\n  .bit-button.clock.centered\ntd.call-report\n  .bit-button.phone.centered\ntd\n  div.ellipsis.customer.hyperlink");
}
};}, "views/organization-card/organization-card-references-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<table class=\"card-table references\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<colgroup>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<col/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</colgroup>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<tr>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.Primary\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.Appt\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.CallReport\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<th data-i18n=\"common:names.Customer\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card-references-table.jade" ));
buf.push("<tbody>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</tbody>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "table.card-table.references\n  colgroup\n    col\n    col\n    col\n    col\n  thead\n    tr\n      th(data-i18n=\"common:names.Primary\")\n      th(data-i18n=\"common:names.Appt\")\n      th(data-i18n=\"common:names.CallReport\")\n      th(data-i18n=\"common:names.Customer\")\n  tbody");
}
};}, "views/organization-card/organization-card": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"wrapper flex-element\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"columns\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Name\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-cell value organization-card-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Type\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-cell value organization-card-record-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div data-i18n=\"card.Organization.GeneralInfoFields.BillingAddress\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-cell value organization-card-address info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Specialty\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-cell value organization-card-speciality\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div data-i18n=\"card.Organization.GeneralInfoFields.JuridicGroup\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-cell value organization-card-juridic-group\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.Status\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"info-cell value organization-card-status\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"references-table-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<h2 data-i18n=\"card.ReferencesTableTitle\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"references-table-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"activities-table-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<h2 data-i18n=\"card.InFieldActivitiesTableTitle\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organization-card/organization-card.jade" ));
buf.push("<div class=\"activities-table-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element\n  .scroll-content\n    .general-info\n      .columns\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Name\")\n            .info-cell.value.organization-card-name\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Type\")\n            .info-cell.value.organization-card-record-type\n          .info-row\n            .info-cell(data-i18n=\"card.Organization.GeneralInfoFields.BillingAddress\")\n            .info-cell.value.organization-card-address.info-cell.value\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Specialty\")\n            .info-cell.value.organization-card-speciality\n          .info-row\n            .info-cell(data-i18n=\"card.Organization.GeneralInfoFields.JuridicGroup\")\n            .info-cell.value.organization-card-juridic-group\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.Status\")\n            .info-cell.value.organization-card-status\n\n    .references-table-wrapper\n      h2.blue-header(data-i18n=\"card.ReferencesTableTitle\")\n      div.references-table-container\n\n    .activities-table-wrapper\n      h2.blue-header(data-i18n=\"card.InFieldActivitiesTableTitle\")\n      div.activities-table-container");
}
};}, "views/organizations/organizations-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"ellipsis account-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"ellipsis account-record-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"ellipsis specialty\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"ellipsis global-priority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"ellipsis city\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"ellipsis billing-address\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/organizations/organizations-table-cell.jade" ));
buf.push("<div class=\"ellipsis phone\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered\n  .ellipsis.account-name\n.col.v-centered\n  .ellipsis.account-record-type\n.col.v-centered\n  .ellipsis.specialty\n.col.v-centered.h-centered\n  .ellipsis.global-priority\n.col.v-centered\n  .ellipsis.city\n.col.v-centered\n  .ellipsis.billing-address\n.col.v-centered\n  .ellipsis.phone");
}
};}, "views/pe-card/pe-card": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"wrapper flex-element scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"columns\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div data-i18n=\"card.PharmaEvent.GeneralInfoFields.Owner\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-cell value owner\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-row with-select-button\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div data-i18n=\"card.PharmaEvent.GeneralInfoFields.TypeOfEvent\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<button class=\"select-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"event-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.StartDate\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-cell value start-date bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div data-i18n=\"card.PharmaEvent.GeneralInfoFields.BusinessUnit\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-cell value business-unit\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-row with-select-button\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div data-i18n=\"card.PharmaEvent.GeneralInfoFields.Stage\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<button class=\"select-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"stage\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-row appointments-card-date-time-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.EndDate\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"info-cell value end-date bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"columns comments-data\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.EventName\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeName\" class=\"text-area event-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 34, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.Products\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<p class=\"text-area description products\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 37, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.Agenda\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 38, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeAgenda\" class=\"text-area agenda\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 40, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.Evaluation\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 41, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeEvaluation\" class=\"text-area evaluation\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 43, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 44, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.Location\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 45, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeLocation\" class=\"text-area location\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 47, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.Speakers\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 48, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeSpeakers\" class=\"text-area speakers\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 50, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.Objectives\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 51, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeObjectives\" class=\"text-area objectives\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 53, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<h2 data-i18n=\"card.PharmaEvent.GeneralInfoFields.Attendees\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 54, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pe-card/pe-card.jade" ));
buf.push("<p class=\"text-area description attendees\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element.scroll-container\n  .scroll-content\n    .general-info\n      .columns\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Owner\")\n            .info-cell.value.owner\n          .info-row.with-select-button\n            .info-cell(data-i18n=\"card.PharmaEvent.GeneralInfoFields.TypeOfEvent\")\n            .info-cell.value\n              button.select-btn\n                span.event-type(data-i18n=\"common:defaultSelectValue\")\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.StartDate\")\n            .info-cell.value.start-date.bit-button-pseudo.calendar\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.PharmaEvent.GeneralInfoFields.BusinessUnit\")\n            .info-cell.value.business-unit\n          .info-row.with-select-button\n            .info-cell(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Stage\")\n            .info-cell.value\n              button.select-btn\n                span.stage(data-i18n=\"common:defaultSelectValue\")\n          .info-row.appointments-card-date-time-wrapper\n            .info-cell(data-i18n=\"card.GeneralInfoFields.EndDate\")\n            .info-cell.value.end-date.bit-button-pseudo.calendar\n      .columns.comments-data\n        .column\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.EventName\")\n          textarea.text-area.event-name(rows=\"1\",data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeName\")\n\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Products\")\n          p.text-area.description.products\n\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Agenda\")\n          textarea.text-area.agenda(rows=\"1\",data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeAgenda\")\n\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Evaluation\")\n          textarea.text-area.evaluation(rows=\"1\",data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeEvaluation\")\n\n        .column\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Location\")\n          textarea.text-area.location(rows=\"1\",data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeLocation\")\n\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Speakers\")\n          textarea.text-area.speakers(rows=\"1\",data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeSpeakers\")\n\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Objectives\")\n          textarea.text-area.objectives(rows=\"1\",data-i18n=\"[data-placeholder]card.PharmaEvent.Placeholders.TypeObjectives\")\n\n          h2.blue-header(data-i18n=\"card.PharmaEvent.GeneralInfoFields.Attendees\")\n          p.text-area.description.attendees");
}
};}, "views/pin/pin": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/pin.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/pin.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/pin.jade" ));
buf.push("<p class=\"placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/pin.jade" ));
buf.push("<span data-i18n=\"pin.Placeholder.Pin\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/pin.jade" ));
buf.push("<input type=\"tel\" class=\"pin\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/pin.jade" ));
buf.push("<div data-i18n=\"common:buttons.OkBtn\" class=\"confirm\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "p.placeholder\n  span(data-i18n=\"pin.Placeholder.Pin\")\n  input.pin(type='tel')\n.confirm(data-i18n=\"common:buttons.OkBtn\")");
}
};}, "views/pin/provide-pin": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
buf.push("<p class=\"placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
buf.push("<span data-i18n=\"pin.Placeholder.Pin\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
buf.push("<input type=\"tel\" class=\"pin new-pin\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
buf.push("<p class=\"placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
buf.push("<span data-i18n=\"pin.Placeholder.ConfirmPin\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
buf.push("<input type=\"tel\" class=\"pin confirm-pin\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/pin/provide-pin.jade" ));
buf.push("<div data-i18n=\"common:buttons.OkBtn\" class=\"confirm\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "p.placeholder\n  span(data-i18n=\"pin.Placeholder.Pin\")\n  input.pin.new-pin(type='tel')\np.placeholder\n  span(data-i18n=\"pin.Placeholder.ConfirmPin\")\n  input.pin.confirm-pin(type='tel')\n.confirm(data-i18n=\"common:buttons.OkBtn\")");
}
};}, "views/presentation-view/presentation-view": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/presentation-view/presentation-view.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/presentation-view/presentation-view.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/presentation-view/presentation-view.jade" ));
buf.push("<div class=\"pv-overlay\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/presentation-view/presentation-view.jade" ));
buf.push("<div class=\"pv-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/presentation-view/presentation-view.jade" ));
buf.push("<div class=\"pv-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/presentation-view/presentation-view.jade" ));
buf.push("<iframe>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</iframe>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/presentation-view/presentation-view.jade" ));
buf.push("<div class=\"events-catcher\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".pv-overlay\n  .pv-panel\n.pv-container\n  iframe\n  .events-catcher");
}
};}, "views/search/search-view": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ));
buf.push("<div data-i18n=\"searchView.Placeholder\" class=\"placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ));
buf.push("<textarea align=\"top\" rows=\"1\" class=\"input\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ));
buf.push("<div class=\"btnCancel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ));
buf.push("<span data-i18n=\"common:buttons.CancelBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ));
buf.push("<div class=\"btnSearch\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search-view.jade" ));
buf.push("<span data-i18n=\"searchView.SearchBtn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".placeholder(data-i18n=\"searchView.Placeholder\")\ntextarea(class=\"input\",align=\"top\",rows=\"1\")\n\n.btnCancel\n   span(data-i18n=\"common:buttons.CancelBtn\")\n\n.btnSearch\n   span(data-i18n=\"searchView.SearchBtn\")\n\n\n\n\n");
}
};}, "views/search/search": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search.jade" ));
buf.push("<div class=\"input-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search.jade" ));
buf.push("<input type=\"text\" spellcheck=\"false\"/>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search.jade" ));
buf.push("<p class=\"placeholder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/search/search.jade" ));
buf.push("<button class=\"cross\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".input-holder\n    input(type=\"text\" spellcheck=\"false\")\n    p.placeholder\nbutton.cross");
}
};}, "views/signature-view/signature-view": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/signature-view/signature-view.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (height, width) {
jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/signature-view/signature-view.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/signature-view/signature-view.jade" ));
buf.push("<canvas" + (jade.attr("width", "" + (width) + "", true, false)) + (jade.attr("height", "" + (height) + "", true, false)) + " class=\"signature\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</canvas>");
jade_debug.shift();
jade_debug.shift();}.call(this,"height" in locals_for_with?locals_for_with.height:typeof height!=="undefined"?height:undefined,"width" in locals_for_with?locals_for_with.width:typeof width!=="undefined"?width:undefined));;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "canvas.signature(width=\"#{width}\", height=\"#{height}\")\n\n\n\n");
}
};}, "views/tabbar/tabbar-item": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tabbar/tabbar-item.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tabbar/tabbar-item.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tabbar/tabbar-item.jade" ));
buf.push("<div class=\"tab-icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tabbar/tabbar-item.jade" ));
buf.push("<p class=\"tab-title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tab-icon\np.tab-title");
}
};}, "views/tot-card/tot-card": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"wrapper flex-element\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"general-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"columns with-separator\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.User\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value tot-card-user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.Tot.AllDay\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<input type=\"checkbox\" class=\"check-box check-all-day\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.Tot.FirstPart\" class=\"info-cell morning\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<button class=\"select-btn first-quarter-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"first-quarter\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row may-hide\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.Tot.SecondPart\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<button class=\"select-btn second-quarter-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"second-quarter\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.StartDate\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value tot-card-start-date bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 28, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.GeneralInfoFields.EndDate\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 29, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value tot-card-end-date bit-button-pseudo calendar\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 30, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 31, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.Tot.ThirdPart\" class=\"info-cell afternoon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 32, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 33, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<button class=\"select-btn third-quarter-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 34, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"third-quarter\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 35, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-row may-hide\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 36, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div data-i18n=\"card.Tot.ForthPart\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 37, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"info-cell value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 38, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<button class=\"select-btn fourth-quarter-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 39, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<span data-i18n=\"common:defaultSelectValue\" class=\"fourth-quarter\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 40, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<div class=\"comment-block\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 41, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<h2 data-i18n=\"card.GeneralInfoFields.Description\" class=\"blue-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</h2>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 42, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tot-card/tot-card.jade" ));
buf.push("<textarea rows=\"1\" data-i18n=\"[data-placeholder]card.Tot.Placeholder\" class=\"call-comments text-area\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</textarea>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".wrapper.flex-element\n  .scroll-content\n    .general-info\n      .columns.with-separator\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.User\")\n            .info-cell.value.tot-card-user\n          .info-row\n            .info-cell(data-i18n=\"card.Tot.AllDay\")\n            .info-cell.value\n              input.check-box.check-all-day(type=\"checkbox\")\n          .info-row\n            .info-cell.morning(data-i18n=\"card.Tot.FirstPart\")\n            .info-cell.value\n              button.select-btn.first-quarter-btn\n                span.first-quarter(data-i18n=\"common:defaultSelectValue\")\n          .info-row.may-hide\n            .info-cell(data-i18n=\"card.Tot.SecondPart\")\n            .info-cell.value\n              button.select-btn.second-quarter-btn\n                span.second-quarter(data-i18n=\"common:defaultSelectValue\")\n        .column\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.StartDate\")\n            .info-cell.value.tot-card-start-date.bit-button-pseudo.calendar\n          .info-row\n            .info-cell(data-i18n=\"card.GeneralInfoFields.EndDate\")\n            .info-cell.value.tot-card-end-date.bit-button-pseudo.calendar\n          .info-row\n            .info-cell.afternoon(data-i18n=\"card.Tot.ThirdPart\")\n            .info-cell.value\n              button.select-btn.third-quarter-btn\n                span.third-quarter(data-i18n=\"common:defaultSelectValue\")\n          .info-row.may-hide\n            .info-cell(data-i18n=\"card.Tot.ForthPart\")\n            .info-cell.value\n              button.select-btn.fourth-quarter-btn\n                span.fourth-quarter(data-i18n=\"common:defaultSelectValue\")\n      .comment-block\n        h2.blue-header(data-i18n=\"card.GeneralInfoFields.Description\")\n        textarea.call-comments.text-area(rows=\"1\",data-i18n=\"[data-placeholder]card.Tot.Placeholder\")");
}
};}, "views/tots/tots-all/tots-all-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"ellipsis med-rep\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"ellipsis type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"all-day check-box\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"ellipsis start-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"ellipsis end-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"col v-centered events-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table-cell.jade" ));
buf.push("<div class=\"events\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered\n    .ellipsis.med-rep\n.col.v-centered.h-centered\n    .ellipsis.type\n.col.v-centered.h-centered\n    .all-day.check-box\n.col.v-centered.h-centered\n    .ellipsis.start-date\n.col.v-centered.h-centered\n    .ellipsis.end-date\n.col.v-centered.events-cell\n    .events");
}
};}, "views/tots/tots-all/tots-all-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots-all/tots-all-table.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}, "views/tots/tots": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tots/tots.jade" ));
buf.push("<div class=\"tables-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tables-holder");
}
};}, "views/tour-planning/tour-planning-filter": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-filter.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-filter.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-filter.jade" ));
buf.push("<div class=\"filter\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-filter.jade" ));
buf.push("<p>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".filter\n    p");
}
};}, "views/tour-planning/tour-planning-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered checkbox-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<input type=\"checkbox\" class=\"check-box\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col hyperlink v-centered contact-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"ellipsis contact\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col hyperlink v-centered organization-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"ellipsis organization\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"ellipsis at-calls\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"ellipsis last-call\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"ellipsis priority\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"ellipsis visit-order\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table-cell.jade" ));
buf.push("<div class=\"ellipsis visit-time-info\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered.h-centered.checkbox-cell\n    input.check-box(type='checkbox')\n.col.hyperlink.v-centered.contact-cell\n    .ellipsis.contact\n.col.hyperlink.v-centered.organization-cell\n    .ellipsis.organization\n.col.v-centered.h-centered\n    .ellipsis.at-calls\n.col.v-centered.h-centered\n    .ellipsis.last-call\n.col.v-centered.h-centered\n    .ellipsis.priority\n.col.v-centered.h-centered\n    .ellipsis.visit-order\n.col.v-centered.h-centered\n    .ellipsis.visit-time-info");
}
};}, "views/tour-planning/tour-planning-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/tour-planning/tour-planning-table.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}, "views/trade-module/navigation-promotions": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ));
buf.push("<div class=\"paging\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ));
buf.push("<span class=\"current\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, jade_debug[0].filename ));
buf.push("1");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ));
buf.push("&#032;");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ));
buf.push("<span data-i18n=\"tradeModule.GeneralInfoFields.Of\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ));
buf.push("&#032;");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/navigation-promotions.jade" ));
buf.push("<span class=\"total\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, jade_debug[0].filename ));
buf.push("3");
jade_debug.shift();
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".paging\n  span.current 1\n  | &#032;\n  span(data-i18n=\"tradeModule.GeneralInfoFields.Of\")\n  | &#032;\n  span.total 3\n");
}
};}, "views/trade-module/photo-item": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photo-item.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photo-item.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photo-item.jade" ));
buf.push("<button class=\"remove-photo-item\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photo-item.jade" ));
buf.push("<div class=\"progress-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "button.remove-photo-item\n.progress-holder");
}
};}, "views/trade-module/photos-grid-view": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photos-grid-view.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photos-grid-view.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photos-grid-view.jade" ));
buf.push("<ul class=\"photos-list\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photos-grid-view.jade" ));
buf.push("<li class=\"take-photo\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/photos-grid-view.jade" ));
buf.push("<button>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.shift();
buf.push("</li>");
jade_debug.shift();
jade_debug.shift();
buf.push("</ul>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "ul.photos-list\n  li.take-photo\n    button");
}
};}, "views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<div class=\"check-box\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<div class=\"note-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<div class=\"progress-bar-holder\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<div class=\"title-label\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<div class=\"last-modify\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table-cell.jade" ));
buf.push("<div class=\"attached-by\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "td\n  .check-box\ntd\n  .note-type\ntd\n  .progress-bar-holder\n    .title-label\ntd\n  .last-modify\ntd\n  .attached-by");
}
};}, "views/trade-module/promotion-details/notes-attachments/notes-attachments-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<table class=\"card-table header-table\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<tr>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<th>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<th data-i18n=\"common:names.Type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<th data-i18n=\"common:names.Title\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<th data-i18n=\"common:names.LastModify\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<th data-i18n=\"common:names.AttachedBy\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<table class=\"card-table body-table\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/notes-attachments/notes-attachments-table.jade" ));
buf.push("<tbody>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</tbody>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "table.card-table.header-table\n  thead\n    tr\n      th\n      th(data-i18n=\"common:names.Type\")\n      th(data-i18n=\"common:names.Title\")\n      th(data-i18n=\"common:names.LastModify\")\n      th(data-i18n=\"common:names.AttachedBy\")\n.scroll-container\n  .scroll-content\n    table.card-table.body-table\n      tbody");
}
};}, "views/trade-module/promotion-details/promotion-details": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-details.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-details.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-details.jade" ));
buf.push("<div class=\"top-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-details.jade" ));
buf.push("<button class=\"full-screen-btn\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-details.jade" ));
buf.push("<button class=\"full-screen-icon\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</button>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-details.jade" ));
buf.push("<div class=\"segmentation\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-details.jade" ));
buf.push("<div class=\"content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".top-panel\n  button.full-screen-btn\n  button.full-screen-icon\n  .segmentation\n.content");
}
};}, "views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell.jade" ));
buf.push("<td>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell.jade" ));
buf.push("<div class=\"ellipsis name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell.jade" ));
buf.push("<td class=\"main-data\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table-cell.jade" ));
buf.push("<div class=\"value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</td>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "td\n  div.ellipsis.name\ntd.main-data\n  .value");
}
};}, "views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<table class=\"card-table header-table\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<thead>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<tr>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<th data-i18n=\"common:names.Name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<th data-i18n=\"common:names.Value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</th>");
jade_debug.shift();
jade_debug.shift();
buf.push("</tr>");
jade_debug.shift();
jade_debug.shift();
buf.push("</thead>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<div class=\"scroll-container\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<div class=\"scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<table class=\"card-table body-table\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/promotion-tasks/promotion-tasks-table.jade" ));
buf.push("<tbody>");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</tbody>");
jade_debug.shift();
jade_debug.shift();
buf.push("</table>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "table.card-table.header-table\n  thead\n    tr\n      th(data-i18n=\"common:names.Name\")\n      th(data-i18n=\"common:names.Value\")\n.scroll-container\n  .scroll-content\n    table.card-table.body-table\n      tbody");
}
};}, "views/trade-module/promotion-details/skus/skus-table-cell-value": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell-value.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell-value.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell-value.jade" ));
buf.push("<p class=\"main-data\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell-value.jade" ));
buf.push("<span class=\"ellipsis\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "p.main-data\n  span.ellipsis");
}
};}, "views/trade-module/promotion-details/skus/skus-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell.jade" ));
buf.push("<div class=\"col product-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus-table-cell.jade" ));
buf.push("<p class=\"ellipsis\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.product-name\n\tp.ellipsis");
}
};}, "views/trade-module/promotion-details/skus/skus": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus.jade" ));
buf.push("<div class=\"navigation-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/skus/skus.jade" ));
buf.push("<div class=\"skus-table table-view\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".navigation-panel\n.skus-table.table-view");
}
};}, "views/trade-module/promotion-details/tactics/tactics-table-cell-product": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-product.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-product.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-product.jade" ));
buf.push("<div class=\"col product-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-product.jade" ));
buf.push("<span class=\"ellipsis\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.product-name\n\tspan.ellipsis");
}
};}, "views/trade-module/promotion-details/tactics/tactics-table-cell-tactic": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-tactic.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-tactic.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-tactic.jade" ));
buf.push("<div class=\"border-value\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-tactic.jade" ));
buf.push("<p class=\"ellipsis\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-tactic.jade" ));
buf.push("<div class=\"main-data\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics-table-cell-tactic.jade" ));
buf.push("<p class=\"ellipsis\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".border-value\n\tp.ellipsis\n.main-data\n\tp.ellipsis");
}
};}, "views/trade-module/promotion-details/tactics/tactics": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics.jade" ));
buf.push("<div class=\"navigation-panel\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics.jade" ));
buf.push("<p data-i18n=\"tradeModule.Tactics.BorderValues\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</p>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics.jade" ));
buf.push("<input type=\"checkbox\" class=\"input check-box\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-details/tactics/tactics.jade" ));
buf.push("<div class=\"tactics-table table-view\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".navigation-panel\n\tp(data-i18n=\"tradeModule.Tactics.BorderValues\")\n\tinput.input.check-box(type=\"checkbox\")\n.tactics-table.table-view");
}
};}, "views/trade-module/promotion-general-info": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"columns\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.PromotionStartDate\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-promotion-start-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.PromotionEndDate\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 8, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-promotion-end-date\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 9, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 10, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.Contract\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 11, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-contract\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 12, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 13, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.Objectives\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 14, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-objectives\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 15, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"column\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 16, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 17, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.NumberOfPharmacies\" class=\"info-cell break-before\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 18, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-number-of-pharmacies\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 19, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 20, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.RecordType\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 21, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-mobile-record-type\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 22, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 23, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.Status\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 24, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-status\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 25, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-row\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 26, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div data-i18n=\"tradeModule.GeneralInfoFields.Description\" class=\"info-cell\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 27, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-general-info.jade" ));
buf.push("<div class=\"info-cell value trade-module-description\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".columns\n  .column\n    .info-row\n      .info-cell(data-i18n=\"tradeModule.GeneralInfoFields.PromotionStartDate\")\n      .info-cell.value.trade-module-promotion-start-date\n    .info-row\n      .info-cell(data-i18n=\"tradeModule.GeneralInfoFields.PromotionEndDate\")\n      .info-cell.value.trade-module-promotion-end-date\n    .info-row\n      .info-cell(data-i18n=\"tradeModule.GeneralInfoFields.Contract\")\n      .info-cell.value.trade-module-contract\n    .info-row\n      .info-cell(data-i18n=\"tradeModule.GeneralInfoFields.Objectives\")\n      .info-cell.value.trade-module-objectives\n  .column\n    .info-row\n      .info-cell.break-before(data-i18n=\"tradeModule.GeneralInfoFields.NumberOfPharmacies\")\n      .info-cell.value.trade-module-number-of-pharmacies\n    .info-row\n      .info-cell(data-i18n=\"tradeModule.GeneralInfoFields.RecordType\")\n      .info-cell.value.trade-module-mobile-record-type\n    .info-row\n      .info-cell(data-i18n=\"tradeModule.GeneralInfoFields.Status\")\n      .info-cell.value.trade-module-status\n    .info-row\n      .info-cell(data-i18n=\"tradeModule.GeneralInfoFields.Description\")\n      .info-cell.value.trade-module-description");
}
};}, "views/trade-module/promotion-screen": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-screen.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/promotion-screen.jade" ));
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, "");
}
};}, "views/trade-module/trade-module": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
buf.push("<div class=\"trade-scroll-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
buf.push("<div data-strict-height=\"data-strict-height\" class=\"trade-scroll-content\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
buf.push("<div class=\"trade-module-promotion-header\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
buf.push("<span data-i18n=\"tradeModule.GeneralInfoFields.Promotion\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</span>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
buf.push("&nbsp;");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
buf.push("<div class=\"promotion-name-wrapper\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 7, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/trade-module/trade-module.jade" ));
buf.push("<div class=\"promotion-name\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".trade-scroll-wrapper\n  .trade-scroll-content(data-strict-height=true)\n    .trade-module-promotion-header\n      span(data-i18n=\"tradeModule.GeneralInfoFields.Promotion\")\n      |&nbsp;\n      .promotion-name-wrapper\n        .promotion-name");
}
};}, "views/users/users-table-cell": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ));
buf.push("<div class=\"col v-centered h-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 2, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ));
buf.push("<input type=\"radio\" name=\"user\" class=\"check-box\"/>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 3, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 4, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ));
buf.push("<div class=\"ellipsis user\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.unshift(new jade.DebugItem( 5, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ));
buf.push("<div class=\"col v-centered\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.unshift(new jade.DebugItem( 6, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table-cell.jade" ));
buf.push("<div class=\"ellipsis email\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".col.v-centered.h-centered\n    input.check-box(type='radio', name='user')\n.col.v-centered\n    .ellipsis.user\n.col.v-centered\n    .ellipsis.email");
}
};}, "views/users/users-table": function(exports, require, module) {module.exports = function template(locals) {
var jade_debug = [ new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table.jade" ) ];
try {
var buf = [];
var jade_mixins = {};
var jade_interp;

jade_debug.unshift(new jade.DebugItem( 0, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table.jade" ));
jade_debug.unshift(new jade.DebugItem( 1, "/Users/mylanpharma/Desktop/abbott-mobile-mylan/src/app/views/users/users-table.jade" ));
buf.push("<div class=\"tbody\">");
jade_debug.unshift(new jade.DebugItem( undefined, jade_debug[0].filename ));
jade_debug.shift();
buf.push("</div>");
jade_debug.shift();
jade_debug.shift();;return buf.join("");
} catch (err) {
  jade.rethrow(err, jade_debug[0].filename, jade_debug[0].lineno, ".tbody");
}
};}
});

jade.rethrow = function rethrow(err, filename, lineno){ throw err; } 